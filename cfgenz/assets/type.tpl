// Code generated by "golang-cloudformation". DO NOT EDIT.

package {{ .GoPackageName }}

{{ if .GoImports }}
    import (
        {{- range .GoImports -}}
            "{{ . }}"
        {{ end }}
    )
{{ end }}

{{ if .IsTopLevelResourceType }}
var (
    _ {{ .GoSupportBasePackage }}.ResourcePartialLogicalName = (*{{ .GoName }})(nil)
    _ {{ .GoSupportBasePackage }}.Resource = (*{{ .GoName }})(nil)
)
{{ end }}

const (
    // {{ .GoName }}__Type is the CloudFormation type for {{ .Name }}.
    {{ .GoName }}__Type = "{{ .Name }}"
)

{{ if .Attributes }}
var (
    // {{ .GoName }}__AttributesMap reports all the CloudFormation attributes for {{ .Name }}.
    {{ .GoName }}__AttributesMap = struct {
        {{ range $k, $v := .Attributes -}}
            {{ $v.GoName }} string
        {{ end }}
    }{
        {{ range $k, $v := .Attributes -}}
            {{ $v.GoName }}: "{{ $v.Name }}",
        {{ end }}
    }

    // {{ .GoName }}__AttributesSlice reports all the CloudFormation attributes for {{ .Name }}.
    {{ .GoName }}__AttributesSlice = []string{
        {{ range $k, $v := .Attributes -}}
            {{ $.GoName }}__AttributesMap.{{ $v.GoName }},
        {{ end }}
    }
)
{{ end }}

{{ if .Properties }}
var (
    // {{ .GoName }}__PropertiesMap reports all the CloudFormation properties for {{ .Name }}.
    {{ .GoName }}__PropertiesMap = struct {
        {{ range $k, $v := .Properties -}}
            {{ $v.GoName }} string
        {{ end }}
    }{
        {{ range $k, $v := .Properties -}}
            {{ $v.GoName }}: "{{ $v.Name }}",
        {{ end }}
    }

    // {{ .GoName }}__PropertiesSlice reports all the CloudFormation properties for {{ .Name }}.
    {{ .GoName }}__PropertiesSlice = []string{
        {{ range $k, $v := .Properties -}}
            {{ $.GoName }}__PropertiesMap.{{ $v.GoName }},
        {{ end }}
    }
)
{{ end }}

// {{ .GoName }} is a binding for {{ .Name }}.
// See: {{ .DocumentationURL }}
type {{ .GoName }} struct {
    {{ if .IsTopLevelResourceType -}}
        // CF_LogicalName is the CloudFormation logical name for this resource in the template.
        CF_LogicalName string `json:"-"`

        // CF_DependsOn indicates which resources must be created before this one.
        CF_DependsOn []{{ .GoSupportBasePackage }}.ResourcePartialLogicalName `json:"-"`

        // CF_DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
        CF_DeletionPolicy {{ .GoSupportBasePackage }}.ResourceDeletionPolicy `json:"-"`

        // CF_UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
        CF_UpdateReplacePolicy {{ .GoSupportBasePackage }}.ResourceUpdateReplacePolicy `json:"-"`
    {{ end }}

    {{- range $k, $v := .Properties }}
        // {{ $v.Name }} is a property.
        // See: {{ $v.DocumentationURL }}
        {{ $v.GoName }} {{ $v.GoType }} `json:"{{ $v.Name }},omitempty"`
    {{ end }}
}

{{ if .IsTopLevelResourceType }}
    // GetLogicalName returns the CloudFormation logical name for this resource in the template.
    // It implements the {{ .GoSupportBasePackage }}.Resource and {{ .GoSupportBasePackage }}.ResourcePartialLogicalName interface.
    func (v *{{ .GoName }}) GetResourceLogicalName() string {
        return v.CF_LogicalName
    }
{{ end }}

// GetType returns the CloudFormation type.{{ if .IsTopLevelResourceType }}
// It implements the {{ .GoSupportBasePackage }}.Resource interface.{{ end }}
func (v *{{ .GoName }}) GetType() string {
    return {{ .GoName }}__Type
}

{{ if .IsTopLevelResourceType }}
    // Ref returns a {{ .GoSupportBasePackage }}.Expression[string] that resolves to the Ref intrinsic function for this resource.
    func (v *{{ .GoName }}) Ref() {{ .GoSupportBasePackage }}.Expression[string] {
        return {{ .GoSupportBasePackage }}.Ref({{ .GoSupportBasePackage }}.V(v.GetResourceLogicalName()))
    }

    {{ range $k, $v := .Attributes }}
        // {{ $v.SupportGetAttFunctionName }}__{{ $v.GoName }} returns a ${{ $v.GoType }} that resolves to the FN::GetAtt intrinsic function for this resource.
        // Attribute: {{ $v.Name }}
        func (v *{{ $.GoName }}) {{ $v.SupportGetAttFunctionName }}__{{ $v.GoName }}() {{ $v.GoType }} {
            return {{ $.GoSupportBasePackage }}.{{ $v.SupportGetAttFunctionName }}[{{ $v.GoGenericType }}]({{ $.GoSupportBasePackage }}.V(v.GetResourceLogicalName()), {{ $.GoSupportBasePackage }}.V({{ $.GoName }}__AttributesMap.{{ $v.GoName }}))
        }
    {{ end }}

    // MarshalJSON implements the {{ .GoSupportBasePackage }}.Resource interface.
    func (v *{{ .GoName }}) MarshalJSON() ([]byte, error) {
        if v == nil {
            return []byte(`null`), nil
        }

        type CF_Properties {{ .GoName }}

        return json.Marshal(struct {
            Type string `json:"Type"`
            DependsOn []string `json:"DependsOn,omitempty"`
            DeletionPolicy {{ .GoSupportBasePackage }}.ResourceDeletionPolicy `json:"DeletionPolicy,omitempty"`
            UpdateReplacePolicy {{ .GoSupportBasePackage }}.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
            Properties *CF_Properties `json:"Properties,omitempty"`
        }{
            Type: v.GetType(),
            DependsOn: v.getDependsOn(),
            Properties: (*CF_Properties)(v),
        })
    }

    func (v *{{ .GoName }}) getDependsOn() []string {
        dependsOn := make([]string, 0, len(v.CF_DependsOn))

        for _, r := range v.CF_DependsOn {
            dependsOn = append(dependsOn, r.GetResourceLogicalName())
        }

        return dependsOn
    }
{{ end }}