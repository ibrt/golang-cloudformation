// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_mediapackagev2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_MediaPackageV2_ChannelGroup)(nil)
	_ cfz.Resource                   = (*AWS_MediaPackageV2_ChannelGroup)(nil)
)

const (
	// AWS_MediaPackageV2_ChannelGroup__Type is the CloudFormation type for AWS::MediaPackageV2::ChannelGroup.
	AWS_MediaPackageV2_ChannelGroup__Type = "AWS::MediaPackageV2::ChannelGroup"
)

var (
	// AWS_MediaPackageV2_ChannelGroup__AttributesMap reports all the CloudFormation attributes for AWS::MediaPackageV2::ChannelGroup.
	AWS_MediaPackageV2_ChannelGroup__AttributesMap = struct {
		Arn          string
		CreatedAt    string
		EgressDomain string
		ModifiedAt   string
	}{
		Arn:          "Arn",
		CreatedAt:    "CreatedAt",
		EgressDomain: "EgressDomain",
		ModifiedAt:   "ModifiedAt",
	}

	// AWS_MediaPackageV2_ChannelGroup__AttributesSlice reports all the CloudFormation attributes for AWS::MediaPackageV2::ChannelGroup.
	AWS_MediaPackageV2_ChannelGroup__AttributesSlice = []string{
		AWS_MediaPackageV2_ChannelGroup__AttributesMap.Arn,
		AWS_MediaPackageV2_ChannelGroup__AttributesMap.CreatedAt,
		AWS_MediaPackageV2_ChannelGroup__AttributesMap.EgressDomain,
		AWS_MediaPackageV2_ChannelGroup__AttributesMap.ModifiedAt,
	}
)

var (
	// AWS_MediaPackageV2_ChannelGroup__PropertiesMap reports all the CloudFormation properties for AWS::MediaPackageV2::ChannelGroup.
	AWS_MediaPackageV2_ChannelGroup__PropertiesMap = struct {
		ChannelGroupName string
		Description      string
		Tags             string
	}{
		ChannelGroupName: "ChannelGroupName",
		Description:      "Description",
		Tags:             "Tags",
	}

	// AWS_MediaPackageV2_ChannelGroup__PropertiesSlice reports all the CloudFormation properties for AWS::MediaPackageV2::ChannelGroup.
	AWS_MediaPackageV2_ChannelGroup__PropertiesSlice = []string{
		AWS_MediaPackageV2_ChannelGroup__PropertiesMap.ChannelGroupName,
		AWS_MediaPackageV2_ChannelGroup__PropertiesMap.Description,
		AWS_MediaPackageV2_ChannelGroup__PropertiesMap.Tags,
	}
)

// AWS_MediaPackageV2_ChannelGroup is a binding for AWS::MediaPackageV2::ChannelGroup.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackagev2-channelgroup.html
type AWS_MediaPackageV2_ChannelGroup struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ChannelGroupName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackagev2-channelgroup.html#cfn-mediapackagev2-channelgroup-channelgroupname
	ChannelGroupName cfz.Expression[string] `json:"ChannelGroupName,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackagev2-channelgroup.html#cfn-mediapackagev2-channelgroup-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackagev2-channelgroup.html#cfn-mediapackagev2-channelgroup-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_MediaPackageV2_ChannelGroup initializes a new *AWS_MediaPackageV2_ChannelGroup.
func New__AWS_MediaPackageV2_ChannelGroup(logicalName string) *AWS_MediaPackageV2_ChannelGroup {
	return &AWS_MediaPackageV2_ChannelGroup{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_MediaPackageV2_ChannelGroup) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_MediaPackageV2_ChannelGroup) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_MediaPackageV2_ChannelGroup) GetType() string {
	return AWS_MediaPackageV2_ChannelGroup__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_MediaPackageV2_ChannelGroup) Set__LogicalName(v string) *AWS_MediaPackageV2_ChannelGroup {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_MediaPackageV2_ChannelGroup) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_MediaPackageV2_ChannelGroup {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_MediaPackageV2_ChannelGroup) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_MediaPackageV2_ChannelGroup {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_MediaPackageV2_ChannelGroup) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_MediaPackageV2_ChannelGroup {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_MediaPackageV2_ChannelGroup) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_MediaPackageV2_ChannelGroup {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_MediaPackageV2_ChannelGroup) Set__RequestedOutputs(v []cfz.Output) *AWS_MediaPackageV2_ChannelGroup {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_MediaPackageV2_ChannelGroup) Add__RequestedOutputs(v ...cfz.Output) *AWS_MediaPackageV2_ChannelGroup {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ChannelGroupName updates property "ChannelGroupName".
func (t *AWS_MediaPackageV2_ChannelGroup) Set__ChannelGroupName(v cfz.Expression[string]) *AWS_MediaPackageV2_ChannelGroup {
	t.ChannelGroupName = v
	return t
}

// SetV__ChannelGroupName updates property "ChannelGroupName".
func (t *AWS_MediaPackageV2_ChannelGroup) SetV__ChannelGroupName(v string) *AWS_MediaPackageV2_ChannelGroup {
	t.ChannelGroupName = cfz.V(v)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_MediaPackageV2_ChannelGroup) Set__Description(v cfz.Expression[string]) *AWS_MediaPackageV2_ChannelGroup {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_MediaPackageV2_ChannelGroup) SetV__Description(v string) *AWS_MediaPackageV2_ChannelGroup {
	t.Description = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_MediaPackageV2_ChannelGroup) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_MediaPackageV2_ChannelGroup {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_MediaPackageV2_ChannelGroup) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_MediaPackageV2_ChannelGroup {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_MediaPackageV2_ChannelGroup) SetSV__Tags(v ...cfz.Tag) *AWS_MediaPackageV2_ChannelGroup {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_MediaPackageV2_ChannelGroup) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_MediaPackageV2_ChannelGroup) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaPackageV2_ChannelGroup__AttributesMap.Arn))
}

// GetAtt__CreatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedAt
func (t *AWS_MediaPackageV2_ChannelGroup) GetAtt__CreatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaPackageV2_ChannelGroup__AttributesMap.CreatedAt))
}

// GetAtt__EgressDomain returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: EgressDomain
func (t *AWS_MediaPackageV2_ChannelGroup) GetAtt__EgressDomain() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaPackageV2_ChannelGroup__AttributesMap.EgressDomain))
}

// GetAtt__ModifiedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ModifiedAt
func (t *AWS_MediaPackageV2_ChannelGroup) GetAtt__ModifiedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaPackageV2_ChannelGroup__AttributesMap.ModifiedAt))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_MediaPackageV2_ChannelGroup) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_MediaPackageV2_ChannelGroup) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedAt
func (t *AWS_MediaPackageV2_ChannelGroup) GetConventionalOutputAtt__CreatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedAt", t.GetAtt__CreatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__EgressDomain returns a conventionally configured output for an attribute of this resource.
// Attribute: EgressDomain
func (t *AWS_MediaPackageV2_ChannelGroup) GetConventionalOutputAtt__EgressDomain(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttEgressDomain", t.GetAtt__EgressDomain())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ModifiedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: ModifiedAt
func (t *AWS_MediaPackageV2_ChannelGroup) GetConventionalOutputAtt__ModifiedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttModifiedAt", t.GetAtt__ModifiedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_MediaPackageV2_ChannelGroup) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_MediaPackageV2_ChannelGroup

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_MediaPackageV2_ChannelGroup) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
