// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_mediapackagev2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_MediaPackageV2_Channel)(nil)
	_ cfz.Resource                   = (*AWS_MediaPackageV2_Channel)(nil)
)

const (
	// AWS_MediaPackageV2_Channel__Type is the CloudFormation type for AWS::MediaPackageV2::Channel.
	AWS_MediaPackageV2_Channel__Type = "AWS::MediaPackageV2::Channel"
)

var (
	// AWS_MediaPackageV2_Channel__AttributesMap reports all the CloudFormation attributes for AWS::MediaPackageV2::Channel.
	AWS_MediaPackageV2_Channel__AttributesMap = struct {
		Arn                string
		CreatedAt          string
		IngestEndpointUrls string
		IngestEndpoints    string
		ModifiedAt         string
	}{
		Arn:                "Arn",
		CreatedAt:          "CreatedAt",
		IngestEndpointUrls: "IngestEndpointUrls",
		IngestEndpoints:    "IngestEndpoints",
		ModifiedAt:         "ModifiedAt",
	}

	// AWS_MediaPackageV2_Channel__AttributesSlice reports all the CloudFormation attributes for AWS::MediaPackageV2::Channel.
	AWS_MediaPackageV2_Channel__AttributesSlice = []string{
		AWS_MediaPackageV2_Channel__AttributesMap.Arn,
		AWS_MediaPackageV2_Channel__AttributesMap.CreatedAt,
		AWS_MediaPackageV2_Channel__AttributesMap.IngestEndpointUrls,
		AWS_MediaPackageV2_Channel__AttributesMap.IngestEndpoints,
		AWS_MediaPackageV2_Channel__AttributesMap.ModifiedAt,
	}
)

var (
	// AWS_MediaPackageV2_Channel__PropertiesMap reports all the CloudFormation properties for AWS::MediaPackageV2::Channel.
	AWS_MediaPackageV2_Channel__PropertiesMap = struct {
		ChannelGroupName string
		ChannelName      string
		Description      string
		InputType        string
		Tags             string
	}{
		ChannelGroupName: "ChannelGroupName",
		ChannelName:      "ChannelName",
		Description:      "Description",
		InputType:        "InputType",
		Tags:             "Tags",
	}

	// AWS_MediaPackageV2_Channel__PropertiesSlice reports all the CloudFormation properties for AWS::MediaPackageV2::Channel.
	AWS_MediaPackageV2_Channel__PropertiesSlice = []string{
		AWS_MediaPackageV2_Channel__PropertiesMap.ChannelGroupName,
		AWS_MediaPackageV2_Channel__PropertiesMap.ChannelName,
		AWS_MediaPackageV2_Channel__PropertiesMap.Description,
		AWS_MediaPackageV2_Channel__PropertiesMap.InputType,
		AWS_MediaPackageV2_Channel__PropertiesMap.Tags,
	}
)

// AWS_MediaPackageV2_Channel is a binding for AWS::MediaPackageV2::Channel.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackagev2-channel.html
type AWS_MediaPackageV2_Channel struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ChannelGroupName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackagev2-channel.html#cfn-mediapackagev2-channel-channelgroupname
	ChannelGroupName cfz.Expression[string] `json:"ChannelGroupName,omitempty"`

	// ChannelName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackagev2-channel.html#cfn-mediapackagev2-channel-channelname
	ChannelName cfz.Expression[string] `json:"ChannelName,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackagev2-channel.html#cfn-mediapackagev2-channel-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// InputType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackagev2-channel.html#cfn-mediapackagev2-channel-inputtype
	InputType cfz.Expression[string] `json:"InputType,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackagev2-channel.html#cfn-mediapackagev2-channel-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_MediaPackageV2_Channel initializes a new *AWS_MediaPackageV2_Channel.
func New__AWS_MediaPackageV2_Channel(logicalName string) *AWS_MediaPackageV2_Channel {
	return &AWS_MediaPackageV2_Channel{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_MediaPackageV2_Channel) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_MediaPackageV2_Channel) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_MediaPackageV2_Channel) GetType() string {
	return AWS_MediaPackageV2_Channel__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_MediaPackageV2_Channel) Set__LogicalName(v string) *AWS_MediaPackageV2_Channel {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_MediaPackageV2_Channel) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_MediaPackageV2_Channel {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_MediaPackageV2_Channel) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_MediaPackageV2_Channel {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_MediaPackageV2_Channel) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_MediaPackageV2_Channel {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_MediaPackageV2_Channel) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_MediaPackageV2_Channel {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_MediaPackageV2_Channel) Set__RequestedOutputs(v []cfz.Output) *AWS_MediaPackageV2_Channel {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_MediaPackageV2_Channel) Add__RequestedOutputs(v ...cfz.Output) *AWS_MediaPackageV2_Channel {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ChannelGroupName updates property "ChannelGroupName".
func (t *AWS_MediaPackageV2_Channel) Set__ChannelGroupName(v cfz.Expression[string]) *AWS_MediaPackageV2_Channel {
	t.ChannelGroupName = v
	return t
}

// SetV__ChannelGroupName updates property "ChannelGroupName".
func (t *AWS_MediaPackageV2_Channel) SetV__ChannelGroupName(v string) *AWS_MediaPackageV2_Channel {
	t.ChannelGroupName = cfz.V(v)
	return t
}

// Set__ChannelName updates property "ChannelName".
func (t *AWS_MediaPackageV2_Channel) Set__ChannelName(v cfz.Expression[string]) *AWS_MediaPackageV2_Channel {
	t.ChannelName = v
	return t
}

// SetV__ChannelName updates property "ChannelName".
func (t *AWS_MediaPackageV2_Channel) SetV__ChannelName(v string) *AWS_MediaPackageV2_Channel {
	t.ChannelName = cfz.V(v)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_MediaPackageV2_Channel) Set__Description(v cfz.Expression[string]) *AWS_MediaPackageV2_Channel {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_MediaPackageV2_Channel) SetV__Description(v string) *AWS_MediaPackageV2_Channel {
	t.Description = cfz.V(v)
	return t
}

// Set__InputType updates property "InputType".
func (t *AWS_MediaPackageV2_Channel) Set__InputType(v cfz.Expression[string]) *AWS_MediaPackageV2_Channel {
	t.InputType = v
	return t
}

// SetV__InputType updates property "InputType".
func (t *AWS_MediaPackageV2_Channel) SetV__InputType(v string) *AWS_MediaPackageV2_Channel {
	t.InputType = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_MediaPackageV2_Channel) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_MediaPackageV2_Channel {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_MediaPackageV2_Channel) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_MediaPackageV2_Channel {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_MediaPackageV2_Channel) SetSV__Tags(v ...cfz.Tag) *AWS_MediaPackageV2_Channel {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_MediaPackageV2_Channel) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_MediaPackageV2_Channel) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaPackageV2_Channel__AttributesMap.Arn))
}

// GetAtt__CreatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedAt
func (t *AWS_MediaPackageV2_Channel) GetAtt__CreatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaPackageV2_Channel__AttributesMap.CreatedAt))
}

// GetAttSlice__IngestEndpointUrls returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: IngestEndpointUrls
func (t *AWS_MediaPackageV2_Channel) GetAttSlice__IngestEndpointUrls() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaPackageV2_Channel__AttributesMap.IngestEndpointUrls))
}

// GetAttSlice__IngestEndpoints returns a $cfz.ExpressionSlice[AWS_MediaPackageV2_Channel_IngestEndpoint] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: IngestEndpoints
func (t *AWS_MediaPackageV2_Channel) GetAttSlice__IngestEndpoints() cfz.ExpressionSlice[AWS_MediaPackageV2_Channel_IngestEndpoint] {
	return cfz.GetAttSlice[AWS_MediaPackageV2_Channel_IngestEndpoint](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaPackageV2_Channel__AttributesMap.IngestEndpoints))
}

// GetAtt__ModifiedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ModifiedAt
func (t *AWS_MediaPackageV2_Channel) GetAtt__ModifiedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaPackageV2_Channel__AttributesMap.ModifiedAt))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_MediaPackageV2_Channel) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_MediaPackageV2_Channel) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedAt
func (t *AWS_MediaPackageV2_Channel) GetConventionalOutputAtt__CreatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedAt", t.GetAtt__CreatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__IngestEndpointUrls returns a conventionally configured output for an attribute of this resource.
// Attribute: IngestEndpointUrls
func (t *AWS_MediaPackageV2_Channel) GetConventionalOutputAtt__IngestEndpointUrls(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIngestEndpointUrls", t.GetAttSlice__IngestEndpointUrls())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__IngestEndpoints returns a conventionally configured output for an attribute of this resource.
// Attribute: IngestEndpoints
func (t *AWS_MediaPackageV2_Channel) GetConventionalOutputAtt__IngestEndpoints(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIngestEndpoints", t.GetAttSlice__IngestEndpoints())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ModifiedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: ModifiedAt
func (t *AWS_MediaPackageV2_Channel) GetConventionalOutputAtt__ModifiedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttModifiedAt", t.GetAtt__ModifiedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_MediaPackageV2_Channel) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_MediaPackageV2_Channel

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_MediaPackageV2_Channel) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
