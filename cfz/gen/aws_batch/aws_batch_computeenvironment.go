// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_batch

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Batch_ComputeEnvironment)(nil)
	_ cfz.Resource                   = (*AWS_Batch_ComputeEnvironment)(nil)
)

const (
	// AWS_Batch_ComputeEnvironment__Type is the CloudFormation type for AWS::Batch::ComputeEnvironment.
	AWS_Batch_ComputeEnvironment__Type = "AWS::Batch::ComputeEnvironment"
)

var (
	// AWS_Batch_ComputeEnvironment__AttributesMap reports all the CloudFormation attributes for AWS::Batch::ComputeEnvironment.
	AWS_Batch_ComputeEnvironment__AttributesMap = struct {
		ComputeEnvironmentArn string
	}{
		ComputeEnvironmentArn: "ComputeEnvironmentArn",
	}

	// AWS_Batch_ComputeEnvironment__AttributesSlice reports all the CloudFormation attributes for AWS::Batch::ComputeEnvironment.
	AWS_Batch_ComputeEnvironment__AttributesSlice = []string{
		AWS_Batch_ComputeEnvironment__AttributesMap.ComputeEnvironmentArn,
	}
)

var (
	// AWS_Batch_ComputeEnvironment__PropertiesMap reports all the CloudFormation properties for AWS::Batch::ComputeEnvironment.
	AWS_Batch_ComputeEnvironment__PropertiesMap = struct {
		ComputeEnvironmentName    string
		ComputeResources          string
		Context                   string
		EksConfiguration          string
		ReplaceComputeEnvironment string
		ServiceRole               string
		State                     string
		Tags                      string
		Type                      string
		UnmanagedvCpus            string
		UpdatePolicy              string
	}{
		ComputeEnvironmentName:    "ComputeEnvironmentName",
		ComputeResources:          "ComputeResources",
		Context:                   "Context",
		EksConfiguration:          "EksConfiguration",
		ReplaceComputeEnvironment: "ReplaceComputeEnvironment",
		ServiceRole:               "ServiceRole",
		State:                     "State",
		Tags:                      "Tags",
		Type:                      "Type",
		UnmanagedvCpus:            "UnmanagedvCpus",
		UpdatePolicy:              "UpdatePolicy",
	}

	// AWS_Batch_ComputeEnvironment__PropertiesSlice reports all the CloudFormation properties for AWS::Batch::ComputeEnvironment.
	AWS_Batch_ComputeEnvironment__PropertiesSlice = []string{
		AWS_Batch_ComputeEnvironment__PropertiesMap.ComputeEnvironmentName,
		AWS_Batch_ComputeEnvironment__PropertiesMap.ComputeResources,
		AWS_Batch_ComputeEnvironment__PropertiesMap.Context,
		AWS_Batch_ComputeEnvironment__PropertiesMap.EksConfiguration,
		AWS_Batch_ComputeEnvironment__PropertiesMap.ReplaceComputeEnvironment,
		AWS_Batch_ComputeEnvironment__PropertiesMap.ServiceRole,
		AWS_Batch_ComputeEnvironment__PropertiesMap.State,
		AWS_Batch_ComputeEnvironment__PropertiesMap.Tags,
		AWS_Batch_ComputeEnvironment__PropertiesMap.Type,
		AWS_Batch_ComputeEnvironment__PropertiesMap.UnmanagedvCpus,
		AWS_Batch_ComputeEnvironment__PropertiesMap.UpdatePolicy,
	}
)

// AWS_Batch_ComputeEnvironment is a binding for AWS::Batch::ComputeEnvironment.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html
type AWS_Batch_ComputeEnvironment struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ComputeEnvironmentName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html#cfn-batch-computeenvironment-computeenvironmentname
	ComputeEnvironmentName cfz.Expression[string] `json:"ComputeEnvironmentName,omitempty"`

	// ComputeResources is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html#cfn-batch-computeenvironment-computeresources
	ComputeResources cfz.Expression[AWS_Batch_ComputeEnvironment_ComputeResources] `json:"ComputeResources,omitempty"`

	// Context is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html#cfn-batch-computeenvironment-context
	Context cfz.Expression[string] `json:"Context,omitempty"`

	// EksConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html#cfn-batch-computeenvironment-eksconfiguration
	EksConfiguration cfz.Expression[AWS_Batch_ComputeEnvironment_EksConfiguration] `json:"EksConfiguration,omitempty"`

	// ReplaceComputeEnvironment is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html#cfn-batch-computeenvironment-replacecomputeenvironment
	ReplaceComputeEnvironment cfz.Expression[bool] `json:"ReplaceComputeEnvironment,omitempty"`

	// ServiceRole is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html#cfn-batch-computeenvironment-servicerole
	ServiceRole cfz.Expression[string] `json:"ServiceRole,omitempty"`

	// State is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html#cfn-batch-computeenvironment-state
	State cfz.Expression[string] `json:"State,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html#cfn-batch-computeenvironment-tags
	Tags cfz.ExpressionMap[string] `json:"Tags,omitempty"`

	// Type is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html#cfn-batch-computeenvironment-type
	Type cfz.Expression[string] `json:"Type,omitempty"`

	// UnmanagedvCpus is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html#cfn-batch-computeenvironment-unmanagedvcpus
	UnmanagedvCpus cfz.Expression[int32] `json:"UnmanagedvCpus,omitempty"`

	// UpdatePolicy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html#cfn-batch-computeenvironment-updatepolicy
	UpdatePolicy cfz.Expression[AWS_Batch_ComputeEnvironment_UpdatePolicy] `json:"UpdatePolicy,omitempty"`
}

// New__AWS_Batch_ComputeEnvironment initializes a new *AWS_Batch_ComputeEnvironment.
func New__AWS_Batch_ComputeEnvironment(logicalName string) *AWS_Batch_ComputeEnvironment {
	return &AWS_Batch_ComputeEnvironment{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Batch_ComputeEnvironment) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Batch_ComputeEnvironment) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Batch_ComputeEnvironment) GetType() string {
	return AWS_Batch_ComputeEnvironment__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Batch_ComputeEnvironment) Set__LogicalName(v string) *AWS_Batch_ComputeEnvironment {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Batch_ComputeEnvironment) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Batch_ComputeEnvironment {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Batch_ComputeEnvironment) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Batch_ComputeEnvironment {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Batch_ComputeEnvironment) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Batch_ComputeEnvironment {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Batch_ComputeEnvironment) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Batch_ComputeEnvironment {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Batch_ComputeEnvironment) Set__RequestedOutputs(v []cfz.Output) *AWS_Batch_ComputeEnvironment {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Batch_ComputeEnvironment) Add__RequestedOutputs(v ...cfz.Output) *AWS_Batch_ComputeEnvironment {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ComputeEnvironmentName updates property "ComputeEnvironmentName".
func (t *AWS_Batch_ComputeEnvironment) Set__ComputeEnvironmentName(v cfz.Expression[string]) *AWS_Batch_ComputeEnvironment {
	t.ComputeEnvironmentName = v
	return t
}

// SetV__ComputeEnvironmentName updates property "ComputeEnvironmentName".
func (t *AWS_Batch_ComputeEnvironment) SetV__ComputeEnvironmentName(v string) *AWS_Batch_ComputeEnvironment {
	t.ComputeEnvironmentName = cfz.V(v)
	return t
}

// Set__ComputeResources updates property "ComputeResources".
func (t *AWS_Batch_ComputeEnvironment) Set__ComputeResources(v cfz.Expression[AWS_Batch_ComputeEnvironment_ComputeResources]) *AWS_Batch_ComputeEnvironment {
	t.ComputeResources = v
	return t
}

// SetV__ComputeResources updates property "ComputeResources".
func (t *AWS_Batch_ComputeEnvironment) SetV__ComputeResources(v AWS_Batch_ComputeEnvironment_ComputeResources) *AWS_Batch_ComputeEnvironment {
	t.ComputeResources = cfz.V(v)
	return t
}

// Set__Context updates property "Context".
func (t *AWS_Batch_ComputeEnvironment) Set__Context(v cfz.Expression[string]) *AWS_Batch_ComputeEnvironment {
	t.Context = v
	return t
}

// SetV__Context updates property "Context".
func (t *AWS_Batch_ComputeEnvironment) SetV__Context(v string) *AWS_Batch_ComputeEnvironment {
	t.Context = cfz.V(v)
	return t
}

// Set__EksConfiguration updates property "EksConfiguration".
func (t *AWS_Batch_ComputeEnvironment) Set__EksConfiguration(v cfz.Expression[AWS_Batch_ComputeEnvironment_EksConfiguration]) *AWS_Batch_ComputeEnvironment {
	t.EksConfiguration = v
	return t
}

// SetV__EksConfiguration updates property "EksConfiguration".
func (t *AWS_Batch_ComputeEnvironment) SetV__EksConfiguration(v AWS_Batch_ComputeEnvironment_EksConfiguration) *AWS_Batch_ComputeEnvironment {
	t.EksConfiguration = cfz.V(v)
	return t
}

// Set__ReplaceComputeEnvironment updates property "ReplaceComputeEnvironment".
func (t *AWS_Batch_ComputeEnvironment) Set__ReplaceComputeEnvironment(v cfz.Expression[bool]) *AWS_Batch_ComputeEnvironment {
	t.ReplaceComputeEnvironment = v
	return t
}

// SetV__ReplaceComputeEnvironment updates property "ReplaceComputeEnvironment".
func (t *AWS_Batch_ComputeEnvironment) SetV__ReplaceComputeEnvironment(v bool) *AWS_Batch_ComputeEnvironment {
	t.ReplaceComputeEnvironment = cfz.V(v)
	return t
}

// Set__ServiceRole updates property "ServiceRole".
func (t *AWS_Batch_ComputeEnvironment) Set__ServiceRole(v cfz.Expression[string]) *AWS_Batch_ComputeEnvironment {
	t.ServiceRole = v
	return t
}

// SetV__ServiceRole updates property "ServiceRole".
func (t *AWS_Batch_ComputeEnvironment) SetV__ServiceRole(v string) *AWS_Batch_ComputeEnvironment {
	t.ServiceRole = cfz.V(v)
	return t
}

// Set__State updates property "State".
func (t *AWS_Batch_ComputeEnvironment) Set__State(v cfz.Expression[string]) *AWS_Batch_ComputeEnvironment {
	t.State = v
	return t
}

// SetV__State updates property "State".
func (t *AWS_Batch_ComputeEnvironment) SetV__State(v string) *AWS_Batch_ComputeEnvironment {
	t.State = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_Batch_ComputeEnvironment) Set__Tags(v cfz.ExpressionMap[string]) *AWS_Batch_ComputeEnvironment {
	t.Tags = v
	return t
}

// SetM__Tags updates property "Tags".
func (t *AWS_Batch_ComputeEnvironment) SetM__Tags(v ...map[string]cfz.Expression[string]) *AWS_Batch_ComputeEnvironment {
	t.Tags = cfz.M(v...)
	return t
}

// SetMV__Tags updates property "Tags".
func (t *AWS_Batch_ComputeEnvironment) SetMV__Tags(v ...map[string]string) *AWS_Batch_ComputeEnvironment {
	t.Tags = cfz.MV(v...)
	return t
}

// Set__Type updates property "Type".
func (t *AWS_Batch_ComputeEnvironment) Set__Type(v cfz.Expression[string]) *AWS_Batch_ComputeEnvironment {
	t.Type = v
	return t
}

// SetV__Type updates property "Type".
func (t *AWS_Batch_ComputeEnvironment) SetV__Type(v string) *AWS_Batch_ComputeEnvironment {
	t.Type = cfz.V(v)
	return t
}

// Set__UnmanagedvCpus updates property "UnmanagedvCpus".
func (t *AWS_Batch_ComputeEnvironment) Set__UnmanagedvCpus(v cfz.Expression[int32]) *AWS_Batch_ComputeEnvironment {
	t.UnmanagedvCpus = v
	return t
}

// SetV__UnmanagedvCpus updates property "UnmanagedvCpus".
func (t *AWS_Batch_ComputeEnvironment) SetV__UnmanagedvCpus(v int32) *AWS_Batch_ComputeEnvironment {
	t.UnmanagedvCpus = cfz.V(v)
	return t
}

// Set__UpdatePolicy updates property "UpdatePolicy".
func (t *AWS_Batch_ComputeEnvironment) Set__UpdatePolicy(v cfz.Expression[AWS_Batch_ComputeEnvironment_UpdatePolicy]) *AWS_Batch_ComputeEnvironment {
	t.UpdatePolicy = v
	return t
}

// SetV__UpdatePolicy updates property "UpdatePolicy".
func (t *AWS_Batch_ComputeEnvironment) SetV__UpdatePolicy(v AWS_Batch_ComputeEnvironment_UpdatePolicy) *AWS_Batch_ComputeEnvironment {
	t.UpdatePolicy = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Batch_ComputeEnvironment) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__ComputeEnvironmentArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ComputeEnvironmentArn
func (t *AWS_Batch_ComputeEnvironment) GetAtt__ComputeEnvironmentArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Batch_ComputeEnvironment__AttributesMap.ComputeEnvironmentArn))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Batch_ComputeEnvironment) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ComputeEnvironmentArn returns a conventionally configured output for an attribute of this resource.
// Attribute: ComputeEnvironmentArn
func (t *AWS_Batch_ComputeEnvironment) GetConventionalOutputAtt__ComputeEnvironmentArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttComputeEnvironmentArn", t.GetAtt__ComputeEnvironmentArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Batch_ComputeEnvironment) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Batch_ComputeEnvironment

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Batch_ComputeEnvironment) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
