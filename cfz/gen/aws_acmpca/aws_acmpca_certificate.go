// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_acmpca

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_ACMPCA_Certificate)(nil)
	_ cfz.Resource                   = (*AWS_ACMPCA_Certificate)(nil)
)

const (
	// AWS_ACMPCA_Certificate__Type is the CloudFormation type for AWS::ACMPCA::Certificate.
	AWS_ACMPCA_Certificate__Type = "AWS::ACMPCA::Certificate"
)

var (
	// AWS_ACMPCA_Certificate__AttributesMap reports all the CloudFormation attributes for AWS::ACMPCA::Certificate.
	AWS_ACMPCA_Certificate__AttributesMap = struct {
		Arn         string
		Certificate string
	}{
		Arn:         "Arn",
		Certificate: "Certificate",
	}

	// AWS_ACMPCA_Certificate__AttributesSlice reports all the CloudFormation attributes for AWS::ACMPCA::Certificate.
	AWS_ACMPCA_Certificate__AttributesSlice = []string{
		AWS_ACMPCA_Certificate__AttributesMap.Arn,
		AWS_ACMPCA_Certificate__AttributesMap.Certificate,
	}
)

var (
	// AWS_ACMPCA_Certificate__PropertiesMap reports all the CloudFormation properties for AWS::ACMPCA::Certificate.
	AWS_ACMPCA_Certificate__PropertiesMap = struct {
		ApiPassthrough            string
		CertificateAuthorityArn   string
		CertificateSigningRequest string
		SigningAlgorithm          string
		TemplateArn               string
		Validity                  string
		ValidityNotBefore         string
	}{
		ApiPassthrough:            "ApiPassthrough",
		CertificateAuthorityArn:   "CertificateAuthorityArn",
		CertificateSigningRequest: "CertificateSigningRequest",
		SigningAlgorithm:          "SigningAlgorithm",
		TemplateArn:               "TemplateArn",
		Validity:                  "Validity",
		ValidityNotBefore:         "ValidityNotBefore",
	}

	// AWS_ACMPCA_Certificate__PropertiesSlice reports all the CloudFormation properties for AWS::ACMPCA::Certificate.
	AWS_ACMPCA_Certificate__PropertiesSlice = []string{
		AWS_ACMPCA_Certificate__PropertiesMap.ApiPassthrough,
		AWS_ACMPCA_Certificate__PropertiesMap.CertificateAuthorityArn,
		AWS_ACMPCA_Certificate__PropertiesMap.CertificateSigningRequest,
		AWS_ACMPCA_Certificate__PropertiesMap.SigningAlgorithm,
		AWS_ACMPCA_Certificate__PropertiesMap.TemplateArn,
		AWS_ACMPCA_Certificate__PropertiesMap.Validity,
		AWS_ACMPCA_Certificate__PropertiesMap.ValidityNotBefore,
	}
)

// AWS_ACMPCA_Certificate is a binding for AWS::ACMPCA::Certificate.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-acmpca-certificate.html
type AWS_ACMPCA_Certificate struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ApiPassthrough is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-acmpca-certificate.html#cfn-acmpca-certificate-apipassthrough
	ApiPassthrough cfz.Expression[AWS_ACMPCA_Certificate_ApiPassthrough] `json:"ApiPassthrough,omitempty"`

	// CertificateAuthorityArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-acmpca-certificate.html#cfn-acmpca-certificate-certificateauthorityarn
	CertificateAuthorityArn cfz.Expression[string] `json:"CertificateAuthorityArn,omitempty"`

	// CertificateSigningRequest is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-acmpca-certificate.html#cfn-acmpca-certificate-certificatesigningrequest
	CertificateSigningRequest cfz.Expression[string] `json:"CertificateSigningRequest,omitempty"`

	// SigningAlgorithm is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-acmpca-certificate.html#cfn-acmpca-certificate-signingalgorithm
	SigningAlgorithm cfz.Expression[string] `json:"SigningAlgorithm,omitempty"`

	// TemplateArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-acmpca-certificate.html#cfn-acmpca-certificate-templatearn
	TemplateArn cfz.Expression[string] `json:"TemplateArn,omitempty"`

	// Validity is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-acmpca-certificate.html#cfn-acmpca-certificate-validity
	Validity cfz.Expression[AWS_ACMPCA_Certificate_Validity] `json:"Validity,omitempty"`

	// ValidityNotBefore is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-acmpca-certificate.html#cfn-acmpca-certificate-validitynotbefore
	ValidityNotBefore cfz.Expression[AWS_ACMPCA_Certificate_Validity] `json:"ValidityNotBefore,omitempty"`
}

// New__AWS_ACMPCA_Certificate initializes a new *AWS_ACMPCA_Certificate.
func New__AWS_ACMPCA_Certificate(logicalName string) *AWS_ACMPCA_Certificate {
	return &AWS_ACMPCA_Certificate{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_ACMPCA_Certificate) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_ACMPCA_Certificate) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_ACMPCA_Certificate) GetType() string {
	return AWS_ACMPCA_Certificate__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_ACMPCA_Certificate) Set__LogicalName(v string) *AWS_ACMPCA_Certificate {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_ACMPCA_Certificate) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_ACMPCA_Certificate {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_ACMPCA_Certificate) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_ACMPCA_Certificate {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_ACMPCA_Certificate) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_ACMPCA_Certificate {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_ACMPCA_Certificate) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_ACMPCA_Certificate {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_ACMPCA_Certificate) Set__RequestedOutputs(v []cfz.Output) *AWS_ACMPCA_Certificate {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_ACMPCA_Certificate) Add__RequestedOutputs(v ...cfz.Output) *AWS_ACMPCA_Certificate {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ApiPassthrough updates property "ApiPassthrough".
func (t *AWS_ACMPCA_Certificate) Set__ApiPassthrough(v cfz.Expression[AWS_ACMPCA_Certificate_ApiPassthrough]) *AWS_ACMPCA_Certificate {
	t.ApiPassthrough = v
	return t
}

// SetV__ApiPassthrough updates property "ApiPassthrough".
func (t *AWS_ACMPCA_Certificate) SetV__ApiPassthrough(v AWS_ACMPCA_Certificate_ApiPassthrough) *AWS_ACMPCA_Certificate {
	t.ApiPassthrough = cfz.V(v)
	return t
}

// Set__CertificateAuthorityArn updates property "CertificateAuthorityArn".
func (t *AWS_ACMPCA_Certificate) Set__CertificateAuthorityArn(v cfz.Expression[string]) *AWS_ACMPCA_Certificate {
	t.CertificateAuthorityArn = v
	return t
}

// SetV__CertificateAuthorityArn updates property "CertificateAuthorityArn".
func (t *AWS_ACMPCA_Certificate) SetV__CertificateAuthorityArn(v string) *AWS_ACMPCA_Certificate {
	t.CertificateAuthorityArn = cfz.V(v)
	return t
}

// Set__CertificateSigningRequest updates property "CertificateSigningRequest".
func (t *AWS_ACMPCA_Certificate) Set__CertificateSigningRequest(v cfz.Expression[string]) *AWS_ACMPCA_Certificate {
	t.CertificateSigningRequest = v
	return t
}

// SetV__CertificateSigningRequest updates property "CertificateSigningRequest".
func (t *AWS_ACMPCA_Certificate) SetV__CertificateSigningRequest(v string) *AWS_ACMPCA_Certificate {
	t.CertificateSigningRequest = cfz.V(v)
	return t
}

// Set__SigningAlgorithm updates property "SigningAlgorithm".
func (t *AWS_ACMPCA_Certificate) Set__SigningAlgorithm(v cfz.Expression[string]) *AWS_ACMPCA_Certificate {
	t.SigningAlgorithm = v
	return t
}

// SetV__SigningAlgorithm updates property "SigningAlgorithm".
func (t *AWS_ACMPCA_Certificate) SetV__SigningAlgorithm(v string) *AWS_ACMPCA_Certificate {
	t.SigningAlgorithm = cfz.V(v)
	return t
}

// Set__TemplateArn updates property "TemplateArn".
func (t *AWS_ACMPCA_Certificate) Set__TemplateArn(v cfz.Expression[string]) *AWS_ACMPCA_Certificate {
	t.TemplateArn = v
	return t
}

// SetV__TemplateArn updates property "TemplateArn".
func (t *AWS_ACMPCA_Certificate) SetV__TemplateArn(v string) *AWS_ACMPCA_Certificate {
	t.TemplateArn = cfz.V(v)
	return t
}

// Set__Validity updates property "Validity".
func (t *AWS_ACMPCA_Certificate) Set__Validity(v cfz.Expression[AWS_ACMPCA_Certificate_Validity]) *AWS_ACMPCA_Certificate {
	t.Validity = v
	return t
}

// SetV__Validity updates property "Validity".
func (t *AWS_ACMPCA_Certificate) SetV__Validity(v AWS_ACMPCA_Certificate_Validity) *AWS_ACMPCA_Certificate {
	t.Validity = cfz.V(v)
	return t
}

// Set__ValidityNotBefore updates property "ValidityNotBefore".
func (t *AWS_ACMPCA_Certificate) Set__ValidityNotBefore(v cfz.Expression[AWS_ACMPCA_Certificate_Validity]) *AWS_ACMPCA_Certificate {
	t.ValidityNotBefore = v
	return t
}

// SetV__ValidityNotBefore updates property "ValidityNotBefore".
func (t *AWS_ACMPCA_Certificate) SetV__ValidityNotBefore(v AWS_ACMPCA_Certificate_Validity) *AWS_ACMPCA_Certificate {
	t.ValidityNotBefore = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_ACMPCA_Certificate) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_ACMPCA_Certificate) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ACMPCA_Certificate__AttributesMap.Arn))
}

// GetAtt__Certificate returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Certificate
func (t *AWS_ACMPCA_Certificate) GetAtt__Certificate() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ACMPCA_Certificate__AttributesMap.Certificate))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_ACMPCA_Certificate) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_ACMPCA_Certificate) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Certificate returns a conventionally configured output for an attribute of this resource.
// Attribute: Certificate
func (t *AWS_ACMPCA_Certificate) GetConventionalOutputAtt__Certificate(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCertificate", t.GetAtt__Certificate())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_ACMPCA_Certificate) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_ACMPCA_Certificate

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_ACMPCA_Certificate) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
