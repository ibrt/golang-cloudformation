// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ssm

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_SSM_Association)(nil)
	_ cfz.Resource                   = (*AWS_SSM_Association)(nil)
)

const (
	// AWS_SSM_Association__Type is the CloudFormation type for AWS::SSM::Association.
	AWS_SSM_Association__Type = "AWS::SSM::Association"
)

var (
	// AWS_SSM_Association__AttributesMap reports all the CloudFormation attributes for AWS::SSM::Association.
	AWS_SSM_Association__AttributesMap = struct {
		AssociationId string
	}{
		AssociationId: "AssociationId",
	}

	// AWS_SSM_Association__AttributesSlice reports all the CloudFormation attributes for AWS::SSM::Association.
	AWS_SSM_Association__AttributesSlice = []string{
		AWS_SSM_Association__AttributesMap.AssociationId,
	}
)

var (
	// AWS_SSM_Association__PropertiesMap reports all the CloudFormation properties for AWS::SSM::Association.
	AWS_SSM_Association__PropertiesMap = struct {
		ApplyOnlyAtCronInterval       string
		AssociationName               string
		AutomationTargetParameterName string
		CalendarNames                 string
		ComplianceSeverity            string
		DocumentVersion               string
		InstanceId                    string
		MaxConcurrency                string
		MaxErrors                     string
		Name                          string
		OutputLocation                string
		Parameters                    string
		ScheduleExpression            string
		ScheduleOffset                string
		SyncCompliance                string
		Targets                       string
		WaitForSuccessTimeoutSeconds  string
	}{
		ApplyOnlyAtCronInterval:       "ApplyOnlyAtCronInterval",
		AssociationName:               "AssociationName",
		AutomationTargetParameterName: "AutomationTargetParameterName",
		CalendarNames:                 "CalendarNames",
		ComplianceSeverity:            "ComplianceSeverity",
		DocumentVersion:               "DocumentVersion",
		InstanceId:                    "InstanceId",
		MaxConcurrency:                "MaxConcurrency",
		MaxErrors:                     "MaxErrors",
		Name:                          "Name",
		OutputLocation:                "OutputLocation",
		Parameters:                    "Parameters",
		ScheduleExpression:            "ScheduleExpression",
		ScheduleOffset:                "ScheduleOffset",
		SyncCompliance:                "SyncCompliance",
		Targets:                       "Targets",
		WaitForSuccessTimeoutSeconds:  "WaitForSuccessTimeoutSeconds",
	}

	// AWS_SSM_Association__PropertiesSlice reports all the CloudFormation properties for AWS::SSM::Association.
	AWS_SSM_Association__PropertiesSlice = []string{
		AWS_SSM_Association__PropertiesMap.ApplyOnlyAtCronInterval,
		AWS_SSM_Association__PropertiesMap.AssociationName,
		AWS_SSM_Association__PropertiesMap.AutomationTargetParameterName,
		AWS_SSM_Association__PropertiesMap.CalendarNames,
		AWS_SSM_Association__PropertiesMap.ComplianceSeverity,
		AWS_SSM_Association__PropertiesMap.DocumentVersion,
		AWS_SSM_Association__PropertiesMap.InstanceId,
		AWS_SSM_Association__PropertiesMap.MaxConcurrency,
		AWS_SSM_Association__PropertiesMap.MaxErrors,
		AWS_SSM_Association__PropertiesMap.Name,
		AWS_SSM_Association__PropertiesMap.OutputLocation,
		AWS_SSM_Association__PropertiesMap.Parameters,
		AWS_SSM_Association__PropertiesMap.ScheduleExpression,
		AWS_SSM_Association__PropertiesMap.ScheduleOffset,
		AWS_SSM_Association__PropertiesMap.SyncCompliance,
		AWS_SSM_Association__PropertiesMap.Targets,
		AWS_SSM_Association__PropertiesMap.WaitForSuccessTimeoutSeconds,
	}
)

// AWS_SSM_Association is a binding for AWS::SSM::Association.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html
type AWS_SSM_Association struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ApplyOnlyAtCronInterval is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-applyonlyatcroninterval
	ApplyOnlyAtCronInterval cfz.Expression[bool] `json:"ApplyOnlyAtCronInterval,omitempty"`

	// AssociationName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-associationname
	AssociationName cfz.Expression[string] `json:"AssociationName,omitempty"`

	// AutomationTargetParameterName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-automationtargetparametername
	AutomationTargetParameterName cfz.Expression[string] `json:"AutomationTargetParameterName,omitempty"`

	// CalendarNames is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-calendarnames
	CalendarNames cfz.ExpressionSlice[string] `json:"CalendarNames,omitempty"`

	// ComplianceSeverity is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-complianceseverity
	ComplianceSeverity cfz.Expression[string] `json:"ComplianceSeverity,omitempty"`

	// DocumentVersion is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-documentversion
	DocumentVersion cfz.Expression[string] `json:"DocumentVersion,omitempty"`

	// InstanceId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-instanceid
	InstanceId cfz.Expression[string] `json:"InstanceId,omitempty"`

	// MaxConcurrency is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-maxconcurrency
	MaxConcurrency cfz.Expression[string] `json:"MaxConcurrency,omitempty"`

	// MaxErrors is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-maxerrors
	MaxErrors cfz.Expression[string] `json:"MaxErrors,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// OutputLocation is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-outputlocation
	OutputLocation cfz.Expression[AWS_SSM_Association_InstanceAssociationOutputLocation] `json:"OutputLocation,omitempty"`

	// Parameters is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-parameters
	Parameters cfz.Expression[json.RawMessage] `json:"Parameters,omitempty"`

	// ScheduleExpression is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-scheduleexpression
	ScheduleExpression cfz.Expression[string] `json:"ScheduleExpression,omitempty"`

	// ScheduleOffset is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-scheduleoffset
	ScheduleOffset cfz.Expression[int32] `json:"ScheduleOffset,omitempty"`

	// SyncCompliance is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-synccompliance
	SyncCompliance cfz.Expression[string] `json:"SyncCompliance,omitempty"`

	// Targets is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-targets
	Targets cfz.ExpressionSlice[AWS_SSM_Association_Target] `json:"Targets,omitempty"`

	// WaitForSuccessTimeoutSeconds is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html#cfn-ssm-association-waitforsuccesstimeoutseconds
	WaitForSuccessTimeoutSeconds cfz.Expression[int32] `json:"WaitForSuccessTimeoutSeconds,omitempty"`
}

// New__AWS_SSM_Association initializes a new *AWS_SSM_Association.
func New__AWS_SSM_Association(logicalName string) *AWS_SSM_Association {
	return &AWS_SSM_Association{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_SSM_Association) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_SSM_Association) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_SSM_Association) GetType() string {
	return AWS_SSM_Association__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_SSM_Association) Set__LogicalName(v string) *AWS_SSM_Association {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_SSM_Association) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_SSM_Association {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_SSM_Association) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_SSM_Association {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_SSM_Association) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_SSM_Association {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_SSM_Association) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_SSM_Association {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_SSM_Association) Set__RequestedOutputs(v []cfz.Output) *AWS_SSM_Association {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_SSM_Association) Add__RequestedOutputs(v ...cfz.Output) *AWS_SSM_Association {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ApplyOnlyAtCronInterval updates property "ApplyOnlyAtCronInterval".
func (t *AWS_SSM_Association) Set__ApplyOnlyAtCronInterval(v cfz.Expression[bool]) *AWS_SSM_Association {
	t.ApplyOnlyAtCronInterval = v
	return t
}

// SetV__ApplyOnlyAtCronInterval updates property "ApplyOnlyAtCronInterval".
func (t *AWS_SSM_Association) SetV__ApplyOnlyAtCronInterval(v bool) *AWS_SSM_Association {
	t.ApplyOnlyAtCronInterval = cfz.V(v)
	return t
}

// Set__AssociationName updates property "AssociationName".
func (t *AWS_SSM_Association) Set__AssociationName(v cfz.Expression[string]) *AWS_SSM_Association {
	t.AssociationName = v
	return t
}

// SetV__AssociationName updates property "AssociationName".
func (t *AWS_SSM_Association) SetV__AssociationName(v string) *AWS_SSM_Association {
	t.AssociationName = cfz.V(v)
	return t
}

// Set__AutomationTargetParameterName updates property "AutomationTargetParameterName".
func (t *AWS_SSM_Association) Set__AutomationTargetParameterName(v cfz.Expression[string]) *AWS_SSM_Association {
	t.AutomationTargetParameterName = v
	return t
}

// SetV__AutomationTargetParameterName updates property "AutomationTargetParameterName".
func (t *AWS_SSM_Association) SetV__AutomationTargetParameterName(v string) *AWS_SSM_Association {
	t.AutomationTargetParameterName = cfz.V(v)
	return t
}

// Set__CalendarNames updates property "CalendarNames".
func (t *AWS_SSM_Association) Set__CalendarNames(v cfz.ExpressionSlice[string]) *AWS_SSM_Association {
	t.CalendarNames = v
	return t
}

// SetS__CalendarNames updates property "CalendarNames".
func (t *AWS_SSM_Association) SetS__CalendarNames(v ...cfz.Expression[string]) *AWS_SSM_Association {
	t.CalendarNames = cfz.S(v...)
	return t
}

// SetSV__CalendarNames updates property "CalendarNames".
func (t *AWS_SSM_Association) SetSV__CalendarNames(v ...string) *AWS_SSM_Association {
	t.CalendarNames = cfz.SV(v...)
	return t
}

// Set__ComplianceSeverity updates property "ComplianceSeverity".
func (t *AWS_SSM_Association) Set__ComplianceSeverity(v cfz.Expression[string]) *AWS_SSM_Association {
	t.ComplianceSeverity = v
	return t
}

// SetV__ComplianceSeverity updates property "ComplianceSeverity".
func (t *AWS_SSM_Association) SetV__ComplianceSeverity(v string) *AWS_SSM_Association {
	t.ComplianceSeverity = cfz.V(v)
	return t
}

// Set__DocumentVersion updates property "DocumentVersion".
func (t *AWS_SSM_Association) Set__DocumentVersion(v cfz.Expression[string]) *AWS_SSM_Association {
	t.DocumentVersion = v
	return t
}

// SetV__DocumentVersion updates property "DocumentVersion".
func (t *AWS_SSM_Association) SetV__DocumentVersion(v string) *AWS_SSM_Association {
	t.DocumentVersion = cfz.V(v)
	return t
}

// Set__InstanceId updates property "InstanceId".
func (t *AWS_SSM_Association) Set__InstanceId(v cfz.Expression[string]) *AWS_SSM_Association {
	t.InstanceId = v
	return t
}

// SetV__InstanceId updates property "InstanceId".
func (t *AWS_SSM_Association) SetV__InstanceId(v string) *AWS_SSM_Association {
	t.InstanceId = cfz.V(v)
	return t
}

// Set__MaxConcurrency updates property "MaxConcurrency".
func (t *AWS_SSM_Association) Set__MaxConcurrency(v cfz.Expression[string]) *AWS_SSM_Association {
	t.MaxConcurrency = v
	return t
}

// SetV__MaxConcurrency updates property "MaxConcurrency".
func (t *AWS_SSM_Association) SetV__MaxConcurrency(v string) *AWS_SSM_Association {
	t.MaxConcurrency = cfz.V(v)
	return t
}

// Set__MaxErrors updates property "MaxErrors".
func (t *AWS_SSM_Association) Set__MaxErrors(v cfz.Expression[string]) *AWS_SSM_Association {
	t.MaxErrors = v
	return t
}

// SetV__MaxErrors updates property "MaxErrors".
func (t *AWS_SSM_Association) SetV__MaxErrors(v string) *AWS_SSM_Association {
	t.MaxErrors = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_SSM_Association) Set__Name(v cfz.Expression[string]) *AWS_SSM_Association {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_SSM_Association) SetV__Name(v string) *AWS_SSM_Association {
	t.Name = cfz.V(v)
	return t
}

// Set__OutputLocation updates property "OutputLocation".
func (t *AWS_SSM_Association) Set__OutputLocation(v cfz.Expression[AWS_SSM_Association_InstanceAssociationOutputLocation]) *AWS_SSM_Association {
	t.OutputLocation = v
	return t
}

// SetV__OutputLocation updates property "OutputLocation".
func (t *AWS_SSM_Association) SetV__OutputLocation(v AWS_SSM_Association_InstanceAssociationOutputLocation) *AWS_SSM_Association {
	t.OutputLocation = cfz.V(v)
	return t
}

// Set__Parameters updates property "Parameters".
func (t *AWS_SSM_Association) Set__Parameters(v cfz.Expression[json.RawMessage]) *AWS_SSM_Association {
	t.Parameters = v
	return t
}

// SetV__Parameters updates property "Parameters".
func (t *AWS_SSM_Association) SetV__Parameters(v json.RawMessage) *AWS_SSM_Association {
	t.Parameters = cfz.V(v)
	return t
}

// Set__ScheduleExpression updates property "ScheduleExpression".
func (t *AWS_SSM_Association) Set__ScheduleExpression(v cfz.Expression[string]) *AWS_SSM_Association {
	t.ScheduleExpression = v
	return t
}

// SetV__ScheduleExpression updates property "ScheduleExpression".
func (t *AWS_SSM_Association) SetV__ScheduleExpression(v string) *AWS_SSM_Association {
	t.ScheduleExpression = cfz.V(v)
	return t
}

// Set__ScheduleOffset updates property "ScheduleOffset".
func (t *AWS_SSM_Association) Set__ScheduleOffset(v cfz.Expression[int32]) *AWS_SSM_Association {
	t.ScheduleOffset = v
	return t
}

// SetV__ScheduleOffset updates property "ScheduleOffset".
func (t *AWS_SSM_Association) SetV__ScheduleOffset(v int32) *AWS_SSM_Association {
	t.ScheduleOffset = cfz.V(v)
	return t
}

// Set__SyncCompliance updates property "SyncCompliance".
func (t *AWS_SSM_Association) Set__SyncCompliance(v cfz.Expression[string]) *AWS_SSM_Association {
	t.SyncCompliance = v
	return t
}

// SetV__SyncCompliance updates property "SyncCompliance".
func (t *AWS_SSM_Association) SetV__SyncCompliance(v string) *AWS_SSM_Association {
	t.SyncCompliance = cfz.V(v)
	return t
}

// Set__Targets updates property "Targets".
func (t *AWS_SSM_Association) Set__Targets(v cfz.ExpressionSlice[AWS_SSM_Association_Target]) *AWS_SSM_Association {
	t.Targets = v
	return t
}

// SetS__Targets updates property "Targets".
func (t *AWS_SSM_Association) SetS__Targets(v ...cfz.Expression[AWS_SSM_Association_Target]) *AWS_SSM_Association {
	t.Targets = cfz.S(v...)
	return t
}

// SetSV__Targets updates property "Targets".
func (t *AWS_SSM_Association) SetSV__Targets(v ...AWS_SSM_Association_Target) *AWS_SSM_Association {
	t.Targets = cfz.SV(v...)
	return t
}

// Set__WaitForSuccessTimeoutSeconds updates property "WaitForSuccessTimeoutSeconds".
func (t *AWS_SSM_Association) Set__WaitForSuccessTimeoutSeconds(v cfz.Expression[int32]) *AWS_SSM_Association {
	t.WaitForSuccessTimeoutSeconds = v
	return t
}

// SetV__WaitForSuccessTimeoutSeconds updates property "WaitForSuccessTimeoutSeconds".
func (t *AWS_SSM_Association) SetV__WaitForSuccessTimeoutSeconds(v int32) *AWS_SSM_Association {
	t.WaitForSuccessTimeoutSeconds = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_SSM_Association) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__AssociationId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AssociationId
func (t *AWS_SSM_Association) GetAtt__AssociationId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_SSM_Association__AttributesMap.AssociationId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_SSM_Association) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AssociationId returns a conventionally configured output for an attribute of this resource.
// Attribute: AssociationId
func (t *AWS_SSM_Association) GetConventionalOutputAtt__AssociationId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAssociationId", t.GetAtt__AssociationId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_SSM_Association) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_SSM_Association

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_SSM_Association) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
