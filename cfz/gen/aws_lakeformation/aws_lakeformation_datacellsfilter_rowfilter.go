// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_lakeformation

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

const (
	// AWS_LakeFormation_DataCellsFilter_RowFilter__Type is the CloudFormation type for AWS::LakeFormation::DataCellsFilter.RowFilter.
	AWS_LakeFormation_DataCellsFilter_RowFilter__Type = "AWS::LakeFormation::DataCellsFilter.RowFilter"
)

var (
	// AWS_LakeFormation_DataCellsFilter_RowFilter__PropertiesMap reports all the CloudFormation properties for AWS::LakeFormation::DataCellsFilter.RowFilter.
	AWS_LakeFormation_DataCellsFilter_RowFilter__PropertiesMap = struct {
		AllRowsWildcard  string
		FilterExpression string
	}{
		AllRowsWildcard:  "AllRowsWildcard",
		FilterExpression: "FilterExpression",
	}

	// AWS_LakeFormation_DataCellsFilter_RowFilter__PropertiesSlice reports all the CloudFormation properties for AWS::LakeFormation::DataCellsFilter.RowFilter.
	AWS_LakeFormation_DataCellsFilter_RowFilter__PropertiesSlice = []string{
		AWS_LakeFormation_DataCellsFilter_RowFilter__PropertiesMap.AllRowsWildcard,
		AWS_LakeFormation_DataCellsFilter_RowFilter__PropertiesMap.FilterExpression,
	}
)

// AWS_LakeFormation_DataCellsFilter_RowFilter is a binding for AWS::LakeFormation::DataCellsFilter.RowFilter.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-datacellsfilter-rowfilter.html
type AWS_LakeFormation_DataCellsFilter_RowFilter struct {
	// AllRowsWildcard is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-datacellsfilter-rowfilter.html#cfn-lakeformation-datacellsfilter-rowfilter-allrowswildcard
	AllRowsWildcard cfz.Expression[json.RawMessage] `json:"AllRowsWildcard,omitempty"`

	// FilterExpression is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-datacellsfilter-rowfilter.html#cfn-lakeformation-datacellsfilter-rowfilter-filterexpression
	FilterExpression cfz.Expression[string] `json:"FilterExpression,omitempty"`
}

// New__AWS_LakeFormation_DataCellsFilter_RowFilter initializes a new AWS_LakeFormation_DataCellsFilter_RowFilter.
func New__AWS_LakeFormation_DataCellsFilter_RowFilter() AWS_LakeFormation_DataCellsFilter_RowFilter {
	return AWS_LakeFormation_DataCellsFilter_RowFilter{}
}

// GetType returns the CloudFormation type.
func (AWS_LakeFormation_DataCellsFilter_RowFilter) GetType() string {
	return AWS_LakeFormation_DataCellsFilter_RowFilter__Type
}

// Set__AllRowsWildcard updates property "AllRowsWildcard".
func (t AWS_LakeFormation_DataCellsFilter_RowFilter) Set__AllRowsWildcard(v cfz.Expression[json.RawMessage]) AWS_LakeFormation_DataCellsFilter_RowFilter {
	t.AllRowsWildcard = v
	return t
}

// SetV__AllRowsWildcard updates property "AllRowsWildcard".
func (t AWS_LakeFormation_DataCellsFilter_RowFilter) SetV__AllRowsWildcard(v json.RawMessage) AWS_LakeFormation_DataCellsFilter_RowFilter {
	t.AllRowsWildcard = cfz.V(v)
	return t
}

// Set__FilterExpression updates property "FilterExpression".
func (t AWS_LakeFormation_DataCellsFilter_RowFilter) Set__FilterExpression(v cfz.Expression[string]) AWS_LakeFormation_DataCellsFilter_RowFilter {
	t.FilterExpression = v
	return t
}

// SetV__FilterExpression updates property "FilterExpression".
func (t AWS_LakeFormation_DataCellsFilter_RowFilter) SetV__FilterExpression(v string) AWS_LakeFormation_DataCellsFilter_RowFilter {
	t.FilterExpression = cfz.V(v)
	return t
}
