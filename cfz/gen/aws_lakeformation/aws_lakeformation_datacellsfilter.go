// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_lakeformation

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_LakeFormation_DataCellsFilter)(nil)
	_ cfz.Resource                   = (*AWS_LakeFormation_DataCellsFilter)(nil)
)

const (
	// AWS_LakeFormation_DataCellsFilter__Type is the CloudFormation type for AWS::LakeFormation::DataCellsFilter.
	AWS_LakeFormation_DataCellsFilter__Type = "AWS::LakeFormation::DataCellsFilter"
)

var (
	// AWS_LakeFormation_DataCellsFilter__PropertiesMap reports all the CloudFormation properties for AWS::LakeFormation::DataCellsFilter.
	AWS_LakeFormation_DataCellsFilter__PropertiesMap = struct {
		ColumnNames    string
		ColumnWildcard string
		DatabaseName   string
		Name           string
		RowFilter      string
		TableCatalogId string
		TableName      string
	}{
		ColumnNames:    "ColumnNames",
		ColumnWildcard: "ColumnWildcard",
		DatabaseName:   "DatabaseName",
		Name:           "Name",
		RowFilter:      "RowFilter",
		TableCatalogId: "TableCatalogId",
		TableName:      "TableName",
	}

	// AWS_LakeFormation_DataCellsFilter__PropertiesSlice reports all the CloudFormation properties for AWS::LakeFormation::DataCellsFilter.
	AWS_LakeFormation_DataCellsFilter__PropertiesSlice = []string{
		AWS_LakeFormation_DataCellsFilter__PropertiesMap.ColumnNames,
		AWS_LakeFormation_DataCellsFilter__PropertiesMap.ColumnWildcard,
		AWS_LakeFormation_DataCellsFilter__PropertiesMap.DatabaseName,
		AWS_LakeFormation_DataCellsFilter__PropertiesMap.Name,
		AWS_LakeFormation_DataCellsFilter__PropertiesMap.RowFilter,
		AWS_LakeFormation_DataCellsFilter__PropertiesMap.TableCatalogId,
		AWS_LakeFormation_DataCellsFilter__PropertiesMap.TableName,
	}
)

// AWS_LakeFormation_DataCellsFilter is a binding for AWS::LakeFormation::DataCellsFilter.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-datacellsfilter.html
type AWS_LakeFormation_DataCellsFilter struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ColumnNames is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-datacellsfilter.html#cfn-lakeformation-datacellsfilter-columnnames
	ColumnNames cfz.ExpressionSlice[string] `json:"ColumnNames,omitempty"`

	// ColumnWildcard is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-datacellsfilter.html#cfn-lakeformation-datacellsfilter-columnwildcard
	ColumnWildcard cfz.Expression[AWS_LakeFormation_DataCellsFilter_ColumnWildcard] `json:"ColumnWildcard,omitempty"`

	// DatabaseName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-datacellsfilter.html#cfn-lakeformation-datacellsfilter-databasename
	DatabaseName cfz.Expression[string] `json:"DatabaseName,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-datacellsfilter.html#cfn-lakeformation-datacellsfilter-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// RowFilter is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-datacellsfilter.html#cfn-lakeformation-datacellsfilter-rowfilter
	RowFilter cfz.Expression[AWS_LakeFormation_DataCellsFilter_RowFilter] `json:"RowFilter,omitempty"`

	// TableCatalogId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-datacellsfilter.html#cfn-lakeformation-datacellsfilter-tablecatalogid
	TableCatalogId cfz.Expression[string] `json:"TableCatalogId,omitempty"`

	// TableName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-datacellsfilter.html#cfn-lakeformation-datacellsfilter-tablename
	TableName cfz.Expression[string] `json:"TableName,omitempty"`
}

// New__AWS_LakeFormation_DataCellsFilter initializes a new *AWS_LakeFormation_DataCellsFilter.
func New__AWS_LakeFormation_DataCellsFilter(logicalName string) *AWS_LakeFormation_DataCellsFilter {
	return &AWS_LakeFormation_DataCellsFilter{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_LakeFormation_DataCellsFilter) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_LakeFormation_DataCellsFilter) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_LakeFormation_DataCellsFilter) GetType() string {
	return AWS_LakeFormation_DataCellsFilter__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_LakeFormation_DataCellsFilter) Set__LogicalName(v string) *AWS_LakeFormation_DataCellsFilter {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_LakeFormation_DataCellsFilter) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_LakeFormation_DataCellsFilter {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_LakeFormation_DataCellsFilter) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_LakeFormation_DataCellsFilter {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_LakeFormation_DataCellsFilter) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_LakeFormation_DataCellsFilter {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_LakeFormation_DataCellsFilter) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_LakeFormation_DataCellsFilter {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_LakeFormation_DataCellsFilter) Set__RequestedOutputs(v []cfz.Output) *AWS_LakeFormation_DataCellsFilter {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_LakeFormation_DataCellsFilter) Add__RequestedOutputs(v ...cfz.Output) *AWS_LakeFormation_DataCellsFilter {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ColumnNames updates property "ColumnNames".
func (t *AWS_LakeFormation_DataCellsFilter) Set__ColumnNames(v cfz.ExpressionSlice[string]) *AWS_LakeFormation_DataCellsFilter {
	t.ColumnNames = v
	return t
}

// SetS__ColumnNames updates property "ColumnNames".
func (t *AWS_LakeFormation_DataCellsFilter) SetS__ColumnNames(v ...cfz.Expression[string]) *AWS_LakeFormation_DataCellsFilter {
	t.ColumnNames = cfz.S(v...)
	return t
}

// SetSV__ColumnNames updates property "ColumnNames".
func (t *AWS_LakeFormation_DataCellsFilter) SetSV__ColumnNames(v ...string) *AWS_LakeFormation_DataCellsFilter {
	t.ColumnNames = cfz.SV(v...)
	return t
}

// Set__ColumnWildcard updates property "ColumnWildcard".
func (t *AWS_LakeFormation_DataCellsFilter) Set__ColumnWildcard(v cfz.Expression[AWS_LakeFormation_DataCellsFilter_ColumnWildcard]) *AWS_LakeFormation_DataCellsFilter {
	t.ColumnWildcard = v
	return t
}

// SetV__ColumnWildcard updates property "ColumnWildcard".
func (t *AWS_LakeFormation_DataCellsFilter) SetV__ColumnWildcard(v AWS_LakeFormation_DataCellsFilter_ColumnWildcard) *AWS_LakeFormation_DataCellsFilter {
	t.ColumnWildcard = cfz.V(v)
	return t
}

// Set__DatabaseName updates property "DatabaseName".
func (t *AWS_LakeFormation_DataCellsFilter) Set__DatabaseName(v cfz.Expression[string]) *AWS_LakeFormation_DataCellsFilter {
	t.DatabaseName = v
	return t
}

// SetV__DatabaseName updates property "DatabaseName".
func (t *AWS_LakeFormation_DataCellsFilter) SetV__DatabaseName(v string) *AWS_LakeFormation_DataCellsFilter {
	t.DatabaseName = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_LakeFormation_DataCellsFilter) Set__Name(v cfz.Expression[string]) *AWS_LakeFormation_DataCellsFilter {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_LakeFormation_DataCellsFilter) SetV__Name(v string) *AWS_LakeFormation_DataCellsFilter {
	t.Name = cfz.V(v)
	return t
}

// Set__RowFilter updates property "RowFilter".
func (t *AWS_LakeFormation_DataCellsFilter) Set__RowFilter(v cfz.Expression[AWS_LakeFormation_DataCellsFilter_RowFilter]) *AWS_LakeFormation_DataCellsFilter {
	t.RowFilter = v
	return t
}

// SetV__RowFilter updates property "RowFilter".
func (t *AWS_LakeFormation_DataCellsFilter) SetV__RowFilter(v AWS_LakeFormation_DataCellsFilter_RowFilter) *AWS_LakeFormation_DataCellsFilter {
	t.RowFilter = cfz.V(v)
	return t
}

// Set__TableCatalogId updates property "TableCatalogId".
func (t *AWS_LakeFormation_DataCellsFilter) Set__TableCatalogId(v cfz.Expression[string]) *AWS_LakeFormation_DataCellsFilter {
	t.TableCatalogId = v
	return t
}

// SetV__TableCatalogId updates property "TableCatalogId".
func (t *AWS_LakeFormation_DataCellsFilter) SetV__TableCatalogId(v string) *AWS_LakeFormation_DataCellsFilter {
	t.TableCatalogId = cfz.V(v)
	return t
}

// Set__TableName updates property "TableName".
func (t *AWS_LakeFormation_DataCellsFilter) Set__TableName(v cfz.Expression[string]) *AWS_LakeFormation_DataCellsFilter {
	t.TableName = v
	return t
}

// SetV__TableName updates property "TableName".
func (t *AWS_LakeFormation_DataCellsFilter) SetV__TableName(v string) *AWS_LakeFormation_DataCellsFilter {
	t.TableName = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_LakeFormation_DataCellsFilter) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_LakeFormation_DataCellsFilter) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_LakeFormation_DataCellsFilter) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_LakeFormation_DataCellsFilter

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_LakeFormation_DataCellsFilter) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
