// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_lakeformation

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_LakeFormation_TagAssociation)(nil)
	_ cfz.Resource                   = (*AWS_LakeFormation_TagAssociation)(nil)
)

const (
	// AWS_LakeFormation_TagAssociation__Type is the CloudFormation type for AWS::LakeFormation::TagAssociation.
	AWS_LakeFormation_TagAssociation__Type = "AWS::LakeFormation::TagAssociation"
)

var (
	// AWS_LakeFormation_TagAssociation__AttributesMap reports all the CloudFormation attributes for AWS::LakeFormation::TagAssociation.
	AWS_LakeFormation_TagAssociation__AttributesMap = struct {
		ResourceIdentifier string
		TagsIdentifier     string
	}{
		ResourceIdentifier: "ResourceIdentifier",
		TagsIdentifier:     "TagsIdentifier",
	}

	// AWS_LakeFormation_TagAssociation__AttributesSlice reports all the CloudFormation attributes for AWS::LakeFormation::TagAssociation.
	AWS_LakeFormation_TagAssociation__AttributesSlice = []string{
		AWS_LakeFormation_TagAssociation__AttributesMap.ResourceIdentifier,
		AWS_LakeFormation_TagAssociation__AttributesMap.TagsIdentifier,
	}
)

var (
	// AWS_LakeFormation_TagAssociation__PropertiesMap reports all the CloudFormation properties for AWS::LakeFormation::TagAssociation.
	AWS_LakeFormation_TagAssociation__PropertiesMap = struct {
		LFTags   string
		Resource string
	}{
		LFTags:   "LFTags",
		Resource: "Resource",
	}

	// AWS_LakeFormation_TagAssociation__PropertiesSlice reports all the CloudFormation properties for AWS::LakeFormation::TagAssociation.
	AWS_LakeFormation_TagAssociation__PropertiesSlice = []string{
		AWS_LakeFormation_TagAssociation__PropertiesMap.LFTags,
		AWS_LakeFormation_TagAssociation__PropertiesMap.Resource,
	}
)

// AWS_LakeFormation_TagAssociation is a binding for AWS::LakeFormation::TagAssociation.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-tagassociation.html
type AWS_LakeFormation_TagAssociation struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// LFTags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-tagassociation.html#cfn-lakeformation-tagassociation-lftags
	LFTags cfz.ExpressionSlice[AWS_LakeFormation_TagAssociation_LFTagPair] `json:"LFTags,omitempty"`

	// Resource is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-tagassociation.html#cfn-lakeformation-tagassociation-resource
	Resource cfz.Expression[AWS_LakeFormation_TagAssociation_Resource] `json:"Resource,omitempty"`
}

// New__AWS_LakeFormation_TagAssociation initializes a new *AWS_LakeFormation_TagAssociation.
func New__AWS_LakeFormation_TagAssociation(logicalName string) *AWS_LakeFormation_TagAssociation {
	return &AWS_LakeFormation_TagAssociation{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_LakeFormation_TagAssociation) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_LakeFormation_TagAssociation) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_LakeFormation_TagAssociation) GetType() string {
	return AWS_LakeFormation_TagAssociation__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_LakeFormation_TagAssociation) Set__LogicalName(v string) *AWS_LakeFormation_TagAssociation {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_LakeFormation_TagAssociation) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_LakeFormation_TagAssociation {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_LakeFormation_TagAssociation) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_LakeFormation_TagAssociation {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_LakeFormation_TagAssociation) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_LakeFormation_TagAssociation {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_LakeFormation_TagAssociation) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_LakeFormation_TagAssociation {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_LakeFormation_TagAssociation) Set__RequestedOutputs(v []cfz.Output) *AWS_LakeFormation_TagAssociation {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_LakeFormation_TagAssociation) Add__RequestedOutputs(v ...cfz.Output) *AWS_LakeFormation_TagAssociation {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__LFTags updates property "LFTags".
func (t *AWS_LakeFormation_TagAssociation) Set__LFTags(v cfz.ExpressionSlice[AWS_LakeFormation_TagAssociation_LFTagPair]) *AWS_LakeFormation_TagAssociation {
	t.LFTags = v
	return t
}

// SetS__LFTags updates property "LFTags".
func (t *AWS_LakeFormation_TagAssociation) SetS__LFTags(v ...cfz.Expression[AWS_LakeFormation_TagAssociation_LFTagPair]) *AWS_LakeFormation_TagAssociation {
	t.LFTags = cfz.S(v...)
	return t
}

// SetSV__LFTags updates property "LFTags".
func (t *AWS_LakeFormation_TagAssociation) SetSV__LFTags(v ...AWS_LakeFormation_TagAssociation_LFTagPair) *AWS_LakeFormation_TagAssociation {
	t.LFTags = cfz.SV(v...)
	return t
}

// Set__Resource updates property "Resource".
func (t *AWS_LakeFormation_TagAssociation) Set__Resource(v cfz.Expression[AWS_LakeFormation_TagAssociation_Resource]) *AWS_LakeFormation_TagAssociation {
	t.Resource = v
	return t
}

// SetV__Resource updates property "Resource".
func (t *AWS_LakeFormation_TagAssociation) SetV__Resource(v AWS_LakeFormation_TagAssociation_Resource) *AWS_LakeFormation_TagAssociation {
	t.Resource = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_LakeFormation_TagAssociation) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__ResourceIdentifier returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ResourceIdentifier
func (t *AWS_LakeFormation_TagAssociation) GetAtt__ResourceIdentifier() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_LakeFormation_TagAssociation__AttributesMap.ResourceIdentifier))
}

// GetAtt__TagsIdentifier returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: TagsIdentifier
func (t *AWS_LakeFormation_TagAssociation) GetAtt__TagsIdentifier() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_LakeFormation_TagAssociation__AttributesMap.TagsIdentifier))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_LakeFormation_TagAssociation) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ResourceIdentifier returns a conventionally configured output for an attribute of this resource.
// Attribute: ResourceIdentifier
func (t *AWS_LakeFormation_TagAssociation) GetConventionalOutputAtt__ResourceIdentifier(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttResourceIdentifier", t.GetAtt__ResourceIdentifier())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__TagsIdentifier returns a conventionally configured output for an attribute of this resource.
// Attribute: TagsIdentifier
func (t *AWS_LakeFormation_TagAssociation) GetConventionalOutputAtt__TagsIdentifier(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttTagsIdentifier", t.GetAtt__TagsIdentifier())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_LakeFormation_TagAssociation) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_LakeFormation_TagAssociation

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_LakeFormation_TagAssociation) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
