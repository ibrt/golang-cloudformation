// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_lakeformation

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_LakeFormation_Permissions)(nil)
	_ cfz.Resource                   = (*AWS_LakeFormation_Permissions)(nil)
)

const (
	// AWS_LakeFormation_Permissions__Type is the CloudFormation type for AWS::LakeFormation::Permissions.
	AWS_LakeFormation_Permissions__Type = "AWS::LakeFormation::Permissions"
)

var (
	// AWS_LakeFormation_Permissions__PropertiesMap reports all the CloudFormation properties for AWS::LakeFormation::Permissions.
	AWS_LakeFormation_Permissions__PropertiesMap = struct {
		DataLakePrincipal          string
		Permissions                string
		PermissionsWithGrantOption string
		Resource                   string
	}{
		DataLakePrincipal:          "DataLakePrincipal",
		Permissions:                "Permissions",
		PermissionsWithGrantOption: "PermissionsWithGrantOption",
		Resource:                   "Resource",
	}

	// AWS_LakeFormation_Permissions__PropertiesSlice reports all the CloudFormation properties for AWS::LakeFormation::Permissions.
	AWS_LakeFormation_Permissions__PropertiesSlice = []string{
		AWS_LakeFormation_Permissions__PropertiesMap.DataLakePrincipal,
		AWS_LakeFormation_Permissions__PropertiesMap.Permissions,
		AWS_LakeFormation_Permissions__PropertiesMap.PermissionsWithGrantOption,
		AWS_LakeFormation_Permissions__PropertiesMap.Resource,
	}
)

// AWS_LakeFormation_Permissions is a binding for AWS::LakeFormation::Permissions.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html
type AWS_LakeFormation_Permissions struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// DataLakePrincipal is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html#cfn-lakeformation-permissions-datalakeprincipal
	DataLakePrincipal cfz.Expression[AWS_LakeFormation_Permissions_DataLakePrincipal] `json:"DataLakePrincipal,omitempty"`

	// Permissions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html#cfn-lakeformation-permissions-permissions
	Permissions cfz.ExpressionSlice[string] `json:"Permissions,omitempty"`

	// PermissionsWithGrantOption is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html#cfn-lakeformation-permissions-permissionswithgrantoption
	PermissionsWithGrantOption cfz.ExpressionSlice[string] `json:"PermissionsWithGrantOption,omitempty"`

	// Resource is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html#cfn-lakeformation-permissions-resource
	Resource cfz.Expression[AWS_LakeFormation_Permissions_Resource] `json:"Resource,omitempty"`
}

// New__AWS_LakeFormation_Permissions initializes a new *AWS_LakeFormation_Permissions.
func New__AWS_LakeFormation_Permissions(logicalName string) *AWS_LakeFormation_Permissions {
	return &AWS_LakeFormation_Permissions{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_LakeFormation_Permissions) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_LakeFormation_Permissions) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_LakeFormation_Permissions) GetType() string {
	return AWS_LakeFormation_Permissions__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_LakeFormation_Permissions) Set__LogicalName(v string) *AWS_LakeFormation_Permissions {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_LakeFormation_Permissions) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_LakeFormation_Permissions {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_LakeFormation_Permissions) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_LakeFormation_Permissions {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_LakeFormation_Permissions) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_LakeFormation_Permissions {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_LakeFormation_Permissions) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_LakeFormation_Permissions {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_LakeFormation_Permissions) Set__RequestedOutputs(v []cfz.Output) *AWS_LakeFormation_Permissions {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_LakeFormation_Permissions) Add__RequestedOutputs(v ...cfz.Output) *AWS_LakeFormation_Permissions {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__DataLakePrincipal updates property "DataLakePrincipal".
func (t *AWS_LakeFormation_Permissions) Set__DataLakePrincipal(v cfz.Expression[AWS_LakeFormation_Permissions_DataLakePrincipal]) *AWS_LakeFormation_Permissions {
	t.DataLakePrincipal = v
	return t
}

// SetV__DataLakePrincipal updates property "DataLakePrincipal".
func (t *AWS_LakeFormation_Permissions) SetV__DataLakePrincipal(v AWS_LakeFormation_Permissions_DataLakePrincipal) *AWS_LakeFormation_Permissions {
	t.DataLakePrincipal = cfz.V(v)
	return t
}

// Set__Permissions updates property "Permissions".
func (t *AWS_LakeFormation_Permissions) Set__Permissions(v cfz.ExpressionSlice[string]) *AWS_LakeFormation_Permissions {
	t.Permissions = v
	return t
}

// SetS__Permissions updates property "Permissions".
func (t *AWS_LakeFormation_Permissions) SetS__Permissions(v ...cfz.Expression[string]) *AWS_LakeFormation_Permissions {
	t.Permissions = cfz.S(v...)
	return t
}

// SetSV__Permissions updates property "Permissions".
func (t *AWS_LakeFormation_Permissions) SetSV__Permissions(v ...string) *AWS_LakeFormation_Permissions {
	t.Permissions = cfz.SV(v...)
	return t
}

// Set__PermissionsWithGrantOption updates property "PermissionsWithGrantOption".
func (t *AWS_LakeFormation_Permissions) Set__PermissionsWithGrantOption(v cfz.ExpressionSlice[string]) *AWS_LakeFormation_Permissions {
	t.PermissionsWithGrantOption = v
	return t
}

// SetS__PermissionsWithGrantOption updates property "PermissionsWithGrantOption".
func (t *AWS_LakeFormation_Permissions) SetS__PermissionsWithGrantOption(v ...cfz.Expression[string]) *AWS_LakeFormation_Permissions {
	t.PermissionsWithGrantOption = cfz.S(v...)
	return t
}

// SetSV__PermissionsWithGrantOption updates property "PermissionsWithGrantOption".
func (t *AWS_LakeFormation_Permissions) SetSV__PermissionsWithGrantOption(v ...string) *AWS_LakeFormation_Permissions {
	t.PermissionsWithGrantOption = cfz.SV(v...)
	return t
}

// Set__Resource updates property "Resource".
func (t *AWS_LakeFormation_Permissions) Set__Resource(v cfz.Expression[AWS_LakeFormation_Permissions_Resource]) *AWS_LakeFormation_Permissions {
	t.Resource = v
	return t
}

// SetV__Resource updates property "Resource".
func (t *AWS_LakeFormation_Permissions) SetV__Resource(v AWS_LakeFormation_Permissions_Resource) *AWS_LakeFormation_Permissions {
	t.Resource = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_LakeFormation_Permissions) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_LakeFormation_Permissions) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_LakeFormation_Permissions) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_LakeFormation_Permissions

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_LakeFormation_Permissions) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
