// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_lakeformation

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_LakeFormation_Resource)(nil)
	_ cfz.Resource                   = (*AWS_LakeFormation_Resource)(nil)
)

const (
	// AWS_LakeFormation_Resource__Type is the CloudFormation type for AWS::LakeFormation::Resource.
	AWS_LakeFormation_Resource__Type = "AWS::LakeFormation::Resource"
)

var (
	// AWS_LakeFormation_Resource__PropertiesMap reports all the CloudFormation properties for AWS::LakeFormation::Resource.
	AWS_LakeFormation_Resource__PropertiesMap = struct {
		HybridAccessEnabled  string
		ResourceArn          string
		RoleArn              string
		UseServiceLinkedRole string
		WithFederation       string
	}{
		HybridAccessEnabled:  "HybridAccessEnabled",
		ResourceArn:          "ResourceArn",
		RoleArn:              "RoleArn",
		UseServiceLinkedRole: "UseServiceLinkedRole",
		WithFederation:       "WithFederation",
	}

	// AWS_LakeFormation_Resource__PropertiesSlice reports all the CloudFormation properties for AWS::LakeFormation::Resource.
	AWS_LakeFormation_Resource__PropertiesSlice = []string{
		AWS_LakeFormation_Resource__PropertiesMap.HybridAccessEnabled,
		AWS_LakeFormation_Resource__PropertiesMap.ResourceArn,
		AWS_LakeFormation_Resource__PropertiesMap.RoleArn,
		AWS_LakeFormation_Resource__PropertiesMap.UseServiceLinkedRole,
		AWS_LakeFormation_Resource__PropertiesMap.WithFederation,
	}
)

// AWS_LakeFormation_Resource is a binding for AWS::LakeFormation::Resource.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-resource.html
type AWS_LakeFormation_Resource struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// HybridAccessEnabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-resource.html#cfn-lakeformation-resource-hybridaccessenabled
	HybridAccessEnabled cfz.Expression[bool] `json:"HybridAccessEnabled,omitempty"`

	// ResourceArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-resource.html#cfn-lakeformation-resource-resourcearn
	ResourceArn cfz.Expression[string] `json:"ResourceArn,omitempty"`

	// RoleArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-resource.html#cfn-lakeformation-resource-rolearn
	RoleArn cfz.Expression[string] `json:"RoleArn,omitempty"`

	// UseServiceLinkedRole is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-resource.html#cfn-lakeformation-resource-useservicelinkedrole
	UseServiceLinkedRole cfz.Expression[bool] `json:"UseServiceLinkedRole,omitempty"`

	// WithFederation is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-resource.html#cfn-lakeformation-resource-withfederation
	WithFederation cfz.Expression[bool] `json:"WithFederation,omitempty"`
}

// New__AWS_LakeFormation_Resource initializes a new *AWS_LakeFormation_Resource.
func New__AWS_LakeFormation_Resource(logicalName string) *AWS_LakeFormation_Resource {
	return &AWS_LakeFormation_Resource{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_LakeFormation_Resource) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_LakeFormation_Resource) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_LakeFormation_Resource) GetType() string {
	return AWS_LakeFormation_Resource__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_LakeFormation_Resource) Set__LogicalName(v string) *AWS_LakeFormation_Resource {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_LakeFormation_Resource) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_LakeFormation_Resource {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_LakeFormation_Resource) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_LakeFormation_Resource {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_LakeFormation_Resource) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_LakeFormation_Resource {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_LakeFormation_Resource) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_LakeFormation_Resource {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_LakeFormation_Resource) Set__RequestedOutputs(v []cfz.Output) *AWS_LakeFormation_Resource {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_LakeFormation_Resource) Add__RequestedOutputs(v ...cfz.Output) *AWS_LakeFormation_Resource {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__HybridAccessEnabled updates property "HybridAccessEnabled".
func (t *AWS_LakeFormation_Resource) Set__HybridAccessEnabled(v cfz.Expression[bool]) *AWS_LakeFormation_Resource {
	t.HybridAccessEnabled = v
	return t
}

// SetV__HybridAccessEnabled updates property "HybridAccessEnabled".
func (t *AWS_LakeFormation_Resource) SetV__HybridAccessEnabled(v bool) *AWS_LakeFormation_Resource {
	t.HybridAccessEnabled = cfz.V(v)
	return t
}

// Set__ResourceArn updates property "ResourceArn".
func (t *AWS_LakeFormation_Resource) Set__ResourceArn(v cfz.Expression[string]) *AWS_LakeFormation_Resource {
	t.ResourceArn = v
	return t
}

// SetV__ResourceArn updates property "ResourceArn".
func (t *AWS_LakeFormation_Resource) SetV__ResourceArn(v string) *AWS_LakeFormation_Resource {
	t.ResourceArn = cfz.V(v)
	return t
}

// Set__RoleArn updates property "RoleArn".
func (t *AWS_LakeFormation_Resource) Set__RoleArn(v cfz.Expression[string]) *AWS_LakeFormation_Resource {
	t.RoleArn = v
	return t
}

// SetV__RoleArn updates property "RoleArn".
func (t *AWS_LakeFormation_Resource) SetV__RoleArn(v string) *AWS_LakeFormation_Resource {
	t.RoleArn = cfz.V(v)
	return t
}

// Set__UseServiceLinkedRole updates property "UseServiceLinkedRole".
func (t *AWS_LakeFormation_Resource) Set__UseServiceLinkedRole(v cfz.Expression[bool]) *AWS_LakeFormation_Resource {
	t.UseServiceLinkedRole = v
	return t
}

// SetV__UseServiceLinkedRole updates property "UseServiceLinkedRole".
func (t *AWS_LakeFormation_Resource) SetV__UseServiceLinkedRole(v bool) *AWS_LakeFormation_Resource {
	t.UseServiceLinkedRole = cfz.V(v)
	return t
}

// Set__WithFederation updates property "WithFederation".
func (t *AWS_LakeFormation_Resource) Set__WithFederation(v cfz.Expression[bool]) *AWS_LakeFormation_Resource {
	t.WithFederation = v
	return t
}

// SetV__WithFederation updates property "WithFederation".
func (t *AWS_LakeFormation_Resource) SetV__WithFederation(v bool) *AWS_LakeFormation_Resource {
	t.WithFederation = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_LakeFormation_Resource) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_LakeFormation_Resource) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_LakeFormation_Resource) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_LakeFormation_Resource

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_LakeFormation_Resource) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
