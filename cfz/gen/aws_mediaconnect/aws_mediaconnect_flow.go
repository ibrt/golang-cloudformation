// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_mediaconnect

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_MediaConnect_Flow)(nil)
	_ cfz.Resource                   = (*AWS_MediaConnect_Flow)(nil)
)

const (
	// AWS_MediaConnect_Flow__Type is the CloudFormation type for AWS::MediaConnect::Flow.
	AWS_MediaConnect_Flow__Type = "AWS::MediaConnect::Flow"
)

var (
	// AWS_MediaConnect_Flow__AttributesMap reports all the CloudFormation attributes for AWS::MediaConnect::Flow.
	AWS_MediaConnect_Flow__AttributesMap = struct {
		EgressIp                string
		FlowArn                 string
		FlowAvailabilityZone    string
		Source_IngestIp         string
		Source_SourceArn        string
		Source_SourceIngestPort string
	}{
		EgressIp:                "EgressIp",
		FlowArn:                 "FlowArn",
		FlowAvailabilityZone:    "FlowAvailabilityZone",
		Source_IngestIp:         "Source.IngestIp",
		Source_SourceArn:        "Source.SourceArn",
		Source_SourceIngestPort: "Source.SourceIngestPort",
	}

	// AWS_MediaConnect_Flow__AttributesSlice reports all the CloudFormation attributes for AWS::MediaConnect::Flow.
	AWS_MediaConnect_Flow__AttributesSlice = []string{
		AWS_MediaConnect_Flow__AttributesMap.EgressIp,
		AWS_MediaConnect_Flow__AttributesMap.FlowArn,
		AWS_MediaConnect_Flow__AttributesMap.FlowAvailabilityZone,
		AWS_MediaConnect_Flow__AttributesMap.Source_IngestIp,
		AWS_MediaConnect_Flow__AttributesMap.Source_SourceArn,
		AWS_MediaConnect_Flow__AttributesMap.Source_SourceIngestPort,
	}
)

var (
	// AWS_MediaConnect_Flow__PropertiesMap reports all the CloudFormation properties for AWS::MediaConnect::Flow.
	AWS_MediaConnect_Flow__PropertiesMap = struct {
		AvailabilityZone       string
		Maintenance            string
		MediaStreams           string
		Name                   string
		Source                 string
		SourceFailoverConfig   string
		SourceMonitoringConfig string
		VpcInterfaces          string
	}{
		AvailabilityZone:       "AvailabilityZone",
		Maintenance:            "Maintenance",
		MediaStreams:           "MediaStreams",
		Name:                   "Name",
		Source:                 "Source",
		SourceFailoverConfig:   "SourceFailoverConfig",
		SourceMonitoringConfig: "SourceMonitoringConfig",
		VpcInterfaces:          "VpcInterfaces",
	}

	// AWS_MediaConnect_Flow__PropertiesSlice reports all the CloudFormation properties for AWS::MediaConnect::Flow.
	AWS_MediaConnect_Flow__PropertiesSlice = []string{
		AWS_MediaConnect_Flow__PropertiesMap.AvailabilityZone,
		AWS_MediaConnect_Flow__PropertiesMap.Maintenance,
		AWS_MediaConnect_Flow__PropertiesMap.MediaStreams,
		AWS_MediaConnect_Flow__PropertiesMap.Name,
		AWS_MediaConnect_Flow__PropertiesMap.Source,
		AWS_MediaConnect_Flow__PropertiesMap.SourceFailoverConfig,
		AWS_MediaConnect_Flow__PropertiesMap.SourceMonitoringConfig,
		AWS_MediaConnect_Flow__PropertiesMap.VpcInterfaces,
	}
)

// AWS_MediaConnect_Flow is a binding for AWS::MediaConnect::Flow.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flow.html
type AWS_MediaConnect_Flow struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AvailabilityZone is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flow.html#cfn-mediaconnect-flow-availabilityzone
	AvailabilityZone cfz.Expression[string] `json:"AvailabilityZone,omitempty"`

	// Maintenance is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flow.html#cfn-mediaconnect-flow-maintenance
	Maintenance cfz.Expression[AWS_MediaConnect_Flow_Maintenance] `json:"Maintenance,omitempty"`

	// MediaStreams is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flow.html#cfn-mediaconnect-flow-mediastreams
	MediaStreams cfz.ExpressionSlice[AWS_MediaConnect_Flow_MediaStream] `json:"MediaStreams,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flow.html#cfn-mediaconnect-flow-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// Source is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flow.html#cfn-mediaconnect-flow-source
	Source cfz.Expression[AWS_MediaConnect_Flow_Source] `json:"Source,omitempty"`

	// SourceFailoverConfig is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flow.html#cfn-mediaconnect-flow-sourcefailoverconfig
	SourceFailoverConfig cfz.Expression[AWS_MediaConnect_Flow_FailoverConfig] `json:"SourceFailoverConfig,omitempty"`

	// SourceMonitoringConfig is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flow.html#cfn-mediaconnect-flow-sourcemonitoringconfig
	SourceMonitoringConfig cfz.Expression[AWS_MediaConnect_Flow_SourceMonitoringConfig] `json:"SourceMonitoringConfig,omitempty"`

	// VpcInterfaces is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flow.html#cfn-mediaconnect-flow-vpcinterfaces
	VpcInterfaces cfz.ExpressionSlice[AWS_MediaConnect_Flow_VpcInterface] `json:"VpcInterfaces,omitempty"`
}

// New__AWS_MediaConnect_Flow initializes a new *AWS_MediaConnect_Flow.
func New__AWS_MediaConnect_Flow(logicalName string) *AWS_MediaConnect_Flow {
	return &AWS_MediaConnect_Flow{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_MediaConnect_Flow) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_MediaConnect_Flow) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_MediaConnect_Flow) GetType() string {
	return AWS_MediaConnect_Flow__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_MediaConnect_Flow) Set__LogicalName(v string) *AWS_MediaConnect_Flow {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_MediaConnect_Flow) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_MediaConnect_Flow {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_MediaConnect_Flow) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_MediaConnect_Flow {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_MediaConnect_Flow) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_MediaConnect_Flow {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_MediaConnect_Flow) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_MediaConnect_Flow {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_MediaConnect_Flow) Set__RequestedOutputs(v []cfz.Output) *AWS_MediaConnect_Flow {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_MediaConnect_Flow) Add__RequestedOutputs(v ...cfz.Output) *AWS_MediaConnect_Flow {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AvailabilityZone updates property "AvailabilityZone".
func (t *AWS_MediaConnect_Flow) Set__AvailabilityZone(v cfz.Expression[string]) *AWS_MediaConnect_Flow {
	t.AvailabilityZone = v
	return t
}

// SetV__AvailabilityZone updates property "AvailabilityZone".
func (t *AWS_MediaConnect_Flow) SetV__AvailabilityZone(v string) *AWS_MediaConnect_Flow {
	t.AvailabilityZone = cfz.V(v)
	return t
}

// Set__Maintenance updates property "Maintenance".
func (t *AWS_MediaConnect_Flow) Set__Maintenance(v cfz.Expression[AWS_MediaConnect_Flow_Maintenance]) *AWS_MediaConnect_Flow {
	t.Maintenance = v
	return t
}

// SetV__Maintenance updates property "Maintenance".
func (t *AWS_MediaConnect_Flow) SetV__Maintenance(v AWS_MediaConnect_Flow_Maintenance) *AWS_MediaConnect_Flow {
	t.Maintenance = cfz.V(v)
	return t
}

// Set__MediaStreams updates property "MediaStreams".
func (t *AWS_MediaConnect_Flow) Set__MediaStreams(v cfz.ExpressionSlice[AWS_MediaConnect_Flow_MediaStream]) *AWS_MediaConnect_Flow {
	t.MediaStreams = v
	return t
}

// SetS__MediaStreams updates property "MediaStreams".
func (t *AWS_MediaConnect_Flow) SetS__MediaStreams(v ...cfz.Expression[AWS_MediaConnect_Flow_MediaStream]) *AWS_MediaConnect_Flow {
	t.MediaStreams = cfz.S(v...)
	return t
}

// SetSV__MediaStreams updates property "MediaStreams".
func (t *AWS_MediaConnect_Flow) SetSV__MediaStreams(v ...AWS_MediaConnect_Flow_MediaStream) *AWS_MediaConnect_Flow {
	t.MediaStreams = cfz.SV(v...)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_MediaConnect_Flow) Set__Name(v cfz.Expression[string]) *AWS_MediaConnect_Flow {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_MediaConnect_Flow) SetV__Name(v string) *AWS_MediaConnect_Flow {
	t.Name = cfz.V(v)
	return t
}

// Set__Source updates property "Source".
func (t *AWS_MediaConnect_Flow) Set__Source(v cfz.Expression[AWS_MediaConnect_Flow_Source]) *AWS_MediaConnect_Flow {
	t.Source = v
	return t
}

// SetV__Source updates property "Source".
func (t *AWS_MediaConnect_Flow) SetV__Source(v AWS_MediaConnect_Flow_Source) *AWS_MediaConnect_Flow {
	t.Source = cfz.V(v)
	return t
}

// Set__SourceFailoverConfig updates property "SourceFailoverConfig".
func (t *AWS_MediaConnect_Flow) Set__SourceFailoverConfig(v cfz.Expression[AWS_MediaConnect_Flow_FailoverConfig]) *AWS_MediaConnect_Flow {
	t.SourceFailoverConfig = v
	return t
}

// SetV__SourceFailoverConfig updates property "SourceFailoverConfig".
func (t *AWS_MediaConnect_Flow) SetV__SourceFailoverConfig(v AWS_MediaConnect_Flow_FailoverConfig) *AWS_MediaConnect_Flow {
	t.SourceFailoverConfig = cfz.V(v)
	return t
}

// Set__SourceMonitoringConfig updates property "SourceMonitoringConfig".
func (t *AWS_MediaConnect_Flow) Set__SourceMonitoringConfig(v cfz.Expression[AWS_MediaConnect_Flow_SourceMonitoringConfig]) *AWS_MediaConnect_Flow {
	t.SourceMonitoringConfig = v
	return t
}

// SetV__SourceMonitoringConfig updates property "SourceMonitoringConfig".
func (t *AWS_MediaConnect_Flow) SetV__SourceMonitoringConfig(v AWS_MediaConnect_Flow_SourceMonitoringConfig) *AWS_MediaConnect_Flow {
	t.SourceMonitoringConfig = cfz.V(v)
	return t
}

// Set__VpcInterfaces updates property "VpcInterfaces".
func (t *AWS_MediaConnect_Flow) Set__VpcInterfaces(v cfz.ExpressionSlice[AWS_MediaConnect_Flow_VpcInterface]) *AWS_MediaConnect_Flow {
	t.VpcInterfaces = v
	return t
}

// SetS__VpcInterfaces updates property "VpcInterfaces".
func (t *AWS_MediaConnect_Flow) SetS__VpcInterfaces(v ...cfz.Expression[AWS_MediaConnect_Flow_VpcInterface]) *AWS_MediaConnect_Flow {
	t.VpcInterfaces = cfz.S(v...)
	return t
}

// SetSV__VpcInterfaces updates property "VpcInterfaces".
func (t *AWS_MediaConnect_Flow) SetSV__VpcInterfaces(v ...AWS_MediaConnect_Flow_VpcInterface) *AWS_MediaConnect_Flow {
	t.VpcInterfaces = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_MediaConnect_Flow) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__EgressIp returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: EgressIp
func (t *AWS_MediaConnect_Flow) GetAtt__EgressIp() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaConnect_Flow__AttributesMap.EgressIp))
}

// GetAtt__FlowArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: FlowArn
func (t *AWS_MediaConnect_Flow) GetAtt__FlowArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaConnect_Flow__AttributesMap.FlowArn))
}

// GetAtt__FlowAvailabilityZone returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: FlowAvailabilityZone
func (t *AWS_MediaConnect_Flow) GetAtt__FlowAvailabilityZone() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaConnect_Flow__AttributesMap.FlowAvailabilityZone))
}

// GetAtt__Source_IngestIp returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Source.IngestIp
func (t *AWS_MediaConnect_Flow) GetAtt__Source_IngestIp() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaConnect_Flow__AttributesMap.Source_IngestIp))
}

// GetAtt__Source_SourceArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Source.SourceArn
func (t *AWS_MediaConnect_Flow) GetAtt__Source_SourceArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaConnect_Flow__AttributesMap.Source_SourceArn))
}

// GetAtt__Source_SourceIngestPort returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Source.SourceIngestPort
func (t *AWS_MediaConnect_Flow) GetAtt__Source_SourceIngestPort() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaConnect_Flow__AttributesMap.Source_SourceIngestPort))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_MediaConnect_Flow) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__EgressIp returns a conventionally configured output for an attribute of this resource.
// Attribute: EgressIp
func (t *AWS_MediaConnect_Flow) GetConventionalOutputAtt__EgressIp(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttEgressIp", t.GetAtt__EgressIp())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__FlowArn returns a conventionally configured output for an attribute of this resource.
// Attribute: FlowArn
func (t *AWS_MediaConnect_Flow) GetConventionalOutputAtt__FlowArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttFlowArn", t.GetAtt__FlowArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__FlowAvailabilityZone returns a conventionally configured output for an attribute of this resource.
// Attribute: FlowAvailabilityZone
func (t *AWS_MediaConnect_Flow) GetConventionalOutputAtt__FlowAvailabilityZone(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttFlowAvailabilityZone", t.GetAtt__FlowAvailabilityZone())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Source_IngestIp returns a conventionally configured output for an attribute of this resource.
// Attribute: Source.IngestIp
func (t *AWS_MediaConnect_Flow) GetConventionalOutputAtt__Source_IngestIp(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSourceIngestIp", t.GetAtt__Source_IngestIp())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Source_SourceArn returns a conventionally configured output for an attribute of this resource.
// Attribute: Source.SourceArn
func (t *AWS_MediaConnect_Flow) GetConventionalOutputAtt__Source_SourceArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSourceSourceArn", t.GetAtt__Source_SourceArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Source_SourceIngestPort returns a conventionally configured output for an attribute of this resource.
// Attribute: Source.SourceIngestPort
func (t *AWS_MediaConnect_Flow) GetConventionalOutputAtt__Source_SourceIngestPort(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSourceSourceIngestPort", t.GetAtt__Source_SourceIngestPort())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_MediaConnect_Flow) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_MediaConnect_Flow

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_MediaConnect_Flow) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
