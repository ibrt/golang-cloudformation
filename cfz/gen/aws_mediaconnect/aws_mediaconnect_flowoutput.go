// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_mediaconnect

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_MediaConnect_FlowOutput)(nil)
	_ cfz.Resource                   = (*AWS_MediaConnect_FlowOutput)(nil)
)

const (
	// AWS_MediaConnect_FlowOutput__Type is the CloudFormation type for AWS::MediaConnect::FlowOutput.
	AWS_MediaConnect_FlowOutput__Type = "AWS::MediaConnect::FlowOutput"
)

var (
	// AWS_MediaConnect_FlowOutput__AttributesMap reports all the CloudFormation attributes for AWS::MediaConnect::FlowOutput.
	AWS_MediaConnect_FlowOutput__AttributesMap = struct {
		OutputArn string
	}{
		OutputArn: "OutputArn",
	}

	// AWS_MediaConnect_FlowOutput__AttributesSlice reports all the CloudFormation attributes for AWS::MediaConnect::FlowOutput.
	AWS_MediaConnect_FlowOutput__AttributesSlice = []string{
		AWS_MediaConnect_FlowOutput__AttributesMap.OutputArn,
	}
)

var (
	// AWS_MediaConnect_FlowOutput__PropertiesMap reports all the CloudFormation properties for AWS::MediaConnect::FlowOutput.
	AWS_MediaConnect_FlowOutput__PropertiesMap = struct {
		CidrAllowList                   string
		Description                     string
		Destination                     string
		Encryption                      string
		FlowArn                         string
		MaxLatency                      string
		MediaStreamOutputConfigurations string
		MinLatency                      string
		Name                            string
		OutputStatus                    string
		Port                            string
		Protocol                        string
		RemoteId                        string
		SmoothingLatency                string
		StreamId                        string
		VpcInterfaceAttachment          string
	}{
		CidrAllowList:                   "CidrAllowList",
		Description:                     "Description",
		Destination:                     "Destination",
		Encryption:                      "Encryption",
		FlowArn:                         "FlowArn",
		MaxLatency:                      "MaxLatency",
		MediaStreamOutputConfigurations: "MediaStreamOutputConfigurations",
		MinLatency:                      "MinLatency",
		Name:                            "Name",
		OutputStatus:                    "OutputStatus",
		Port:                            "Port",
		Protocol:                        "Protocol",
		RemoteId:                        "RemoteId",
		SmoothingLatency:                "SmoothingLatency",
		StreamId:                        "StreamId",
		VpcInterfaceAttachment:          "VpcInterfaceAttachment",
	}

	// AWS_MediaConnect_FlowOutput__PropertiesSlice reports all the CloudFormation properties for AWS::MediaConnect::FlowOutput.
	AWS_MediaConnect_FlowOutput__PropertiesSlice = []string{
		AWS_MediaConnect_FlowOutput__PropertiesMap.CidrAllowList,
		AWS_MediaConnect_FlowOutput__PropertiesMap.Description,
		AWS_MediaConnect_FlowOutput__PropertiesMap.Destination,
		AWS_MediaConnect_FlowOutput__PropertiesMap.Encryption,
		AWS_MediaConnect_FlowOutput__PropertiesMap.FlowArn,
		AWS_MediaConnect_FlowOutput__PropertiesMap.MaxLatency,
		AWS_MediaConnect_FlowOutput__PropertiesMap.MediaStreamOutputConfigurations,
		AWS_MediaConnect_FlowOutput__PropertiesMap.MinLatency,
		AWS_MediaConnect_FlowOutput__PropertiesMap.Name,
		AWS_MediaConnect_FlowOutput__PropertiesMap.OutputStatus,
		AWS_MediaConnect_FlowOutput__PropertiesMap.Port,
		AWS_MediaConnect_FlowOutput__PropertiesMap.Protocol,
		AWS_MediaConnect_FlowOutput__PropertiesMap.RemoteId,
		AWS_MediaConnect_FlowOutput__PropertiesMap.SmoothingLatency,
		AWS_MediaConnect_FlowOutput__PropertiesMap.StreamId,
		AWS_MediaConnect_FlowOutput__PropertiesMap.VpcInterfaceAttachment,
	}
)

// AWS_MediaConnect_FlowOutput is a binding for AWS::MediaConnect::FlowOutput.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html
type AWS_MediaConnect_FlowOutput struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// CidrAllowList is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-cidrallowlist
	CidrAllowList cfz.ExpressionSlice[string] `json:"CidrAllowList,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// Destination is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-destination
	Destination cfz.Expression[string] `json:"Destination,omitempty"`

	// Encryption is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-encryption
	Encryption cfz.Expression[AWS_MediaConnect_FlowOutput_Encryption] `json:"Encryption,omitempty"`

	// FlowArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-flowarn
	FlowArn cfz.Expression[string] `json:"FlowArn,omitempty"`

	// MaxLatency is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-maxlatency
	MaxLatency cfz.Expression[int32] `json:"MaxLatency,omitempty"`

	// MediaStreamOutputConfigurations is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-mediastreamoutputconfigurations
	MediaStreamOutputConfigurations cfz.ExpressionSlice[AWS_MediaConnect_FlowOutput_MediaStreamOutputConfiguration] `json:"MediaStreamOutputConfigurations,omitempty"`

	// MinLatency is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-minlatency
	MinLatency cfz.Expression[int32] `json:"MinLatency,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// OutputStatus is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-outputstatus
	OutputStatus cfz.Expression[string] `json:"OutputStatus,omitempty"`

	// Port is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-port
	Port cfz.Expression[int32] `json:"Port,omitempty"`

	// Protocol is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-protocol
	Protocol cfz.Expression[string] `json:"Protocol,omitempty"`

	// RemoteId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-remoteid
	RemoteId cfz.Expression[string] `json:"RemoteId,omitempty"`

	// SmoothingLatency is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-smoothinglatency
	SmoothingLatency cfz.Expression[int32] `json:"SmoothingLatency,omitempty"`

	// StreamId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-streamid
	StreamId cfz.Expression[string] `json:"StreamId,omitempty"`

	// VpcInterfaceAttachment is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowoutput.html#cfn-mediaconnect-flowoutput-vpcinterfaceattachment
	VpcInterfaceAttachment cfz.Expression[AWS_MediaConnect_FlowOutput_VpcInterfaceAttachment] `json:"VpcInterfaceAttachment,omitempty"`
}

// New__AWS_MediaConnect_FlowOutput initializes a new *AWS_MediaConnect_FlowOutput.
func New__AWS_MediaConnect_FlowOutput(logicalName string) *AWS_MediaConnect_FlowOutput {
	return &AWS_MediaConnect_FlowOutput{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_MediaConnect_FlowOutput) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_MediaConnect_FlowOutput) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_MediaConnect_FlowOutput) GetType() string {
	return AWS_MediaConnect_FlowOutput__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_MediaConnect_FlowOutput) Set__LogicalName(v string) *AWS_MediaConnect_FlowOutput {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_MediaConnect_FlowOutput) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_MediaConnect_FlowOutput {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_MediaConnect_FlowOutput) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_MediaConnect_FlowOutput {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_MediaConnect_FlowOutput) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_MediaConnect_FlowOutput {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_MediaConnect_FlowOutput) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_MediaConnect_FlowOutput {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_MediaConnect_FlowOutput) Set__RequestedOutputs(v []cfz.Output) *AWS_MediaConnect_FlowOutput {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_MediaConnect_FlowOutput) Add__RequestedOutputs(v ...cfz.Output) *AWS_MediaConnect_FlowOutput {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__CidrAllowList updates property "CidrAllowList".
func (t *AWS_MediaConnect_FlowOutput) Set__CidrAllowList(v cfz.ExpressionSlice[string]) *AWS_MediaConnect_FlowOutput {
	t.CidrAllowList = v
	return t
}

// SetS__CidrAllowList updates property "CidrAllowList".
func (t *AWS_MediaConnect_FlowOutput) SetS__CidrAllowList(v ...cfz.Expression[string]) *AWS_MediaConnect_FlowOutput {
	t.CidrAllowList = cfz.S(v...)
	return t
}

// SetSV__CidrAllowList updates property "CidrAllowList".
func (t *AWS_MediaConnect_FlowOutput) SetSV__CidrAllowList(v ...string) *AWS_MediaConnect_FlowOutput {
	t.CidrAllowList = cfz.SV(v...)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_MediaConnect_FlowOutput) Set__Description(v cfz.Expression[string]) *AWS_MediaConnect_FlowOutput {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_MediaConnect_FlowOutput) SetV__Description(v string) *AWS_MediaConnect_FlowOutput {
	t.Description = cfz.V(v)
	return t
}

// Set__Destination updates property "Destination".
func (t *AWS_MediaConnect_FlowOutput) Set__Destination(v cfz.Expression[string]) *AWS_MediaConnect_FlowOutput {
	t.Destination = v
	return t
}

// SetV__Destination updates property "Destination".
func (t *AWS_MediaConnect_FlowOutput) SetV__Destination(v string) *AWS_MediaConnect_FlowOutput {
	t.Destination = cfz.V(v)
	return t
}

// Set__Encryption updates property "Encryption".
func (t *AWS_MediaConnect_FlowOutput) Set__Encryption(v cfz.Expression[AWS_MediaConnect_FlowOutput_Encryption]) *AWS_MediaConnect_FlowOutput {
	t.Encryption = v
	return t
}

// SetV__Encryption updates property "Encryption".
func (t *AWS_MediaConnect_FlowOutput) SetV__Encryption(v AWS_MediaConnect_FlowOutput_Encryption) *AWS_MediaConnect_FlowOutput {
	t.Encryption = cfz.V(v)
	return t
}

// Set__FlowArn updates property "FlowArn".
func (t *AWS_MediaConnect_FlowOutput) Set__FlowArn(v cfz.Expression[string]) *AWS_MediaConnect_FlowOutput {
	t.FlowArn = v
	return t
}

// SetV__FlowArn updates property "FlowArn".
func (t *AWS_MediaConnect_FlowOutput) SetV__FlowArn(v string) *AWS_MediaConnect_FlowOutput {
	t.FlowArn = cfz.V(v)
	return t
}

// Set__MaxLatency updates property "MaxLatency".
func (t *AWS_MediaConnect_FlowOutput) Set__MaxLatency(v cfz.Expression[int32]) *AWS_MediaConnect_FlowOutput {
	t.MaxLatency = v
	return t
}

// SetV__MaxLatency updates property "MaxLatency".
func (t *AWS_MediaConnect_FlowOutput) SetV__MaxLatency(v int32) *AWS_MediaConnect_FlowOutput {
	t.MaxLatency = cfz.V(v)
	return t
}

// Set__MediaStreamOutputConfigurations updates property "MediaStreamOutputConfigurations".
func (t *AWS_MediaConnect_FlowOutput) Set__MediaStreamOutputConfigurations(v cfz.ExpressionSlice[AWS_MediaConnect_FlowOutput_MediaStreamOutputConfiguration]) *AWS_MediaConnect_FlowOutput {
	t.MediaStreamOutputConfigurations = v
	return t
}

// SetS__MediaStreamOutputConfigurations updates property "MediaStreamOutputConfigurations".
func (t *AWS_MediaConnect_FlowOutput) SetS__MediaStreamOutputConfigurations(v ...cfz.Expression[AWS_MediaConnect_FlowOutput_MediaStreamOutputConfiguration]) *AWS_MediaConnect_FlowOutput {
	t.MediaStreamOutputConfigurations = cfz.S(v...)
	return t
}

// SetSV__MediaStreamOutputConfigurations updates property "MediaStreamOutputConfigurations".
func (t *AWS_MediaConnect_FlowOutput) SetSV__MediaStreamOutputConfigurations(v ...AWS_MediaConnect_FlowOutput_MediaStreamOutputConfiguration) *AWS_MediaConnect_FlowOutput {
	t.MediaStreamOutputConfigurations = cfz.SV(v...)
	return t
}

// Set__MinLatency updates property "MinLatency".
func (t *AWS_MediaConnect_FlowOutput) Set__MinLatency(v cfz.Expression[int32]) *AWS_MediaConnect_FlowOutput {
	t.MinLatency = v
	return t
}

// SetV__MinLatency updates property "MinLatency".
func (t *AWS_MediaConnect_FlowOutput) SetV__MinLatency(v int32) *AWS_MediaConnect_FlowOutput {
	t.MinLatency = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_MediaConnect_FlowOutput) Set__Name(v cfz.Expression[string]) *AWS_MediaConnect_FlowOutput {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_MediaConnect_FlowOutput) SetV__Name(v string) *AWS_MediaConnect_FlowOutput {
	t.Name = cfz.V(v)
	return t
}

// Set__OutputStatus updates property "OutputStatus".
func (t *AWS_MediaConnect_FlowOutput) Set__OutputStatus(v cfz.Expression[string]) *AWS_MediaConnect_FlowOutput {
	t.OutputStatus = v
	return t
}

// SetV__OutputStatus updates property "OutputStatus".
func (t *AWS_MediaConnect_FlowOutput) SetV__OutputStatus(v string) *AWS_MediaConnect_FlowOutput {
	t.OutputStatus = cfz.V(v)
	return t
}

// Set__Port updates property "Port".
func (t *AWS_MediaConnect_FlowOutput) Set__Port(v cfz.Expression[int32]) *AWS_MediaConnect_FlowOutput {
	t.Port = v
	return t
}

// SetV__Port updates property "Port".
func (t *AWS_MediaConnect_FlowOutput) SetV__Port(v int32) *AWS_MediaConnect_FlowOutput {
	t.Port = cfz.V(v)
	return t
}

// Set__Protocol updates property "Protocol".
func (t *AWS_MediaConnect_FlowOutput) Set__Protocol(v cfz.Expression[string]) *AWS_MediaConnect_FlowOutput {
	t.Protocol = v
	return t
}

// SetV__Protocol updates property "Protocol".
func (t *AWS_MediaConnect_FlowOutput) SetV__Protocol(v string) *AWS_MediaConnect_FlowOutput {
	t.Protocol = cfz.V(v)
	return t
}

// Set__RemoteId updates property "RemoteId".
func (t *AWS_MediaConnect_FlowOutput) Set__RemoteId(v cfz.Expression[string]) *AWS_MediaConnect_FlowOutput {
	t.RemoteId = v
	return t
}

// SetV__RemoteId updates property "RemoteId".
func (t *AWS_MediaConnect_FlowOutput) SetV__RemoteId(v string) *AWS_MediaConnect_FlowOutput {
	t.RemoteId = cfz.V(v)
	return t
}

// Set__SmoothingLatency updates property "SmoothingLatency".
func (t *AWS_MediaConnect_FlowOutput) Set__SmoothingLatency(v cfz.Expression[int32]) *AWS_MediaConnect_FlowOutput {
	t.SmoothingLatency = v
	return t
}

// SetV__SmoothingLatency updates property "SmoothingLatency".
func (t *AWS_MediaConnect_FlowOutput) SetV__SmoothingLatency(v int32) *AWS_MediaConnect_FlowOutput {
	t.SmoothingLatency = cfz.V(v)
	return t
}

// Set__StreamId updates property "StreamId".
func (t *AWS_MediaConnect_FlowOutput) Set__StreamId(v cfz.Expression[string]) *AWS_MediaConnect_FlowOutput {
	t.StreamId = v
	return t
}

// SetV__StreamId updates property "StreamId".
func (t *AWS_MediaConnect_FlowOutput) SetV__StreamId(v string) *AWS_MediaConnect_FlowOutput {
	t.StreamId = cfz.V(v)
	return t
}

// Set__VpcInterfaceAttachment updates property "VpcInterfaceAttachment".
func (t *AWS_MediaConnect_FlowOutput) Set__VpcInterfaceAttachment(v cfz.Expression[AWS_MediaConnect_FlowOutput_VpcInterfaceAttachment]) *AWS_MediaConnect_FlowOutput {
	t.VpcInterfaceAttachment = v
	return t
}

// SetV__VpcInterfaceAttachment updates property "VpcInterfaceAttachment".
func (t *AWS_MediaConnect_FlowOutput) SetV__VpcInterfaceAttachment(v AWS_MediaConnect_FlowOutput_VpcInterfaceAttachment) *AWS_MediaConnect_FlowOutput {
	t.VpcInterfaceAttachment = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_MediaConnect_FlowOutput) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__OutputArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: OutputArn
func (t *AWS_MediaConnect_FlowOutput) GetAtt__OutputArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaConnect_FlowOutput__AttributesMap.OutputArn))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_MediaConnect_FlowOutput) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__OutputArn returns a conventionally configured output for an attribute of this resource.
// Attribute: OutputArn
func (t *AWS_MediaConnect_FlowOutput) GetConventionalOutputAtt__OutputArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttOutputArn", t.GetAtt__OutputArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_MediaConnect_FlowOutput) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_MediaConnect_FlowOutput

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_MediaConnect_FlowOutput) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
