// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_mediaconnect

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_MediaConnect_FlowSource)(nil)
	_ cfz.Resource                   = (*AWS_MediaConnect_FlowSource)(nil)
)

const (
	// AWS_MediaConnect_FlowSource__Type is the CloudFormation type for AWS::MediaConnect::FlowSource.
	AWS_MediaConnect_FlowSource__Type = "AWS::MediaConnect::FlowSource"
)

var (
	// AWS_MediaConnect_FlowSource__AttributesMap reports all the CloudFormation attributes for AWS::MediaConnect::FlowSource.
	AWS_MediaConnect_FlowSource__AttributesMap = struct {
		IngestIp         string
		SourceArn        string
		SourceIngestPort string
	}{
		IngestIp:         "IngestIp",
		SourceArn:        "SourceArn",
		SourceIngestPort: "SourceIngestPort",
	}

	// AWS_MediaConnect_FlowSource__AttributesSlice reports all the CloudFormation attributes for AWS::MediaConnect::FlowSource.
	AWS_MediaConnect_FlowSource__AttributesSlice = []string{
		AWS_MediaConnect_FlowSource__AttributesMap.IngestIp,
		AWS_MediaConnect_FlowSource__AttributesMap.SourceArn,
		AWS_MediaConnect_FlowSource__AttributesMap.SourceIngestPort,
	}
)

var (
	// AWS_MediaConnect_FlowSource__PropertiesMap reports all the CloudFormation properties for AWS::MediaConnect::FlowSource.
	AWS_MediaConnect_FlowSource__PropertiesMap = struct {
		Decryption            string
		Description           string
		EntitlementArn        string
		FlowArn               string
		GatewayBridgeSource   string
		IngestPort            string
		MaxBitrate            string
		MaxLatency            string
		MinLatency            string
		Name                  string
		Protocol              string
		SenderControlPort     string
		SenderIpAddress       string
		SourceListenerAddress string
		SourceListenerPort    string
		StreamId              string
		VpcInterfaceName      string
		WhitelistCidr         string
	}{
		Decryption:            "Decryption",
		Description:           "Description",
		EntitlementArn:        "EntitlementArn",
		FlowArn:               "FlowArn",
		GatewayBridgeSource:   "GatewayBridgeSource",
		IngestPort:            "IngestPort",
		MaxBitrate:            "MaxBitrate",
		MaxLatency:            "MaxLatency",
		MinLatency:            "MinLatency",
		Name:                  "Name",
		Protocol:              "Protocol",
		SenderControlPort:     "SenderControlPort",
		SenderIpAddress:       "SenderIpAddress",
		SourceListenerAddress: "SourceListenerAddress",
		SourceListenerPort:    "SourceListenerPort",
		StreamId:              "StreamId",
		VpcInterfaceName:      "VpcInterfaceName",
		WhitelistCidr:         "WhitelistCidr",
	}

	// AWS_MediaConnect_FlowSource__PropertiesSlice reports all the CloudFormation properties for AWS::MediaConnect::FlowSource.
	AWS_MediaConnect_FlowSource__PropertiesSlice = []string{
		AWS_MediaConnect_FlowSource__PropertiesMap.Decryption,
		AWS_MediaConnect_FlowSource__PropertiesMap.Description,
		AWS_MediaConnect_FlowSource__PropertiesMap.EntitlementArn,
		AWS_MediaConnect_FlowSource__PropertiesMap.FlowArn,
		AWS_MediaConnect_FlowSource__PropertiesMap.GatewayBridgeSource,
		AWS_MediaConnect_FlowSource__PropertiesMap.IngestPort,
		AWS_MediaConnect_FlowSource__PropertiesMap.MaxBitrate,
		AWS_MediaConnect_FlowSource__PropertiesMap.MaxLatency,
		AWS_MediaConnect_FlowSource__PropertiesMap.MinLatency,
		AWS_MediaConnect_FlowSource__PropertiesMap.Name,
		AWS_MediaConnect_FlowSource__PropertiesMap.Protocol,
		AWS_MediaConnect_FlowSource__PropertiesMap.SenderControlPort,
		AWS_MediaConnect_FlowSource__PropertiesMap.SenderIpAddress,
		AWS_MediaConnect_FlowSource__PropertiesMap.SourceListenerAddress,
		AWS_MediaConnect_FlowSource__PropertiesMap.SourceListenerPort,
		AWS_MediaConnect_FlowSource__PropertiesMap.StreamId,
		AWS_MediaConnect_FlowSource__PropertiesMap.VpcInterfaceName,
		AWS_MediaConnect_FlowSource__PropertiesMap.WhitelistCidr,
	}
)

// AWS_MediaConnect_FlowSource is a binding for AWS::MediaConnect::FlowSource.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html
type AWS_MediaConnect_FlowSource struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Decryption is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-decryption
	Decryption cfz.Expression[AWS_MediaConnect_FlowSource_Encryption] `json:"Decryption,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// EntitlementArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-entitlementarn
	EntitlementArn cfz.Expression[string] `json:"EntitlementArn,omitempty"`

	// FlowArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-flowarn
	FlowArn cfz.Expression[string] `json:"FlowArn,omitempty"`

	// GatewayBridgeSource is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-gatewaybridgesource
	GatewayBridgeSource cfz.Expression[AWS_MediaConnect_FlowSource_GatewayBridgeSource] `json:"GatewayBridgeSource,omitempty"`

	// IngestPort is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-ingestport
	IngestPort cfz.Expression[int32] `json:"IngestPort,omitempty"`

	// MaxBitrate is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-maxbitrate
	MaxBitrate cfz.Expression[int32] `json:"MaxBitrate,omitempty"`

	// MaxLatency is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-maxlatency
	MaxLatency cfz.Expression[int32] `json:"MaxLatency,omitempty"`

	// MinLatency is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-minlatency
	MinLatency cfz.Expression[int32] `json:"MinLatency,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// Protocol is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-protocol
	Protocol cfz.Expression[string] `json:"Protocol,omitempty"`

	// SenderControlPort is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-sendercontrolport
	SenderControlPort cfz.Expression[int32] `json:"SenderControlPort,omitempty"`

	// SenderIpAddress is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-senderipaddress
	SenderIpAddress cfz.Expression[string] `json:"SenderIpAddress,omitempty"`

	// SourceListenerAddress is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-sourcelisteneraddress
	SourceListenerAddress cfz.Expression[string] `json:"SourceListenerAddress,omitempty"`

	// SourceListenerPort is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-sourcelistenerport
	SourceListenerPort cfz.Expression[int32] `json:"SourceListenerPort,omitempty"`

	// StreamId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-streamid
	StreamId cfz.Expression[string] `json:"StreamId,omitempty"`

	// VpcInterfaceName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-vpcinterfacename
	VpcInterfaceName cfz.Expression[string] `json:"VpcInterfaceName,omitempty"`

	// WhitelistCidr is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconnect-flowsource.html#cfn-mediaconnect-flowsource-whitelistcidr
	WhitelistCidr cfz.Expression[string] `json:"WhitelistCidr,omitempty"`
}

// New__AWS_MediaConnect_FlowSource initializes a new *AWS_MediaConnect_FlowSource.
func New__AWS_MediaConnect_FlowSource(logicalName string) *AWS_MediaConnect_FlowSource {
	return &AWS_MediaConnect_FlowSource{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_MediaConnect_FlowSource) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_MediaConnect_FlowSource) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_MediaConnect_FlowSource) GetType() string {
	return AWS_MediaConnect_FlowSource__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_MediaConnect_FlowSource) Set__LogicalName(v string) *AWS_MediaConnect_FlowSource {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_MediaConnect_FlowSource) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_MediaConnect_FlowSource {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_MediaConnect_FlowSource) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_MediaConnect_FlowSource {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_MediaConnect_FlowSource) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_MediaConnect_FlowSource {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_MediaConnect_FlowSource) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_MediaConnect_FlowSource {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_MediaConnect_FlowSource) Set__RequestedOutputs(v []cfz.Output) *AWS_MediaConnect_FlowSource {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_MediaConnect_FlowSource) Add__RequestedOutputs(v ...cfz.Output) *AWS_MediaConnect_FlowSource {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Decryption updates property "Decryption".
func (t *AWS_MediaConnect_FlowSource) Set__Decryption(v cfz.Expression[AWS_MediaConnect_FlowSource_Encryption]) *AWS_MediaConnect_FlowSource {
	t.Decryption = v
	return t
}

// SetV__Decryption updates property "Decryption".
func (t *AWS_MediaConnect_FlowSource) SetV__Decryption(v AWS_MediaConnect_FlowSource_Encryption) *AWS_MediaConnect_FlowSource {
	t.Decryption = cfz.V(v)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_MediaConnect_FlowSource) Set__Description(v cfz.Expression[string]) *AWS_MediaConnect_FlowSource {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_MediaConnect_FlowSource) SetV__Description(v string) *AWS_MediaConnect_FlowSource {
	t.Description = cfz.V(v)
	return t
}

// Set__EntitlementArn updates property "EntitlementArn".
func (t *AWS_MediaConnect_FlowSource) Set__EntitlementArn(v cfz.Expression[string]) *AWS_MediaConnect_FlowSource {
	t.EntitlementArn = v
	return t
}

// SetV__EntitlementArn updates property "EntitlementArn".
func (t *AWS_MediaConnect_FlowSource) SetV__EntitlementArn(v string) *AWS_MediaConnect_FlowSource {
	t.EntitlementArn = cfz.V(v)
	return t
}

// Set__FlowArn updates property "FlowArn".
func (t *AWS_MediaConnect_FlowSource) Set__FlowArn(v cfz.Expression[string]) *AWS_MediaConnect_FlowSource {
	t.FlowArn = v
	return t
}

// SetV__FlowArn updates property "FlowArn".
func (t *AWS_MediaConnect_FlowSource) SetV__FlowArn(v string) *AWS_MediaConnect_FlowSource {
	t.FlowArn = cfz.V(v)
	return t
}

// Set__GatewayBridgeSource updates property "GatewayBridgeSource".
func (t *AWS_MediaConnect_FlowSource) Set__GatewayBridgeSource(v cfz.Expression[AWS_MediaConnect_FlowSource_GatewayBridgeSource]) *AWS_MediaConnect_FlowSource {
	t.GatewayBridgeSource = v
	return t
}

// SetV__GatewayBridgeSource updates property "GatewayBridgeSource".
func (t *AWS_MediaConnect_FlowSource) SetV__GatewayBridgeSource(v AWS_MediaConnect_FlowSource_GatewayBridgeSource) *AWS_MediaConnect_FlowSource {
	t.GatewayBridgeSource = cfz.V(v)
	return t
}

// Set__IngestPort updates property "IngestPort".
func (t *AWS_MediaConnect_FlowSource) Set__IngestPort(v cfz.Expression[int32]) *AWS_MediaConnect_FlowSource {
	t.IngestPort = v
	return t
}

// SetV__IngestPort updates property "IngestPort".
func (t *AWS_MediaConnect_FlowSource) SetV__IngestPort(v int32) *AWS_MediaConnect_FlowSource {
	t.IngestPort = cfz.V(v)
	return t
}

// Set__MaxBitrate updates property "MaxBitrate".
func (t *AWS_MediaConnect_FlowSource) Set__MaxBitrate(v cfz.Expression[int32]) *AWS_MediaConnect_FlowSource {
	t.MaxBitrate = v
	return t
}

// SetV__MaxBitrate updates property "MaxBitrate".
func (t *AWS_MediaConnect_FlowSource) SetV__MaxBitrate(v int32) *AWS_MediaConnect_FlowSource {
	t.MaxBitrate = cfz.V(v)
	return t
}

// Set__MaxLatency updates property "MaxLatency".
func (t *AWS_MediaConnect_FlowSource) Set__MaxLatency(v cfz.Expression[int32]) *AWS_MediaConnect_FlowSource {
	t.MaxLatency = v
	return t
}

// SetV__MaxLatency updates property "MaxLatency".
func (t *AWS_MediaConnect_FlowSource) SetV__MaxLatency(v int32) *AWS_MediaConnect_FlowSource {
	t.MaxLatency = cfz.V(v)
	return t
}

// Set__MinLatency updates property "MinLatency".
func (t *AWS_MediaConnect_FlowSource) Set__MinLatency(v cfz.Expression[int32]) *AWS_MediaConnect_FlowSource {
	t.MinLatency = v
	return t
}

// SetV__MinLatency updates property "MinLatency".
func (t *AWS_MediaConnect_FlowSource) SetV__MinLatency(v int32) *AWS_MediaConnect_FlowSource {
	t.MinLatency = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_MediaConnect_FlowSource) Set__Name(v cfz.Expression[string]) *AWS_MediaConnect_FlowSource {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_MediaConnect_FlowSource) SetV__Name(v string) *AWS_MediaConnect_FlowSource {
	t.Name = cfz.V(v)
	return t
}

// Set__Protocol updates property "Protocol".
func (t *AWS_MediaConnect_FlowSource) Set__Protocol(v cfz.Expression[string]) *AWS_MediaConnect_FlowSource {
	t.Protocol = v
	return t
}

// SetV__Protocol updates property "Protocol".
func (t *AWS_MediaConnect_FlowSource) SetV__Protocol(v string) *AWS_MediaConnect_FlowSource {
	t.Protocol = cfz.V(v)
	return t
}

// Set__SenderControlPort updates property "SenderControlPort".
func (t *AWS_MediaConnect_FlowSource) Set__SenderControlPort(v cfz.Expression[int32]) *AWS_MediaConnect_FlowSource {
	t.SenderControlPort = v
	return t
}

// SetV__SenderControlPort updates property "SenderControlPort".
func (t *AWS_MediaConnect_FlowSource) SetV__SenderControlPort(v int32) *AWS_MediaConnect_FlowSource {
	t.SenderControlPort = cfz.V(v)
	return t
}

// Set__SenderIpAddress updates property "SenderIpAddress".
func (t *AWS_MediaConnect_FlowSource) Set__SenderIpAddress(v cfz.Expression[string]) *AWS_MediaConnect_FlowSource {
	t.SenderIpAddress = v
	return t
}

// SetV__SenderIpAddress updates property "SenderIpAddress".
func (t *AWS_MediaConnect_FlowSource) SetV__SenderIpAddress(v string) *AWS_MediaConnect_FlowSource {
	t.SenderIpAddress = cfz.V(v)
	return t
}

// Set__SourceListenerAddress updates property "SourceListenerAddress".
func (t *AWS_MediaConnect_FlowSource) Set__SourceListenerAddress(v cfz.Expression[string]) *AWS_MediaConnect_FlowSource {
	t.SourceListenerAddress = v
	return t
}

// SetV__SourceListenerAddress updates property "SourceListenerAddress".
func (t *AWS_MediaConnect_FlowSource) SetV__SourceListenerAddress(v string) *AWS_MediaConnect_FlowSource {
	t.SourceListenerAddress = cfz.V(v)
	return t
}

// Set__SourceListenerPort updates property "SourceListenerPort".
func (t *AWS_MediaConnect_FlowSource) Set__SourceListenerPort(v cfz.Expression[int32]) *AWS_MediaConnect_FlowSource {
	t.SourceListenerPort = v
	return t
}

// SetV__SourceListenerPort updates property "SourceListenerPort".
func (t *AWS_MediaConnect_FlowSource) SetV__SourceListenerPort(v int32) *AWS_MediaConnect_FlowSource {
	t.SourceListenerPort = cfz.V(v)
	return t
}

// Set__StreamId updates property "StreamId".
func (t *AWS_MediaConnect_FlowSource) Set__StreamId(v cfz.Expression[string]) *AWS_MediaConnect_FlowSource {
	t.StreamId = v
	return t
}

// SetV__StreamId updates property "StreamId".
func (t *AWS_MediaConnect_FlowSource) SetV__StreamId(v string) *AWS_MediaConnect_FlowSource {
	t.StreamId = cfz.V(v)
	return t
}

// Set__VpcInterfaceName updates property "VpcInterfaceName".
func (t *AWS_MediaConnect_FlowSource) Set__VpcInterfaceName(v cfz.Expression[string]) *AWS_MediaConnect_FlowSource {
	t.VpcInterfaceName = v
	return t
}

// SetV__VpcInterfaceName updates property "VpcInterfaceName".
func (t *AWS_MediaConnect_FlowSource) SetV__VpcInterfaceName(v string) *AWS_MediaConnect_FlowSource {
	t.VpcInterfaceName = cfz.V(v)
	return t
}

// Set__WhitelistCidr updates property "WhitelistCidr".
func (t *AWS_MediaConnect_FlowSource) Set__WhitelistCidr(v cfz.Expression[string]) *AWS_MediaConnect_FlowSource {
	t.WhitelistCidr = v
	return t
}

// SetV__WhitelistCidr updates property "WhitelistCidr".
func (t *AWS_MediaConnect_FlowSource) SetV__WhitelistCidr(v string) *AWS_MediaConnect_FlowSource {
	t.WhitelistCidr = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_MediaConnect_FlowSource) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__IngestIp returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: IngestIp
func (t *AWS_MediaConnect_FlowSource) GetAtt__IngestIp() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaConnect_FlowSource__AttributesMap.IngestIp))
}

// GetAtt__SourceArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: SourceArn
func (t *AWS_MediaConnect_FlowSource) GetAtt__SourceArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaConnect_FlowSource__AttributesMap.SourceArn))
}

// GetAtt__SourceIngestPort returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: SourceIngestPort
func (t *AWS_MediaConnect_FlowSource) GetAtt__SourceIngestPort() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaConnect_FlowSource__AttributesMap.SourceIngestPort))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_MediaConnect_FlowSource) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__IngestIp returns a conventionally configured output for an attribute of this resource.
// Attribute: IngestIp
func (t *AWS_MediaConnect_FlowSource) GetConventionalOutputAtt__IngestIp(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIngestIp", t.GetAtt__IngestIp())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__SourceArn returns a conventionally configured output for an attribute of this resource.
// Attribute: SourceArn
func (t *AWS_MediaConnect_FlowSource) GetConventionalOutputAtt__SourceArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSourceArn", t.GetAtt__SourceArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__SourceIngestPort returns a conventionally configured output for an attribute of this resource.
// Attribute: SourceIngestPort
func (t *AWS_MediaConnect_FlowSource) GetConventionalOutputAtt__SourceIngestPort(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSourceIngestPort", t.GetAtt__SourceIngestPort())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_MediaConnect_FlowSource) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_MediaConnect_FlowSource

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_MediaConnect_FlowSource) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
