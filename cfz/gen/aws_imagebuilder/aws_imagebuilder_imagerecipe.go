// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_imagebuilder

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_ImageBuilder_ImageRecipe)(nil)
	_ cfz.Resource                   = (*AWS_ImageBuilder_ImageRecipe)(nil)
)

const (
	// AWS_ImageBuilder_ImageRecipe__Type is the CloudFormation type for AWS::ImageBuilder::ImageRecipe.
	AWS_ImageBuilder_ImageRecipe__Type = "AWS::ImageBuilder::ImageRecipe"
)

var (
	// AWS_ImageBuilder_ImageRecipe__AttributesMap reports all the CloudFormation attributes for AWS::ImageBuilder::ImageRecipe.
	AWS_ImageBuilder_ImageRecipe__AttributesMap = struct {
		Arn  string
		Name string
	}{
		Arn:  "Arn",
		Name: "Name",
	}

	// AWS_ImageBuilder_ImageRecipe__AttributesSlice reports all the CloudFormation attributes for AWS::ImageBuilder::ImageRecipe.
	AWS_ImageBuilder_ImageRecipe__AttributesSlice = []string{
		AWS_ImageBuilder_ImageRecipe__AttributesMap.Arn,
		AWS_ImageBuilder_ImageRecipe__AttributesMap.Name,
	}
)

var (
	// AWS_ImageBuilder_ImageRecipe__PropertiesMap reports all the CloudFormation properties for AWS::ImageBuilder::ImageRecipe.
	AWS_ImageBuilder_ImageRecipe__PropertiesMap = struct {
		AdditionalInstanceConfiguration string
		BlockDeviceMappings             string
		Components                      string
		Description                     string
		Name                            string
		ParentImage                     string
		Tags                            string
		Version                         string
		WorkingDirectory                string
	}{
		AdditionalInstanceConfiguration: "AdditionalInstanceConfiguration",
		BlockDeviceMappings:             "BlockDeviceMappings",
		Components:                      "Components",
		Description:                     "Description",
		Name:                            "Name",
		ParentImage:                     "ParentImage",
		Tags:                            "Tags",
		Version:                         "Version",
		WorkingDirectory:                "WorkingDirectory",
	}

	// AWS_ImageBuilder_ImageRecipe__PropertiesSlice reports all the CloudFormation properties for AWS::ImageBuilder::ImageRecipe.
	AWS_ImageBuilder_ImageRecipe__PropertiesSlice = []string{
		AWS_ImageBuilder_ImageRecipe__PropertiesMap.AdditionalInstanceConfiguration,
		AWS_ImageBuilder_ImageRecipe__PropertiesMap.BlockDeviceMappings,
		AWS_ImageBuilder_ImageRecipe__PropertiesMap.Components,
		AWS_ImageBuilder_ImageRecipe__PropertiesMap.Description,
		AWS_ImageBuilder_ImageRecipe__PropertiesMap.Name,
		AWS_ImageBuilder_ImageRecipe__PropertiesMap.ParentImage,
		AWS_ImageBuilder_ImageRecipe__PropertiesMap.Tags,
		AWS_ImageBuilder_ImageRecipe__PropertiesMap.Version,
		AWS_ImageBuilder_ImageRecipe__PropertiesMap.WorkingDirectory,
	}
)

// AWS_ImageBuilder_ImageRecipe is a binding for AWS::ImageBuilder::ImageRecipe.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-imagerecipe.html
type AWS_ImageBuilder_ImageRecipe struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AdditionalInstanceConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-imagerecipe.html#cfn-imagebuilder-imagerecipe-additionalinstanceconfiguration
	AdditionalInstanceConfiguration cfz.Expression[AWS_ImageBuilder_ImageRecipe_AdditionalInstanceConfiguration] `json:"AdditionalInstanceConfiguration,omitempty"`

	// BlockDeviceMappings is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-imagerecipe.html#cfn-imagebuilder-imagerecipe-blockdevicemappings
	BlockDeviceMappings cfz.ExpressionSlice[AWS_ImageBuilder_ImageRecipe_InstanceBlockDeviceMapping] `json:"BlockDeviceMappings,omitempty"`

	// Components is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-imagerecipe.html#cfn-imagebuilder-imagerecipe-components
	Components cfz.ExpressionSlice[AWS_ImageBuilder_ImageRecipe_ComponentConfiguration] `json:"Components,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-imagerecipe.html#cfn-imagebuilder-imagerecipe-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-imagerecipe.html#cfn-imagebuilder-imagerecipe-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// ParentImage is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-imagerecipe.html#cfn-imagebuilder-imagerecipe-parentimage
	ParentImage cfz.Expression[string] `json:"ParentImage,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-imagerecipe.html#cfn-imagebuilder-imagerecipe-tags
	Tags cfz.ExpressionMap[string] `json:"Tags,omitempty"`

	// Version is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-imagerecipe.html#cfn-imagebuilder-imagerecipe-version
	Version cfz.Expression[string] `json:"Version,omitempty"`

	// WorkingDirectory is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-imagerecipe.html#cfn-imagebuilder-imagerecipe-workingdirectory
	WorkingDirectory cfz.Expression[string] `json:"WorkingDirectory,omitempty"`
}

// New__AWS_ImageBuilder_ImageRecipe initializes a new *AWS_ImageBuilder_ImageRecipe.
func New__AWS_ImageBuilder_ImageRecipe(logicalName string) *AWS_ImageBuilder_ImageRecipe {
	return &AWS_ImageBuilder_ImageRecipe{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_ImageBuilder_ImageRecipe) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_ImageBuilder_ImageRecipe) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_ImageBuilder_ImageRecipe) GetType() string {
	return AWS_ImageBuilder_ImageRecipe__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_ImageBuilder_ImageRecipe) Set__LogicalName(v string) *AWS_ImageBuilder_ImageRecipe {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_ImageBuilder_ImageRecipe) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_ImageBuilder_ImageRecipe {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_ImageBuilder_ImageRecipe) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_ImageBuilder_ImageRecipe {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_ImageBuilder_ImageRecipe) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_ImageBuilder_ImageRecipe {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_ImageBuilder_ImageRecipe) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_ImageBuilder_ImageRecipe {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_ImageBuilder_ImageRecipe) Set__RequestedOutputs(v []cfz.Output) *AWS_ImageBuilder_ImageRecipe {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_ImageBuilder_ImageRecipe) Add__RequestedOutputs(v ...cfz.Output) *AWS_ImageBuilder_ImageRecipe {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AdditionalInstanceConfiguration updates property "AdditionalInstanceConfiguration".
func (t *AWS_ImageBuilder_ImageRecipe) Set__AdditionalInstanceConfiguration(v cfz.Expression[AWS_ImageBuilder_ImageRecipe_AdditionalInstanceConfiguration]) *AWS_ImageBuilder_ImageRecipe {
	t.AdditionalInstanceConfiguration = v
	return t
}

// SetV__AdditionalInstanceConfiguration updates property "AdditionalInstanceConfiguration".
func (t *AWS_ImageBuilder_ImageRecipe) SetV__AdditionalInstanceConfiguration(v AWS_ImageBuilder_ImageRecipe_AdditionalInstanceConfiguration) *AWS_ImageBuilder_ImageRecipe {
	t.AdditionalInstanceConfiguration = cfz.V(v)
	return t
}

// Set__BlockDeviceMappings updates property "BlockDeviceMappings".
func (t *AWS_ImageBuilder_ImageRecipe) Set__BlockDeviceMappings(v cfz.ExpressionSlice[AWS_ImageBuilder_ImageRecipe_InstanceBlockDeviceMapping]) *AWS_ImageBuilder_ImageRecipe {
	t.BlockDeviceMappings = v
	return t
}

// SetS__BlockDeviceMappings updates property "BlockDeviceMappings".
func (t *AWS_ImageBuilder_ImageRecipe) SetS__BlockDeviceMappings(v ...cfz.Expression[AWS_ImageBuilder_ImageRecipe_InstanceBlockDeviceMapping]) *AWS_ImageBuilder_ImageRecipe {
	t.BlockDeviceMappings = cfz.S(v...)
	return t
}

// SetSV__BlockDeviceMappings updates property "BlockDeviceMappings".
func (t *AWS_ImageBuilder_ImageRecipe) SetSV__BlockDeviceMappings(v ...AWS_ImageBuilder_ImageRecipe_InstanceBlockDeviceMapping) *AWS_ImageBuilder_ImageRecipe {
	t.BlockDeviceMappings = cfz.SV(v...)
	return t
}

// Set__Components updates property "Components".
func (t *AWS_ImageBuilder_ImageRecipe) Set__Components(v cfz.ExpressionSlice[AWS_ImageBuilder_ImageRecipe_ComponentConfiguration]) *AWS_ImageBuilder_ImageRecipe {
	t.Components = v
	return t
}

// SetS__Components updates property "Components".
func (t *AWS_ImageBuilder_ImageRecipe) SetS__Components(v ...cfz.Expression[AWS_ImageBuilder_ImageRecipe_ComponentConfiguration]) *AWS_ImageBuilder_ImageRecipe {
	t.Components = cfz.S(v...)
	return t
}

// SetSV__Components updates property "Components".
func (t *AWS_ImageBuilder_ImageRecipe) SetSV__Components(v ...AWS_ImageBuilder_ImageRecipe_ComponentConfiguration) *AWS_ImageBuilder_ImageRecipe {
	t.Components = cfz.SV(v...)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_ImageBuilder_ImageRecipe) Set__Description(v cfz.Expression[string]) *AWS_ImageBuilder_ImageRecipe {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_ImageBuilder_ImageRecipe) SetV__Description(v string) *AWS_ImageBuilder_ImageRecipe {
	t.Description = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_ImageBuilder_ImageRecipe) Set__Name(v cfz.Expression[string]) *AWS_ImageBuilder_ImageRecipe {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_ImageBuilder_ImageRecipe) SetV__Name(v string) *AWS_ImageBuilder_ImageRecipe {
	t.Name = cfz.V(v)
	return t
}

// Set__ParentImage updates property "ParentImage".
func (t *AWS_ImageBuilder_ImageRecipe) Set__ParentImage(v cfz.Expression[string]) *AWS_ImageBuilder_ImageRecipe {
	t.ParentImage = v
	return t
}

// SetV__ParentImage updates property "ParentImage".
func (t *AWS_ImageBuilder_ImageRecipe) SetV__ParentImage(v string) *AWS_ImageBuilder_ImageRecipe {
	t.ParentImage = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_ImageBuilder_ImageRecipe) Set__Tags(v cfz.ExpressionMap[string]) *AWS_ImageBuilder_ImageRecipe {
	t.Tags = v
	return t
}

// SetM__Tags updates property "Tags".
func (t *AWS_ImageBuilder_ImageRecipe) SetM__Tags(v ...map[string]cfz.Expression[string]) *AWS_ImageBuilder_ImageRecipe {
	t.Tags = cfz.M(v...)
	return t
}

// SetMV__Tags updates property "Tags".
func (t *AWS_ImageBuilder_ImageRecipe) SetMV__Tags(v ...map[string]string) *AWS_ImageBuilder_ImageRecipe {
	t.Tags = cfz.MV(v...)
	return t
}

// Set__Version updates property "Version".
func (t *AWS_ImageBuilder_ImageRecipe) Set__Version(v cfz.Expression[string]) *AWS_ImageBuilder_ImageRecipe {
	t.Version = v
	return t
}

// SetV__Version updates property "Version".
func (t *AWS_ImageBuilder_ImageRecipe) SetV__Version(v string) *AWS_ImageBuilder_ImageRecipe {
	t.Version = cfz.V(v)
	return t
}

// Set__WorkingDirectory updates property "WorkingDirectory".
func (t *AWS_ImageBuilder_ImageRecipe) Set__WorkingDirectory(v cfz.Expression[string]) *AWS_ImageBuilder_ImageRecipe {
	t.WorkingDirectory = v
	return t
}

// SetV__WorkingDirectory updates property "WorkingDirectory".
func (t *AWS_ImageBuilder_ImageRecipe) SetV__WorkingDirectory(v string) *AWS_ImageBuilder_ImageRecipe {
	t.WorkingDirectory = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_ImageBuilder_ImageRecipe) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_ImageBuilder_ImageRecipe) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ImageBuilder_ImageRecipe__AttributesMap.Arn))
}

// GetAtt__Name returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Name
func (t *AWS_ImageBuilder_ImageRecipe) GetAtt__Name() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ImageBuilder_ImageRecipe__AttributesMap.Name))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_ImageBuilder_ImageRecipe) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_ImageBuilder_ImageRecipe) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Name returns a conventionally configured output for an attribute of this resource.
// Attribute: Name
func (t *AWS_ImageBuilder_ImageRecipe) GetConventionalOutputAtt__Name(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttName", t.GetAtt__Name())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_ImageBuilder_ImageRecipe) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_ImageBuilder_ImageRecipe

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_ImageBuilder_ImageRecipe) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
