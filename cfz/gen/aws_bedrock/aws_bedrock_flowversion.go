// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_bedrock

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Bedrock_FlowVersion)(nil)
	_ cfz.Resource                   = (*AWS_Bedrock_FlowVersion)(nil)
)

const (
	// AWS_Bedrock_FlowVersion__Type is the CloudFormation type for AWS::Bedrock::FlowVersion.
	AWS_Bedrock_FlowVersion__Type = "AWS::Bedrock::FlowVersion"
)

var (
	// AWS_Bedrock_FlowVersion__AttributesMap reports all the CloudFormation attributes for AWS::Bedrock::FlowVersion.
	AWS_Bedrock_FlowVersion__AttributesMap = struct {
		CreatedAt                string
		CustomerEncryptionKeyArn string
		Definition               string
		Definition_Connections   string
		Definition_Nodes         string
		ExecutionRoleArn         string
		FlowId                   string
		Name                     string
		Status                   string
		Version                  string
	}{
		CreatedAt:                "CreatedAt",
		CustomerEncryptionKeyArn: "CustomerEncryptionKeyArn",
		Definition:               "Definition",
		Definition_Connections:   "Definition.Connections",
		Definition_Nodes:         "Definition.Nodes",
		ExecutionRoleArn:         "ExecutionRoleArn",
		FlowId:                   "FlowId",
		Name:                     "Name",
		Status:                   "Status",
		Version:                  "Version",
	}

	// AWS_Bedrock_FlowVersion__AttributesSlice reports all the CloudFormation attributes for AWS::Bedrock::FlowVersion.
	AWS_Bedrock_FlowVersion__AttributesSlice = []string{
		AWS_Bedrock_FlowVersion__AttributesMap.CreatedAt,
		AWS_Bedrock_FlowVersion__AttributesMap.CustomerEncryptionKeyArn,
		AWS_Bedrock_FlowVersion__AttributesMap.Definition,
		AWS_Bedrock_FlowVersion__AttributesMap.Definition_Connections,
		AWS_Bedrock_FlowVersion__AttributesMap.Definition_Nodes,
		AWS_Bedrock_FlowVersion__AttributesMap.ExecutionRoleArn,
		AWS_Bedrock_FlowVersion__AttributesMap.FlowId,
		AWS_Bedrock_FlowVersion__AttributesMap.Name,
		AWS_Bedrock_FlowVersion__AttributesMap.Status,
		AWS_Bedrock_FlowVersion__AttributesMap.Version,
	}
)

var (
	// AWS_Bedrock_FlowVersion__PropertiesMap reports all the CloudFormation properties for AWS::Bedrock::FlowVersion.
	AWS_Bedrock_FlowVersion__PropertiesMap = struct {
		Description string
		FlowArn     string
	}{
		Description: "Description",
		FlowArn:     "FlowArn",
	}

	// AWS_Bedrock_FlowVersion__PropertiesSlice reports all the CloudFormation properties for AWS::Bedrock::FlowVersion.
	AWS_Bedrock_FlowVersion__PropertiesSlice = []string{
		AWS_Bedrock_FlowVersion__PropertiesMap.Description,
		AWS_Bedrock_FlowVersion__PropertiesMap.FlowArn,
	}
)

// AWS_Bedrock_FlowVersion is a binding for AWS::Bedrock::FlowVersion.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-flowversion.html
type AWS_Bedrock_FlowVersion struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-flowversion.html#cfn-bedrock-flowversion-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// FlowArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-flowversion.html#cfn-bedrock-flowversion-flowarn
	FlowArn cfz.Expression[string] `json:"FlowArn,omitempty"`
}

// New__AWS_Bedrock_FlowVersion initializes a new *AWS_Bedrock_FlowVersion.
func New__AWS_Bedrock_FlowVersion(logicalName string) *AWS_Bedrock_FlowVersion {
	return &AWS_Bedrock_FlowVersion{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Bedrock_FlowVersion) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Bedrock_FlowVersion) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Bedrock_FlowVersion) GetType() string {
	return AWS_Bedrock_FlowVersion__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Bedrock_FlowVersion) Set__LogicalName(v string) *AWS_Bedrock_FlowVersion {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Bedrock_FlowVersion) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Bedrock_FlowVersion {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Bedrock_FlowVersion) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Bedrock_FlowVersion {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Bedrock_FlowVersion) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Bedrock_FlowVersion {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Bedrock_FlowVersion) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Bedrock_FlowVersion {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Bedrock_FlowVersion) Set__RequestedOutputs(v []cfz.Output) *AWS_Bedrock_FlowVersion {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Bedrock_FlowVersion) Add__RequestedOutputs(v ...cfz.Output) *AWS_Bedrock_FlowVersion {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_Bedrock_FlowVersion) Set__Description(v cfz.Expression[string]) *AWS_Bedrock_FlowVersion {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_Bedrock_FlowVersion) SetV__Description(v string) *AWS_Bedrock_FlowVersion {
	t.Description = cfz.V(v)
	return t
}

// Set__FlowArn updates property "FlowArn".
func (t *AWS_Bedrock_FlowVersion) Set__FlowArn(v cfz.Expression[string]) *AWS_Bedrock_FlowVersion {
	t.FlowArn = v
	return t
}

// SetV__FlowArn updates property "FlowArn".
func (t *AWS_Bedrock_FlowVersion) SetV__FlowArn(v string) *AWS_Bedrock_FlowVersion {
	t.FlowArn = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Bedrock_FlowVersion) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__CreatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedAt
func (t *AWS_Bedrock_FlowVersion) GetAtt__CreatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_FlowVersion__AttributesMap.CreatedAt))
}

// GetAtt__CustomerEncryptionKeyArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CustomerEncryptionKeyArn
func (t *AWS_Bedrock_FlowVersion) GetAtt__CustomerEncryptionKeyArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_FlowVersion__AttributesMap.CustomerEncryptionKeyArn))
}

// GetAtt__Definition returns a $cfz.Expression[AWS_Bedrock_FlowVersion_FlowDefinition] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Definition
func (t *AWS_Bedrock_FlowVersion) GetAtt__Definition() cfz.Expression[AWS_Bedrock_FlowVersion_FlowDefinition] {
	return cfz.GetAtt[AWS_Bedrock_FlowVersion_FlowDefinition](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_FlowVersion__AttributesMap.Definition))
}

// GetAttSlice__Definition_Connections returns a $cfz.ExpressionSlice[AWS_Bedrock_FlowVersion_FlowConnection] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Definition.Connections
func (t *AWS_Bedrock_FlowVersion) GetAttSlice__Definition_Connections() cfz.ExpressionSlice[AWS_Bedrock_FlowVersion_FlowConnection] {
	return cfz.GetAttSlice[AWS_Bedrock_FlowVersion_FlowConnection](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_FlowVersion__AttributesMap.Definition_Connections))
}

// GetAttSlice__Definition_Nodes returns a $cfz.ExpressionSlice[AWS_Bedrock_FlowVersion_FlowNode] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Definition.Nodes
func (t *AWS_Bedrock_FlowVersion) GetAttSlice__Definition_Nodes() cfz.ExpressionSlice[AWS_Bedrock_FlowVersion_FlowNode] {
	return cfz.GetAttSlice[AWS_Bedrock_FlowVersion_FlowNode](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_FlowVersion__AttributesMap.Definition_Nodes))
}

// GetAtt__ExecutionRoleArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ExecutionRoleArn
func (t *AWS_Bedrock_FlowVersion) GetAtt__ExecutionRoleArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_FlowVersion__AttributesMap.ExecutionRoleArn))
}

// GetAtt__FlowId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: FlowId
func (t *AWS_Bedrock_FlowVersion) GetAtt__FlowId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_FlowVersion__AttributesMap.FlowId))
}

// GetAtt__Name returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Name
func (t *AWS_Bedrock_FlowVersion) GetAtt__Name() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_FlowVersion__AttributesMap.Name))
}

// GetAtt__Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Status
func (t *AWS_Bedrock_FlowVersion) GetAtt__Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_FlowVersion__AttributesMap.Status))
}

// GetAtt__Version returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version
func (t *AWS_Bedrock_FlowVersion) GetAtt__Version() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_FlowVersion__AttributesMap.Version))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Bedrock_FlowVersion) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedAt
func (t *AWS_Bedrock_FlowVersion) GetConventionalOutputAtt__CreatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedAt", t.GetAtt__CreatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CustomerEncryptionKeyArn returns a conventionally configured output for an attribute of this resource.
// Attribute: CustomerEncryptionKeyArn
func (t *AWS_Bedrock_FlowVersion) GetConventionalOutputAtt__CustomerEncryptionKeyArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCustomerEncryptionKeyArn", t.GetAtt__CustomerEncryptionKeyArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Definition returns a conventionally configured output for an attribute of this resource.
// Attribute: Definition
func (t *AWS_Bedrock_FlowVersion) GetConventionalOutputAtt__Definition(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDefinition", t.GetAtt__Definition())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Definition_Connections returns a conventionally configured output for an attribute of this resource.
// Attribute: Definition.Connections
func (t *AWS_Bedrock_FlowVersion) GetConventionalOutputAtt__Definition_Connections(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDefinitionConnections", t.GetAttSlice__Definition_Connections())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Definition_Nodes returns a conventionally configured output for an attribute of this resource.
// Attribute: Definition.Nodes
func (t *AWS_Bedrock_FlowVersion) GetConventionalOutputAtt__Definition_Nodes(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDefinitionNodes", t.GetAttSlice__Definition_Nodes())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ExecutionRoleArn returns a conventionally configured output for an attribute of this resource.
// Attribute: ExecutionRoleArn
func (t *AWS_Bedrock_FlowVersion) GetConventionalOutputAtt__ExecutionRoleArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttExecutionRoleArn", t.GetAtt__ExecutionRoleArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__FlowId returns a conventionally configured output for an attribute of this resource.
// Attribute: FlowId
func (t *AWS_Bedrock_FlowVersion) GetConventionalOutputAtt__FlowId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttFlowId", t.GetAtt__FlowId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Name returns a conventionally configured output for an attribute of this resource.
// Attribute: Name
func (t *AWS_Bedrock_FlowVersion) GetConventionalOutputAtt__Name(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttName", t.GetAtt__Name())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Status returns a conventionally configured output for an attribute of this resource.
// Attribute: Status
func (t *AWS_Bedrock_FlowVersion) GetConventionalOutputAtt__Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStatus", t.GetAtt__Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version returns a conventionally configured output for an attribute of this resource.
// Attribute: Version
func (t *AWS_Bedrock_FlowVersion) GetConventionalOutputAtt__Version(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersion", t.GetAtt__Version())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Bedrock_FlowVersion) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Bedrock_FlowVersion

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Bedrock_FlowVersion) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
