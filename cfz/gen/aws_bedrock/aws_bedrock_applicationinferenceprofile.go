// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_bedrock

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Bedrock_ApplicationInferenceProfile)(nil)
	_ cfz.Resource                   = (*AWS_Bedrock_ApplicationInferenceProfile)(nil)
)

const (
	// AWS_Bedrock_ApplicationInferenceProfile__Type is the CloudFormation type for AWS::Bedrock::ApplicationInferenceProfile.
	AWS_Bedrock_ApplicationInferenceProfile__Type = "AWS::Bedrock::ApplicationInferenceProfile"
)

var (
	// AWS_Bedrock_ApplicationInferenceProfile__AttributesMap reports all the CloudFormation attributes for AWS::Bedrock::ApplicationInferenceProfile.
	AWS_Bedrock_ApplicationInferenceProfile__AttributesMap = struct {
		CreatedAt                  string
		InferenceProfileArn        string
		InferenceProfileId         string
		InferenceProfileIdentifier string
		Models                     string
		Status                     string
		Type                       string
		UpdatedAt                  string
	}{
		CreatedAt:                  "CreatedAt",
		InferenceProfileArn:        "InferenceProfileArn",
		InferenceProfileId:         "InferenceProfileId",
		InferenceProfileIdentifier: "InferenceProfileIdentifier",
		Models:                     "Models",
		Status:                     "Status",
		Type:                       "Type",
		UpdatedAt:                  "UpdatedAt",
	}

	// AWS_Bedrock_ApplicationInferenceProfile__AttributesSlice reports all the CloudFormation attributes for AWS::Bedrock::ApplicationInferenceProfile.
	AWS_Bedrock_ApplicationInferenceProfile__AttributesSlice = []string{
		AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.CreatedAt,
		AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.InferenceProfileArn,
		AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.InferenceProfileId,
		AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.InferenceProfileIdentifier,
		AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.Models,
		AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.Status,
		AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.Type,
		AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.UpdatedAt,
	}
)

var (
	// AWS_Bedrock_ApplicationInferenceProfile__PropertiesMap reports all the CloudFormation properties for AWS::Bedrock::ApplicationInferenceProfile.
	AWS_Bedrock_ApplicationInferenceProfile__PropertiesMap = struct {
		Description          string
		InferenceProfileName string
		ModelSource          string
		Tags                 string
	}{
		Description:          "Description",
		InferenceProfileName: "InferenceProfileName",
		ModelSource:          "ModelSource",
		Tags:                 "Tags",
	}

	// AWS_Bedrock_ApplicationInferenceProfile__PropertiesSlice reports all the CloudFormation properties for AWS::Bedrock::ApplicationInferenceProfile.
	AWS_Bedrock_ApplicationInferenceProfile__PropertiesSlice = []string{
		AWS_Bedrock_ApplicationInferenceProfile__PropertiesMap.Description,
		AWS_Bedrock_ApplicationInferenceProfile__PropertiesMap.InferenceProfileName,
		AWS_Bedrock_ApplicationInferenceProfile__PropertiesMap.ModelSource,
		AWS_Bedrock_ApplicationInferenceProfile__PropertiesMap.Tags,
	}
)

// AWS_Bedrock_ApplicationInferenceProfile is a binding for AWS::Bedrock::ApplicationInferenceProfile.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-applicationinferenceprofile.html
type AWS_Bedrock_ApplicationInferenceProfile struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-applicationinferenceprofile.html#cfn-bedrock-applicationinferenceprofile-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// InferenceProfileName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-applicationinferenceprofile.html#cfn-bedrock-applicationinferenceprofile-inferenceprofilename
	InferenceProfileName cfz.Expression[string] `json:"InferenceProfileName,omitempty"`

	// ModelSource is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-applicationinferenceprofile.html#cfn-bedrock-applicationinferenceprofile-modelsource
	ModelSource cfz.Expression[AWS_Bedrock_ApplicationInferenceProfile_InferenceProfileModelSource] `json:"ModelSource,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-applicationinferenceprofile.html#cfn-bedrock-applicationinferenceprofile-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_Bedrock_ApplicationInferenceProfile initializes a new *AWS_Bedrock_ApplicationInferenceProfile.
func New__AWS_Bedrock_ApplicationInferenceProfile(logicalName string) *AWS_Bedrock_ApplicationInferenceProfile {
	return &AWS_Bedrock_ApplicationInferenceProfile{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Bedrock_ApplicationInferenceProfile) GetType() string {
	return AWS_Bedrock_ApplicationInferenceProfile__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Bedrock_ApplicationInferenceProfile) Set__LogicalName(v string) *AWS_Bedrock_ApplicationInferenceProfile {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Bedrock_ApplicationInferenceProfile) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Bedrock_ApplicationInferenceProfile {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Bedrock_ApplicationInferenceProfile) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Bedrock_ApplicationInferenceProfile {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Bedrock_ApplicationInferenceProfile) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Bedrock_ApplicationInferenceProfile {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Bedrock_ApplicationInferenceProfile) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Bedrock_ApplicationInferenceProfile {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Bedrock_ApplicationInferenceProfile) Set__RequestedOutputs(v []cfz.Output) *AWS_Bedrock_ApplicationInferenceProfile {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Bedrock_ApplicationInferenceProfile) Add__RequestedOutputs(v ...cfz.Output) *AWS_Bedrock_ApplicationInferenceProfile {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_Bedrock_ApplicationInferenceProfile) Set__Description(v cfz.Expression[string]) *AWS_Bedrock_ApplicationInferenceProfile {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_Bedrock_ApplicationInferenceProfile) SetV__Description(v string) *AWS_Bedrock_ApplicationInferenceProfile {
	t.Description = cfz.V(v)
	return t
}

// Set__InferenceProfileName updates property "InferenceProfileName".
func (t *AWS_Bedrock_ApplicationInferenceProfile) Set__InferenceProfileName(v cfz.Expression[string]) *AWS_Bedrock_ApplicationInferenceProfile {
	t.InferenceProfileName = v
	return t
}

// SetV__InferenceProfileName updates property "InferenceProfileName".
func (t *AWS_Bedrock_ApplicationInferenceProfile) SetV__InferenceProfileName(v string) *AWS_Bedrock_ApplicationInferenceProfile {
	t.InferenceProfileName = cfz.V(v)
	return t
}

// Set__ModelSource updates property "ModelSource".
func (t *AWS_Bedrock_ApplicationInferenceProfile) Set__ModelSource(v cfz.Expression[AWS_Bedrock_ApplicationInferenceProfile_InferenceProfileModelSource]) *AWS_Bedrock_ApplicationInferenceProfile {
	t.ModelSource = v
	return t
}

// SetV__ModelSource updates property "ModelSource".
func (t *AWS_Bedrock_ApplicationInferenceProfile) SetV__ModelSource(v AWS_Bedrock_ApplicationInferenceProfile_InferenceProfileModelSource) *AWS_Bedrock_ApplicationInferenceProfile {
	t.ModelSource = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_Bedrock_ApplicationInferenceProfile) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_Bedrock_ApplicationInferenceProfile {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_Bedrock_ApplicationInferenceProfile) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_Bedrock_ApplicationInferenceProfile {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_Bedrock_ApplicationInferenceProfile) SetSV__Tags(v ...cfz.Tag) *AWS_Bedrock_ApplicationInferenceProfile {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Bedrock_ApplicationInferenceProfile) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__CreatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedAt
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetAtt__CreatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.CreatedAt))
}

// GetAtt__InferenceProfileArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: InferenceProfileArn
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetAtt__InferenceProfileArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.InferenceProfileArn))
}

// GetAtt__InferenceProfileId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: InferenceProfileId
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetAtt__InferenceProfileId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.InferenceProfileId))
}

// GetAtt__InferenceProfileIdentifier returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: InferenceProfileIdentifier
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetAtt__InferenceProfileIdentifier() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.InferenceProfileIdentifier))
}

// GetAttSlice__Models returns a $cfz.ExpressionSlice[AWS_Bedrock_ApplicationInferenceProfile_InferenceProfileModel] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Models
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetAttSlice__Models() cfz.ExpressionSlice[AWS_Bedrock_ApplicationInferenceProfile_InferenceProfileModel] {
	return cfz.GetAttSlice[AWS_Bedrock_ApplicationInferenceProfile_InferenceProfileModel](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.Models))
}

// GetAtt__Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Status
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetAtt__Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.Status))
}

// GetAtt__Type returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Type
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetAtt__Type() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.Type))
}

// GetAtt__UpdatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: UpdatedAt
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetAtt__UpdatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_ApplicationInferenceProfile__AttributesMap.UpdatedAt))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedAt
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetConventionalOutputAtt__CreatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedAt", t.GetAtt__CreatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__InferenceProfileArn returns a conventionally configured output for an attribute of this resource.
// Attribute: InferenceProfileArn
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetConventionalOutputAtt__InferenceProfileArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttInferenceProfileArn", t.GetAtt__InferenceProfileArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__InferenceProfileId returns a conventionally configured output for an attribute of this resource.
// Attribute: InferenceProfileId
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetConventionalOutputAtt__InferenceProfileId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttInferenceProfileId", t.GetAtt__InferenceProfileId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__InferenceProfileIdentifier returns a conventionally configured output for an attribute of this resource.
// Attribute: InferenceProfileIdentifier
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetConventionalOutputAtt__InferenceProfileIdentifier(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttInferenceProfileIdentifier", t.GetAtt__InferenceProfileIdentifier())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Models returns a conventionally configured output for an attribute of this resource.
// Attribute: Models
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetConventionalOutputAtt__Models(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttModels", t.GetAttSlice__Models())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Status returns a conventionally configured output for an attribute of this resource.
// Attribute: Status
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetConventionalOutputAtt__Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStatus", t.GetAtt__Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Type returns a conventionally configured output for an attribute of this resource.
// Attribute: Type
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetConventionalOutputAtt__Type(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttType", t.GetAtt__Type())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__UpdatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: UpdatedAt
func (t *AWS_Bedrock_ApplicationInferenceProfile) GetConventionalOutputAtt__UpdatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttUpdatedAt", t.GetAtt__UpdatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Bedrock_ApplicationInferenceProfile) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Bedrock_ApplicationInferenceProfile

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Bedrock_ApplicationInferenceProfile) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
