// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_bedrock

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Bedrock_KnowledgeBase)(nil)
	_ cfz.Resource                   = (*AWS_Bedrock_KnowledgeBase)(nil)
)

const (
	// AWS_Bedrock_KnowledgeBase__Type is the CloudFormation type for AWS::Bedrock::KnowledgeBase.
	AWS_Bedrock_KnowledgeBase__Type = "AWS::Bedrock::KnowledgeBase"
)

var (
	// AWS_Bedrock_KnowledgeBase__AttributesMap reports all the CloudFormation attributes for AWS::Bedrock::KnowledgeBase.
	AWS_Bedrock_KnowledgeBase__AttributesMap = struct {
		CreatedAt        string
		FailureReasons   string
		KnowledgeBaseArn string
		KnowledgeBaseId  string
		Status           string
		UpdatedAt        string
	}{
		CreatedAt:        "CreatedAt",
		FailureReasons:   "FailureReasons",
		KnowledgeBaseArn: "KnowledgeBaseArn",
		KnowledgeBaseId:  "KnowledgeBaseId",
		Status:           "Status",
		UpdatedAt:        "UpdatedAt",
	}

	// AWS_Bedrock_KnowledgeBase__AttributesSlice reports all the CloudFormation attributes for AWS::Bedrock::KnowledgeBase.
	AWS_Bedrock_KnowledgeBase__AttributesSlice = []string{
		AWS_Bedrock_KnowledgeBase__AttributesMap.CreatedAt,
		AWS_Bedrock_KnowledgeBase__AttributesMap.FailureReasons,
		AWS_Bedrock_KnowledgeBase__AttributesMap.KnowledgeBaseArn,
		AWS_Bedrock_KnowledgeBase__AttributesMap.KnowledgeBaseId,
		AWS_Bedrock_KnowledgeBase__AttributesMap.Status,
		AWS_Bedrock_KnowledgeBase__AttributesMap.UpdatedAt,
	}
)

var (
	// AWS_Bedrock_KnowledgeBase__PropertiesMap reports all the CloudFormation properties for AWS::Bedrock::KnowledgeBase.
	AWS_Bedrock_KnowledgeBase__PropertiesMap = struct {
		Description                string
		KnowledgeBaseConfiguration string
		Name                       string
		RoleArn                    string
		StorageConfiguration       string
		Tags                       string
	}{
		Description:                "Description",
		KnowledgeBaseConfiguration: "KnowledgeBaseConfiguration",
		Name:                       "Name",
		RoleArn:                    "RoleArn",
		StorageConfiguration:       "StorageConfiguration",
		Tags:                       "Tags",
	}

	// AWS_Bedrock_KnowledgeBase__PropertiesSlice reports all the CloudFormation properties for AWS::Bedrock::KnowledgeBase.
	AWS_Bedrock_KnowledgeBase__PropertiesSlice = []string{
		AWS_Bedrock_KnowledgeBase__PropertiesMap.Description,
		AWS_Bedrock_KnowledgeBase__PropertiesMap.KnowledgeBaseConfiguration,
		AWS_Bedrock_KnowledgeBase__PropertiesMap.Name,
		AWS_Bedrock_KnowledgeBase__PropertiesMap.RoleArn,
		AWS_Bedrock_KnowledgeBase__PropertiesMap.StorageConfiguration,
		AWS_Bedrock_KnowledgeBase__PropertiesMap.Tags,
	}
)

// AWS_Bedrock_KnowledgeBase is a binding for AWS::Bedrock::KnowledgeBase.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-knowledgebase.html
type AWS_Bedrock_KnowledgeBase struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-knowledgebase.html#cfn-bedrock-knowledgebase-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// KnowledgeBaseConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-knowledgebase.html#cfn-bedrock-knowledgebase-knowledgebaseconfiguration
	KnowledgeBaseConfiguration cfz.Expression[AWS_Bedrock_KnowledgeBase_KnowledgeBaseConfiguration] `json:"KnowledgeBaseConfiguration,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-knowledgebase.html#cfn-bedrock-knowledgebase-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// RoleArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-knowledgebase.html#cfn-bedrock-knowledgebase-rolearn
	RoleArn cfz.Expression[string] `json:"RoleArn,omitempty"`

	// StorageConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-knowledgebase.html#cfn-bedrock-knowledgebase-storageconfiguration
	StorageConfiguration cfz.Expression[AWS_Bedrock_KnowledgeBase_StorageConfiguration] `json:"StorageConfiguration,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-knowledgebase.html#cfn-bedrock-knowledgebase-tags
	Tags cfz.ExpressionMap[string] `json:"Tags,omitempty"`
}

// New__AWS_Bedrock_KnowledgeBase initializes a new *AWS_Bedrock_KnowledgeBase.
func New__AWS_Bedrock_KnowledgeBase(logicalName string) *AWS_Bedrock_KnowledgeBase {
	return &AWS_Bedrock_KnowledgeBase{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Bedrock_KnowledgeBase) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Bedrock_KnowledgeBase) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Bedrock_KnowledgeBase) GetType() string {
	return AWS_Bedrock_KnowledgeBase__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Bedrock_KnowledgeBase) Set__LogicalName(v string) *AWS_Bedrock_KnowledgeBase {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Bedrock_KnowledgeBase) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Bedrock_KnowledgeBase {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Bedrock_KnowledgeBase) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Bedrock_KnowledgeBase {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Bedrock_KnowledgeBase) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Bedrock_KnowledgeBase {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Bedrock_KnowledgeBase) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Bedrock_KnowledgeBase {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Bedrock_KnowledgeBase) Set__RequestedOutputs(v []cfz.Output) *AWS_Bedrock_KnowledgeBase {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Bedrock_KnowledgeBase) Add__RequestedOutputs(v ...cfz.Output) *AWS_Bedrock_KnowledgeBase {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_Bedrock_KnowledgeBase) Set__Description(v cfz.Expression[string]) *AWS_Bedrock_KnowledgeBase {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_Bedrock_KnowledgeBase) SetV__Description(v string) *AWS_Bedrock_KnowledgeBase {
	t.Description = cfz.V(v)
	return t
}

// Set__KnowledgeBaseConfiguration updates property "KnowledgeBaseConfiguration".
func (t *AWS_Bedrock_KnowledgeBase) Set__KnowledgeBaseConfiguration(v cfz.Expression[AWS_Bedrock_KnowledgeBase_KnowledgeBaseConfiguration]) *AWS_Bedrock_KnowledgeBase {
	t.KnowledgeBaseConfiguration = v
	return t
}

// SetV__KnowledgeBaseConfiguration updates property "KnowledgeBaseConfiguration".
func (t *AWS_Bedrock_KnowledgeBase) SetV__KnowledgeBaseConfiguration(v AWS_Bedrock_KnowledgeBase_KnowledgeBaseConfiguration) *AWS_Bedrock_KnowledgeBase {
	t.KnowledgeBaseConfiguration = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_Bedrock_KnowledgeBase) Set__Name(v cfz.Expression[string]) *AWS_Bedrock_KnowledgeBase {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_Bedrock_KnowledgeBase) SetV__Name(v string) *AWS_Bedrock_KnowledgeBase {
	t.Name = cfz.V(v)
	return t
}

// Set__RoleArn updates property "RoleArn".
func (t *AWS_Bedrock_KnowledgeBase) Set__RoleArn(v cfz.Expression[string]) *AWS_Bedrock_KnowledgeBase {
	t.RoleArn = v
	return t
}

// SetV__RoleArn updates property "RoleArn".
func (t *AWS_Bedrock_KnowledgeBase) SetV__RoleArn(v string) *AWS_Bedrock_KnowledgeBase {
	t.RoleArn = cfz.V(v)
	return t
}

// Set__StorageConfiguration updates property "StorageConfiguration".
func (t *AWS_Bedrock_KnowledgeBase) Set__StorageConfiguration(v cfz.Expression[AWS_Bedrock_KnowledgeBase_StorageConfiguration]) *AWS_Bedrock_KnowledgeBase {
	t.StorageConfiguration = v
	return t
}

// SetV__StorageConfiguration updates property "StorageConfiguration".
func (t *AWS_Bedrock_KnowledgeBase) SetV__StorageConfiguration(v AWS_Bedrock_KnowledgeBase_StorageConfiguration) *AWS_Bedrock_KnowledgeBase {
	t.StorageConfiguration = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_Bedrock_KnowledgeBase) Set__Tags(v cfz.ExpressionMap[string]) *AWS_Bedrock_KnowledgeBase {
	t.Tags = v
	return t
}

// SetM__Tags updates property "Tags".
func (t *AWS_Bedrock_KnowledgeBase) SetM__Tags(v ...map[string]cfz.Expression[string]) *AWS_Bedrock_KnowledgeBase {
	t.Tags = cfz.M(v...)
	return t
}

// SetMV__Tags updates property "Tags".
func (t *AWS_Bedrock_KnowledgeBase) SetMV__Tags(v ...map[string]string) *AWS_Bedrock_KnowledgeBase {
	t.Tags = cfz.MV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Bedrock_KnowledgeBase) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__CreatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedAt
func (t *AWS_Bedrock_KnowledgeBase) GetAtt__CreatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_KnowledgeBase__AttributesMap.CreatedAt))
}

// GetAttSlice__FailureReasons returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: FailureReasons
func (t *AWS_Bedrock_KnowledgeBase) GetAttSlice__FailureReasons() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_KnowledgeBase__AttributesMap.FailureReasons))
}

// GetAtt__KnowledgeBaseArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: KnowledgeBaseArn
func (t *AWS_Bedrock_KnowledgeBase) GetAtt__KnowledgeBaseArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_KnowledgeBase__AttributesMap.KnowledgeBaseArn))
}

// GetAtt__KnowledgeBaseId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: KnowledgeBaseId
func (t *AWS_Bedrock_KnowledgeBase) GetAtt__KnowledgeBaseId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_KnowledgeBase__AttributesMap.KnowledgeBaseId))
}

// GetAtt__Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Status
func (t *AWS_Bedrock_KnowledgeBase) GetAtt__Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_KnowledgeBase__AttributesMap.Status))
}

// GetAtt__UpdatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: UpdatedAt
func (t *AWS_Bedrock_KnowledgeBase) GetAtt__UpdatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_KnowledgeBase__AttributesMap.UpdatedAt))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Bedrock_KnowledgeBase) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedAt
func (t *AWS_Bedrock_KnowledgeBase) GetConventionalOutputAtt__CreatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedAt", t.GetAtt__CreatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__FailureReasons returns a conventionally configured output for an attribute of this resource.
// Attribute: FailureReasons
func (t *AWS_Bedrock_KnowledgeBase) GetConventionalOutputAtt__FailureReasons(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttFailureReasons", t.GetAttSlice__FailureReasons())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__KnowledgeBaseArn returns a conventionally configured output for an attribute of this resource.
// Attribute: KnowledgeBaseArn
func (t *AWS_Bedrock_KnowledgeBase) GetConventionalOutputAtt__KnowledgeBaseArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttKnowledgeBaseArn", t.GetAtt__KnowledgeBaseArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__KnowledgeBaseId returns a conventionally configured output for an attribute of this resource.
// Attribute: KnowledgeBaseId
func (t *AWS_Bedrock_KnowledgeBase) GetConventionalOutputAtt__KnowledgeBaseId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttKnowledgeBaseId", t.GetAtt__KnowledgeBaseId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Status returns a conventionally configured output for an attribute of this resource.
// Attribute: Status
func (t *AWS_Bedrock_KnowledgeBase) GetConventionalOutputAtt__Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStatus", t.GetAtt__Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__UpdatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: UpdatedAt
func (t *AWS_Bedrock_KnowledgeBase) GetConventionalOutputAtt__UpdatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttUpdatedAt", t.GetAtt__UpdatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Bedrock_KnowledgeBase) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Bedrock_KnowledgeBase

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Bedrock_KnowledgeBase) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
