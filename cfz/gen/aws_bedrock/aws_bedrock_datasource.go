// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_bedrock

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Bedrock_DataSource)(nil)
	_ cfz.Resource                   = (*AWS_Bedrock_DataSource)(nil)
)

const (
	// AWS_Bedrock_DataSource__Type is the CloudFormation type for AWS::Bedrock::DataSource.
	AWS_Bedrock_DataSource__Type = "AWS::Bedrock::DataSource"
)

var (
	// AWS_Bedrock_DataSource__AttributesMap reports all the CloudFormation attributes for AWS::Bedrock::DataSource.
	AWS_Bedrock_DataSource__AttributesMap = struct {
		CreatedAt        string
		DataSourceId     string
		DataSourceStatus string
		FailureReasons   string
		UpdatedAt        string
	}{
		CreatedAt:        "CreatedAt",
		DataSourceId:     "DataSourceId",
		DataSourceStatus: "DataSourceStatus",
		FailureReasons:   "FailureReasons",
		UpdatedAt:        "UpdatedAt",
	}

	// AWS_Bedrock_DataSource__AttributesSlice reports all the CloudFormation attributes for AWS::Bedrock::DataSource.
	AWS_Bedrock_DataSource__AttributesSlice = []string{
		AWS_Bedrock_DataSource__AttributesMap.CreatedAt,
		AWS_Bedrock_DataSource__AttributesMap.DataSourceId,
		AWS_Bedrock_DataSource__AttributesMap.DataSourceStatus,
		AWS_Bedrock_DataSource__AttributesMap.FailureReasons,
		AWS_Bedrock_DataSource__AttributesMap.UpdatedAt,
	}
)

var (
	// AWS_Bedrock_DataSource__PropertiesMap reports all the CloudFormation properties for AWS::Bedrock::DataSource.
	AWS_Bedrock_DataSource__PropertiesMap = struct {
		DataDeletionPolicy                string
		DataSourceConfiguration           string
		Description                       string
		KnowledgeBaseId                   string
		Name                              string
		ServerSideEncryptionConfiguration string
		VectorIngestionConfiguration      string
	}{
		DataDeletionPolicy:                "DataDeletionPolicy",
		DataSourceConfiguration:           "DataSourceConfiguration",
		Description:                       "Description",
		KnowledgeBaseId:                   "KnowledgeBaseId",
		Name:                              "Name",
		ServerSideEncryptionConfiguration: "ServerSideEncryptionConfiguration",
		VectorIngestionConfiguration:      "VectorIngestionConfiguration",
	}

	// AWS_Bedrock_DataSource__PropertiesSlice reports all the CloudFormation properties for AWS::Bedrock::DataSource.
	AWS_Bedrock_DataSource__PropertiesSlice = []string{
		AWS_Bedrock_DataSource__PropertiesMap.DataDeletionPolicy,
		AWS_Bedrock_DataSource__PropertiesMap.DataSourceConfiguration,
		AWS_Bedrock_DataSource__PropertiesMap.Description,
		AWS_Bedrock_DataSource__PropertiesMap.KnowledgeBaseId,
		AWS_Bedrock_DataSource__PropertiesMap.Name,
		AWS_Bedrock_DataSource__PropertiesMap.ServerSideEncryptionConfiguration,
		AWS_Bedrock_DataSource__PropertiesMap.VectorIngestionConfiguration,
	}
)

// AWS_Bedrock_DataSource is a binding for AWS::Bedrock::DataSource.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-datasource.html
type AWS_Bedrock_DataSource struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// DataDeletionPolicy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-datasource.html#cfn-bedrock-datasource-datadeletionpolicy
	DataDeletionPolicy cfz.Expression[string] `json:"DataDeletionPolicy,omitempty"`

	// DataSourceConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-datasource.html#cfn-bedrock-datasource-datasourceconfiguration
	DataSourceConfiguration cfz.Expression[AWS_Bedrock_DataSource_DataSourceConfiguration] `json:"DataSourceConfiguration,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-datasource.html#cfn-bedrock-datasource-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// KnowledgeBaseId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-datasource.html#cfn-bedrock-datasource-knowledgebaseid
	KnowledgeBaseId cfz.Expression[string] `json:"KnowledgeBaseId,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-datasource.html#cfn-bedrock-datasource-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// ServerSideEncryptionConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-datasource.html#cfn-bedrock-datasource-serversideencryptionconfiguration
	ServerSideEncryptionConfiguration cfz.Expression[AWS_Bedrock_DataSource_ServerSideEncryptionConfiguration] `json:"ServerSideEncryptionConfiguration,omitempty"`

	// VectorIngestionConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-datasource.html#cfn-bedrock-datasource-vectoringestionconfiguration
	VectorIngestionConfiguration cfz.Expression[AWS_Bedrock_DataSource_VectorIngestionConfiguration] `json:"VectorIngestionConfiguration,omitempty"`
}

// New__AWS_Bedrock_DataSource initializes a new *AWS_Bedrock_DataSource.
func New__AWS_Bedrock_DataSource(logicalName string) *AWS_Bedrock_DataSource {
	return &AWS_Bedrock_DataSource{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Bedrock_DataSource) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Bedrock_DataSource) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Bedrock_DataSource) GetType() string {
	return AWS_Bedrock_DataSource__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Bedrock_DataSource) Set__LogicalName(v string) *AWS_Bedrock_DataSource {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Bedrock_DataSource) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Bedrock_DataSource {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Bedrock_DataSource) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Bedrock_DataSource {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Bedrock_DataSource) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Bedrock_DataSource {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Bedrock_DataSource) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Bedrock_DataSource {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Bedrock_DataSource) Set__RequestedOutputs(v []cfz.Output) *AWS_Bedrock_DataSource {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Bedrock_DataSource) Add__RequestedOutputs(v ...cfz.Output) *AWS_Bedrock_DataSource {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__DataDeletionPolicy updates property "DataDeletionPolicy".
func (t *AWS_Bedrock_DataSource) Set__DataDeletionPolicy(v cfz.Expression[string]) *AWS_Bedrock_DataSource {
	t.DataDeletionPolicy = v
	return t
}

// SetV__DataDeletionPolicy updates property "DataDeletionPolicy".
func (t *AWS_Bedrock_DataSource) SetV__DataDeletionPolicy(v string) *AWS_Bedrock_DataSource {
	t.DataDeletionPolicy = cfz.V(v)
	return t
}

// Set__DataSourceConfiguration updates property "DataSourceConfiguration".
func (t *AWS_Bedrock_DataSource) Set__DataSourceConfiguration(v cfz.Expression[AWS_Bedrock_DataSource_DataSourceConfiguration]) *AWS_Bedrock_DataSource {
	t.DataSourceConfiguration = v
	return t
}

// SetV__DataSourceConfiguration updates property "DataSourceConfiguration".
func (t *AWS_Bedrock_DataSource) SetV__DataSourceConfiguration(v AWS_Bedrock_DataSource_DataSourceConfiguration) *AWS_Bedrock_DataSource {
	t.DataSourceConfiguration = cfz.V(v)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_Bedrock_DataSource) Set__Description(v cfz.Expression[string]) *AWS_Bedrock_DataSource {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_Bedrock_DataSource) SetV__Description(v string) *AWS_Bedrock_DataSource {
	t.Description = cfz.V(v)
	return t
}

// Set__KnowledgeBaseId updates property "KnowledgeBaseId".
func (t *AWS_Bedrock_DataSource) Set__KnowledgeBaseId(v cfz.Expression[string]) *AWS_Bedrock_DataSource {
	t.KnowledgeBaseId = v
	return t
}

// SetV__KnowledgeBaseId updates property "KnowledgeBaseId".
func (t *AWS_Bedrock_DataSource) SetV__KnowledgeBaseId(v string) *AWS_Bedrock_DataSource {
	t.KnowledgeBaseId = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_Bedrock_DataSource) Set__Name(v cfz.Expression[string]) *AWS_Bedrock_DataSource {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_Bedrock_DataSource) SetV__Name(v string) *AWS_Bedrock_DataSource {
	t.Name = cfz.V(v)
	return t
}

// Set__ServerSideEncryptionConfiguration updates property "ServerSideEncryptionConfiguration".
func (t *AWS_Bedrock_DataSource) Set__ServerSideEncryptionConfiguration(v cfz.Expression[AWS_Bedrock_DataSource_ServerSideEncryptionConfiguration]) *AWS_Bedrock_DataSource {
	t.ServerSideEncryptionConfiguration = v
	return t
}

// SetV__ServerSideEncryptionConfiguration updates property "ServerSideEncryptionConfiguration".
func (t *AWS_Bedrock_DataSource) SetV__ServerSideEncryptionConfiguration(v AWS_Bedrock_DataSource_ServerSideEncryptionConfiguration) *AWS_Bedrock_DataSource {
	t.ServerSideEncryptionConfiguration = cfz.V(v)
	return t
}

// Set__VectorIngestionConfiguration updates property "VectorIngestionConfiguration".
func (t *AWS_Bedrock_DataSource) Set__VectorIngestionConfiguration(v cfz.Expression[AWS_Bedrock_DataSource_VectorIngestionConfiguration]) *AWS_Bedrock_DataSource {
	t.VectorIngestionConfiguration = v
	return t
}

// SetV__VectorIngestionConfiguration updates property "VectorIngestionConfiguration".
func (t *AWS_Bedrock_DataSource) SetV__VectorIngestionConfiguration(v AWS_Bedrock_DataSource_VectorIngestionConfiguration) *AWS_Bedrock_DataSource {
	t.VectorIngestionConfiguration = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Bedrock_DataSource) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__CreatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedAt
func (t *AWS_Bedrock_DataSource) GetAtt__CreatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_DataSource__AttributesMap.CreatedAt))
}

// GetAtt__DataSourceId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DataSourceId
func (t *AWS_Bedrock_DataSource) GetAtt__DataSourceId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_DataSource__AttributesMap.DataSourceId))
}

// GetAtt__DataSourceStatus returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DataSourceStatus
func (t *AWS_Bedrock_DataSource) GetAtt__DataSourceStatus() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_DataSource__AttributesMap.DataSourceStatus))
}

// GetAttSlice__FailureReasons returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: FailureReasons
func (t *AWS_Bedrock_DataSource) GetAttSlice__FailureReasons() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_DataSource__AttributesMap.FailureReasons))
}

// GetAtt__UpdatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: UpdatedAt
func (t *AWS_Bedrock_DataSource) GetAtt__UpdatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Bedrock_DataSource__AttributesMap.UpdatedAt))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Bedrock_DataSource) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedAt
func (t *AWS_Bedrock_DataSource) GetConventionalOutputAtt__CreatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedAt", t.GetAtt__CreatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DataSourceId returns a conventionally configured output for an attribute of this resource.
// Attribute: DataSourceId
func (t *AWS_Bedrock_DataSource) GetConventionalOutputAtt__DataSourceId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDataSourceId", t.GetAtt__DataSourceId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DataSourceStatus returns a conventionally configured output for an attribute of this resource.
// Attribute: DataSourceStatus
func (t *AWS_Bedrock_DataSource) GetConventionalOutputAtt__DataSourceStatus(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDataSourceStatus", t.GetAtt__DataSourceStatus())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__FailureReasons returns a conventionally configured output for an attribute of this resource.
// Attribute: FailureReasons
func (t *AWS_Bedrock_DataSource) GetConventionalOutputAtt__FailureReasons(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttFailureReasons", t.GetAttSlice__FailureReasons())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__UpdatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: UpdatedAt
func (t *AWS_Bedrock_DataSource) GetConventionalOutputAtt__UpdatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttUpdatedAt", t.GetAtt__UpdatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Bedrock_DataSource) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Bedrock_DataSource

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Bedrock_DataSource) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
