// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_rolesanywhere

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_RolesAnywhere_TrustAnchor)(nil)
	_ cfz.Resource                   = (*AWS_RolesAnywhere_TrustAnchor)(nil)
)

const (
	// AWS_RolesAnywhere_TrustAnchor__Type is the CloudFormation type for AWS::RolesAnywhere::TrustAnchor.
	AWS_RolesAnywhere_TrustAnchor__Type = "AWS::RolesAnywhere::TrustAnchor"
)

var (
	// AWS_RolesAnywhere_TrustAnchor__AttributesMap reports all the CloudFormation attributes for AWS::RolesAnywhere::TrustAnchor.
	AWS_RolesAnywhere_TrustAnchor__AttributesMap = struct {
		TrustAnchorArn string
		TrustAnchorId  string
	}{
		TrustAnchorArn: "TrustAnchorArn",
		TrustAnchorId:  "TrustAnchorId",
	}

	// AWS_RolesAnywhere_TrustAnchor__AttributesSlice reports all the CloudFormation attributes for AWS::RolesAnywhere::TrustAnchor.
	AWS_RolesAnywhere_TrustAnchor__AttributesSlice = []string{
		AWS_RolesAnywhere_TrustAnchor__AttributesMap.TrustAnchorArn,
		AWS_RolesAnywhere_TrustAnchor__AttributesMap.TrustAnchorId,
	}
)

var (
	// AWS_RolesAnywhere_TrustAnchor__PropertiesMap reports all the CloudFormation properties for AWS::RolesAnywhere::TrustAnchor.
	AWS_RolesAnywhere_TrustAnchor__PropertiesMap = struct {
		Enabled              string
		Name                 string
		NotificationSettings string
		Source               string
		Tags                 string
	}{
		Enabled:              "Enabled",
		Name:                 "Name",
		NotificationSettings: "NotificationSettings",
		Source:               "Source",
		Tags:                 "Tags",
	}

	// AWS_RolesAnywhere_TrustAnchor__PropertiesSlice reports all the CloudFormation properties for AWS::RolesAnywhere::TrustAnchor.
	AWS_RolesAnywhere_TrustAnchor__PropertiesSlice = []string{
		AWS_RolesAnywhere_TrustAnchor__PropertiesMap.Enabled,
		AWS_RolesAnywhere_TrustAnchor__PropertiesMap.Name,
		AWS_RolesAnywhere_TrustAnchor__PropertiesMap.NotificationSettings,
		AWS_RolesAnywhere_TrustAnchor__PropertiesMap.Source,
		AWS_RolesAnywhere_TrustAnchor__PropertiesMap.Tags,
	}
)

// AWS_RolesAnywhere_TrustAnchor is a binding for AWS::RolesAnywhere::TrustAnchor.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-trustanchor.html
type AWS_RolesAnywhere_TrustAnchor struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Enabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-trustanchor.html#cfn-rolesanywhere-trustanchor-enabled
	Enabled cfz.Expression[bool] `json:"Enabled,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-trustanchor.html#cfn-rolesanywhere-trustanchor-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// NotificationSettings is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-trustanchor.html#cfn-rolesanywhere-trustanchor-notificationsettings
	NotificationSettings cfz.ExpressionSlice[AWS_RolesAnywhere_TrustAnchor_NotificationSetting] `json:"NotificationSettings,omitempty"`

	// Source is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-trustanchor.html#cfn-rolesanywhere-trustanchor-source
	Source cfz.Expression[AWS_RolesAnywhere_TrustAnchor_Source] `json:"Source,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-trustanchor.html#cfn-rolesanywhere-trustanchor-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_RolesAnywhere_TrustAnchor initializes a new *AWS_RolesAnywhere_TrustAnchor.
func New__AWS_RolesAnywhere_TrustAnchor(logicalName string) *AWS_RolesAnywhere_TrustAnchor {
	return &AWS_RolesAnywhere_TrustAnchor{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_RolesAnywhere_TrustAnchor) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_RolesAnywhere_TrustAnchor) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_RolesAnywhere_TrustAnchor) GetType() string {
	return AWS_RolesAnywhere_TrustAnchor__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_RolesAnywhere_TrustAnchor) Set__LogicalName(v string) *AWS_RolesAnywhere_TrustAnchor {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_RolesAnywhere_TrustAnchor) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_RolesAnywhere_TrustAnchor {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_RolesAnywhere_TrustAnchor) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_RolesAnywhere_TrustAnchor {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_RolesAnywhere_TrustAnchor) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_RolesAnywhere_TrustAnchor {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_RolesAnywhere_TrustAnchor) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_RolesAnywhere_TrustAnchor {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_RolesAnywhere_TrustAnchor) Set__RequestedOutputs(v []cfz.Output) *AWS_RolesAnywhere_TrustAnchor {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_RolesAnywhere_TrustAnchor) Add__RequestedOutputs(v ...cfz.Output) *AWS_RolesAnywhere_TrustAnchor {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Enabled updates property "Enabled".
func (t *AWS_RolesAnywhere_TrustAnchor) Set__Enabled(v cfz.Expression[bool]) *AWS_RolesAnywhere_TrustAnchor {
	t.Enabled = v
	return t
}

// SetV__Enabled updates property "Enabled".
func (t *AWS_RolesAnywhere_TrustAnchor) SetV__Enabled(v bool) *AWS_RolesAnywhere_TrustAnchor {
	t.Enabled = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_RolesAnywhere_TrustAnchor) Set__Name(v cfz.Expression[string]) *AWS_RolesAnywhere_TrustAnchor {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_RolesAnywhere_TrustAnchor) SetV__Name(v string) *AWS_RolesAnywhere_TrustAnchor {
	t.Name = cfz.V(v)
	return t
}

// Set__NotificationSettings updates property "NotificationSettings".
func (t *AWS_RolesAnywhere_TrustAnchor) Set__NotificationSettings(v cfz.ExpressionSlice[AWS_RolesAnywhere_TrustAnchor_NotificationSetting]) *AWS_RolesAnywhere_TrustAnchor {
	t.NotificationSettings = v
	return t
}

// SetS__NotificationSettings updates property "NotificationSettings".
func (t *AWS_RolesAnywhere_TrustAnchor) SetS__NotificationSettings(v ...cfz.Expression[AWS_RolesAnywhere_TrustAnchor_NotificationSetting]) *AWS_RolesAnywhere_TrustAnchor {
	t.NotificationSettings = cfz.S(v...)
	return t
}

// SetSV__NotificationSettings updates property "NotificationSettings".
func (t *AWS_RolesAnywhere_TrustAnchor) SetSV__NotificationSettings(v ...AWS_RolesAnywhere_TrustAnchor_NotificationSetting) *AWS_RolesAnywhere_TrustAnchor {
	t.NotificationSettings = cfz.SV(v...)
	return t
}

// Set__Source updates property "Source".
func (t *AWS_RolesAnywhere_TrustAnchor) Set__Source(v cfz.Expression[AWS_RolesAnywhere_TrustAnchor_Source]) *AWS_RolesAnywhere_TrustAnchor {
	t.Source = v
	return t
}

// SetV__Source updates property "Source".
func (t *AWS_RolesAnywhere_TrustAnchor) SetV__Source(v AWS_RolesAnywhere_TrustAnchor_Source) *AWS_RolesAnywhere_TrustAnchor {
	t.Source = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_RolesAnywhere_TrustAnchor) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_RolesAnywhere_TrustAnchor {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_RolesAnywhere_TrustAnchor) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_RolesAnywhere_TrustAnchor {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_RolesAnywhere_TrustAnchor) SetSV__Tags(v ...cfz.Tag) *AWS_RolesAnywhere_TrustAnchor {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_RolesAnywhere_TrustAnchor) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__TrustAnchorArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: TrustAnchorArn
func (t *AWS_RolesAnywhere_TrustAnchor) GetAtt__TrustAnchorArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RolesAnywhere_TrustAnchor__AttributesMap.TrustAnchorArn))
}

// GetAtt__TrustAnchorId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: TrustAnchorId
func (t *AWS_RolesAnywhere_TrustAnchor) GetAtt__TrustAnchorId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RolesAnywhere_TrustAnchor__AttributesMap.TrustAnchorId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_RolesAnywhere_TrustAnchor) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__TrustAnchorArn returns a conventionally configured output for an attribute of this resource.
// Attribute: TrustAnchorArn
func (t *AWS_RolesAnywhere_TrustAnchor) GetConventionalOutputAtt__TrustAnchorArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttTrustAnchorArn", t.GetAtt__TrustAnchorArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__TrustAnchorId returns a conventionally configured output for an attribute of this resource.
// Attribute: TrustAnchorId
func (t *AWS_RolesAnywhere_TrustAnchor) GetConventionalOutputAtt__TrustAnchorId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttTrustAnchorId", t.GetAtt__TrustAnchorId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_RolesAnywhere_TrustAnchor) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_RolesAnywhere_TrustAnchor

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_RolesAnywhere_TrustAnchor) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
