// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_rolesanywhere

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_RolesAnywhere_Profile)(nil)
	_ cfz.Resource                   = (*AWS_RolesAnywhere_Profile)(nil)
)

const (
	// AWS_RolesAnywhere_Profile__Type is the CloudFormation type for AWS::RolesAnywhere::Profile.
	AWS_RolesAnywhere_Profile__Type = "AWS::RolesAnywhere::Profile"
)

var (
	// AWS_RolesAnywhere_Profile__AttributesMap reports all the CloudFormation attributes for AWS::RolesAnywhere::Profile.
	AWS_RolesAnywhere_Profile__AttributesMap = struct {
		ProfileArn string
		ProfileId  string
	}{
		ProfileArn: "ProfileArn",
		ProfileId:  "ProfileId",
	}

	// AWS_RolesAnywhere_Profile__AttributesSlice reports all the CloudFormation attributes for AWS::RolesAnywhere::Profile.
	AWS_RolesAnywhere_Profile__AttributesSlice = []string{
		AWS_RolesAnywhere_Profile__AttributesMap.ProfileArn,
		AWS_RolesAnywhere_Profile__AttributesMap.ProfileId,
	}
)

var (
	// AWS_RolesAnywhere_Profile__PropertiesMap reports all the CloudFormation properties for AWS::RolesAnywhere::Profile.
	AWS_RolesAnywhere_Profile__PropertiesMap = struct {
		AcceptRoleSessionName     string
		AttributeMappings         string
		DurationSeconds           string
		Enabled                   string
		ManagedPolicyArns         string
		Name                      string
		RequireInstanceProperties string
		RoleArns                  string
		SessionPolicy             string
		Tags                      string
	}{
		AcceptRoleSessionName:     "AcceptRoleSessionName",
		AttributeMappings:         "AttributeMappings",
		DurationSeconds:           "DurationSeconds",
		Enabled:                   "Enabled",
		ManagedPolicyArns:         "ManagedPolicyArns",
		Name:                      "Name",
		RequireInstanceProperties: "RequireInstanceProperties",
		RoleArns:                  "RoleArns",
		SessionPolicy:             "SessionPolicy",
		Tags:                      "Tags",
	}

	// AWS_RolesAnywhere_Profile__PropertiesSlice reports all the CloudFormation properties for AWS::RolesAnywhere::Profile.
	AWS_RolesAnywhere_Profile__PropertiesSlice = []string{
		AWS_RolesAnywhere_Profile__PropertiesMap.AcceptRoleSessionName,
		AWS_RolesAnywhere_Profile__PropertiesMap.AttributeMappings,
		AWS_RolesAnywhere_Profile__PropertiesMap.DurationSeconds,
		AWS_RolesAnywhere_Profile__PropertiesMap.Enabled,
		AWS_RolesAnywhere_Profile__PropertiesMap.ManagedPolicyArns,
		AWS_RolesAnywhere_Profile__PropertiesMap.Name,
		AWS_RolesAnywhere_Profile__PropertiesMap.RequireInstanceProperties,
		AWS_RolesAnywhere_Profile__PropertiesMap.RoleArns,
		AWS_RolesAnywhere_Profile__PropertiesMap.SessionPolicy,
		AWS_RolesAnywhere_Profile__PropertiesMap.Tags,
	}
)

// AWS_RolesAnywhere_Profile is a binding for AWS::RolesAnywhere::Profile.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-profile.html
type AWS_RolesAnywhere_Profile struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AcceptRoleSessionName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-profile.html#cfn-rolesanywhere-profile-acceptrolesessionname
	AcceptRoleSessionName cfz.Expression[bool] `json:"AcceptRoleSessionName,omitempty"`

	// AttributeMappings is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-profile.html#cfn-rolesanywhere-profile-attributemappings
	AttributeMappings cfz.ExpressionSlice[AWS_RolesAnywhere_Profile_AttributeMapping] `json:"AttributeMappings,omitempty"`

	// DurationSeconds is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-profile.html#cfn-rolesanywhere-profile-durationseconds
	DurationSeconds cfz.Expression[float64] `json:"DurationSeconds,omitempty"`

	// Enabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-profile.html#cfn-rolesanywhere-profile-enabled
	Enabled cfz.Expression[bool] `json:"Enabled,omitempty"`

	// ManagedPolicyArns is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-profile.html#cfn-rolesanywhere-profile-managedpolicyarns
	ManagedPolicyArns cfz.ExpressionSlice[string] `json:"ManagedPolicyArns,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-profile.html#cfn-rolesanywhere-profile-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// RequireInstanceProperties is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-profile.html#cfn-rolesanywhere-profile-requireinstanceproperties
	RequireInstanceProperties cfz.Expression[bool] `json:"RequireInstanceProperties,omitempty"`

	// RoleArns is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-profile.html#cfn-rolesanywhere-profile-rolearns
	RoleArns cfz.ExpressionSlice[string] `json:"RoleArns,omitempty"`

	// SessionPolicy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-profile.html#cfn-rolesanywhere-profile-sessionpolicy
	SessionPolicy cfz.Expression[string] `json:"SessionPolicy,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rolesanywhere-profile.html#cfn-rolesanywhere-profile-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_RolesAnywhere_Profile initializes a new *AWS_RolesAnywhere_Profile.
func New__AWS_RolesAnywhere_Profile(logicalName string) *AWS_RolesAnywhere_Profile {
	return &AWS_RolesAnywhere_Profile{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_RolesAnywhere_Profile) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_RolesAnywhere_Profile) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_RolesAnywhere_Profile) GetType() string {
	return AWS_RolesAnywhere_Profile__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_RolesAnywhere_Profile) Set__LogicalName(v string) *AWS_RolesAnywhere_Profile {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_RolesAnywhere_Profile) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_RolesAnywhere_Profile {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_RolesAnywhere_Profile) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_RolesAnywhere_Profile {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_RolesAnywhere_Profile) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_RolesAnywhere_Profile {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_RolesAnywhere_Profile) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_RolesAnywhere_Profile {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_RolesAnywhere_Profile) Set__RequestedOutputs(v []cfz.Output) *AWS_RolesAnywhere_Profile {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_RolesAnywhere_Profile) Add__RequestedOutputs(v ...cfz.Output) *AWS_RolesAnywhere_Profile {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AcceptRoleSessionName updates property "AcceptRoleSessionName".
func (t *AWS_RolesAnywhere_Profile) Set__AcceptRoleSessionName(v cfz.Expression[bool]) *AWS_RolesAnywhere_Profile {
	t.AcceptRoleSessionName = v
	return t
}

// SetV__AcceptRoleSessionName updates property "AcceptRoleSessionName".
func (t *AWS_RolesAnywhere_Profile) SetV__AcceptRoleSessionName(v bool) *AWS_RolesAnywhere_Profile {
	t.AcceptRoleSessionName = cfz.V(v)
	return t
}

// Set__AttributeMappings updates property "AttributeMappings".
func (t *AWS_RolesAnywhere_Profile) Set__AttributeMappings(v cfz.ExpressionSlice[AWS_RolesAnywhere_Profile_AttributeMapping]) *AWS_RolesAnywhere_Profile {
	t.AttributeMappings = v
	return t
}

// SetS__AttributeMappings updates property "AttributeMappings".
func (t *AWS_RolesAnywhere_Profile) SetS__AttributeMappings(v ...cfz.Expression[AWS_RolesAnywhere_Profile_AttributeMapping]) *AWS_RolesAnywhere_Profile {
	t.AttributeMappings = cfz.S(v...)
	return t
}

// SetSV__AttributeMappings updates property "AttributeMappings".
func (t *AWS_RolesAnywhere_Profile) SetSV__AttributeMappings(v ...AWS_RolesAnywhere_Profile_AttributeMapping) *AWS_RolesAnywhere_Profile {
	t.AttributeMappings = cfz.SV(v...)
	return t
}

// Set__DurationSeconds updates property "DurationSeconds".
func (t *AWS_RolesAnywhere_Profile) Set__DurationSeconds(v cfz.Expression[float64]) *AWS_RolesAnywhere_Profile {
	t.DurationSeconds = v
	return t
}

// SetV__DurationSeconds updates property "DurationSeconds".
func (t *AWS_RolesAnywhere_Profile) SetV__DurationSeconds(v float64) *AWS_RolesAnywhere_Profile {
	t.DurationSeconds = cfz.V(v)
	return t
}

// Set__Enabled updates property "Enabled".
func (t *AWS_RolesAnywhere_Profile) Set__Enabled(v cfz.Expression[bool]) *AWS_RolesAnywhere_Profile {
	t.Enabled = v
	return t
}

// SetV__Enabled updates property "Enabled".
func (t *AWS_RolesAnywhere_Profile) SetV__Enabled(v bool) *AWS_RolesAnywhere_Profile {
	t.Enabled = cfz.V(v)
	return t
}

// Set__ManagedPolicyArns updates property "ManagedPolicyArns".
func (t *AWS_RolesAnywhere_Profile) Set__ManagedPolicyArns(v cfz.ExpressionSlice[string]) *AWS_RolesAnywhere_Profile {
	t.ManagedPolicyArns = v
	return t
}

// SetS__ManagedPolicyArns updates property "ManagedPolicyArns".
func (t *AWS_RolesAnywhere_Profile) SetS__ManagedPolicyArns(v ...cfz.Expression[string]) *AWS_RolesAnywhere_Profile {
	t.ManagedPolicyArns = cfz.S(v...)
	return t
}

// SetSV__ManagedPolicyArns updates property "ManagedPolicyArns".
func (t *AWS_RolesAnywhere_Profile) SetSV__ManagedPolicyArns(v ...string) *AWS_RolesAnywhere_Profile {
	t.ManagedPolicyArns = cfz.SV(v...)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_RolesAnywhere_Profile) Set__Name(v cfz.Expression[string]) *AWS_RolesAnywhere_Profile {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_RolesAnywhere_Profile) SetV__Name(v string) *AWS_RolesAnywhere_Profile {
	t.Name = cfz.V(v)
	return t
}

// Set__RequireInstanceProperties updates property "RequireInstanceProperties".
func (t *AWS_RolesAnywhere_Profile) Set__RequireInstanceProperties(v cfz.Expression[bool]) *AWS_RolesAnywhere_Profile {
	t.RequireInstanceProperties = v
	return t
}

// SetV__RequireInstanceProperties updates property "RequireInstanceProperties".
func (t *AWS_RolesAnywhere_Profile) SetV__RequireInstanceProperties(v bool) *AWS_RolesAnywhere_Profile {
	t.RequireInstanceProperties = cfz.V(v)
	return t
}

// Set__RoleArns updates property "RoleArns".
func (t *AWS_RolesAnywhere_Profile) Set__RoleArns(v cfz.ExpressionSlice[string]) *AWS_RolesAnywhere_Profile {
	t.RoleArns = v
	return t
}

// SetS__RoleArns updates property "RoleArns".
func (t *AWS_RolesAnywhere_Profile) SetS__RoleArns(v ...cfz.Expression[string]) *AWS_RolesAnywhere_Profile {
	t.RoleArns = cfz.S(v...)
	return t
}

// SetSV__RoleArns updates property "RoleArns".
func (t *AWS_RolesAnywhere_Profile) SetSV__RoleArns(v ...string) *AWS_RolesAnywhere_Profile {
	t.RoleArns = cfz.SV(v...)
	return t
}

// Set__SessionPolicy updates property "SessionPolicy".
func (t *AWS_RolesAnywhere_Profile) Set__SessionPolicy(v cfz.Expression[string]) *AWS_RolesAnywhere_Profile {
	t.SessionPolicy = v
	return t
}

// SetV__SessionPolicy updates property "SessionPolicy".
func (t *AWS_RolesAnywhere_Profile) SetV__SessionPolicy(v string) *AWS_RolesAnywhere_Profile {
	t.SessionPolicy = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_RolesAnywhere_Profile) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_RolesAnywhere_Profile {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_RolesAnywhere_Profile) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_RolesAnywhere_Profile {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_RolesAnywhere_Profile) SetSV__Tags(v ...cfz.Tag) *AWS_RolesAnywhere_Profile {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_RolesAnywhere_Profile) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__ProfileArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ProfileArn
func (t *AWS_RolesAnywhere_Profile) GetAtt__ProfileArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RolesAnywhere_Profile__AttributesMap.ProfileArn))
}

// GetAtt__ProfileId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ProfileId
func (t *AWS_RolesAnywhere_Profile) GetAtt__ProfileId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RolesAnywhere_Profile__AttributesMap.ProfileId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_RolesAnywhere_Profile) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ProfileArn returns a conventionally configured output for an attribute of this resource.
// Attribute: ProfileArn
func (t *AWS_RolesAnywhere_Profile) GetConventionalOutputAtt__ProfileArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttProfileArn", t.GetAtt__ProfileArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ProfileId returns a conventionally configured output for an attribute of this resource.
// Attribute: ProfileId
func (t *AWS_RolesAnywhere_Profile) GetConventionalOutputAtt__ProfileId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttProfileId", t.GetAtt__ProfileId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_RolesAnywhere_Profile) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_RolesAnywhere_Profile

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_RolesAnywhere_Profile) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
