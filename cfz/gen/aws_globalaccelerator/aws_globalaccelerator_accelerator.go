// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_globalaccelerator

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_GlobalAccelerator_Accelerator)(nil)
	_ cfz.Resource                   = (*AWS_GlobalAccelerator_Accelerator)(nil)
)

const (
	// AWS_GlobalAccelerator_Accelerator__Type is the CloudFormation type for AWS::GlobalAccelerator::Accelerator.
	AWS_GlobalAccelerator_Accelerator__Type = "AWS::GlobalAccelerator::Accelerator"
)

var (
	// AWS_GlobalAccelerator_Accelerator__AttributesMap reports all the CloudFormation attributes for AWS::GlobalAccelerator::Accelerator.
	AWS_GlobalAccelerator_Accelerator__AttributesMap = struct {
		AcceleratorArn   string
		DnsName          string
		DualStackDnsName string
		Ipv4Addresses    string
		Ipv6Addresses    string
	}{
		AcceleratorArn:   "AcceleratorArn",
		DnsName:          "DnsName",
		DualStackDnsName: "DualStackDnsName",
		Ipv4Addresses:    "Ipv4Addresses",
		Ipv6Addresses:    "Ipv6Addresses",
	}

	// AWS_GlobalAccelerator_Accelerator__AttributesSlice reports all the CloudFormation attributes for AWS::GlobalAccelerator::Accelerator.
	AWS_GlobalAccelerator_Accelerator__AttributesSlice = []string{
		AWS_GlobalAccelerator_Accelerator__AttributesMap.AcceleratorArn,
		AWS_GlobalAccelerator_Accelerator__AttributesMap.DnsName,
		AWS_GlobalAccelerator_Accelerator__AttributesMap.DualStackDnsName,
		AWS_GlobalAccelerator_Accelerator__AttributesMap.Ipv4Addresses,
		AWS_GlobalAccelerator_Accelerator__AttributesMap.Ipv6Addresses,
	}
)

var (
	// AWS_GlobalAccelerator_Accelerator__PropertiesMap reports all the CloudFormation properties for AWS::GlobalAccelerator::Accelerator.
	AWS_GlobalAccelerator_Accelerator__PropertiesMap = struct {
		Enabled       string
		IpAddressType string
		IpAddresses   string
		Name          string
		Tags          string
	}{
		Enabled:       "Enabled",
		IpAddressType: "IpAddressType",
		IpAddresses:   "IpAddresses",
		Name:          "Name",
		Tags:          "Tags",
	}

	// AWS_GlobalAccelerator_Accelerator__PropertiesSlice reports all the CloudFormation properties for AWS::GlobalAccelerator::Accelerator.
	AWS_GlobalAccelerator_Accelerator__PropertiesSlice = []string{
		AWS_GlobalAccelerator_Accelerator__PropertiesMap.Enabled,
		AWS_GlobalAccelerator_Accelerator__PropertiesMap.IpAddressType,
		AWS_GlobalAccelerator_Accelerator__PropertiesMap.IpAddresses,
		AWS_GlobalAccelerator_Accelerator__PropertiesMap.Name,
		AWS_GlobalAccelerator_Accelerator__PropertiesMap.Tags,
	}
)

// AWS_GlobalAccelerator_Accelerator is a binding for AWS::GlobalAccelerator::Accelerator.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-globalaccelerator-accelerator.html
type AWS_GlobalAccelerator_Accelerator struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Enabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-globalaccelerator-accelerator.html#cfn-globalaccelerator-accelerator-enabled
	Enabled cfz.Expression[bool] `json:"Enabled,omitempty"`

	// IpAddressType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-globalaccelerator-accelerator.html#cfn-globalaccelerator-accelerator-ipaddresstype
	IpAddressType cfz.Expression[string] `json:"IpAddressType,omitempty"`

	// IpAddresses is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-globalaccelerator-accelerator.html#cfn-globalaccelerator-accelerator-ipaddresses
	IpAddresses cfz.ExpressionSlice[string] `json:"IpAddresses,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-globalaccelerator-accelerator.html#cfn-globalaccelerator-accelerator-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-globalaccelerator-accelerator.html#cfn-globalaccelerator-accelerator-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_GlobalAccelerator_Accelerator initializes a new *AWS_GlobalAccelerator_Accelerator.
func New__AWS_GlobalAccelerator_Accelerator(logicalName string) *AWS_GlobalAccelerator_Accelerator {
	return &AWS_GlobalAccelerator_Accelerator{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_GlobalAccelerator_Accelerator) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_GlobalAccelerator_Accelerator) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_GlobalAccelerator_Accelerator) GetType() string {
	return AWS_GlobalAccelerator_Accelerator__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_GlobalAccelerator_Accelerator) Set__LogicalName(v string) *AWS_GlobalAccelerator_Accelerator {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_GlobalAccelerator_Accelerator) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_GlobalAccelerator_Accelerator {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_GlobalAccelerator_Accelerator) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_GlobalAccelerator_Accelerator {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_GlobalAccelerator_Accelerator) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_GlobalAccelerator_Accelerator {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_GlobalAccelerator_Accelerator) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_GlobalAccelerator_Accelerator {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_GlobalAccelerator_Accelerator) Set__RequestedOutputs(v []cfz.Output) *AWS_GlobalAccelerator_Accelerator {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_GlobalAccelerator_Accelerator) Add__RequestedOutputs(v ...cfz.Output) *AWS_GlobalAccelerator_Accelerator {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Enabled updates property "Enabled".
func (t *AWS_GlobalAccelerator_Accelerator) Set__Enabled(v cfz.Expression[bool]) *AWS_GlobalAccelerator_Accelerator {
	t.Enabled = v
	return t
}

// SetV__Enabled updates property "Enabled".
func (t *AWS_GlobalAccelerator_Accelerator) SetV__Enabled(v bool) *AWS_GlobalAccelerator_Accelerator {
	t.Enabled = cfz.V(v)
	return t
}

// Set__IpAddressType updates property "IpAddressType".
func (t *AWS_GlobalAccelerator_Accelerator) Set__IpAddressType(v cfz.Expression[string]) *AWS_GlobalAccelerator_Accelerator {
	t.IpAddressType = v
	return t
}

// SetV__IpAddressType updates property "IpAddressType".
func (t *AWS_GlobalAccelerator_Accelerator) SetV__IpAddressType(v string) *AWS_GlobalAccelerator_Accelerator {
	t.IpAddressType = cfz.V(v)
	return t
}

// Set__IpAddresses updates property "IpAddresses".
func (t *AWS_GlobalAccelerator_Accelerator) Set__IpAddresses(v cfz.ExpressionSlice[string]) *AWS_GlobalAccelerator_Accelerator {
	t.IpAddresses = v
	return t
}

// SetS__IpAddresses updates property "IpAddresses".
func (t *AWS_GlobalAccelerator_Accelerator) SetS__IpAddresses(v ...cfz.Expression[string]) *AWS_GlobalAccelerator_Accelerator {
	t.IpAddresses = cfz.S(v...)
	return t
}

// SetSV__IpAddresses updates property "IpAddresses".
func (t *AWS_GlobalAccelerator_Accelerator) SetSV__IpAddresses(v ...string) *AWS_GlobalAccelerator_Accelerator {
	t.IpAddresses = cfz.SV(v...)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_GlobalAccelerator_Accelerator) Set__Name(v cfz.Expression[string]) *AWS_GlobalAccelerator_Accelerator {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_GlobalAccelerator_Accelerator) SetV__Name(v string) *AWS_GlobalAccelerator_Accelerator {
	t.Name = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_GlobalAccelerator_Accelerator) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_GlobalAccelerator_Accelerator {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_GlobalAccelerator_Accelerator) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_GlobalAccelerator_Accelerator {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_GlobalAccelerator_Accelerator) SetSV__Tags(v ...cfz.Tag) *AWS_GlobalAccelerator_Accelerator {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_GlobalAccelerator_Accelerator) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__AcceleratorArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AcceleratorArn
func (t *AWS_GlobalAccelerator_Accelerator) GetAtt__AcceleratorArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_GlobalAccelerator_Accelerator__AttributesMap.AcceleratorArn))
}

// GetAtt__DnsName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DnsName
func (t *AWS_GlobalAccelerator_Accelerator) GetAtt__DnsName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_GlobalAccelerator_Accelerator__AttributesMap.DnsName))
}

// GetAtt__DualStackDnsName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DualStackDnsName
func (t *AWS_GlobalAccelerator_Accelerator) GetAtt__DualStackDnsName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_GlobalAccelerator_Accelerator__AttributesMap.DualStackDnsName))
}

// GetAttSlice__Ipv4Addresses returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Ipv4Addresses
func (t *AWS_GlobalAccelerator_Accelerator) GetAttSlice__Ipv4Addresses() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_GlobalAccelerator_Accelerator__AttributesMap.Ipv4Addresses))
}

// GetAttSlice__Ipv6Addresses returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Ipv6Addresses
func (t *AWS_GlobalAccelerator_Accelerator) GetAttSlice__Ipv6Addresses() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_GlobalAccelerator_Accelerator__AttributesMap.Ipv6Addresses))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_GlobalAccelerator_Accelerator) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AcceleratorArn returns a conventionally configured output for an attribute of this resource.
// Attribute: AcceleratorArn
func (t *AWS_GlobalAccelerator_Accelerator) GetConventionalOutputAtt__AcceleratorArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAcceleratorArn", t.GetAtt__AcceleratorArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DnsName returns a conventionally configured output for an attribute of this resource.
// Attribute: DnsName
func (t *AWS_GlobalAccelerator_Accelerator) GetConventionalOutputAtt__DnsName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDnsName", t.GetAtt__DnsName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DualStackDnsName returns a conventionally configured output for an attribute of this resource.
// Attribute: DualStackDnsName
func (t *AWS_GlobalAccelerator_Accelerator) GetConventionalOutputAtt__DualStackDnsName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDualStackDnsName", t.GetAtt__DualStackDnsName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Ipv4Addresses returns a conventionally configured output for an attribute of this resource.
// Attribute: Ipv4Addresses
func (t *AWS_GlobalAccelerator_Accelerator) GetConventionalOutputAtt__Ipv4Addresses(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIpv4Addresses", t.GetAttSlice__Ipv4Addresses())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Ipv6Addresses returns a conventionally configured output for an attribute of this resource.
// Attribute: Ipv6Addresses
func (t *AWS_GlobalAccelerator_Accelerator) GetConventionalOutputAtt__Ipv6Addresses(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIpv6Addresses", t.GetAttSlice__Ipv6Addresses())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_GlobalAccelerator_Accelerator) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_GlobalAccelerator_Accelerator

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_GlobalAccelerator_Accelerator) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
