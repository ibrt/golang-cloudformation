// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_securitylake

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_SecurityLake_DataLake)(nil)
	_ cfz.Resource                   = (*AWS_SecurityLake_DataLake)(nil)
)

const (
	// AWS_SecurityLake_DataLake__Type is the CloudFormation type for AWS::SecurityLake::DataLake.
	AWS_SecurityLake_DataLake__Type = "AWS::SecurityLake::DataLake"
)

var (
	// AWS_SecurityLake_DataLake__AttributesMap reports all the CloudFormation attributes for AWS::SecurityLake::DataLake.
	AWS_SecurityLake_DataLake__AttributesMap = struct {
		Arn         string
		S3BucketArn string
	}{
		Arn:         "Arn",
		S3BucketArn: "S3BucketArn",
	}

	// AWS_SecurityLake_DataLake__AttributesSlice reports all the CloudFormation attributes for AWS::SecurityLake::DataLake.
	AWS_SecurityLake_DataLake__AttributesSlice = []string{
		AWS_SecurityLake_DataLake__AttributesMap.Arn,
		AWS_SecurityLake_DataLake__AttributesMap.S3BucketArn,
	}
)

var (
	// AWS_SecurityLake_DataLake__PropertiesMap reports all the CloudFormation properties for AWS::SecurityLake::DataLake.
	AWS_SecurityLake_DataLake__PropertiesMap = struct {
		EncryptionConfiguration  string
		LifecycleConfiguration   string
		MetaStoreManagerRoleArn  string
		ReplicationConfiguration string
		Tags                     string
	}{
		EncryptionConfiguration:  "EncryptionConfiguration",
		LifecycleConfiguration:   "LifecycleConfiguration",
		MetaStoreManagerRoleArn:  "MetaStoreManagerRoleArn",
		ReplicationConfiguration: "ReplicationConfiguration",
		Tags:                     "Tags",
	}

	// AWS_SecurityLake_DataLake__PropertiesSlice reports all the CloudFormation properties for AWS::SecurityLake::DataLake.
	AWS_SecurityLake_DataLake__PropertiesSlice = []string{
		AWS_SecurityLake_DataLake__PropertiesMap.EncryptionConfiguration,
		AWS_SecurityLake_DataLake__PropertiesMap.LifecycleConfiguration,
		AWS_SecurityLake_DataLake__PropertiesMap.MetaStoreManagerRoleArn,
		AWS_SecurityLake_DataLake__PropertiesMap.ReplicationConfiguration,
		AWS_SecurityLake_DataLake__PropertiesMap.Tags,
	}
)

// AWS_SecurityLake_DataLake is a binding for AWS::SecurityLake::DataLake.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securitylake-datalake.html
type AWS_SecurityLake_DataLake struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// EncryptionConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securitylake-datalake.html#cfn-securitylake-datalake-encryptionconfiguration
	EncryptionConfiguration cfz.Expression[AWS_SecurityLake_DataLake_EncryptionConfiguration] `json:"EncryptionConfiguration,omitempty"`

	// LifecycleConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securitylake-datalake.html#cfn-securitylake-datalake-lifecycleconfiguration
	LifecycleConfiguration cfz.Expression[AWS_SecurityLake_DataLake_LifecycleConfiguration] `json:"LifecycleConfiguration,omitempty"`

	// MetaStoreManagerRoleArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securitylake-datalake.html#cfn-securitylake-datalake-metastoremanagerrolearn
	MetaStoreManagerRoleArn cfz.Expression[string] `json:"MetaStoreManagerRoleArn,omitempty"`

	// ReplicationConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securitylake-datalake.html#cfn-securitylake-datalake-replicationconfiguration
	ReplicationConfiguration cfz.Expression[AWS_SecurityLake_DataLake_ReplicationConfiguration] `json:"ReplicationConfiguration,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securitylake-datalake.html#cfn-securitylake-datalake-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_SecurityLake_DataLake initializes a new *AWS_SecurityLake_DataLake.
func New__AWS_SecurityLake_DataLake(logicalName string) *AWS_SecurityLake_DataLake {
	return &AWS_SecurityLake_DataLake{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_SecurityLake_DataLake) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_SecurityLake_DataLake) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_SecurityLake_DataLake) GetType() string {
	return AWS_SecurityLake_DataLake__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_SecurityLake_DataLake) Set__LogicalName(v string) *AWS_SecurityLake_DataLake {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_SecurityLake_DataLake) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_SecurityLake_DataLake {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_SecurityLake_DataLake) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_SecurityLake_DataLake {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_SecurityLake_DataLake) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_SecurityLake_DataLake {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_SecurityLake_DataLake) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_SecurityLake_DataLake {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_SecurityLake_DataLake) Set__RequestedOutputs(v []cfz.Output) *AWS_SecurityLake_DataLake {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_SecurityLake_DataLake) Add__RequestedOutputs(v ...cfz.Output) *AWS_SecurityLake_DataLake {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__EncryptionConfiguration updates property "EncryptionConfiguration".
func (t *AWS_SecurityLake_DataLake) Set__EncryptionConfiguration(v cfz.Expression[AWS_SecurityLake_DataLake_EncryptionConfiguration]) *AWS_SecurityLake_DataLake {
	t.EncryptionConfiguration = v
	return t
}

// SetV__EncryptionConfiguration updates property "EncryptionConfiguration".
func (t *AWS_SecurityLake_DataLake) SetV__EncryptionConfiguration(v AWS_SecurityLake_DataLake_EncryptionConfiguration) *AWS_SecurityLake_DataLake {
	t.EncryptionConfiguration = cfz.V(v)
	return t
}

// Set__LifecycleConfiguration updates property "LifecycleConfiguration".
func (t *AWS_SecurityLake_DataLake) Set__LifecycleConfiguration(v cfz.Expression[AWS_SecurityLake_DataLake_LifecycleConfiguration]) *AWS_SecurityLake_DataLake {
	t.LifecycleConfiguration = v
	return t
}

// SetV__LifecycleConfiguration updates property "LifecycleConfiguration".
func (t *AWS_SecurityLake_DataLake) SetV__LifecycleConfiguration(v AWS_SecurityLake_DataLake_LifecycleConfiguration) *AWS_SecurityLake_DataLake {
	t.LifecycleConfiguration = cfz.V(v)
	return t
}

// Set__MetaStoreManagerRoleArn updates property "MetaStoreManagerRoleArn".
func (t *AWS_SecurityLake_DataLake) Set__MetaStoreManagerRoleArn(v cfz.Expression[string]) *AWS_SecurityLake_DataLake {
	t.MetaStoreManagerRoleArn = v
	return t
}

// SetV__MetaStoreManagerRoleArn updates property "MetaStoreManagerRoleArn".
func (t *AWS_SecurityLake_DataLake) SetV__MetaStoreManagerRoleArn(v string) *AWS_SecurityLake_DataLake {
	t.MetaStoreManagerRoleArn = cfz.V(v)
	return t
}

// Set__ReplicationConfiguration updates property "ReplicationConfiguration".
func (t *AWS_SecurityLake_DataLake) Set__ReplicationConfiguration(v cfz.Expression[AWS_SecurityLake_DataLake_ReplicationConfiguration]) *AWS_SecurityLake_DataLake {
	t.ReplicationConfiguration = v
	return t
}

// SetV__ReplicationConfiguration updates property "ReplicationConfiguration".
func (t *AWS_SecurityLake_DataLake) SetV__ReplicationConfiguration(v AWS_SecurityLake_DataLake_ReplicationConfiguration) *AWS_SecurityLake_DataLake {
	t.ReplicationConfiguration = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_SecurityLake_DataLake) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_SecurityLake_DataLake {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_SecurityLake_DataLake) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_SecurityLake_DataLake {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_SecurityLake_DataLake) SetSV__Tags(v ...cfz.Tag) *AWS_SecurityLake_DataLake {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_SecurityLake_DataLake) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_SecurityLake_DataLake) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_SecurityLake_DataLake__AttributesMap.Arn))
}

// GetAtt__S3BucketArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: S3BucketArn
func (t *AWS_SecurityLake_DataLake) GetAtt__S3BucketArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_SecurityLake_DataLake__AttributesMap.S3BucketArn))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_SecurityLake_DataLake) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_SecurityLake_DataLake) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__S3BucketArn returns a conventionally configured output for an attribute of this resource.
// Attribute: S3BucketArn
func (t *AWS_SecurityLake_DataLake) GetConventionalOutputAtt__S3BucketArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttS3BucketArn", t.GetAtt__S3BucketArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_SecurityLake_DataLake) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_SecurityLake_DataLake

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_SecurityLake_DataLake) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
