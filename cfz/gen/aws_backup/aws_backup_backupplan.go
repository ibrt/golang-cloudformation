// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_backup

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Backup_BackupPlan)(nil)
	_ cfz.Resource                   = (*AWS_Backup_BackupPlan)(nil)
)

const (
	// AWS_Backup_BackupPlan__Type is the CloudFormation type for AWS::Backup::BackupPlan.
	AWS_Backup_BackupPlan__Type = "AWS::Backup::BackupPlan"
)

var (
	// AWS_Backup_BackupPlan__AttributesMap reports all the CloudFormation attributes for AWS::Backup::BackupPlan.
	AWS_Backup_BackupPlan__AttributesMap = struct {
		BackupPlanArn string
		BackupPlanId  string
		VersionId     string
	}{
		BackupPlanArn: "BackupPlanArn",
		BackupPlanId:  "BackupPlanId",
		VersionId:     "VersionId",
	}

	// AWS_Backup_BackupPlan__AttributesSlice reports all the CloudFormation attributes for AWS::Backup::BackupPlan.
	AWS_Backup_BackupPlan__AttributesSlice = []string{
		AWS_Backup_BackupPlan__AttributesMap.BackupPlanArn,
		AWS_Backup_BackupPlan__AttributesMap.BackupPlanId,
		AWS_Backup_BackupPlan__AttributesMap.VersionId,
	}
)

var (
	// AWS_Backup_BackupPlan__PropertiesMap reports all the CloudFormation properties for AWS::Backup::BackupPlan.
	AWS_Backup_BackupPlan__PropertiesMap = struct {
		BackupPlan     string
		BackupPlanTags string
	}{
		BackupPlan:     "BackupPlan",
		BackupPlanTags: "BackupPlanTags",
	}

	// AWS_Backup_BackupPlan__PropertiesSlice reports all the CloudFormation properties for AWS::Backup::BackupPlan.
	AWS_Backup_BackupPlan__PropertiesSlice = []string{
		AWS_Backup_BackupPlan__PropertiesMap.BackupPlan,
		AWS_Backup_BackupPlan__PropertiesMap.BackupPlanTags,
	}
)

// AWS_Backup_BackupPlan is a binding for AWS::Backup::BackupPlan.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-backup-backupplan.html
type AWS_Backup_BackupPlan struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// BackupPlan is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-backup-backupplan.html#cfn-backup-backupplan-backupplan
	BackupPlan cfz.Expression[AWS_Backup_BackupPlan_BackupPlanResourceType] `json:"BackupPlan,omitempty"`

	// BackupPlanTags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-backup-backupplan.html#cfn-backup-backupplan-backupplantags
	BackupPlanTags cfz.ExpressionMap[string] `json:"BackupPlanTags,omitempty"`
}

// New__AWS_Backup_BackupPlan initializes a new *AWS_Backup_BackupPlan.
func New__AWS_Backup_BackupPlan(logicalName string) *AWS_Backup_BackupPlan {
	return &AWS_Backup_BackupPlan{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Backup_BackupPlan) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Backup_BackupPlan) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Backup_BackupPlan) GetType() string {
	return AWS_Backup_BackupPlan__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Backup_BackupPlan) Set__LogicalName(v string) *AWS_Backup_BackupPlan {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Backup_BackupPlan) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Backup_BackupPlan {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Backup_BackupPlan) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Backup_BackupPlan {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Backup_BackupPlan) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Backup_BackupPlan {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Backup_BackupPlan) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Backup_BackupPlan {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Backup_BackupPlan) Set__RequestedOutputs(v []cfz.Output) *AWS_Backup_BackupPlan {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Backup_BackupPlan) Add__RequestedOutputs(v ...cfz.Output) *AWS_Backup_BackupPlan {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__BackupPlan updates property "BackupPlan".
func (t *AWS_Backup_BackupPlan) Set__BackupPlan(v cfz.Expression[AWS_Backup_BackupPlan_BackupPlanResourceType]) *AWS_Backup_BackupPlan {
	t.BackupPlan = v
	return t
}

// SetV__BackupPlan updates property "BackupPlan".
func (t *AWS_Backup_BackupPlan) SetV__BackupPlan(v AWS_Backup_BackupPlan_BackupPlanResourceType) *AWS_Backup_BackupPlan {
	t.BackupPlan = cfz.V(v)
	return t
}

// Set__BackupPlanTags updates property "BackupPlanTags".
func (t *AWS_Backup_BackupPlan) Set__BackupPlanTags(v cfz.ExpressionMap[string]) *AWS_Backup_BackupPlan {
	t.BackupPlanTags = v
	return t
}

// SetM__BackupPlanTags updates property "BackupPlanTags".
func (t *AWS_Backup_BackupPlan) SetM__BackupPlanTags(v ...map[string]cfz.Expression[string]) *AWS_Backup_BackupPlan {
	t.BackupPlanTags = cfz.M(v...)
	return t
}

// SetMV__BackupPlanTags updates property "BackupPlanTags".
func (t *AWS_Backup_BackupPlan) SetMV__BackupPlanTags(v ...map[string]string) *AWS_Backup_BackupPlan {
	t.BackupPlanTags = cfz.MV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Backup_BackupPlan) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__BackupPlanArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: BackupPlanArn
func (t *AWS_Backup_BackupPlan) GetAtt__BackupPlanArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Backup_BackupPlan__AttributesMap.BackupPlanArn))
}

// GetAtt__BackupPlanId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: BackupPlanId
func (t *AWS_Backup_BackupPlan) GetAtt__BackupPlanId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Backup_BackupPlan__AttributesMap.BackupPlanId))
}

// GetAtt__VersionId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: VersionId
func (t *AWS_Backup_BackupPlan) GetAtt__VersionId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Backup_BackupPlan__AttributesMap.VersionId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Backup_BackupPlan) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__BackupPlanArn returns a conventionally configured output for an attribute of this resource.
// Attribute: BackupPlanArn
func (t *AWS_Backup_BackupPlan) GetConventionalOutputAtt__BackupPlanArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttBackupPlanArn", t.GetAtt__BackupPlanArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__BackupPlanId returns a conventionally configured output for an attribute of this resource.
// Attribute: BackupPlanId
func (t *AWS_Backup_BackupPlan) GetConventionalOutputAtt__BackupPlanId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttBackupPlanId", t.GetAtt__BackupPlanId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__VersionId returns a conventionally configured output for an attribute of this resource.
// Attribute: VersionId
func (t *AWS_Backup_BackupPlan) GetConventionalOutputAtt__VersionId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersionId", t.GetAtt__VersionId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Backup_BackupPlan) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Backup_BackupPlan

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Backup_BackupPlan) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
