// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ce

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_CE_CostCategory)(nil)
	_ cfz.Resource                   = (*AWS_CE_CostCategory)(nil)
)

const (
	// AWS_CE_CostCategory__Type is the CloudFormation type for AWS::CE::CostCategory.
	AWS_CE_CostCategory__Type = "AWS::CE::CostCategory"
)

var (
	// AWS_CE_CostCategory__AttributesMap reports all the CloudFormation attributes for AWS::CE::CostCategory.
	AWS_CE_CostCategory__AttributesMap = struct {
		Arn            string
		EffectiveStart string
	}{
		Arn:            "Arn",
		EffectiveStart: "EffectiveStart",
	}

	// AWS_CE_CostCategory__AttributesSlice reports all the CloudFormation attributes for AWS::CE::CostCategory.
	AWS_CE_CostCategory__AttributesSlice = []string{
		AWS_CE_CostCategory__AttributesMap.Arn,
		AWS_CE_CostCategory__AttributesMap.EffectiveStart,
	}
)

var (
	// AWS_CE_CostCategory__PropertiesMap reports all the CloudFormation properties for AWS::CE::CostCategory.
	AWS_CE_CostCategory__PropertiesMap = struct {
		DefaultValue     string
		Name             string
		RuleVersion      string
		Rules            string
		SplitChargeRules string
	}{
		DefaultValue:     "DefaultValue",
		Name:             "Name",
		RuleVersion:      "RuleVersion",
		Rules:            "Rules",
		SplitChargeRules: "SplitChargeRules",
	}

	// AWS_CE_CostCategory__PropertiesSlice reports all the CloudFormation properties for AWS::CE::CostCategory.
	AWS_CE_CostCategory__PropertiesSlice = []string{
		AWS_CE_CostCategory__PropertiesMap.DefaultValue,
		AWS_CE_CostCategory__PropertiesMap.Name,
		AWS_CE_CostCategory__PropertiesMap.RuleVersion,
		AWS_CE_CostCategory__PropertiesMap.Rules,
		AWS_CE_CostCategory__PropertiesMap.SplitChargeRules,
	}
)

// AWS_CE_CostCategory is a binding for AWS::CE::CostCategory.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ce-costcategory.html
type AWS_CE_CostCategory struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// DefaultValue is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ce-costcategory.html#cfn-ce-costcategory-defaultvalue
	DefaultValue cfz.Expression[string] `json:"DefaultValue,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ce-costcategory.html#cfn-ce-costcategory-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// RuleVersion is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ce-costcategory.html#cfn-ce-costcategory-ruleversion
	RuleVersion cfz.Expression[string] `json:"RuleVersion,omitempty"`

	// Rules is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ce-costcategory.html#cfn-ce-costcategory-rules
	Rules cfz.Expression[string] `json:"Rules,omitempty"`

	// SplitChargeRules is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ce-costcategory.html#cfn-ce-costcategory-splitchargerules
	SplitChargeRules cfz.Expression[string] `json:"SplitChargeRules,omitempty"`
}

// New__AWS_CE_CostCategory initializes a new *AWS_CE_CostCategory.
func New__AWS_CE_CostCategory(logicalName string) *AWS_CE_CostCategory {
	return &AWS_CE_CostCategory{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_CE_CostCategory) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_CE_CostCategory) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_CE_CostCategory) GetType() string {
	return AWS_CE_CostCategory__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_CE_CostCategory) Set__LogicalName(v string) *AWS_CE_CostCategory {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_CE_CostCategory) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_CE_CostCategory {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_CE_CostCategory) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_CE_CostCategory {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_CE_CostCategory) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_CE_CostCategory {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_CE_CostCategory) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_CE_CostCategory {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_CE_CostCategory) Set__RequestedOutputs(v []cfz.Output) *AWS_CE_CostCategory {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_CE_CostCategory) Add__RequestedOutputs(v ...cfz.Output) *AWS_CE_CostCategory {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__DefaultValue updates property "DefaultValue".
func (t *AWS_CE_CostCategory) Set__DefaultValue(v cfz.Expression[string]) *AWS_CE_CostCategory {
	t.DefaultValue = v
	return t
}

// SetV__DefaultValue updates property "DefaultValue".
func (t *AWS_CE_CostCategory) SetV__DefaultValue(v string) *AWS_CE_CostCategory {
	t.DefaultValue = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_CE_CostCategory) Set__Name(v cfz.Expression[string]) *AWS_CE_CostCategory {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_CE_CostCategory) SetV__Name(v string) *AWS_CE_CostCategory {
	t.Name = cfz.V(v)
	return t
}

// Set__RuleVersion updates property "RuleVersion".
func (t *AWS_CE_CostCategory) Set__RuleVersion(v cfz.Expression[string]) *AWS_CE_CostCategory {
	t.RuleVersion = v
	return t
}

// SetV__RuleVersion updates property "RuleVersion".
func (t *AWS_CE_CostCategory) SetV__RuleVersion(v string) *AWS_CE_CostCategory {
	t.RuleVersion = cfz.V(v)
	return t
}

// Set__Rules updates property "Rules".
func (t *AWS_CE_CostCategory) Set__Rules(v cfz.Expression[string]) *AWS_CE_CostCategory {
	t.Rules = v
	return t
}

// SetV__Rules updates property "Rules".
func (t *AWS_CE_CostCategory) SetV__Rules(v string) *AWS_CE_CostCategory {
	t.Rules = cfz.V(v)
	return t
}

// Set__SplitChargeRules updates property "SplitChargeRules".
func (t *AWS_CE_CostCategory) Set__SplitChargeRules(v cfz.Expression[string]) *AWS_CE_CostCategory {
	t.SplitChargeRules = v
	return t
}

// SetV__SplitChargeRules updates property "SplitChargeRules".
func (t *AWS_CE_CostCategory) SetV__SplitChargeRules(v string) *AWS_CE_CostCategory {
	t.SplitChargeRules = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_CE_CostCategory) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_CE_CostCategory) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_CE_CostCategory__AttributesMap.Arn))
}

// GetAtt__EffectiveStart returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: EffectiveStart
func (t *AWS_CE_CostCategory) GetAtt__EffectiveStart() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_CE_CostCategory__AttributesMap.EffectiveStart))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_CE_CostCategory) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_CE_CostCategory) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__EffectiveStart returns a conventionally configured output for an attribute of this resource.
// Attribute: EffectiveStart
func (t *AWS_CE_CostCategory) GetConventionalOutputAtt__EffectiveStart(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttEffectiveStart", t.GetAtt__EffectiveStart())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_CE_CostCategory) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_CE_CostCategory

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_CE_CostCategory) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
