// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_refactorspaces

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_RefactorSpaces_Application)(nil)
	_ cfz.Resource                   = (*AWS_RefactorSpaces_Application)(nil)
)

const (
	// AWS_RefactorSpaces_Application__Type is the CloudFormation type for AWS::RefactorSpaces::Application.
	AWS_RefactorSpaces_Application__Type = "AWS::RefactorSpaces::Application"
)

var (
	// AWS_RefactorSpaces_Application__AttributesMap reports all the CloudFormation attributes for AWS::RefactorSpaces::Application.
	AWS_RefactorSpaces_Application__AttributesMap = struct {
		ApiGatewayId          string
		ApplicationIdentifier string
		Arn                   string
		NlbArn                string
		NlbName               string
		ProxyUrl              string
		StageName             string
		VpcLinkId             string
	}{
		ApiGatewayId:          "ApiGatewayId",
		ApplicationIdentifier: "ApplicationIdentifier",
		Arn:                   "Arn",
		NlbArn:                "NlbArn",
		NlbName:               "NlbName",
		ProxyUrl:              "ProxyUrl",
		StageName:             "StageName",
		VpcLinkId:             "VpcLinkId",
	}

	// AWS_RefactorSpaces_Application__AttributesSlice reports all the CloudFormation attributes for AWS::RefactorSpaces::Application.
	AWS_RefactorSpaces_Application__AttributesSlice = []string{
		AWS_RefactorSpaces_Application__AttributesMap.ApiGatewayId,
		AWS_RefactorSpaces_Application__AttributesMap.ApplicationIdentifier,
		AWS_RefactorSpaces_Application__AttributesMap.Arn,
		AWS_RefactorSpaces_Application__AttributesMap.NlbArn,
		AWS_RefactorSpaces_Application__AttributesMap.NlbName,
		AWS_RefactorSpaces_Application__AttributesMap.ProxyUrl,
		AWS_RefactorSpaces_Application__AttributesMap.StageName,
		AWS_RefactorSpaces_Application__AttributesMap.VpcLinkId,
	}
)

var (
	// AWS_RefactorSpaces_Application__PropertiesMap reports all the CloudFormation properties for AWS::RefactorSpaces::Application.
	AWS_RefactorSpaces_Application__PropertiesMap = struct {
		ApiGatewayProxy       string
		EnvironmentIdentifier string
		Name                  string
		ProxyType             string
		Tags                  string
		VpcId                 string
	}{
		ApiGatewayProxy:       "ApiGatewayProxy",
		EnvironmentIdentifier: "EnvironmentIdentifier",
		Name:                  "Name",
		ProxyType:             "ProxyType",
		Tags:                  "Tags",
		VpcId:                 "VpcId",
	}

	// AWS_RefactorSpaces_Application__PropertiesSlice reports all the CloudFormation properties for AWS::RefactorSpaces::Application.
	AWS_RefactorSpaces_Application__PropertiesSlice = []string{
		AWS_RefactorSpaces_Application__PropertiesMap.ApiGatewayProxy,
		AWS_RefactorSpaces_Application__PropertiesMap.EnvironmentIdentifier,
		AWS_RefactorSpaces_Application__PropertiesMap.Name,
		AWS_RefactorSpaces_Application__PropertiesMap.ProxyType,
		AWS_RefactorSpaces_Application__PropertiesMap.Tags,
		AWS_RefactorSpaces_Application__PropertiesMap.VpcId,
	}
)

// AWS_RefactorSpaces_Application is a binding for AWS::RefactorSpaces::Application.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-refactorspaces-application.html
type AWS_RefactorSpaces_Application struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ApiGatewayProxy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-refactorspaces-application.html#cfn-refactorspaces-application-apigatewayproxy
	ApiGatewayProxy cfz.Expression[AWS_RefactorSpaces_Application_ApiGatewayProxyInput] `json:"ApiGatewayProxy,omitempty"`

	// EnvironmentIdentifier is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-refactorspaces-application.html#cfn-refactorspaces-application-environmentidentifier
	EnvironmentIdentifier cfz.Expression[string] `json:"EnvironmentIdentifier,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-refactorspaces-application.html#cfn-refactorspaces-application-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// ProxyType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-refactorspaces-application.html#cfn-refactorspaces-application-proxytype
	ProxyType cfz.Expression[string] `json:"ProxyType,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-refactorspaces-application.html#cfn-refactorspaces-application-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// VpcId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-refactorspaces-application.html#cfn-refactorspaces-application-vpcid
	VpcId cfz.Expression[string] `json:"VpcId,omitempty"`
}

// New__AWS_RefactorSpaces_Application initializes a new *AWS_RefactorSpaces_Application.
func New__AWS_RefactorSpaces_Application(logicalName string) *AWS_RefactorSpaces_Application {
	return &AWS_RefactorSpaces_Application{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_RefactorSpaces_Application) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_RefactorSpaces_Application) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_RefactorSpaces_Application) GetType() string {
	return AWS_RefactorSpaces_Application__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_RefactorSpaces_Application) Set__LogicalName(v string) *AWS_RefactorSpaces_Application {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_RefactorSpaces_Application) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_RefactorSpaces_Application {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_RefactorSpaces_Application) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_RefactorSpaces_Application {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_RefactorSpaces_Application) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_RefactorSpaces_Application {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_RefactorSpaces_Application) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_RefactorSpaces_Application {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_RefactorSpaces_Application) Set__RequestedOutputs(v []cfz.Output) *AWS_RefactorSpaces_Application {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_RefactorSpaces_Application) Add__RequestedOutputs(v ...cfz.Output) *AWS_RefactorSpaces_Application {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ApiGatewayProxy updates property "ApiGatewayProxy".
func (t *AWS_RefactorSpaces_Application) Set__ApiGatewayProxy(v cfz.Expression[AWS_RefactorSpaces_Application_ApiGatewayProxyInput]) *AWS_RefactorSpaces_Application {
	t.ApiGatewayProxy = v
	return t
}

// SetV__ApiGatewayProxy updates property "ApiGatewayProxy".
func (t *AWS_RefactorSpaces_Application) SetV__ApiGatewayProxy(v AWS_RefactorSpaces_Application_ApiGatewayProxyInput) *AWS_RefactorSpaces_Application {
	t.ApiGatewayProxy = cfz.V(v)
	return t
}

// Set__EnvironmentIdentifier updates property "EnvironmentIdentifier".
func (t *AWS_RefactorSpaces_Application) Set__EnvironmentIdentifier(v cfz.Expression[string]) *AWS_RefactorSpaces_Application {
	t.EnvironmentIdentifier = v
	return t
}

// SetV__EnvironmentIdentifier updates property "EnvironmentIdentifier".
func (t *AWS_RefactorSpaces_Application) SetV__EnvironmentIdentifier(v string) *AWS_RefactorSpaces_Application {
	t.EnvironmentIdentifier = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_RefactorSpaces_Application) Set__Name(v cfz.Expression[string]) *AWS_RefactorSpaces_Application {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_RefactorSpaces_Application) SetV__Name(v string) *AWS_RefactorSpaces_Application {
	t.Name = cfz.V(v)
	return t
}

// Set__ProxyType updates property "ProxyType".
func (t *AWS_RefactorSpaces_Application) Set__ProxyType(v cfz.Expression[string]) *AWS_RefactorSpaces_Application {
	t.ProxyType = v
	return t
}

// SetV__ProxyType updates property "ProxyType".
func (t *AWS_RefactorSpaces_Application) SetV__ProxyType(v string) *AWS_RefactorSpaces_Application {
	t.ProxyType = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_RefactorSpaces_Application) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_RefactorSpaces_Application {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_RefactorSpaces_Application) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_RefactorSpaces_Application {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_RefactorSpaces_Application) SetSV__Tags(v ...cfz.Tag) *AWS_RefactorSpaces_Application {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__VpcId updates property "VpcId".
func (t *AWS_RefactorSpaces_Application) Set__VpcId(v cfz.Expression[string]) *AWS_RefactorSpaces_Application {
	t.VpcId = v
	return t
}

// SetV__VpcId updates property "VpcId".
func (t *AWS_RefactorSpaces_Application) SetV__VpcId(v string) *AWS_RefactorSpaces_Application {
	t.VpcId = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_RefactorSpaces_Application) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__ApiGatewayId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ApiGatewayId
func (t *AWS_RefactorSpaces_Application) GetAtt__ApiGatewayId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RefactorSpaces_Application__AttributesMap.ApiGatewayId))
}

// GetAtt__ApplicationIdentifier returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ApplicationIdentifier
func (t *AWS_RefactorSpaces_Application) GetAtt__ApplicationIdentifier() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RefactorSpaces_Application__AttributesMap.ApplicationIdentifier))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_RefactorSpaces_Application) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RefactorSpaces_Application__AttributesMap.Arn))
}

// GetAtt__NlbArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: NlbArn
func (t *AWS_RefactorSpaces_Application) GetAtt__NlbArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RefactorSpaces_Application__AttributesMap.NlbArn))
}

// GetAtt__NlbName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: NlbName
func (t *AWS_RefactorSpaces_Application) GetAtt__NlbName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RefactorSpaces_Application__AttributesMap.NlbName))
}

// GetAtt__ProxyUrl returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ProxyUrl
func (t *AWS_RefactorSpaces_Application) GetAtt__ProxyUrl() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RefactorSpaces_Application__AttributesMap.ProxyUrl))
}

// GetAtt__StageName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: StageName
func (t *AWS_RefactorSpaces_Application) GetAtt__StageName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RefactorSpaces_Application__AttributesMap.StageName))
}

// GetAtt__VpcLinkId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: VpcLinkId
func (t *AWS_RefactorSpaces_Application) GetAtt__VpcLinkId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RefactorSpaces_Application__AttributesMap.VpcLinkId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_RefactorSpaces_Application) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ApiGatewayId returns a conventionally configured output for an attribute of this resource.
// Attribute: ApiGatewayId
func (t *AWS_RefactorSpaces_Application) GetConventionalOutputAtt__ApiGatewayId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttApiGatewayId", t.GetAtt__ApiGatewayId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ApplicationIdentifier returns a conventionally configured output for an attribute of this resource.
// Attribute: ApplicationIdentifier
func (t *AWS_RefactorSpaces_Application) GetConventionalOutputAtt__ApplicationIdentifier(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttApplicationIdentifier", t.GetAtt__ApplicationIdentifier())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_RefactorSpaces_Application) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__NlbArn returns a conventionally configured output for an attribute of this resource.
// Attribute: NlbArn
func (t *AWS_RefactorSpaces_Application) GetConventionalOutputAtt__NlbArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNlbArn", t.GetAtt__NlbArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__NlbName returns a conventionally configured output for an attribute of this resource.
// Attribute: NlbName
func (t *AWS_RefactorSpaces_Application) GetConventionalOutputAtt__NlbName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNlbName", t.GetAtt__NlbName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ProxyUrl returns a conventionally configured output for an attribute of this resource.
// Attribute: ProxyUrl
func (t *AWS_RefactorSpaces_Application) GetConventionalOutputAtt__ProxyUrl(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttProxyUrl", t.GetAtt__ProxyUrl())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__StageName returns a conventionally configured output for an attribute of this resource.
// Attribute: StageName
func (t *AWS_RefactorSpaces_Application) GetConventionalOutputAtt__StageName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStageName", t.GetAtt__StageName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__VpcLinkId returns a conventionally configured output for an attribute of this resource.
// Attribute: VpcLinkId
func (t *AWS_RefactorSpaces_Application) GetConventionalOutputAtt__VpcLinkId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVpcLinkId", t.GetAtt__VpcLinkId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_RefactorSpaces_Application) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_RefactorSpaces_Application

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_RefactorSpaces_Application) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
