// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_mediatailor

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_MediaTailor_Channel)(nil)
	_ cfz.Resource                   = (*AWS_MediaTailor_Channel)(nil)
)

const (
	// AWS_MediaTailor_Channel__Type is the CloudFormation type for AWS::MediaTailor::Channel.
	AWS_MediaTailor_Channel__Type = "AWS::MediaTailor::Channel"
)

var (
	// AWS_MediaTailor_Channel__AttributesMap reports all the CloudFormation attributes for AWS::MediaTailor::Channel.
	AWS_MediaTailor_Channel__AttributesMap = struct {
		Arn string
	}{
		Arn: "Arn",
	}

	// AWS_MediaTailor_Channel__AttributesSlice reports all the CloudFormation attributes for AWS::MediaTailor::Channel.
	AWS_MediaTailor_Channel__AttributesSlice = []string{
		AWS_MediaTailor_Channel__AttributesMap.Arn,
	}
)

var (
	// AWS_MediaTailor_Channel__PropertiesMap reports all the CloudFormation properties for AWS::MediaTailor::Channel.
	AWS_MediaTailor_Channel__PropertiesMap = struct {
		Audiences              string
		ChannelName            string
		FillerSlate            string
		LogConfiguration       string
		Outputs                string
		PlaybackMode           string
		Tags                   string
		Tier                   string
		TimeShiftConfiguration string
	}{
		Audiences:              "Audiences",
		ChannelName:            "ChannelName",
		FillerSlate:            "FillerSlate",
		LogConfiguration:       "LogConfiguration",
		Outputs:                "Outputs",
		PlaybackMode:           "PlaybackMode",
		Tags:                   "Tags",
		Tier:                   "Tier",
		TimeShiftConfiguration: "TimeShiftConfiguration",
	}

	// AWS_MediaTailor_Channel__PropertiesSlice reports all the CloudFormation properties for AWS::MediaTailor::Channel.
	AWS_MediaTailor_Channel__PropertiesSlice = []string{
		AWS_MediaTailor_Channel__PropertiesMap.Audiences,
		AWS_MediaTailor_Channel__PropertiesMap.ChannelName,
		AWS_MediaTailor_Channel__PropertiesMap.FillerSlate,
		AWS_MediaTailor_Channel__PropertiesMap.LogConfiguration,
		AWS_MediaTailor_Channel__PropertiesMap.Outputs,
		AWS_MediaTailor_Channel__PropertiesMap.PlaybackMode,
		AWS_MediaTailor_Channel__PropertiesMap.Tags,
		AWS_MediaTailor_Channel__PropertiesMap.Tier,
		AWS_MediaTailor_Channel__PropertiesMap.TimeShiftConfiguration,
	}
)

// AWS_MediaTailor_Channel is a binding for AWS::MediaTailor::Channel.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediatailor-channel.html
type AWS_MediaTailor_Channel struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Audiences is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediatailor-channel.html#cfn-mediatailor-channel-audiences
	Audiences cfz.ExpressionSlice[string] `json:"Audiences,omitempty"`

	// ChannelName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediatailor-channel.html#cfn-mediatailor-channel-channelname
	ChannelName cfz.Expression[string] `json:"ChannelName,omitempty"`

	// FillerSlate is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediatailor-channel.html#cfn-mediatailor-channel-fillerslate
	FillerSlate cfz.Expression[AWS_MediaTailor_Channel_SlateSource] `json:"FillerSlate,omitempty"`

	// LogConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediatailor-channel.html#cfn-mediatailor-channel-logconfiguration
	LogConfiguration cfz.Expression[AWS_MediaTailor_Channel_LogConfigurationForChannel] `json:"LogConfiguration,omitempty"`

	// Outputs is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediatailor-channel.html#cfn-mediatailor-channel-outputs
	Outputs cfz.ExpressionSlice[AWS_MediaTailor_Channel_RequestOutputItem] `json:"Outputs,omitempty"`

	// PlaybackMode is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediatailor-channel.html#cfn-mediatailor-channel-playbackmode
	PlaybackMode cfz.Expression[string] `json:"PlaybackMode,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediatailor-channel.html#cfn-mediatailor-channel-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// Tier is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediatailor-channel.html#cfn-mediatailor-channel-tier
	Tier cfz.Expression[string] `json:"Tier,omitempty"`

	// TimeShiftConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediatailor-channel.html#cfn-mediatailor-channel-timeshiftconfiguration
	TimeShiftConfiguration cfz.Expression[AWS_MediaTailor_Channel_TimeShiftConfiguration] `json:"TimeShiftConfiguration,omitempty"`
}

// New__AWS_MediaTailor_Channel initializes a new *AWS_MediaTailor_Channel.
func New__AWS_MediaTailor_Channel(logicalName string) *AWS_MediaTailor_Channel {
	return &AWS_MediaTailor_Channel{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_MediaTailor_Channel) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_MediaTailor_Channel) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_MediaTailor_Channel) GetType() string {
	return AWS_MediaTailor_Channel__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_MediaTailor_Channel) Set__LogicalName(v string) *AWS_MediaTailor_Channel {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_MediaTailor_Channel) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_MediaTailor_Channel {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_MediaTailor_Channel) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_MediaTailor_Channel {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_MediaTailor_Channel) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_MediaTailor_Channel {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_MediaTailor_Channel) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_MediaTailor_Channel {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_MediaTailor_Channel) Set__RequestedOutputs(v []cfz.Output) *AWS_MediaTailor_Channel {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_MediaTailor_Channel) Add__RequestedOutputs(v ...cfz.Output) *AWS_MediaTailor_Channel {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Audiences updates property "Audiences".
func (t *AWS_MediaTailor_Channel) Set__Audiences(v cfz.ExpressionSlice[string]) *AWS_MediaTailor_Channel {
	t.Audiences = v
	return t
}

// SetS__Audiences updates property "Audiences".
func (t *AWS_MediaTailor_Channel) SetS__Audiences(v ...cfz.Expression[string]) *AWS_MediaTailor_Channel {
	t.Audiences = cfz.S(v...)
	return t
}

// SetSV__Audiences updates property "Audiences".
func (t *AWS_MediaTailor_Channel) SetSV__Audiences(v ...string) *AWS_MediaTailor_Channel {
	t.Audiences = cfz.SV(v...)
	return t
}

// Set__ChannelName updates property "ChannelName".
func (t *AWS_MediaTailor_Channel) Set__ChannelName(v cfz.Expression[string]) *AWS_MediaTailor_Channel {
	t.ChannelName = v
	return t
}

// SetV__ChannelName updates property "ChannelName".
func (t *AWS_MediaTailor_Channel) SetV__ChannelName(v string) *AWS_MediaTailor_Channel {
	t.ChannelName = cfz.V(v)
	return t
}

// Set__FillerSlate updates property "FillerSlate".
func (t *AWS_MediaTailor_Channel) Set__FillerSlate(v cfz.Expression[AWS_MediaTailor_Channel_SlateSource]) *AWS_MediaTailor_Channel {
	t.FillerSlate = v
	return t
}

// SetV__FillerSlate updates property "FillerSlate".
func (t *AWS_MediaTailor_Channel) SetV__FillerSlate(v AWS_MediaTailor_Channel_SlateSource) *AWS_MediaTailor_Channel {
	t.FillerSlate = cfz.V(v)
	return t
}

// Set__LogConfiguration updates property "LogConfiguration".
func (t *AWS_MediaTailor_Channel) Set__LogConfiguration(v cfz.Expression[AWS_MediaTailor_Channel_LogConfigurationForChannel]) *AWS_MediaTailor_Channel {
	t.LogConfiguration = v
	return t
}

// SetV__LogConfiguration updates property "LogConfiguration".
func (t *AWS_MediaTailor_Channel) SetV__LogConfiguration(v AWS_MediaTailor_Channel_LogConfigurationForChannel) *AWS_MediaTailor_Channel {
	t.LogConfiguration = cfz.V(v)
	return t
}

// Set__Outputs updates property "Outputs".
func (t *AWS_MediaTailor_Channel) Set__Outputs(v cfz.ExpressionSlice[AWS_MediaTailor_Channel_RequestOutputItem]) *AWS_MediaTailor_Channel {
	t.Outputs = v
	return t
}

// SetS__Outputs updates property "Outputs".
func (t *AWS_MediaTailor_Channel) SetS__Outputs(v ...cfz.Expression[AWS_MediaTailor_Channel_RequestOutputItem]) *AWS_MediaTailor_Channel {
	t.Outputs = cfz.S(v...)
	return t
}

// SetSV__Outputs updates property "Outputs".
func (t *AWS_MediaTailor_Channel) SetSV__Outputs(v ...AWS_MediaTailor_Channel_RequestOutputItem) *AWS_MediaTailor_Channel {
	t.Outputs = cfz.SV(v...)
	return t
}

// Set__PlaybackMode updates property "PlaybackMode".
func (t *AWS_MediaTailor_Channel) Set__PlaybackMode(v cfz.Expression[string]) *AWS_MediaTailor_Channel {
	t.PlaybackMode = v
	return t
}

// SetV__PlaybackMode updates property "PlaybackMode".
func (t *AWS_MediaTailor_Channel) SetV__PlaybackMode(v string) *AWS_MediaTailor_Channel {
	t.PlaybackMode = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_MediaTailor_Channel) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_MediaTailor_Channel {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_MediaTailor_Channel) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_MediaTailor_Channel {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_MediaTailor_Channel) SetSV__Tags(v ...cfz.Tag) *AWS_MediaTailor_Channel {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__Tier updates property "Tier".
func (t *AWS_MediaTailor_Channel) Set__Tier(v cfz.Expression[string]) *AWS_MediaTailor_Channel {
	t.Tier = v
	return t
}

// SetV__Tier updates property "Tier".
func (t *AWS_MediaTailor_Channel) SetV__Tier(v string) *AWS_MediaTailor_Channel {
	t.Tier = cfz.V(v)
	return t
}

// Set__TimeShiftConfiguration updates property "TimeShiftConfiguration".
func (t *AWS_MediaTailor_Channel) Set__TimeShiftConfiguration(v cfz.Expression[AWS_MediaTailor_Channel_TimeShiftConfiguration]) *AWS_MediaTailor_Channel {
	t.TimeShiftConfiguration = v
	return t
}

// SetV__TimeShiftConfiguration updates property "TimeShiftConfiguration".
func (t *AWS_MediaTailor_Channel) SetV__TimeShiftConfiguration(v AWS_MediaTailor_Channel_TimeShiftConfiguration) *AWS_MediaTailor_Channel {
	t.TimeShiftConfiguration = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_MediaTailor_Channel) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_MediaTailor_Channel) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaTailor_Channel__AttributesMap.Arn))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_MediaTailor_Channel) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_MediaTailor_Channel) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_MediaTailor_Channel) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_MediaTailor_Channel

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_MediaTailor_Channel) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
