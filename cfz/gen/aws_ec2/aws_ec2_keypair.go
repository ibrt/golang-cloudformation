// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_KeyPair)(nil)
	_ cfz.Resource                   = (*AWS_EC2_KeyPair)(nil)
)

const (
	// AWS_EC2_KeyPair__Type is the CloudFormation type for AWS::EC2::KeyPair.
	AWS_EC2_KeyPair__Type = "AWS::EC2::KeyPair"
)

var (
	// AWS_EC2_KeyPair__AttributesMap reports all the CloudFormation attributes for AWS::EC2::KeyPair.
	AWS_EC2_KeyPair__AttributesMap = struct {
		KeyFingerprint string
		KeyPairId      string
	}{
		KeyFingerprint: "KeyFingerprint",
		KeyPairId:      "KeyPairId",
	}

	// AWS_EC2_KeyPair__AttributesSlice reports all the CloudFormation attributes for AWS::EC2::KeyPair.
	AWS_EC2_KeyPair__AttributesSlice = []string{
		AWS_EC2_KeyPair__AttributesMap.KeyFingerprint,
		AWS_EC2_KeyPair__AttributesMap.KeyPairId,
	}
)

var (
	// AWS_EC2_KeyPair__PropertiesMap reports all the CloudFormation properties for AWS::EC2::KeyPair.
	AWS_EC2_KeyPair__PropertiesMap = struct {
		KeyFormat         string
		KeyName           string
		KeyType           string
		PublicKeyMaterial string
		Tags              string
	}{
		KeyFormat:         "KeyFormat",
		KeyName:           "KeyName",
		KeyType:           "KeyType",
		PublicKeyMaterial: "PublicKeyMaterial",
		Tags:              "Tags",
	}

	// AWS_EC2_KeyPair__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::KeyPair.
	AWS_EC2_KeyPair__PropertiesSlice = []string{
		AWS_EC2_KeyPair__PropertiesMap.KeyFormat,
		AWS_EC2_KeyPair__PropertiesMap.KeyName,
		AWS_EC2_KeyPair__PropertiesMap.KeyType,
		AWS_EC2_KeyPair__PropertiesMap.PublicKeyMaterial,
		AWS_EC2_KeyPair__PropertiesMap.Tags,
	}
)

// AWS_EC2_KeyPair is a binding for AWS::EC2::KeyPair.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-keypair.html
type AWS_EC2_KeyPair struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// KeyFormat is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-keypair.html#cfn-ec2-keypair-keyformat
	KeyFormat cfz.Expression[string] `json:"KeyFormat,omitempty"`

	// KeyName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-keypair.html#cfn-ec2-keypair-keyname
	KeyName cfz.Expression[string] `json:"KeyName,omitempty"`

	// KeyType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-keypair.html#cfn-ec2-keypair-keytype
	KeyType cfz.Expression[string] `json:"KeyType,omitempty"`

	// PublicKeyMaterial is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-keypair.html#cfn-ec2-keypair-publickeymaterial
	PublicKeyMaterial cfz.Expression[string] `json:"PublicKeyMaterial,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-keypair.html#cfn-ec2-keypair-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_EC2_KeyPair initializes a new *AWS_EC2_KeyPair.
func New__AWS_EC2_KeyPair(logicalName string) *AWS_EC2_KeyPair {
	return &AWS_EC2_KeyPair{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_KeyPair) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_KeyPair) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_KeyPair) GetType() string {
	return AWS_EC2_KeyPair__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_KeyPair) Set__LogicalName(v string) *AWS_EC2_KeyPair {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_KeyPair) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_KeyPair {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_KeyPair) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_KeyPair {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_KeyPair) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_KeyPair {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_KeyPair) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_KeyPair {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_KeyPair) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_KeyPair {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_KeyPair) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_KeyPair {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__KeyFormat updates property "KeyFormat".
func (t *AWS_EC2_KeyPair) Set__KeyFormat(v cfz.Expression[string]) *AWS_EC2_KeyPair {
	t.KeyFormat = v
	return t
}

// SetV__KeyFormat updates property "KeyFormat".
func (t *AWS_EC2_KeyPair) SetV__KeyFormat(v string) *AWS_EC2_KeyPair {
	t.KeyFormat = cfz.V(v)
	return t
}

// Set__KeyName updates property "KeyName".
func (t *AWS_EC2_KeyPair) Set__KeyName(v cfz.Expression[string]) *AWS_EC2_KeyPair {
	t.KeyName = v
	return t
}

// SetV__KeyName updates property "KeyName".
func (t *AWS_EC2_KeyPair) SetV__KeyName(v string) *AWS_EC2_KeyPair {
	t.KeyName = cfz.V(v)
	return t
}

// Set__KeyType updates property "KeyType".
func (t *AWS_EC2_KeyPair) Set__KeyType(v cfz.Expression[string]) *AWS_EC2_KeyPair {
	t.KeyType = v
	return t
}

// SetV__KeyType updates property "KeyType".
func (t *AWS_EC2_KeyPair) SetV__KeyType(v string) *AWS_EC2_KeyPair {
	t.KeyType = cfz.V(v)
	return t
}

// Set__PublicKeyMaterial updates property "PublicKeyMaterial".
func (t *AWS_EC2_KeyPair) Set__PublicKeyMaterial(v cfz.Expression[string]) *AWS_EC2_KeyPair {
	t.PublicKeyMaterial = v
	return t
}

// SetV__PublicKeyMaterial updates property "PublicKeyMaterial".
func (t *AWS_EC2_KeyPair) SetV__PublicKeyMaterial(v string) *AWS_EC2_KeyPair {
	t.PublicKeyMaterial = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_EC2_KeyPair) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_EC2_KeyPair {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_EC2_KeyPair) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_EC2_KeyPair {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_EC2_KeyPair) SetSV__Tags(v ...cfz.Tag) *AWS_EC2_KeyPair {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_KeyPair) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__KeyFingerprint returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: KeyFingerprint
func (t *AWS_EC2_KeyPair) GetAtt__KeyFingerprint() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_KeyPair__AttributesMap.KeyFingerprint))
}

// GetAtt__KeyPairId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: KeyPairId
func (t *AWS_EC2_KeyPair) GetAtt__KeyPairId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_KeyPair__AttributesMap.KeyPairId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_KeyPair) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__KeyFingerprint returns a conventionally configured output for an attribute of this resource.
// Attribute: KeyFingerprint
func (t *AWS_EC2_KeyPair) GetConventionalOutputAtt__KeyFingerprint(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttKeyFingerprint", t.GetAtt__KeyFingerprint())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__KeyPairId returns a conventionally configured output for an attribute of this resource.
// Attribute: KeyPairId
func (t *AWS_EC2_KeyPair) GetConventionalOutputAtt__KeyPairId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttKeyPairId", t.GetAtt__KeyPairId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_KeyPair) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_KeyPair

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_KeyPair) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
