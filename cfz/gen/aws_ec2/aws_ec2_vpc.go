// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_VPC)(nil)
	_ cfz.Resource                   = (*AWS_EC2_VPC)(nil)
)

const (
	// AWS_EC2_VPC__Type is the CloudFormation type for AWS::EC2::VPC.
	AWS_EC2_VPC__Type = "AWS::EC2::VPC"
)

var (
	// AWS_EC2_VPC__AttributesMap reports all the CloudFormation attributes for AWS::EC2::VPC.
	AWS_EC2_VPC__AttributesMap = struct {
		CidrBlock             string
		CidrBlockAssociations string
		DefaultNetworkAcl     string
		DefaultSecurityGroup  string
		Ipv6CidrBlocks        string
		VpcId                 string
	}{
		CidrBlock:             "CidrBlock",
		CidrBlockAssociations: "CidrBlockAssociations",
		DefaultNetworkAcl:     "DefaultNetworkAcl",
		DefaultSecurityGroup:  "DefaultSecurityGroup",
		Ipv6CidrBlocks:        "Ipv6CidrBlocks",
		VpcId:                 "VpcId",
	}

	// AWS_EC2_VPC__AttributesSlice reports all the CloudFormation attributes for AWS::EC2::VPC.
	AWS_EC2_VPC__AttributesSlice = []string{
		AWS_EC2_VPC__AttributesMap.CidrBlock,
		AWS_EC2_VPC__AttributesMap.CidrBlockAssociations,
		AWS_EC2_VPC__AttributesMap.DefaultNetworkAcl,
		AWS_EC2_VPC__AttributesMap.DefaultSecurityGroup,
		AWS_EC2_VPC__AttributesMap.Ipv6CidrBlocks,
		AWS_EC2_VPC__AttributesMap.VpcId,
	}
)

var (
	// AWS_EC2_VPC__PropertiesMap reports all the CloudFormation properties for AWS::EC2::VPC.
	AWS_EC2_VPC__PropertiesMap = struct {
		CidrBlock          string
		EnableDnsHostnames string
		EnableDnsSupport   string
		InstanceTenancy    string
		Ipv4IpamPoolId     string
		Ipv4NetmaskLength  string
		Tags               string
	}{
		CidrBlock:          "CidrBlock",
		EnableDnsHostnames: "EnableDnsHostnames",
		EnableDnsSupport:   "EnableDnsSupport",
		InstanceTenancy:    "InstanceTenancy",
		Ipv4IpamPoolId:     "Ipv4IpamPoolId",
		Ipv4NetmaskLength:  "Ipv4NetmaskLength",
		Tags:               "Tags",
	}

	// AWS_EC2_VPC__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::VPC.
	AWS_EC2_VPC__PropertiesSlice = []string{
		AWS_EC2_VPC__PropertiesMap.CidrBlock,
		AWS_EC2_VPC__PropertiesMap.EnableDnsHostnames,
		AWS_EC2_VPC__PropertiesMap.EnableDnsSupport,
		AWS_EC2_VPC__PropertiesMap.InstanceTenancy,
		AWS_EC2_VPC__PropertiesMap.Ipv4IpamPoolId,
		AWS_EC2_VPC__PropertiesMap.Ipv4NetmaskLength,
		AWS_EC2_VPC__PropertiesMap.Tags,
	}
)

// AWS_EC2_VPC is a binding for AWS::EC2::VPC.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
type AWS_EC2_VPC struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// CidrBlock is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html#cfn-ec2-vpc-cidrblock
	CidrBlock cfz.Expression[string] `json:"CidrBlock,omitempty"`

	// EnableDnsHostnames is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html#cfn-ec2-vpc-enablednshostnames
	EnableDnsHostnames cfz.Expression[bool] `json:"EnableDnsHostnames,omitempty"`

	// EnableDnsSupport is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html#cfn-ec2-vpc-enablednssupport
	EnableDnsSupport cfz.Expression[bool] `json:"EnableDnsSupport,omitempty"`

	// InstanceTenancy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html#cfn-ec2-vpc-instancetenancy
	InstanceTenancy cfz.Expression[string] `json:"InstanceTenancy,omitempty"`

	// Ipv4IpamPoolId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html#cfn-ec2-vpc-ipv4ipampoolid
	Ipv4IpamPoolId cfz.Expression[string] `json:"Ipv4IpamPoolId,omitempty"`

	// Ipv4NetmaskLength is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html#cfn-ec2-vpc-ipv4netmasklength
	Ipv4NetmaskLength cfz.Expression[int32] `json:"Ipv4NetmaskLength,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html#cfn-ec2-vpc-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_EC2_VPC initializes a new *AWS_EC2_VPC.
func New__AWS_EC2_VPC(logicalName string) *AWS_EC2_VPC {
	return &AWS_EC2_VPC{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_VPC) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_VPC) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_VPC) GetType() string {
	return AWS_EC2_VPC__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_VPC) Set__LogicalName(v string) *AWS_EC2_VPC {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_VPC) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_VPC {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_VPC) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_VPC {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_VPC) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_VPC {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_VPC) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_VPC {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_VPC) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_VPC {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_VPC) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_VPC {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__CidrBlock updates property "CidrBlock".
func (t *AWS_EC2_VPC) Set__CidrBlock(v cfz.Expression[string]) *AWS_EC2_VPC {
	t.CidrBlock = v
	return t
}

// SetV__CidrBlock updates property "CidrBlock".
func (t *AWS_EC2_VPC) SetV__CidrBlock(v string) *AWS_EC2_VPC {
	t.CidrBlock = cfz.V(v)
	return t
}

// Set__EnableDnsHostnames updates property "EnableDnsHostnames".
func (t *AWS_EC2_VPC) Set__EnableDnsHostnames(v cfz.Expression[bool]) *AWS_EC2_VPC {
	t.EnableDnsHostnames = v
	return t
}

// SetV__EnableDnsHostnames updates property "EnableDnsHostnames".
func (t *AWS_EC2_VPC) SetV__EnableDnsHostnames(v bool) *AWS_EC2_VPC {
	t.EnableDnsHostnames = cfz.V(v)
	return t
}

// Set__EnableDnsSupport updates property "EnableDnsSupport".
func (t *AWS_EC2_VPC) Set__EnableDnsSupport(v cfz.Expression[bool]) *AWS_EC2_VPC {
	t.EnableDnsSupport = v
	return t
}

// SetV__EnableDnsSupport updates property "EnableDnsSupport".
func (t *AWS_EC2_VPC) SetV__EnableDnsSupport(v bool) *AWS_EC2_VPC {
	t.EnableDnsSupport = cfz.V(v)
	return t
}

// Set__InstanceTenancy updates property "InstanceTenancy".
func (t *AWS_EC2_VPC) Set__InstanceTenancy(v cfz.Expression[string]) *AWS_EC2_VPC {
	t.InstanceTenancy = v
	return t
}

// SetV__InstanceTenancy updates property "InstanceTenancy".
func (t *AWS_EC2_VPC) SetV__InstanceTenancy(v string) *AWS_EC2_VPC {
	t.InstanceTenancy = cfz.V(v)
	return t
}

// Set__Ipv4IpamPoolId updates property "Ipv4IpamPoolId".
func (t *AWS_EC2_VPC) Set__Ipv4IpamPoolId(v cfz.Expression[string]) *AWS_EC2_VPC {
	t.Ipv4IpamPoolId = v
	return t
}

// SetV__Ipv4IpamPoolId updates property "Ipv4IpamPoolId".
func (t *AWS_EC2_VPC) SetV__Ipv4IpamPoolId(v string) *AWS_EC2_VPC {
	t.Ipv4IpamPoolId = cfz.V(v)
	return t
}

// Set__Ipv4NetmaskLength updates property "Ipv4NetmaskLength".
func (t *AWS_EC2_VPC) Set__Ipv4NetmaskLength(v cfz.Expression[int32]) *AWS_EC2_VPC {
	t.Ipv4NetmaskLength = v
	return t
}

// SetV__Ipv4NetmaskLength updates property "Ipv4NetmaskLength".
func (t *AWS_EC2_VPC) SetV__Ipv4NetmaskLength(v int32) *AWS_EC2_VPC {
	t.Ipv4NetmaskLength = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_EC2_VPC) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_EC2_VPC {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_EC2_VPC) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_EC2_VPC {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_EC2_VPC) SetSV__Tags(v ...cfz.Tag) *AWS_EC2_VPC {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_VPC) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__CidrBlock returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CidrBlock
func (t *AWS_EC2_VPC) GetAtt__CidrBlock() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_VPC__AttributesMap.CidrBlock))
}

// GetAttSlice__CidrBlockAssociations returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CidrBlockAssociations
func (t *AWS_EC2_VPC) GetAttSlice__CidrBlockAssociations() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_VPC__AttributesMap.CidrBlockAssociations))
}

// GetAtt__DefaultNetworkAcl returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DefaultNetworkAcl
func (t *AWS_EC2_VPC) GetAtt__DefaultNetworkAcl() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_VPC__AttributesMap.DefaultNetworkAcl))
}

// GetAtt__DefaultSecurityGroup returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DefaultSecurityGroup
func (t *AWS_EC2_VPC) GetAtt__DefaultSecurityGroup() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_VPC__AttributesMap.DefaultSecurityGroup))
}

// GetAttSlice__Ipv6CidrBlocks returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Ipv6CidrBlocks
func (t *AWS_EC2_VPC) GetAttSlice__Ipv6CidrBlocks() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_VPC__AttributesMap.Ipv6CidrBlocks))
}

// GetAtt__VpcId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: VpcId
func (t *AWS_EC2_VPC) GetAtt__VpcId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_VPC__AttributesMap.VpcId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_VPC) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CidrBlock returns a conventionally configured output for an attribute of this resource.
// Attribute: CidrBlock
func (t *AWS_EC2_VPC) GetConventionalOutputAtt__CidrBlock(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCidrBlock", t.GetAtt__CidrBlock())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CidrBlockAssociations returns a conventionally configured output for an attribute of this resource.
// Attribute: CidrBlockAssociations
func (t *AWS_EC2_VPC) GetConventionalOutputAtt__CidrBlockAssociations(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCidrBlockAssociations", t.GetAttSlice__CidrBlockAssociations())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DefaultNetworkAcl returns a conventionally configured output for an attribute of this resource.
// Attribute: DefaultNetworkAcl
func (t *AWS_EC2_VPC) GetConventionalOutputAtt__DefaultNetworkAcl(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDefaultNetworkAcl", t.GetAtt__DefaultNetworkAcl())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DefaultSecurityGroup returns a conventionally configured output for an attribute of this resource.
// Attribute: DefaultSecurityGroup
func (t *AWS_EC2_VPC) GetConventionalOutputAtt__DefaultSecurityGroup(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDefaultSecurityGroup", t.GetAtt__DefaultSecurityGroup())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Ipv6CidrBlocks returns a conventionally configured output for an attribute of this resource.
// Attribute: Ipv6CidrBlocks
func (t *AWS_EC2_VPC) GetConventionalOutputAtt__Ipv6CidrBlocks(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIpv6CidrBlocks", t.GetAttSlice__Ipv6CidrBlocks())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__VpcId returns a conventionally configured output for an attribute of this resource.
// Attribute: VpcId
func (t *AWS_EC2_VPC) GetConventionalOutputAtt__VpcId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVpcId", t.GetAtt__VpcId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_VPC) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_VPC

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_VPC) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
