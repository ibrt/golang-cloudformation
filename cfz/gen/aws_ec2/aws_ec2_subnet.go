// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_Subnet)(nil)
	_ cfz.Resource                   = (*AWS_EC2_Subnet)(nil)
)

const (
	// AWS_EC2_Subnet__Type is the CloudFormation type for AWS::EC2::Subnet.
	AWS_EC2_Subnet__Type = "AWS::EC2::Subnet"
)

var (
	// AWS_EC2_Subnet__AttributesMap reports all the CloudFormation attributes for AWS::EC2::Subnet.
	AWS_EC2_Subnet__AttributesMap = struct {
		AvailabilityZone        string
		AvailabilityZoneId      string
		CidrBlock               string
		Ipv6CidrBlocks          string
		NetworkAclAssociationId string
		OutpostArn              string
		SubnetId                string
		VpcId                   string
	}{
		AvailabilityZone:        "AvailabilityZone",
		AvailabilityZoneId:      "AvailabilityZoneId",
		CidrBlock:               "CidrBlock",
		Ipv6CidrBlocks:          "Ipv6CidrBlocks",
		NetworkAclAssociationId: "NetworkAclAssociationId",
		OutpostArn:              "OutpostArn",
		SubnetId:                "SubnetId",
		VpcId:                   "VpcId",
	}

	// AWS_EC2_Subnet__AttributesSlice reports all the CloudFormation attributes for AWS::EC2::Subnet.
	AWS_EC2_Subnet__AttributesSlice = []string{
		AWS_EC2_Subnet__AttributesMap.AvailabilityZone,
		AWS_EC2_Subnet__AttributesMap.AvailabilityZoneId,
		AWS_EC2_Subnet__AttributesMap.CidrBlock,
		AWS_EC2_Subnet__AttributesMap.Ipv6CidrBlocks,
		AWS_EC2_Subnet__AttributesMap.NetworkAclAssociationId,
		AWS_EC2_Subnet__AttributesMap.OutpostArn,
		AWS_EC2_Subnet__AttributesMap.SubnetId,
		AWS_EC2_Subnet__AttributesMap.VpcId,
	}
)

var (
	// AWS_EC2_Subnet__PropertiesMap reports all the CloudFormation properties for AWS::EC2::Subnet.
	AWS_EC2_Subnet__PropertiesMap = struct {
		AssignIpv6AddressOnCreation   string
		AvailabilityZone              string
		AvailabilityZoneId            string
		CidrBlock                     string
		EnableDns64                   string
		EnableLniAtDeviceIndex        string
		Ipv4IpamPoolId                string
		Ipv4NetmaskLength             string
		Ipv6CidrBlock                 string
		Ipv6IpamPoolId                string
		Ipv6Native                    string
		Ipv6NetmaskLength             string
		MapPublicIpOnLaunch           string
		OutpostArn                    string
		PrivateDnsNameOptionsOnLaunch string
		Tags                          string
		VpcId                         string
	}{
		AssignIpv6AddressOnCreation:   "AssignIpv6AddressOnCreation",
		AvailabilityZone:              "AvailabilityZone",
		AvailabilityZoneId:            "AvailabilityZoneId",
		CidrBlock:                     "CidrBlock",
		EnableDns64:                   "EnableDns64",
		EnableLniAtDeviceIndex:        "EnableLniAtDeviceIndex",
		Ipv4IpamPoolId:                "Ipv4IpamPoolId",
		Ipv4NetmaskLength:             "Ipv4NetmaskLength",
		Ipv6CidrBlock:                 "Ipv6CidrBlock",
		Ipv6IpamPoolId:                "Ipv6IpamPoolId",
		Ipv6Native:                    "Ipv6Native",
		Ipv6NetmaskLength:             "Ipv6NetmaskLength",
		MapPublicIpOnLaunch:           "MapPublicIpOnLaunch",
		OutpostArn:                    "OutpostArn",
		PrivateDnsNameOptionsOnLaunch: "PrivateDnsNameOptionsOnLaunch",
		Tags:                          "Tags",
		VpcId:                         "VpcId",
	}

	// AWS_EC2_Subnet__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::Subnet.
	AWS_EC2_Subnet__PropertiesSlice = []string{
		AWS_EC2_Subnet__PropertiesMap.AssignIpv6AddressOnCreation,
		AWS_EC2_Subnet__PropertiesMap.AvailabilityZone,
		AWS_EC2_Subnet__PropertiesMap.AvailabilityZoneId,
		AWS_EC2_Subnet__PropertiesMap.CidrBlock,
		AWS_EC2_Subnet__PropertiesMap.EnableDns64,
		AWS_EC2_Subnet__PropertiesMap.EnableLniAtDeviceIndex,
		AWS_EC2_Subnet__PropertiesMap.Ipv4IpamPoolId,
		AWS_EC2_Subnet__PropertiesMap.Ipv4NetmaskLength,
		AWS_EC2_Subnet__PropertiesMap.Ipv6CidrBlock,
		AWS_EC2_Subnet__PropertiesMap.Ipv6IpamPoolId,
		AWS_EC2_Subnet__PropertiesMap.Ipv6Native,
		AWS_EC2_Subnet__PropertiesMap.Ipv6NetmaskLength,
		AWS_EC2_Subnet__PropertiesMap.MapPublicIpOnLaunch,
		AWS_EC2_Subnet__PropertiesMap.OutpostArn,
		AWS_EC2_Subnet__PropertiesMap.PrivateDnsNameOptionsOnLaunch,
		AWS_EC2_Subnet__PropertiesMap.Tags,
		AWS_EC2_Subnet__PropertiesMap.VpcId,
	}
)

// AWS_EC2_Subnet is a binding for AWS::EC2::Subnet.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
type AWS_EC2_Subnet struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AssignIpv6AddressOnCreation is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-assignipv6addressoncreation
	AssignIpv6AddressOnCreation cfz.Expression[bool] `json:"AssignIpv6AddressOnCreation,omitempty"`

	// AvailabilityZone is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-availabilityzone
	AvailabilityZone cfz.Expression[string] `json:"AvailabilityZone,omitempty"`

	// AvailabilityZoneId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-availabilityzoneid
	AvailabilityZoneId cfz.Expression[string] `json:"AvailabilityZoneId,omitempty"`

	// CidrBlock is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-cidrblock
	CidrBlock cfz.Expression[string] `json:"CidrBlock,omitempty"`

	// EnableDns64 is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-enabledns64
	EnableDns64 cfz.Expression[bool] `json:"EnableDns64,omitempty"`

	// EnableLniAtDeviceIndex is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-enablelniatdeviceindex
	EnableLniAtDeviceIndex cfz.Expression[int32] `json:"EnableLniAtDeviceIndex,omitempty"`

	// Ipv4IpamPoolId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-ipv4ipampoolid
	Ipv4IpamPoolId cfz.Expression[string] `json:"Ipv4IpamPoolId,omitempty"`

	// Ipv4NetmaskLength is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-ipv4netmasklength
	Ipv4NetmaskLength cfz.Expression[int32] `json:"Ipv4NetmaskLength,omitempty"`

	// Ipv6CidrBlock is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-ipv6cidrblock
	Ipv6CidrBlock cfz.Expression[string] `json:"Ipv6CidrBlock,omitempty"`

	// Ipv6IpamPoolId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-ipv6ipampoolid
	Ipv6IpamPoolId cfz.Expression[string] `json:"Ipv6IpamPoolId,omitempty"`

	// Ipv6Native is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-ipv6native
	Ipv6Native cfz.Expression[bool] `json:"Ipv6Native,omitempty"`

	// Ipv6NetmaskLength is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-ipv6netmasklength
	Ipv6NetmaskLength cfz.Expression[int32] `json:"Ipv6NetmaskLength,omitempty"`

	// MapPublicIpOnLaunch is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-mappubliciponlaunch
	MapPublicIpOnLaunch cfz.Expression[bool] `json:"MapPublicIpOnLaunch,omitempty"`

	// OutpostArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-outpostarn
	OutpostArn cfz.Expression[string] `json:"OutpostArn,omitempty"`

	// PrivateDnsNameOptionsOnLaunch is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-privatednsnameoptionsonlaunch
	PrivateDnsNameOptionsOnLaunch cfz.Expression[AWS_EC2_Subnet_PrivateDnsNameOptionsOnLaunch] `json:"PrivateDnsNameOptionsOnLaunch,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// VpcId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-vpcid
	VpcId cfz.Expression[string] `json:"VpcId,omitempty"`
}

// New__AWS_EC2_Subnet initializes a new *AWS_EC2_Subnet.
func New__AWS_EC2_Subnet(logicalName string) *AWS_EC2_Subnet {
	return &AWS_EC2_Subnet{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_Subnet) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_Subnet) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_Subnet) GetType() string {
	return AWS_EC2_Subnet__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_Subnet) Set__LogicalName(v string) *AWS_EC2_Subnet {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_Subnet) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_Subnet {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_Subnet) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_Subnet {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_Subnet) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_Subnet {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_Subnet) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_Subnet {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_Subnet) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_Subnet {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_Subnet) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_Subnet {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AssignIpv6AddressOnCreation updates property "AssignIpv6AddressOnCreation".
func (t *AWS_EC2_Subnet) Set__AssignIpv6AddressOnCreation(v cfz.Expression[bool]) *AWS_EC2_Subnet {
	t.AssignIpv6AddressOnCreation = v
	return t
}

// SetV__AssignIpv6AddressOnCreation updates property "AssignIpv6AddressOnCreation".
func (t *AWS_EC2_Subnet) SetV__AssignIpv6AddressOnCreation(v bool) *AWS_EC2_Subnet {
	t.AssignIpv6AddressOnCreation = cfz.V(v)
	return t
}

// Set__AvailabilityZone updates property "AvailabilityZone".
func (t *AWS_EC2_Subnet) Set__AvailabilityZone(v cfz.Expression[string]) *AWS_EC2_Subnet {
	t.AvailabilityZone = v
	return t
}

// SetV__AvailabilityZone updates property "AvailabilityZone".
func (t *AWS_EC2_Subnet) SetV__AvailabilityZone(v string) *AWS_EC2_Subnet {
	t.AvailabilityZone = cfz.V(v)
	return t
}

// Set__AvailabilityZoneId updates property "AvailabilityZoneId".
func (t *AWS_EC2_Subnet) Set__AvailabilityZoneId(v cfz.Expression[string]) *AWS_EC2_Subnet {
	t.AvailabilityZoneId = v
	return t
}

// SetV__AvailabilityZoneId updates property "AvailabilityZoneId".
func (t *AWS_EC2_Subnet) SetV__AvailabilityZoneId(v string) *AWS_EC2_Subnet {
	t.AvailabilityZoneId = cfz.V(v)
	return t
}

// Set__CidrBlock updates property "CidrBlock".
func (t *AWS_EC2_Subnet) Set__CidrBlock(v cfz.Expression[string]) *AWS_EC2_Subnet {
	t.CidrBlock = v
	return t
}

// SetV__CidrBlock updates property "CidrBlock".
func (t *AWS_EC2_Subnet) SetV__CidrBlock(v string) *AWS_EC2_Subnet {
	t.CidrBlock = cfz.V(v)
	return t
}

// Set__EnableDns64 updates property "EnableDns64".
func (t *AWS_EC2_Subnet) Set__EnableDns64(v cfz.Expression[bool]) *AWS_EC2_Subnet {
	t.EnableDns64 = v
	return t
}

// SetV__EnableDns64 updates property "EnableDns64".
func (t *AWS_EC2_Subnet) SetV__EnableDns64(v bool) *AWS_EC2_Subnet {
	t.EnableDns64 = cfz.V(v)
	return t
}

// Set__EnableLniAtDeviceIndex updates property "EnableLniAtDeviceIndex".
func (t *AWS_EC2_Subnet) Set__EnableLniAtDeviceIndex(v cfz.Expression[int32]) *AWS_EC2_Subnet {
	t.EnableLniAtDeviceIndex = v
	return t
}

// SetV__EnableLniAtDeviceIndex updates property "EnableLniAtDeviceIndex".
func (t *AWS_EC2_Subnet) SetV__EnableLniAtDeviceIndex(v int32) *AWS_EC2_Subnet {
	t.EnableLniAtDeviceIndex = cfz.V(v)
	return t
}

// Set__Ipv4IpamPoolId updates property "Ipv4IpamPoolId".
func (t *AWS_EC2_Subnet) Set__Ipv4IpamPoolId(v cfz.Expression[string]) *AWS_EC2_Subnet {
	t.Ipv4IpamPoolId = v
	return t
}

// SetV__Ipv4IpamPoolId updates property "Ipv4IpamPoolId".
func (t *AWS_EC2_Subnet) SetV__Ipv4IpamPoolId(v string) *AWS_EC2_Subnet {
	t.Ipv4IpamPoolId = cfz.V(v)
	return t
}

// Set__Ipv4NetmaskLength updates property "Ipv4NetmaskLength".
func (t *AWS_EC2_Subnet) Set__Ipv4NetmaskLength(v cfz.Expression[int32]) *AWS_EC2_Subnet {
	t.Ipv4NetmaskLength = v
	return t
}

// SetV__Ipv4NetmaskLength updates property "Ipv4NetmaskLength".
func (t *AWS_EC2_Subnet) SetV__Ipv4NetmaskLength(v int32) *AWS_EC2_Subnet {
	t.Ipv4NetmaskLength = cfz.V(v)
	return t
}

// Set__Ipv6CidrBlock updates property "Ipv6CidrBlock".
func (t *AWS_EC2_Subnet) Set__Ipv6CidrBlock(v cfz.Expression[string]) *AWS_EC2_Subnet {
	t.Ipv6CidrBlock = v
	return t
}

// SetV__Ipv6CidrBlock updates property "Ipv6CidrBlock".
func (t *AWS_EC2_Subnet) SetV__Ipv6CidrBlock(v string) *AWS_EC2_Subnet {
	t.Ipv6CidrBlock = cfz.V(v)
	return t
}

// Set__Ipv6IpamPoolId updates property "Ipv6IpamPoolId".
func (t *AWS_EC2_Subnet) Set__Ipv6IpamPoolId(v cfz.Expression[string]) *AWS_EC2_Subnet {
	t.Ipv6IpamPoolId = v
	return t
}

// SetV__Ipv6IpamPoolId updates property "Ipv6IpamPoolId".
func (t *AWS_EC2_Subnet) SetV__Ipv6IpamPoolId(v string) *AWS_EC2_Subnet {
	t.Ipv6IpamPoolId = cfz.V(v)
	return t
}

// Set__Ipv6Native updates property "Ipv6Native".
func (t *AWS_EC2_Subnet) Set__Ipv6Native(v cfz.Expression[bool]) *AWS_EC2_Subnet {
	t.Ipv6Native = v
	return t
}

// SetV__Ipv6Native updates property "Ipv6Native".
func (t *AWS_EC2_Subnet) SetV__Ipv6Native(v bool) *AWS_EC2_Subnet {
	t.Ipv6Native = cfz.V(v)
	return t
}

// Set__Ipv6NetmaskLength updates property "Ipv6NetmaskLength".
func (t *AWS_EC2_Subnet) Set__Ipv6NetmaskLength(v cfz.Expression[int32]) *AWS_EC2_Subnet {
	t.Ipv6NetmaskLength = v
	return t
}

// SetV__Ipv6NetmaskLength updates property "Ipv6NetmaskLength".
func (t *AWS_EC2_Subnet) SetV__Ipv6NetmaskLength(v int32) *AWS_EC2_Subnet {
	t.Ipv6NetmaskLength = cfz.V(v)
	return t
}

// Set__MapPublicIpOnLaunch updates property "MapPublicIpOnLaunch".
func (t *AWS_EC2_Subnet) Set__MapPublicIpOnLaunch(v cfz.Expression[bool]) *AWS_EC2_Subnet {
	t.MapPublicIpOnLaunch = v
	return t
}

// SetV__MapPublicIpOnLaunch updates property "MapPublicIpOnLaunch".
func (t *AWS_EC2_Subnet) SetV__MapPublicIpOnLaunch(v bool) *AWS_EC2_Subnet {
	t.MapPublicIpOnLaunch = cfz.V(v)
	return t
}

// Set__OutpostArn updates property "OutpostArn".
func (t *AWS_EC2_Subnet) Set__OutpostArn(v cfz.Expression[string]) *AWS_EC2_Subnet {
	t.OutpostArn = v
	return t
}

// SetV__OutpostArn updates property "OutpostArn".
func (t *AWS_EC2_Subnet) SetV__OutpostArn(v string) *AWS_EC2_Subnet {
	t.OutpostArn = cfz.V(v)
	return t
}

// Set__PrivateDnsNameOptionsOnLaunch updates property "PrivateDnsNameOptionsOnLaunch".
func (t *AWS_EC2_Subnet) Set__PrivateDnsNameOptionsOnLaunch(v cfz.Expression[AWS_EC2_Subnet_PrivateDnsNameOptionsOnLaunch]) *AWS_EC2_Subnet {
	t.PrivateDnsNameOptionsOnLaunch = v
	return t
}

// SetV__PrivateDnsNameOptionsOnLaunch updates property "PrivateDnsNameOptionsOnLaunch".
func (t *AWS_EC2_Subnet) SetV__PrivateDnsNameOptionsOnLaunch(v AWS_EC2_Subnet_PrivateDnsNameOptionsOnLaunch) *AWS_EC2_Subnet {
	t.PrivateDnsNameOptionsOnLaunch = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_EC2_Subnet) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_EC2_Subnet {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_EC2_Subnet) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_EC2_Subnet {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_EC2_Subnet) SetSV__Tags(v ...cfz.Tag) *AWS_EC2_Subnet {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__VpcId updates property "VpcId".
func (t *AWS_EC2_Subnet) Set__VpcId(v cfz.Expression[string]) *AWS_EC2_Subnet {
	t.VpcId = v
	return t
}

// SetV__VpcId updates property "VpcId".
func (t *AWS_EC2_Subnet) SetV__VpcId(v string) *AWS_EC2_Subnet {
	t.VpcId = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_Subnet) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__AvailabilityZone returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AvailabilityZone
func (t *AWS_EC2_Subnet) GetAtt__AvailabilityZone() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_Subnet__AttributesMap.AvailabilityZone))
}

// GetAtt__AvailabilityZoneId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AvailabilityZoneId
func (t *AWS_EC2_Subnet) GetAtt__AvailabilityZoneId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_Subnet__AttributesMap.AvailabilityZoneId))
}

// GetAtt__CidrBlock returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CidrBlock
func (t *AWS_EC2_Subnet) GetAtt__CidrBlock() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_Subnet__AttributesMap.CidrBlock))
}

// GetAttSlice__Ipv6CidrBlocks returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Ipv6CidrBlocks
func (t *AWS_EC2_Subnet) GetAttSlice__Ipv6CidrBlocks() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_Subnet__AttributesMap.Ipv6CidrBlocks))
}

// GetAtt__NetworkAclAssociationId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: NetworkAclAssociationId
func (t *AWS_EC2_Subnet) GetAtt__NetworkAclAssociationId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_Subnet__AttributesMap.NetworkAclAssociationId))
}

// GetAtt__OutpostArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: OutpostArn
func (t *AWS_EC2_Subnet) GetAtt__OutpostArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_Subnet__AttributesMap.OutpostArn))
}

// GetAtt__SubnetId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: SubnetId
func (t *AWS_EC2_Subnet) GetAtt__SubnetId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_Subnet__AttributesMap.SubnetId))
}

// GetAtt__VpcId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: VpcId
func (t *AWS_EC2_Subnet) GetAtt__VpcId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_Subnet__AttributesMap.VpcId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_Subnet) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AvailabilityZone returns a conventionally configured output for an attribute of this resource.
// Attribute: AvailabilityZone
func (t *AWS_EC2_Subnet) GetConventionalOutputAtt__AvailabilityZone(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAvailabilityZone", t.GetAtt__AvailabilityZone())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AvailabilityZoneId returns a conventionally configured output for an attribute of this resource.
// Attribute: AvailabilityZoneId
func (t *AWS_EC2_Subnet) GetConventionalOutputAtt__AvailabilityZoneId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAvailabilityZoneId", t.GetAtt__AvailabilityZoneId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CidrBlock returns a conventionally configured output for an attribute of this resource.
// Attribute: CidrBlock
func (t *AWS_EC2_Subnet) GetConventionalOutputAtt__CidrBlock(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCidrBlock", t.GetAtt__CidrBlock())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Ipv6CidrBlocks returns a conventionally configured output for an attribute of this resource.
// Attribute: Ipv6CidrBlocks
func (t *AWS_EC2_Subnet) GetConventionalOutputAtt__Ipv6CidrBlocks(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIpv6CidrBlocks", t.GetAttSlice__Ipv6CidrBlocks())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__NetworkAclAssociationId returns a conventionally configured output for an attribute of this resource.
// Attribute: NetworkAclAssociationId
func (t *AWS_EC2_Subnet) GetConventionalOutputAtt__NetworkAclAssociationId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNetworkAclAssociationId", t.GetAtt__NetworkAclAssociationId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__OutpostArn returns a conventionally configured output for an attribute of this resource.
// Attribute: OutpostArn
func (t *AWS_EC2_Subnet) GetConventionalOutputAtt__OutpostArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttOutpostArn", t.GetAtt__OutpostArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__SubnetId returns a conventionally configured output for an attribute of this resource.
// Attribute: SubnetId
func (t *AWS_EC2_Subnet) GetConventionalOutputAtt__SubnetId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSubnetId", t.GetAtt__SubnetId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__VpcId returns a conventionally configured output for an attribute of this resource.
// Attribute: VpcId
func (t *AWS_EC2_Subnet) GetConventionalOutputAtt__VpcId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVpcId", t.GetAtt__VpcId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_Subnet) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_Subnet

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_Subnet) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
