// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_TrafficMirrorTarget)(nil)
	_ cfz.Resource                   = (*AWS_EC2_TrafficMirrorTarget)(nil)
)

const (
	// AWS_EC2_TrafficMirrorTarget__Type is the CloudFormation type for AWS::EC2::TrafficMirrorTarget.
	AWS_EC2_TrafficMirrorTarget__Type = "AWS::EC2::TrafficMirrorTarget"
)

var (
	// AWS_EC2_TrafficMirrorTarget__PropertiesMap reports all the CloudFormation properties for AWS::EC2::TrafficMirrorTarget.
	AWS_EC2_TrafficMirrorTarget__PropertiesMap = struct {
		Description                   string
		GatewayLoadBalancerEndpointId string
		NetworkInterfaceId            string
		NetworkLoadBalancerArn        string
		Tags                          string
	}{
		Description:                   "Description",
		GatewayLoadBalancerEndpointId: "GatewayLoadBalancerEndpointId",
		NetworkInterfaceId:            "NetworkInterfaceId",
		NetworkLoadBalancerArn:        "NetworkLoadBalancerArn",
		Tags:                          "Tags",
	}

	// AWS_EC2_TrafficMirrorTarget__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::TrafficMirrorTarget.
	AWS_EC2_TrafficMirrorTarget__PropertiesSlice = []string{
		AWS_EC2_TrafficMirrorTarget__PropertiesMap.Description,
		AWS_EC2_TrafficMirrorTarget__PropertiesMap.GatewayLoadBalancerEndpointId,
		AWS_EC2_TrafficMirrorTarget__PropertiesMap.NetworkInterfaceId,
		AWS_EC2_TrafficMirrorTarget__PropertiesMap.NetworkLoadBalancerArn,
		AWS_EC2_TrafficMirrorTarget__PropertiesMap.Tags,
	}
)

// AWS_EC2_TrafficMirrorTarget is a binding for AWS::EC2::TrafficMirrorTarget.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrortarget.html
type AWS_EC2_TrafficMirrorTarget struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrortarget.html#cfn-ec2-trafficmirrortarget-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// GatewayLoadBalancerEndpointId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrortarget.html#cfn-ec2-trafficmirrortarget-gatewayloadbalancerendpointid
	GatewayLoadBalancerEndpointId cfz.Expression[string] `json:"GatewayLoadBalancerEndpointId,omitempty"`

	// NetworkInterfaceId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrortarget.html#cfn-ec2-trafficmirrortarget-networkinterfaceid
	NetworkInterfaceId cfz.Expression[string] `json:"NetworkInterfaceId,omitempty"`

	// NetworkLoadBalancerArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrortarget.html#cfn-ec2-trafficmirrortarget-networkloadbalancerarn
	NetworkLoadBalancerArn cfz.Expression[string] `json:"NetworkLoadBalancerArn,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrortarget.html#cfn-ec2-trafficmirrortarget-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_EC2_TrafficMirrorTarget initializes a new *AWS_EC2_TrafficMirrorTarget.
func New__AWS_EC2_TrafficMirrorTarget(logicalName string) *AWS_EC2_TrafficMirrorTarget {
	return &AWS_EC2_TrafficMirrorTarget{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_TrafficMirrorTarget) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_TrafficMirrorTarget) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_TrafficMirrorTarget) GetType() string {
	return AWS_EC2_TrafficMirrorTarget__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_TrafficMirrorTarget) Set__LogicalName(v string) *AWS_EC2_TrafficMirrorTarget {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_TrafficMirrorTarget) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_TrafficMirrorTarget {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_TrafficMirrorTarget) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_TrafficMirrorTarget {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_TrafficMirrorTarget) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_TrafficMirrorTarget {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_TrafficMirrorTarget) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_TrafficMirrorTarget {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_TrafficMirrorTarget) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_TrafficMirrorTarget {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_TrafficMirrorTarget) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_TrafficMirrorTarget {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_EC2_TrafficMirrorTarget) Set__Description(v cfz.Expression[string]) *AWS_EC2_TrafficMirrorTarget {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_EC2_TrafficMirrorTarget) SetV__Description(v string) *AWS_EC2_TrafficMirrorTarget {
	t.Description = cfz.V(v)
	return t
}

// Set__GatewayLoadBalancerEndpointId updates property "GatewayLoadBalancerEndpointId".
func (t *AWS_EC2_TrafficMirrorTarget) Set__GatewayLoadBalancerEndpointId(v cfz.Expression[string]) *AWS_EC2_TrafficMirrorTarget {
	t.GatewayLoadBalancerEndpointId = v
	return t
}

// SetV__GatewayLoadBalancerEndpointId updates property "GatewayLoadBalancerEndpointId".
func (t *AWS_EC2_TrafficMirrorTarget) SetV__GatewayLoadBalancerEndpointId(v string) *AWS_EC2_TrafficMirrorTarget {
	t.GatewayLoadBalancerEndpointId = cfz.V(v)
	return t
}

// Set__NetworkInterfaceId updates property "NetworkInterfaceId".
func (t *AWS_EC2_TrafficMirrorTarget) Set__NetworkInterfaceId(v cfz.Expression[string]) *AWS_EC2_TrafficMirrorTarget {
	t.NetworkInterfaceId = v
	return t
}

// SetV__NetworkInterfaceId updates property "NetworkInterfaceId".
func (t *AWS_EC2_TrafficMirrorTarget) SetV__NetworkInterfaceId(v string) *AWS_EC2_TrafficMirrorTarget {
	t.NetworkInterfaceId = cfz.V(v)
	return t
}

// Set__NetworkLoadBalancerArn updates property "NetworkLoadBalancerArn".
func (t *AWS_EC2_TrafficMirrorTarget) Set__NetworkLoadBalancerArn(v cfz.Expression[string]) *AWS_EC2_TrafficMirrorTarget {
	t.NetworkLoadBalancerArn = v
	return t
}

// SetV__NetworkLoadBalancerArn updates property "NetworkLoadBalancerArn".
func (t *AWS_EC2_TrafficMirrorTarget) SetV__NetworkLoadBalancerArn(v string) *AWS_EC2_TrafficMirrorTarget {
	t.NetworkLoadBalancerArn = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_EC2_TrafficMirrorTarget) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_EC2_TrafficMirrorTarget {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_EC2_TrafficMirrorTarget) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_EC2_TrafficMirrorTarget {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_EC2_TrafficMirrorTarget) SetSV__Tags(v ...cfz.Tag) *AWS_EC2_TrafficMirrorTarget {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_TrafficMirrorTarget) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_TrafficMirrorTarget) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_TrafficMirrorTarget) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_TrafficMirrorTarget

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_TrafficMirrorTarget) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
