// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"github.com/ibrt/golang-cloudformation/cfz"
)

const (
	// AWS_EC2_FlowLog_DestinationOptions__Type is the CloudFormation type for AWS::EC2::FlowLog.DestinationOptions.
	AWS_EC2_FlowLog_DestinationOptions__Type = "AWS::EC2::FlowLog.DestinationOptions"
)

var (
	// AWS_EC2_FlowLog_DestinationOptions__PropertiesMap reports all the CloudFormation properties for AWS::EC2::FlowLog.DestinationOptions.
	AWS_EC2_FlowLog_DestinationOptions__PropertiesMap = struct {
		FileFormat               string
		HiveCompatiblePartitions string
		PerHourPartition         string
	}{
		FileFormat:               "FileFormat",
		HiveCompatiblePartitions: "HiveCompatiblePartitions",
		PerHourPartition:         "PerHourPartition",
	}

	// AWS_EC2_FlowLog_DestinationOptions__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::FlowLog.DestinationOptions.
	AWS_EC2_FlowLog_DestinationOptions__PropertiesSlice = []string{
		AWS_EC2_FlowLog_DestinationOptions__PropertiesMap.FileFormat,
		AWS_EC2_FlowLog_DestinationOptions__PropertiesMap.HiveCompatiblePartitions,
		AWS_EC2_FlowLog_DestinationOptions__PropertiesMap.PerHourPartition,
	}
)

// AWS_EC2_FlowLog_DestinationOptions is a binding for AWS::EC2::FlowLog.DestinationOptions.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-flowlog-destinationoptions.html
type AWS_EC2_FlowLog_DestinationOptions struct {
	// FileFormat is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-flowlog-destinationoptions.html#cfn-ec2-flowlog-destinationoptions-fileformat
	FileFormat cfz.Expression[string] `json:"FileFormat,omitempty"`

	// HiveCompatiblePartitions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-flowlog-destinationoptions.html#cfn-ec2-flowlog-destinationoptions-hivecompatiblepartitions
	HiveCompatiblePartitions cfz.Expression[bool] `json:"HiveCompatiblePartitions,omitempty"`

	// PerHourPartition is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-flowlog-destinationoptions.html#cfn-ec2-flowlog-destinationoptions-perhourpartition
	PerHourPartition cfz.Expression[bool] `json:"PerHourPartition,omitempty"`
}

// New__AWS_EC2_FlowLog_DestinationOptions initializes a new AWS_EC2_FlowLog_DestinationOptions.
func New__AWS_EC2_FlowLog_DestinationOptions() AWS_EC2_FlowLog_DestinationOptions {
	return AWS_EC2_FlowLog_DestinationOptions{}
}

// GetType returns the CloudFormation type.
func (AWS_EC2_FlowLog_DestinationOptions) GetType() string {
	return AWS_EC2_FlowLog_DestinationOptions__Type
}

// Set__FileFormat updates property "FileFormat".
func (t AWS_EC2_FlowLog_DestinationOptions) Set__FileFormat(v cfz.Expression[string]) AWS_EC2_FlowLog_DestinationOptions {
	t.FileFormat = v
	return t
}

// SetV__FileFormat updates property "FileFormat".
func (t AWS_EC2_FlowLog_DestinationOptions) SetV__FileFormat(v string) AWS_EC2_FlowLog_DestinationOptions {
	t.FileFormat = cfz.V(v)
	return t
}

// Set__HiveCompatiblePartitions updates property "HiveCompatiblePartitions".
func (t AWS_EC2_FlowLog_DestinationOptions) Set__HiveCompatiblePartitions(v cfz.Expression[bool]) AWS_EC2_FlowLog_DestinationOptions {
	t.HiveCompatiblePartitions = v
	return t
}

// SetV__HiveCompatiblePartitions updates property "HiveCompatiblePartitions".
func (t AWS_EC2_FlowLog_DestinationOptions) SetV__HiveCompatiblePartitions(v bool) AWS_EC2_FlowLog_DestinationOptions {
	t.HiveCompatiblePartitions = cfz.V(v)
	return t
}

// Set__PerHourPartition updates property "PerHourPartition".
func (t AWS_EC2_FlowLog_DestinationOptions) Set__PerHourPartition(v cfz.Expression[bool]) AWS_EC2_FlowLog_DestinationOptions {
	t.PerHourPartition = v
	return t
}

// SetV__PerHourPartition updates property "PerHourPartition".
func (t AWS_EC2_FlowLog_DestinationOptions) SetV__PerHourPartition(v bool) AWS_EC2_FlowLog_DestinationOptions {
	t.PerHourPartition = cfz.V(v)
	return t
}
