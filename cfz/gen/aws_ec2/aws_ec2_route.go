// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_Route)(nil)
	_ cfz.Resource                   = (*AWS_EC2_Route)(nil)
)

const (
	// AWS_EC2_Route__Type is the CloudFormation type for AWS::EC2::Route.
	AWS_EC2_Route__Type = "AWS::EC2::Route"
)

var (
	// AWS_EC2_Route__AttributesMap reports all the CloudFormation attributes for AWS::EC2::Route.
	AWS_EC2_Route__AttributesMap = struct {
		CidrBlock string
	}{
		CidrBlock: "CidrBlock",
	}

	// AWS_EC2_Route__AttributesSlice reports all the CloudFormation attributes for AWS::EC2::Route.
	AWS_EC2_Route__AttributesSlice = []string{
		AWS_EC2_Route__AttributesMap.CidrBlock,
	}
)

var (
	// AWS_EC2_Route__PropertiesMap reports all the CloudFormation properties for AWS::EC2::Route.
	AWS_EC2_Route__PropertiesMap = struct {
		CarrierGatewayId            string
		CoreNetworkArn              string
		DestinationCidrBlock        string
		DestinationIpv6CidrBlock    string
		DestinationPrefixListId     string
		EgressOnlyInternetGatewayId string
		GatewayId                   string
		InstanceId                  string
		LocalGatewayId              string
		NatGatewayId                string
		NetworkInterfaceId          string
		RouteTableId                string
		TransitGatewayId            string
		VpcEndpointId               string
		VpcPeeringConnectionId      string
	}{
		CarrierGatewayId:            "CarrierGatewayId",
		CoreNetworkArn:              "CoreNetworkArn",
		DestinationCidrBlock:        "DestinationCidrBlock",
		DestinationIpv6CidrBlock:    "DestinationIpv6CidrBlock",
		DestinationPrefixListId:     "DestinationPrefixListId",
		EgressOnlyInternetGatewayId: "EgressOnlyInternetGatewayId",
		GatewayId:                   "GatewayId",
		InstanceId:                  "InstanceId",
		LocalGatewayId:              "LocalGatewayId",
		NatGatewayId:                "NatGatewayId",
		NetworkInterfaceId:          "NetworkInterfaceId",
		RouteTableId:                "RouteTableId",
		TransitGatewayId:            "TransitGatewayId",
		VpcEndpointId:               "VpcEndpointId",
		VpcPeeringConnectionId:      "VpcPeeringConnectionId",
	}

	// AWS_EC2_Route__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::Route.
	AWS_EC2_Route__PropertiesSlice = []string{
		AWS_EC2_Route__PropertiesMap.CarrierGatewayId,
		AWS_EC2_Route__PropertiesMap.CoreNetworkArn,
		AWS_EC2_Route__PropertiesMap.DestinationCidrBlock,
		AWS_EC2_Route__PropertiesMap.DestinationIpv6CidrBlock,
		AWS_EC2_Route__PropertiesMap.DestinationPrefixListId,
		AWS_EC2_Route__PropertiesMap.EgressOnlyInternetGatewayId,
		AWS_EC2_Route__PropertiesMap.GatewayId,
		AWS_EC2_Route__PropertiesMap.InstanceId,
		AWS_EC2_Route__PropertiesMap.LocalGatewayId,
		AWS_EC2_Route__PropertiesMap.NatGatewayId,
		AWS_EC2_Route__PropertiesMap.NetworkInterfaceId,
		AWS_EC2_Route__PropertiesMap.RouteTableId,
		AWS_EC2_Route__PropertiesMap.TransitGatewayId,
		AWS_EC2_Route__PropertiesMap.VpcEndpointId,
		AWS_EC2_Route__PropertiesMap.VpcPeeringConnectionId,
	}
)

// AWS_EC2_Route is a binding for AWS::EC2::Route.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
type AWS_EC2_Route struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// CarrierGatewayId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html#cfn-ec2-route-carriergatewayid
	CarrierGatewayId cfz.Expression[string] `json:"CarrierGatewayId,omitempty"`

	// CoreNetworkArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html#cfn-ec2-route-corenetworkarn
	CoreNetworkArn cfz.Expression[string] `json:"CoreNetworkArn,omitempty"`

	// DestinationCidrBlock is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html#cfn-ec2-route-destinationcidrblock
	DestinationCidrBlock cfz.Expression[string] `json:"DestinationCidrBlock,omitempty"`

	// DestinationIpv6CidrBlock is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html#cfn-ec2-route-destinationipv6cidrblock
	DestinationIpv6CidrBlock cfz.Expression[string] `json:"DestinationIpv6CidrBlock,omitempty"`

	// DestinationPrefixListId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html#cfn-ec2-route-destinationprefixlistid
	DestinationPrefixListId cfz.Expression[string] `json:"DestinationPrefixListId,omitempty"`

	// EgressOnlyInternetGatewayId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html#cfn-ec2-route-egressonlyinternetgatewayid
	EgressOnlyInternetGatewayId cfz.Expression[string] `json:"EgressOnlyInternetGatewayId,omitempty"`

	// GatewayId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html#cfn-ec2-route-gatewayid
	GatewayId cfz.Expression[string] `json:"GatewayId,omitempty"`

	// InstanceId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html#cfn-ec2-route-instanceid
	InstanceId cfz.Expression[string] `json:"InstanceId,omitempty"`

	// LocalGatewayId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html#cfn-ec2-route-localgatewayid
	LocalGatewayId cfz.Expression[string] `json:"LocalGatewayId,omitempty"`

	// NatGatewayId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html#cfn-ec2-route-natgatewayid
	NatGatewayId cfz.Expression[string] `json:"NatGatewayId,omitempty"`

	// NetworkInterfaceId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html#cfn-ec2-route-networkinterfaceid
	NetworkInterfaceId cfz.Expression[string] `json:"NetworkInterfaceId,omitempty"`

	// RouteTableId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html#cfn-ec2-route-routetableid
	RouteTableId cfz.Expression[string] `json:"RouteTableId,omitempty"`

	// TransitGatewayId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html#cfn-ec2-route-transitgatewayid
	TransitGatewayId cfz.Expression[string] `json:"TransitGatewayId,omitempty"`

	// VpcEndpointId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html#cfn-ec2-route-vpcendpointid
	VpcEndpointId cfz.Expression[string] `json:"VpcEndpointId,omitempty"`

	// VpcPeeringConnectionId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html#cfn-ec2-route-vpcpeeringconnectionid
	VpcPeeringConnectionId cfz.Expression[string] `json:"VpcPeeringConnectionId,omitempty"`
}

// New__AWS_EC2_Route initializes a new *AWS_EC2_Route.
func New__AWS_EC2_Route(logicalName string) *AWS_EC2_Route {
	return &AWS_EC2_Route{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_Route) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_Route) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_Route) GetType() string {
	return AWS_EC2_Route__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_Route) Set__LogicalName(v string) *AWS_EC2_Route {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_Route) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_Route {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_Route) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_Route {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_Route) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_Route {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_Route) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_Route {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_Route) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_Route {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_Route) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_Route {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__CarrierGatewayId updates property "CarrierGatewayId".
func (t *AWS_EC2_Route) Set__CarrierGatewayId(v cfz.Expression[string]) *AWS_EC2_Route {
	t.CarrierGatewayId = v
	return t
}

// SetV__CarrierGatewayId updates property "CarrierGatewayId".
func (t *AWS_EC2_Route) SetV__CarrierGatewayId(v string) *AWS_EC2_Route {
	t.CarrierGatewayId = cfz.V(v)
	return t
}

// Set__CoreNetworkArn updates property "CoreNetworkArn".
func (t *AWS_EC2_Route) Set__CoreNetworkArn(v cfz.Expression[string]) *AWS_EC2_Route {
	t.CoreNetworkArn = v
	return t
}

// SetV__CoreNetworkArn updates property "CoreNetworkArn".
func (t *AWS_EC2_Route) SetV__CoreNetworkArn(v string) *AWS_EC2_Route {
	t.CoreNetworkArn = cfz.V(v)
	return t
}

// Set__DestinationCidrBlock updates property "DestinationCidrBlock".
func (t *AWS_EC2_Route) Set__DestinationCidrBlock(v cfz.Expression[string]) *AWS_EC2_Route {
	t.DestinationCidrBlock = v
	return t
}

// SetV__DestinationCidrBlock updates property "DestinationCidrBlock".
func (t *AWS_EC2_Route) SetV__DestinationCidrBlock(v string) *AWS_EC2_Route {
	t.DestinationCidrBlock = cfz.V(v)
	return t
}

// Set__DestinationIpv6CidrBlock updates property "DestinationIpv6CidrBlock".
func (t *AWS_EC2_Route) Set__DestinationIpv6CidrBlock(v cfz.Expression[string]) *AWS_EC2_Route {
	t.DestinationIpv6CidrBlock = v
	return t
}

// SetV__DestinationIpv6CidrBlock updates property "DestinationIpv6CidrBlock".
func (t *AWS_EC2_Route) SetV__DestinationIpv6CidrBlock(v string) *AWS_EC2_Route {
	t.DestinationIpv6CidrBlock = cfz.V(v)
	return t
}

// Set__DestinationPrefixListId updates property "DestinationPrefixListId".
func (t *AWS_EC2_Route) Set__DestinationPrefixListId(v cfz.Expression[string]) *AWS_EC2_Route {
	t.DestinationPrefixListId = v
	return t
}

// SetV__DestinationPrefixListId updates property "DestinationPrefixListId".
func (t *AWS_EC2_Route) SetV__DestinationPrefixListId(v string) *AWS_EC2_Route {
	t.DestinationPrefixListId = cfz.V(v)
	return t
}

// Set__EgressOnlyInternetGatewayId updates property "EgressOnlyInternetGatewayId".
func (t *AWS_EC2_Route) Set__EgressOnlyInternetGatewayId(v cfz.Expression[string]) *AWS_EC2_Route {
	t.EgressOnlyInternetGatewayId = v
	return t
}

// SetV__EgressOnlyInternetGatewayId updates property "EgressOnlyInternetGatewayId".
func (t *AWS_EC2_Route) SetV__EgressOnlyInternetGatewayId(v string) *AWS_EC2_Route {
	t.EgressOnlyInternetGatewayId = cfz.V(v)
	return t
}

// Set__GatewayId updates property "GatewayId".
func (t *AWS_EC2_Route) Set__GatewayId(v cfz.Expression[string]) *AWS_EC2_Route {
	t.GatewayId = v
	return t
}

// SetV__GatewayId updates property "GatewayId".
func (t *AWS_EC2_Route) SetV__GatewayId(v string) *AWS_EC2_Route {
	t.GatewayId = cfz.V(v)
	return t
}

// Set__InstanceId updates property "InstanceId".
func (t *AWS_EC2_Route) Set__InstanceId(v cfz.Expression[string]) *AWS_EC2_Route {
	t.InstanceId = v
	return t
}

// SetV__InstanceId updates property "InstanceId".
func (t *AWS_EC2_Route) SetV__InstanceId(v string) *AWS_EC2_Route {
	t.InstanceId = cfz.V(v)
	return t
}

// Set__LocalGatewayId updates property "LocalGatewayId".
func (t *AWS_EC2_Route) Set__LocalGatewayId(v cfz.Expression[string]) *AWS_EC2_Route {
	t.LocalGatewayId = v
	return t
}

// SetV__LocalGatewayId updates property "LocalGatewayId".
func (t *AWS_EC2_Route) SetV__LocalGatewayId(v string) *AWS_EC2_Route {
	t.LocalGatewayId = cfz.V(v)
	return t
}

// Set__NatGatewayId updates property "NatGatewayId".
func (t *AWS_EC2_Route) Set__NatGatewayId(v cfz.Expression[string]) *AWS_EC2_Route {
	t.NatGatewayId = v
	return t
}

// SetV__NatGatewayId updates property "NatGatewayId".
func (t *AWS_EC2_Route) SetV__NatGatewayId(v string) *AWS_EC2_Route {
	t.NatGatewayId = cfz.V(v)
	return t
}

// Set__NetworkInterfaceId updates property "NetworkInterfaceId".
func (t *AWS_EC2_Route) Set__NetworkInterfaceId(v cfz.Expression[string]) *AWS_EC2_Route {
	t.NetworkInterfaceId = v
	return t
}

// SetV__NetworkInterfaceId updates property "NetworkInterfaceId".
func (t *AWS_EC2_Route) SetV__NetworkInterfaceId(v string) *AWS_EC2_Route {
	t.NetworkInterfaceId = cfz.V(v)
	return t
}

// Set__RouteTableId updates property "RouteTableId".
func (t *AWS_EC2_Route) Set__RouteTableId(v cfz.Expression[string]) *AWS_EC2_Route {
	t.RouteTableId = v
	return t
}

// SetV__RouteTableId updates property "RouteTableId".
func (t *AWS_EC2_Route) SetV__RouteTableId(v string) *AWS_EC2_Route {
	t.RouteTableId = cfz.V(v)
	return t
}

// Set__TransitGatewayId updates property "TransitGatewayId".
func (t *AWS_EC2_Route) Set__TransitGatewayId(v cfz.Expression[string]) *AWS_EC2_Route {
	t.TransitGatewayId = v
	return t
}

// SetV__TransitGatewayId updates property "TransitGatewayId".
func (t *AWS_EC2_Route) SetV__TransitGatewayId(v string) *AWS_EC2_Route {
	t.TransitGatewayId = cfz.V(v)
	return t
}

// Set__VpcEndpointId updates property "VpcEndpointId".
func (t *AWS_EC2_Route) Set__VpcEndpointId(v cfz.Expression[string]) *AWS_EC2_Route {
	t.VpcEndpointId = v
	return t
}

// SetV__VpcEndpointId updates property "VpcEndpointId".
func (t *AWS_EC2_Route) SetV__VpcEndpointId(v string) *AWS_EC2_Route {
	t.VpcEndpointId = cfz.V(v)
	return t
}

// Set__VpcPeeringConnectionId updates property "VpcPeeringConnectionId".
func (t *AWS_EC2_Route) Set__VpcPeeringConnectionId(v cfz.Expression[string]) *AWS_EC2_Route {
	t.VpcPeeringConnectionId = v
	return t
}

// SetV__VpcPeeringConnectionId updates property "VpcPeeringConnectionId".
func (t *AWS_EC2_Route) SetV__VpcPeeringConnectionId(v string) *AWS_EC2_Route {
	t.VpcPeeringConnectionId = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_Route) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__CidrBlock returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CidrBlock
func (t *AWS_EC2_Route) GetAtt__CidrBlock() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_Route__AttributesMap.CidrBlock))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_Route) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CidrBlock returns a conventionally configured output for an attribute of this resource.
// Attribute: CidrBlock
func (t *AWS_EC2_Route) GetConventionalOutputAtt__CidrBlock(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCidrBlock", t.GetAtt__CidrBlock())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_Route) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_Route

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_Route) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
