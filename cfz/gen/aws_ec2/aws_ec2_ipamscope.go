// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_IPAMScope)(nil)
	_ cfz.Resource                   = (*AWS_EC2_IPAMScope)(nil)
)

const (
	// AWS_EC2_IPAMScope__Type is the CloudFormation type for AWS::EC2::IPAMScope.
	AWS_EC2_IPAMScope__Type = "AWS::EC2::IPAMScope"
)

var (
	// AWS_EC2_IPAMScope__AttributesMap reports all the CloudFormation attributes for AWS::EC2::IPAMScope.
	AWS_EC2_IPAMScope__AttributesMap = struct {
		Arn           string
		IpamArn       string
		IpamScopeId   string
		IpamScopeType string
		IsDefault     string
		PoolCount     string
	}{
		Arn:           "Arn",
		IpamArn:       "IpamArn",
		IpamScopeId:   "IpamScopeId",
		IpamScopeType: "IpamScopeType",
		IsDefault:     "IsDefault",
		PoolCount:     "PoolCount",
	}

	// AWS_EC2_IPAMScope__AttributesSlice reports all the CloudFormation attributes for AWS::EC2::IPAMScope.
	AWS_EC2_IPAMScope__AttributesSlice = []string{
		AWS_EC2_IPAMScope__AttributesMap.Arn,
		AWS_EC2_IPAMScope__AttributesMap.IpamArn,
		AWS_EC2_IPAMScope__AttributesMap.IpamScopeId,
		AWS_EC2_IPAMScope__AttributesMap.IpamScopeType,
		AWS_EC2_IPAMScope__AttributesMap.IsDefault,
		AWS_EC2_IPAMScope__AttributesMap.PoolCount,
	}
)

var (
	// AWS_EC2_IPAMScope__PropertiesMap reports all the CloudFormation properties for AWS::EC2::IPAMScope.
	AWS_EC2_IPAMScope__PropertiesMap = struct {
		Description string
		IpamId      string
		Tags        string
	}{
		Description: "Description",
		IpamId:      "IpamId",
		Tags:        "Tags",
	}

	// AWS_EC2_IPAMScope__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::IPAMScope.
	AWS_EC2_IPAMScope__PropertiesSlice = []string{
		AWS_EC2_IPAMScope__PropertiesMap.Description,
		AWS_EC2_IPAMScope__PropertiesMap.IpamId,
		AWS_EC2_IPAMScope__PropertiesMap.Tags,
	}
)

// AWS_EC2_IPAMScope is a binding for AWS::EC2::IPAMScope.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipamscope.html
type AWS_EC2_IPAMScope struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipamscope.html#cfn-ec2-ipamscope-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// IpamId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipamscope.html#cfn-ec2-ipamscope-ipamid
	IpamId cfz.Expression[string] `json:"IpamId,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipamscope.html#cfn-ec2-ipamscope-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_EC2_IPAMScope initializes a new *AWS_EC2_IPAMScope.
func New__AWS_EC2_IPAMScope(logicalName string) *AWS_EC2_IPAMScope {
	return &AWS_EC2_IPAMScope{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_IPAMScope) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_IPAMScope) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_IPAMScope) GetType() string {
	return AWS_EC2_IPAMScope__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_IPAMScope) Set__LogicalName(v string) *AWS_EC2_IPAMScope {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_IPAMScope) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_IPAMScope {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_IPAMScope) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_IPAMScope {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_IPAMScope) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_IPAMScope {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_IPAMScope) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_IPAMScope {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_IPAMScope) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_IPAMScope {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_IPAMScope) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_IPAMScope {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_EC2_IPAMScope) Set__Description(v cfz.Expression[string]) *AWS_EC2_IPAMScope {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_EC2_IPAMScope) SetV__Description(v string) *AWS_EC2_IPAMScope {
	t.Description = cfz.V(v)
	return t
}

// Set__IpamId updates property "IpamId".
func (t *AWS_EC2_IPAMScope) Set__IpamId(v cfz.Expression[string]) *AWS_EC2_IPAMScope {
	t.IpamId = v
	return t
}

// SetV__IpamId updates property "IpamId".
func (t *AWS_EC2_IPAMScope) SetV__IpamId(v string) *AWS_EC2_IPAMScope {
	t.IpamId = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_EC2_IPAMScope) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_EC2_IPAMScope {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_EC2_IPAMScope) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_EC2_IPAMScope {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_EC2_IPAMScope) SetSV__Tags(v ...cfz.Tag) *AWS_EC2_IPAMScope {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_IPAMScope) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_EC2_IPAMScope) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_IPAMScope__AttributesMap.Arn))
}

// GetAtt__IpamArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: IpamArn
func (t *AWS_EC2_IPAMScope) GetAtt__IpamArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_IPAMScope__AttributesMap.IpamArn))
}

// GetAtt__IpamScopeId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: IpamScopeId
func (t *AWS_EC2_IPAMScope) GetAtt__IpamScopeId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_IPAMScope__AttributesMap.IpamScopeId))
}

// GetAtt__IpamScopeType returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: IpamScopeType
func (t *AWS_EC2_IPAMScope) GetAtt__IpamScopeType() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_IPAMScope__AttributesMap.IpamScopeType))
}

// GetAtt__IsDefault returns a $cfz.Expression[bool] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: IsDefault
func (t *AWS_EC2_IPAMScope) GetAtt__IsDefault() cfz.Expression[bool] {
	return cfz.GetAtt[bool](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_IPAMScope__AttributesMap.IsDefault))
}

// GetAtt__PoolCount returns a $cfz.Expression[int32] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: PoolCount
func (t *AWS_EC2_IPAMScope) GetAtt__PoolCount() cfz.Expression[int32] {
	return cfz.GetAtt[int32](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_IPAMScope__AttributesMap.PoolCount))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_IPAMScope) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_EC2_IPAMScope) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__IpamArn returns a conventionally configured output for an attribute of this resource.
// Attribute: IpamArn
func (t *AWS_EC2_IPAMScope) GetConventionalOutputAtt__IpamArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIpamArn", t.GetAtt__IpamArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__IpamScopeId returns a conventionally configured output for an attribute of this resource.
// Attribute: IpamScopeId
func (t *AWS_EC2_IPAMScope) GetConventionalOutputAtt__IpamScopeId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIpamScopeId", t.GetAtt__IpamScopeId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__IpamScopeType returns a conventionally configured output for an attribute of this resource.
// Attribute: IpamScopeType
func (t *AWS_EC2_IPAMScope) GetConventionalOutputAtt__IpamScopeType(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIpamScopeType", t.GetAtt__IpamScopeType())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__IsDefault returns a conventionally configured output for an attribute of this resource.
// Attribute: IsDefault
func (t *AWS_EC2_IPAMScope) GetConventionalOutputAtt__IsDefault(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIsDefault", t.GetAtt__IsDefault())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__PoolCount returns a conventionally configured output for an attribute of this resource.
// Attribute: PoolCount
func (t *AWS_EC2_IPAMScope) GetConventionalOutputAtt__PoolCount(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttPoolCount", t.GetAtt__PoolCount())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_IPAMScope) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_IPAMScope

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_IPAMScope) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
