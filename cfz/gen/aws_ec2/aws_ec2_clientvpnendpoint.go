// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_ClientVpnEndpoint)(nil)
	_ cfz.Resource                   = (*AWS_EC2_ClientVpnEndpoint)(nil)
)

const (
	// AWS_EC2_ClientVpnEndpoint__Type is the CloudFormation type for AWS::EC2::ClientVpnEndpoint.
	AWS_EC2_ClientVpnEndpoint__Type = "AWS::EC2::ClientVpnEndpoint"
)

var (
	// AWS_EC2_ClientVpnEndpoint__PropertiesMap reports all the CloudFormation properties for AWS::EC2::ClientVpnEndpoint.
	AWS_EC2_ClientVpnEndpoint__PropertiesMap = struct {
		AuthenticationOptions    string
		ClientCidrBlock          string
		ClientConnectOptions     string
		ClientLoginBannerOptions string
		ConnectionLogOptions     string
		Description              string
		DnsServers               string
		SecurityGroupIds         string
		SelfServicePortal        string
		ServerCertificateArn     string
		SessionTimeoutHours      string
		SplitTunnel              string
		TagSpecifications        string
		TransportProtocol        string
		VpcId                    string
		VpnPort                  string
	}{
		AuthenticationOptions:    "AuthenticationOptions",
		ClientCidrBlock:          "ClientCidrBlock",
		ClientConnectOptions:     "ClientConnectOptions",
		ClientLoginBannerOptions: "ClientLoginBannerOptions",
		ConnectionLogOptions:     "ConnectionLogOptions",
		Description:              "Description",
		DnsServers:               "DnsServers",
		SecurityGroupIds:         "SecurityGroupIds",
		SelfServicePortal:        "SelfServicePortal",
		ServerCertificateArn:     "ServerCertificateArn",
		SessionTimeoutHours:      "SessionTimeoutHours",
		SplitTunnel:              "SplitTunnel",
		TagSpecifications:        "TagSpecifications",
		TransportProtocol:        "TransportProtocol",
		VpcId:                    "VpcId",
		VpnPort:                  "VpnPort",
	}

	// AWS_EC2_ClientVpnEndpoint__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::ClientVpnEndpoint.
	AWS_EC2_ClientVpnEndpoint__PropertiesSlice = []string{
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.AuthenticationOptions,
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.ClientCidrBlock,
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.ClientConnectOptions,
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.ClientLoginBannerOptions,
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.ConnectionLogOptions,
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.Description,
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.DnsServers,
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.SecurityGroupIds,
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.SelfServicePortal,
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.ServerCertificateArn,
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.SessionTimeoutHours,
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.SplitTunnel,
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.TagSpecifications,
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.TransportProtocol,
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.VpcId,
		AWS_EC2_ClientVpnEndpoint__PropertiesMap.VpnPort,
	}
)

// AWS_EC2_ClientVpnEndpoint is a binding for AWS::EC2::ClientVpnEndpoint.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html
type AWS_EC2_ClientVpnEndpoint struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AuthenticationOptions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-authenticationoptions
	AuthenticationOptions cfz.ExpressionSlice[AWS_EC2_ClientVpnEndpoint_ClientAuthenticationRequest] `json:"AuthenticationOptions,omitempty"`

	// ClientCidrBlock is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-clientcidrblock
	ClientCidrBlock cfz.Expression[string] `json:"ClientCidrBlock,omitempty"`

	// ClientConnectOptions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-clientconnectoptions
	ClientConnectOptions cfz.Expression[AWS_EC2_ClientVpnEndpoint_ClientConnectOptions] `json:"ClientConnectOptions,omitempty"`

	// ClientLoginBannerOptions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-clientloginbanneroptions
	ClientLoginBannerOptions cfz.Expression[AWS_EC2_ClientVpnEndpoint_ClientLoginBannerOptions] `json:"ClientLoginBannerOptions,omitempty"`

	// ConnectionLogOptions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-connectionlogoptions
	ConnectionLogOptions cfz.Expression[AWS_EC2_ClientVpnEndpoint_ConnectionLogOptions] `json:"ConnectionLogOptions,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// DnsServers is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-dnsservers
	DnsServers cfz.ExpressionSlice[string] `json:"DnsServers,omitempty"`

	// SecurityGroupIds is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-securitygroupids
	SecurityGroupIds cfz.ExpressionSlice[string] `json:"SecurityGroupIds,omitempty"`

	// SelfServicePortal is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-selfserviceportal
	SelfServicePortal cfz.Expression[string] `json:"SelfServicePortal,omitempty"`

	// ServerCertificateArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-servercertificatearn
	ServerCertificateArn cfz.Expression[string] `json:"ServerCertificateArn,omitempty"`

	// SessionTimeoutHours is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-sessiontimeouthours
	SessionTimeoutHours cfz.Expression[int32] `json:"SessionTimeoutHours,omitempty"`

	// SplitTunnel is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-splittunnel
	SplitTunnel cfz.Expression[bool] `json:"SplitTunnel,omitempty"`

	// TagSpecifications is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-tagspecifications
	TagSpecifications cfz.ExpressionSlice[AWS_EC2_ClientVpnEndpoint_TagSpecification] `json:"TagSpecifications,omitempty"`

	// TransportProtocol is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-transportprotocol
	TransportProtocol cfz.Expression[string] `json:"TransportProtocol,omitempty"`

	// VpcId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-vpcid
	VpcId cfz.Expression[string] `json:"VpcId,omitempty"`

	// VpnPort is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html#cfn-ec2-clientvpnendpoint-vpnport
	VpnPort cfz.Expression[int32] `json:"VpnPort,omitempty"`
}

// New__AWS_EC2_ClientVpnEndpoint initializes a new *AWS_EC2_ClientVpnEndpoint.
func New__AWS_EC2_ClientVpnEndpoint(logicalName string) *AWS_EC2_ClientVpnEndpoint {
	return &AWS_EC2_ClientVpnEndpoint{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_ClientVpnEndpoint) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_ClientVpnEndpoint) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_ClientVpnEndpoint) GetType() string {
	return AWS_EC2_ClientVpnEndpoint__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_ClientVpnEndpoint) Set__LogicalName(v string) *AWS_EC2_ClientVpnEndpoint {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_ClientVpnEndpoint) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_ClientVpnEndpoint {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_ClientVpnEndpoint) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_ClientVpnEndpoint {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_ClientVpnEndpoint) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_ClientVpnEndpoint {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_ClientVpnEndpoint) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_ClientVpnEndpoint {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_ClientVpnEndpoint) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_ClientVpnEndpoint {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_ClientVpnEndpoint) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_ClientVpnEndpoint {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AuthenticationOptions updates property "AuthenticationOptions".
func (t *AWS_EC2_ClientVpnEndpoint) Set__AuthenticationOptions(v cfz.ExpressionSlice[AWS_EC2_ClientVpnEndpoint_ClientAuthenticationRequest]) *AWS_EC2_ClientVpnEndpoint {
	t.AuthenticationOptions = v
	return t
}

// SetS__AuthenticationOptions updates property "AuthenticationOptions".
func (t *AWS_EC2_ClientVpnEndpoint) SetS__AuthenticationOptions(v ...cfz.Expression[AWS_EC2_ClientVpnEndpoint_ClientAuthenticationRequest]) *AWS_EC2_ClientVpnEndpoint {
	t.AuthenticationOptions = cfz.S(v...)
	return t
}

// SetSV__AuthenticationOptions updates property "AuthenticationOptions".
func (t *AWS_EC2_ClientVpnEndpoint) SetSV__AuthenticationOptions(v ...AWS_EC2_ClientVpnEndpoint_ClientAuthenticationRequest) *AWS_EC2_ClientVpnEndpoint {
	t.AuthenticationOptions = cfz.SV(v...)
	return t
}

// Set__ClientCidrBlock updates property "ClientCidrBlock".
func (t *AWS_EC2_ClientVpnEndpoint) Set__ClientCidrBlock(v cfz.Expression[string]) *AWS_EC2_ClientVpnEndpoint {
	t.ClientCidrBlock = v
	return t
}

// SetV__ClientCidrBlock updates property "ClientCidrBlock".
func (t *AWS_EC2_ClientVpnEndpoint) SetV__ClientCidrBlock(v string) *AWS_EC2_ClientVpnEndpoint {
	t.ClientCidrBlock = cfz.V(v)
	return t
}

// Set__ClientConnectOptions updates property "ClientConnectOptions".
func (t *AWS_EC2_ClientVpnEndpoint) Set__ClientConnectOptions(v cfz.Expression[AWS_EC2_ClientVpnEndpoint_ClientConnectOptions]) *AWS_EC2_ClientVpnEndpoint {
	t.ClientConnectOptions = v
	return t
}

// SetV__ClientConnectOptions updates property "ClientConnectOptions".
func (t *AWS_EC2_ClientVpnEndpoint) SetV__ClientConnectOptions(v AWS_EC2_ClientVpnEndpoint_ClientConnectOptions) *AWS_EC2_ClientVpnEndpoint {
	t.ClientConnectOptions = cfz.V(v)
	return t
}

// Set__ClientLoginBannerOptions updates property "ClientLoginBannerOptions".
func (t *AWS_EC2_ClientVpnEndpoint) Set__ClientLoginBannerOptions(v cfz.Expression[AWS_EC2_ClientVpnEndpoint_ClientLoginBannerOptions]) *AWS_EC2_ClientVpnEndpoint {
	t.ClientLoginBannerOptions = v
	return t
}

// SetV__ClientLoginBannerOptions updates property "ClientLoginBannerOptions".
func (t *AWS_EC2_ClientVpnEndpoint) SetV__ClientLoginBannerOptions(v AWS_EC2_ClientVpnEndpoint_ClientLoginBannerOptions) *AWS_EC2_ClientVpnEndpoint {
	t.ClientLoginBannerOptions = cfz.V(v)
	return t
}

// Set__ConnectionLogOptions updates property "ConnectionLogOptions".
func (t *AWS_EC2_ClientVpnEndpoint) Set__ConnectionLogOptions(v cfz.Expression[AWS_EC2_ClientVpnEndpoint_ConnectionLogOptions]) *AWS_EC2_ClientVpnEndpoint {
	t.ConnectionLogOptions = v
	return t
}

// SetV__ConnectionLogOptions updates property "ConnectionLogOptions".
func (t *AWS_EC2_ClientVpnEndpoint) SetV__ConnectionLogOptions(v AWS_EC2_ClientVpnEndpoint_ConnectionLogOptions) *AWS_EC2_ClientVpnEndpoint {
	t.ConnectionLogOptions = cfz.V(v)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_EC2_ClientVpnEndpoint) Set__Description(v cfz.Expression[string]) *AWS_EC2_ClientVpnEndpoint {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_EC2_ClientVpnEndpoint) SetV__Description(v string) *AWS_EC2_ClientVpnEndpoint {
	t.Description = cfz.V(v)
	return t
}

// Set__DnsServers updates property "DnsServers".
func (t *AWS_EC2_ClientVpnEndpoint) Set__DnsServers(v cfz.ExpressionSlice[string]) *AWS_EC2_ClientVpnEndpoint {
	t.DnsServers = v
	return t
}

// SetS__DnsServers updates property "DnsServers".
func (t *AWS_EC2_ClientVpnEndpoint) SetS__DnsServers(v ...cfz.Expression[string]) *AWS_EC2_ClientVpnEndpoint {
	t.DnsServers = cfz.S(v...)
	return t
}

// SetSV__DnsServers updates property "DnsServers".
func (t *AWS_EC2_ClientVpnEndpoint) SetSV__DnsServers(v ...string) *AWS_EC2_ClientVpnEndpoint {
	t.DnsServers = cfz.SV(v...)
	return t
}

// Set__SecurityGroupIds updates property "SecurityGroupIds".
func (t *AWS_EC2_ClientVpnEndpoint) Set__SecurityGroupIds(v cfz.ExpressionSlice[string]) *AWS_EC2_ClientVpnEndpoint {
	t.SecurityGroupIds = v
	return t
}

// SetS__SecurityGroupIds updates property "SecurityGroupIds".
func (t *AWS_EC2_ClientVpnEndpoint) SetS__SecurityGroupIds(v ...cfz.Expression[string]) *AWS_EC2_ClientVpnEndpoint {
	t.SecurityGroupIds = cfz.S(v...)
	return t
}

// SetSV__SecurityGroupIds updates property "SecurityGroupIds".
func (t *AWS_EC2_ClientVpnEndpoint) SetSV__SecurityGroupIds(v ...string) *AWS_EC2_ClientVpnEndpoint {
	t.SecurityGroupIds = cfz.SV(v...)
	return t
}

// Set__SelfServicePortal updates property "SelfServicePortal".
func (t *AWS_EC2_ClientVpnEndpoint) Set__SelfServicePortal(v cfz.Expression[string]) *AWS_EC2_ClientVpnEndpoint {
	t.SelfServicePortal = v
	return t
}

// SetV__SelfServicePortal updates property "SelfServicePortal".
func (t *AWS_EC2_ClientVpnEndpoint) SetV__SelfServicePortal(v string) *AWS_EC2_ClientVpnEndpoint {
	t.SelfServicePortal = cfz.V(v)
	return t
}

// Set__ServerCertificateArn updates property "ServerCertificateArn".
func (t *AWS_EC2_ClientVpnEndpoint) Set__ServerCertificateArn(v cfz.Expression[string]) *AWS_EC2_ClientVpnEndpoint {
	t.ServerCertificateArn = v
	return t
}

// SetV__ServerCertificateArn updates property "ServerCertificateArn".
func (t *AWS_EC2_ClientVpnEndpoint) SetV__ServerCertificateArn(v string) *AWS_EC2_ClientVpnEndpoint {
	t.ServerCertificateArn = cfz.V(v)
	return t
}

// Set__SessionTimeoutHours updates property "SessionTimeoutHours".
func (t *AWS_EC2_ClientVpnEndpoint) Set__SessionTimeoutHours(v cfz.Expression[int32]) *AWS_EC2_ClientVpnEndpoint {
	t.SessionTimeoutHours = v
	return t
}

// SetV__SessionTimeoutHours updates property "SessionTimeoutHours".
func (t *AWS_EC2_ClientVpnEndpoint) SetV__SessionTimeoutHours(v int32) *AWS_EC2_ClientVpnEndpoint {
	t.SessionTimeoutHours = cfz.V(v)
	return t
}

// Set__SplitTunnel updates property "SplitTunnel".
func (t *AWS_EC2_ClientVpnEndpoint) Set__SplitTunnel(v cfz.Expression[bool]) *AWS_EC2_ClientVpnEndpoint {
	t.SplitTunnel = v
	return t
}

// SetV__SplitTunnel updates property "SplitTunnel".
func (t *AWS_EC2_ClientVpnEndpoint) SetV__SplitTunnel(v bool) *AWS_EC2_ClientVpnEndpoint {
	t.SplitTunnel = cfz.V(v)
	return t
}

// Set__TagSpecifications updates property "TagSpecifications".
func (t *AWS_EC2_ClientVpnEndpoint) Set__TagSpecifications(v cfz.ExpressionSlice[AWS_EC2_ClientVpnEndpoint_TagSpecification]) *AWS_EC2_ClientVpnEndpoint {
	t.TagSpecifications = v
	return t
}

// SetS__TagSpecifications updates property "TagSpecifications".
func (t *AWS_EC2_ClientVpnEndpoint) SetS__TagSpecifications(v ...cfz.Expression[AWS_EC2_ClientVpnEndpoint_TagSpecification]) *AWS_EC2_ClientVpnEndpoint {
	t.TagSpecifications = cfz.S(v...)
	return t
}

// SetSV__TagSpecifications updates property "TagSpecifications".
func (t *AWS_EC2_ClientVpnEndpoint) SetSV__TagSpecifications(v ...AWS_EC2_ClientVpnEndpoint_TagSpecification) *AWS_EC2_ClientVpnEndpoint {
	t.TagSpecifications = cfz.SV(v...)
	return t
}

// Set__TransportProtocol updates property "TransportProtocol".
func (t *AWS_EC2_ClientVpnEndpoint) Set__TransportProtocol(v cfz.Expression[string]) *AWS_EC2_ClientVpnEndpoint {
	t.TransportProtocol = v
	return t
}

// SetV__TransportProtocol updates property "TransportProtocol".
func (t *AWS_EC2_ClientVpnEndpoint) SetV__TransportProtocol(v string) *AWS_EC2_ClientVpnEndpoint {
	t.TransportProtocol = cfz.V(v)
	return t
}

// Set__VpcId updates property "VpcId".
func (t *AWS_EC2_ClientVpnEndpoint) Set__VpcId(v cfz.Expression[string]) *AWS_EC2_ClientVpnEndpoint {
	t.VpcId = v
	return t
}

// SetV__VpcId updates property "VpcId".
func (t *AWS_EC2_ClientVpnEndpoint) SetV__VpcId(v string) *AWS_EC2_ClientVpnEndpoint {
	t.VpcId = cfz.V(v)
	return t
}

// Set__VpnPort updates property "VpnPort".
func (t *AWS_EC2_ClientVpnEndpoint) Set__VpnPort(v cfz.Expression[int32]) *AWS_EC2_ClientVpnEndpoint {
	t.VpnPort = v
	return t
}

// SetV__VpnPort updates property "VpnPort".
func (t *AWS_EC2_ClientVpnEndpoint) SetV__VpnPort(v int32) *AWS_EC2_ClientVpnEndpoint {
	t.VpnPort = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_ClientVpnEndpoint) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_ClientVpnEndpoint) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_ClientVpnEndpoint) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_ClientVpnEndpoint

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_ClientVpnEndpoint) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
