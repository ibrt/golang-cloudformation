// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_DHCPOptions)(nil)
	_ cfz.Resource                   = (*AWS_EC2_DHCPOptions)(nil)
)

const (
	// AWS_EC2_DHCPOptions__Type is the CloudFormation type for AWS::EC2::DHCPOptions.
	AWS_EC2_DHCPOptions__Type = "AWS::EC2::DHCPOptions"
)

var (
	// AWS_EC2_DHCPOptions__AttributesMap reports all the CloudFormation attributes for AWS::EC2::DHCPOptions.
	AWS_EC2_DHCPOptions__AttributesMap = struct {
		DhcpOptionsId string
	}{
		DhcpOptionsId: "DhcpOptionsId",
	}

	// AWS_EC2_DHCPOptions__AttributesSlice reports all the CloudFormation attributes for AWS::EC2::DHCPOptions.
	AWS_EC2_DHCPOptions__AttributesSlice = []string{
		AWS_EC2_DHCPOptions__AttributesMap.DhcpOptionsId,
	}
)

var (
	// AWS_EC2_DHCPOptions__PropertiesMap reports all the CloudFormation properties for AWS::EC2::DHCPOptions.
	AWS_EC2_DHCPOptions__PropertiesMap = struct {
		DomainName                    string
		DomainNameServers             string
		Ipv6AddressPreferredLeaseTime string
		NetbiosNameServers            string
		NetbiosNodeType               string
		NtpServers                    string
		Tags                          string
	}{
		DomainName:                    "DomainName",
		DomainNameServers:             "DomainNameServers",
		Ipv6AddressPreferredLeaseTime: "Ipv6AddressPreferredLeaseTime",
		NetbiosNameServers:            "NetbiosNameServers",
		NetbiosNodeType:               "NetbiosNodeType",
		NtpServers:                    "NtpServers",
		Tags:                          "Tags",
	}

	// AWS_EC2_DHCPOptions__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::DHCPOptions.
	AWS_EC2_DHCPOptions__PropertiesSlice = []string{
		AWS_EC2_DHCPOptions__PropertiesMap.DomainName,
		AWS_EC2_DHCPOptions__PropertiesMap.DomainNameServers,
		AWS_EC2_DHCPOptions__PropertiesMap.Ipv6AddressPreferredLeaseTime,
		AWS_EC2_DHCPOptions__PropertiesMap.NetbiosNameServers,
		AWS_EC2_DHCPOptions__PropertiesMap.NetbiosNodeType,
		AWS_EC2_DHCPOptions__PropertiesMap.NtpServers,
		AWS_EC2_DHCPOptions__PropertiesMap.Tags,
	}
)

// AWS_EC2_DHCPOptions is a binding for AWS::EC2::DHCPOptions.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-dhcpoptions.html
type AWS_EC2_DHCPOptions struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// DomainName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-dhcpoptions.html#cfn-ec2-dhcpoptions-domainname
	DomainName cfz.Expression[string] `json:"DomainName,omitempty"`

	// DomainNameServers is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-dhcpoptions.html#cfn-ec2-dhcpoptions-domainnameservers
	DomainNameServers cfz.ExpressionSlice[string] `json:"DomainNameServers,omitempty"`

	// Ipv6AddressPreferredLeaseTime is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-dhcpoptions.html#cfn-ec2-dhcpoptions-ipv6addresspreferredleasetime
	Ipv6AddressPreferredLeaseTime cfz.Expression[int32] `json:"Ipv6AddressPreferredLeaseTime,omitempty"`

	// NetbiosNameServers is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-dhcpoptions.html#cfn-ec2-dhcpoptions-netbiosnameservers
	NetbiosNameServers cfz.ExpressionSlice[string] `json:"NetbiosNameServers,omitempty"`

	// NetbiosNodeType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-dhcpoptions.html#cfn-ec2-dhcpoptions-netbiosnodetype
	NetbiosNodeType cfz.Expression[int32] `json:"NetbiosNodeType,omitempty"`

	// NtpServers is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-dhcpoptions.html#cfn-ec2-dhcpoptions-ntpservers
	NtpServers cfz.ExpressionSlice[string] `json:"NtpServers,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-dhcpoptions.html#cfn-ec2-dhcpoptions-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_EC2_DHCPOptions initializes a new *AWS_EC2_DHCPOptions.
func New__AWS_EC2_DHCPOptions(logicalName string) *AWS_EC2_DHCPOptions {
	return &AWS_EC2_DHCPOptions{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_DHCPOptions) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_DHCPOptions) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_DHCPOptions) GetType() string {
	return AWS_EC2_DHCPOptions__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_DHCPOptions) Set__LogicalName(v string) *AWS_EC2_DHCPOptions {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_DHCPOptions) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_DHCPOptions {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_DHCPOptions) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_DHCPOptions {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_DHCPOptions) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_DHCPOptions {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_DHCPOptions) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_DHCPOptions {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_DHCPOptions) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_DHCPOptions {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_DHCPOptions) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_DHCPOptions {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__DomainName updates property "DomainName".
func (t *AWS_EC2_DHCPOptions) Set__DomainName(v cfz.Expression[string]) *AWS_EC2_DHCPOptions {
	t.DomainName = v
	return t
}

// SetV__DomainName updates property "DomainName".
func (t *AWS_EC2_DHCPOptions) SetV__DomainName(v string) *AWS_EC2_DHCPOptions {
	t.DomainName = cfz.V(v)
	return t
}

// Set__DomainNameServers updates property "DomainNameServers".
func (t *AWS_EC2_DHCPOptions) Set__DomainNameServers(v cfz.ExpressionSlice[string]) *AWS_EC2_DHCPOptions {
	t.DomainNameServers = v
	return t
}

// SetS__DomainNameServers updates property "DomainNameServers".
func (t *AWS_EC2_DHCPOptions) SetS__DomainNameServers(v ...cfz.Expression[string]) *AWS_EC2_DHCPOptions {
	t.DomainNameServers = cfz.S(v...)
	return t
}

// SetSV__DomainNameServers updates property "DomainNameServers".
func (t *AWS_EC2_DHCPOptions) SetSV__DomainNameServers(v ...string) *AWS_EC2_DHCPOptions {
	t.DomainNameServers = cfz.SV(v...)
	return t
}

// Set__Ipv6AddressPreferredLeaseTime updates property "Ipv6AddressPreferredLeaseTime".
func (t *AWS_EC2_DHCPOptions) Set__Ipv6AddressPreferredLeaseTime(v cfz.Expression[int32]) *AWS_EC2_DHCPOptions {
	t.Ipv6AddressPreferredLeaseTime = v
	return t
}

// SetV__Ipv6AddressPreferredLeaseTime updates property "Ipv6AddressPreferredLeaseTime".
func (t *AWS_EC2_DHCPOptions) SetV__Ipv6AddressPreferredLeaseTime(v int32) *AWS_EC2_DHCPOptions {
	t.Ipv6AddressPreferredLeaseTime = cfz.V(v)
	return t
}

// Set__NetbiosNameServers updates property "NetbiosNameServers".
func (t *AWS_EC2_DHCPOptions) Set__NetbiosNameServers(v cfz.ExpressionSlice[string]) *AWS_EC2_DHCPOptions {
	t.NetbiosNameServers = v
	return t
}

// SetS__NetbiosNameServers updates property "NetbiosNameServers".
func (t *AWS_EC2_DHCPOptions) SetS__NetbiosNameServers(v ...cfz.Expression[string]) *AWS_EC2_DHCPOptions {
	t.NetbiosNameServers = cfz.S(v...)
	return t
}

// SetSV__NetbiosNameServers updates property "NetbiosNameServers".
func (t *AWS_EC2_DHCPOptions) SetSV__NetbiosNameServers(v ...string) *AWS_EC2_DHCPOptions {
	t.NetbiosNameServers = cfz.SV(v...)
	return t
}

// Set__NetbiosNodeType updates property "NetbiosNodeType".
func (t *AWS_EC2_DHCPOptions) Set__NetbiosNodeType(v cfz.Expression[int32]) *AWS_EC2_DHCPOptions {
	t.NetbiosNodeType = v
	return t
}

// SetV__NetbiosNodeType updates property "NetbiosNodeType".
func (t *AWS_EC2_DHCPOptions) SetV__NetbiosNodeType(v int32) *AWS_EC2_DHCPOptions {
	t.NetbiosNodeType = cfz.V(v)
	return t
}

// Set__NtpServers updates property "NtpServers".
func (t *AWS_EC2_DHCPOptions) Set__NtpServers(v cfz.ExpressionSlice[string]) *AWS_EC2_DHCPOptions {
	t.NtpServers = v
	return t
}

// SetS__NtpServers updates property "NtpServers".
func (t *AWS_EC2_DHCPOptions) SetS__NtpServers(v ...cfz.Expression[string]) *AWS_EC2_DHCPOptions {
	t.NtpServers = cfz.S(v...)
	return t
}

// SetSV__NtpServers updates property "NtpServers".
func (t *AWS_EC2_DHCPOptions) SetSV__NtpServers(v ...string) *AWS_EC2_DHCPOptions {
	t.NtpServers = cfz.SV(v...)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_EC2_DHCPOptions) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_EC2_DHCPOptions {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_EC2_DHCPOptions) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_EC2_DHCPOptions {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_EC2_DHCPOptions) SetSV__Tags(v ...cfz.Tag) *AWS_EC2_DHCPOptions {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_DHCPOptions) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__DhcpOptionsId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DhcpOptionsId
func (t *AWS_EC2_DHCPOptions) GetAtt__DhcpOptionsId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_DHCPOptions__AttributesMap.DhcpOptionsId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_DHCPOptions) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DhcpOptionsId returns a conventionally configured output for an attribute of this resource.
// Attribute: DhcpOptionsId
func (t *AWS_EC2_DHCPOptions) GetConventionalOutputAtt__DhcpOptionsId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDhcpOptionsId", t.GetAtt__DhcpOptionsId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_DHCPOptions) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_DHCPOptions

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_DHCPOptions) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
