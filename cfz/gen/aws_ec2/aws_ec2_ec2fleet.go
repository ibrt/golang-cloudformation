// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_EC2Fleet)(nil)
	_ cfz.Resource                   = (*AWS_EC2_EC2Fleet)(nil)
)

const (
	// AWS_EC2_EC2Fleet__Type is the CloudFormation type for AWS::EC2::EC2Fleet.
	AWS_EC2_EC2Fleet__Type = "AWS::EC2::EC2Fleet"
)

var (
	// AWS_EC2_EC2Fleet__AttributesMap reports all the CloudFormation attributes for AWS::EC2::EC2Fleet.
	AWS_EC2_EC2Fleet__AttributesMap = struct {
		FleetId string
	}{
		FleetId: "FleetId",
	}

	// AWS_EC2_EC2Fleet__AttributesSlice reports all the CloudFormation attributes for AWS::EC2::EC2Fleet.
	AWS_EC2_EC2Fleet__AttributesSlice = []string{
		AWS_EC2_EC2Fleet__AttributesMap.FleetId,
	}
)

var (
	// AWS_EC2_EC2Fleet__PropertiesMap reports all the CloudFormation properties for AWS::EC2::EC2Fleet.
	AWS_EC2_EC2Fleet__PropertiesMap = struct {
		Context                          string
		ExcessCapacityTerminationPolicy  string
		LaunchTemplateConfigs            string
		OnDemandOptions                  string
		ReplaceUnhealthyInstances        string
		SpotOptions                      string
		TagSpecifications                string
		TargetCapacitySpecification      string
		TerminateInstancesWithExpiration string
		Type                             string
		ValidFrom                        string
		ValidUntil                       string
	}{
		Context:                          "Context",
		ExcessCapacityTerminationPolicy:  "ExcessCapacityTerminationPolicy",
		LaunchTemplateConfigs:            "LaunchTemplateConfigs",
		OnDemandOptions:                  "OnDemandOptions",
		ReplaceUnhealthyInstances:        "ReplaceUnhealthyInstances",
		SpotOptions:                      "SpotOptions",
		TagSpecifications:                "TagSpecifications",
		TargetCapacitySpecification:      "TargetCapacitySpecification",
		TerminateInstancesWithExpiration: "TerminateInstancesWithExpiration",
		Type:                             "Type",
		ValidFrom:                        "ValidFrom",
		ValidUntil:                       "ValidUntil",
	}

	// AWS_EC2_EC2Fleet__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::EC2Fleet.
	AWS_EC2_EC2Fleet__PropertiesSlice = []string{
		AWS_EC2_EC2Fleet__PropertiesMap.Context,
		AWS_EC2_EC2Fleet__PropertiesMap.ExcessCapacityTerminationPolicy,
		AWS_EC2_EC2Fleet__PropertiesMap.LaunchTemplateConfigs,
		AWS_EC2_EC2Fleet__PropertiesMap.OnDemandOptions,
		AWS_EC2_EC2Fleet__PropertiesMap.ReplaceUnhealthyInstances,
		AWS_EC2_EC2Fleet__PropertiesMap.SpotOptions,
		AWS_EC2_EC2Fleet__PropertiesMap.TagSpecifications,
		AWS_EC2_EC2Fleet__PropertiesMap.TargetCapacitySpecification,
		AWS_EC2_EC2Fleet__PropertiesMap.TerminateInstancesWithExpiration,
		AWS_EC2_EC2Fleet__PropertiesMap.Type,
		AWS_EC2_EC2Fleet__PropertiesMap.ValidFrom,
		AWS_EC2_EC2Fleet__PropertiesMap.ValidUntil,
	}
)

// AWS_EC2_EC2Fleet is a binding for AWS::EC2::EC2Fleet.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html
type AWS_EC2_EC2Fleet struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Context is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-context
	Context cfz.Expression[string] `json:"Context,omitempty"`

	// ExcessCapacityTerminationPolicy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-excesscapacityterminationpolicy
	ExcessCapacityTerminationPolicy cfz.Expression[string] `json:"ExcessCapacityTerminationPolicy,omitempty"`

	// LaunchTemplateConfigs is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-launchtemplateconfigs
	LaunchTemplateConfigs cfz.ExpressionSlice[AWS_EC2_EC2Fleet_FleetLaunchTemplateConfigRequest] `json:"LaunchTemplateConfigs,omitempty"`

	// OnDemandOptions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-ondemandoptions
	OnDemandOptions cfz.Expression[AWS_EC2_EC2Fleet_OnDemandOptionsRequest] `json:"OnDemandOptions,omitempty"`

	// ReplaceUnhealthyInstances is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-replaceunhealthyinstances
	ReplaceUnhealthyInstances cfz.Expression[bool] `json:"ReplaceUnhealthyInstances,omitempty"`

	// SpotOptions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-spotoptions
	SpotOptions cfz.Expression[AWS_EC2_EC2Fleet_SpotOptionsRequest] `json:"SpotOptions,omitempty"`

	// TagSpecifications is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-tagspecifications
	TagSpecifications cfz.ExpressionSlice[AWS_EC2_EC2Fleet_TagSpecification] `json:"TagSpecifications,omitempty"`

	// TargetCapacitySpecification is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-targetcapacityspecification
	TargetCapacitySpecification cfz.Expression[AWS_EC2_EC2Fleet_TargetCapacitySpecificationRequest] `json:"TargetCapacitySpecification,omitempty"`

	// TerminateInstancesWithExpiration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-terminateinstanceswithexpiration
	TerminateInstancesWithExpiration cfz.Expression[bool] `json:"TerminateInstancesWithExpiration,omitempty"`

	// Type is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-type
	Type cfz.Expression[string] `json:"Type,omitempty"`

	// ValidFrom is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-validfrom
	ValidFrom cfz.Expression[string] `json:"ValidFrom,omitempty"`

	// ValidUntil is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-validuntil
	ValidUntil cfz.Expression[string] `json:"ValidUntil,omitempty"`
}

// New__AWS_EC2_EC2Fleet initializes a new *AWS_EC2_EC2Fleet.
func New__AWS_EC2_EC2Fleet(logicalName string) *AWS_EC2_EC2Fleet {
	return &AWS_EC2_EC2Fleet{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_EC2Fleet) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_EC2Fleet) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_EC2Fleet) GetType() string {
	return AWS_EC2_EC2Fleet__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_EC2Fleet) Set__LogicalName(v string) *AWS_EC2_EC2Fleet {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_EC2Fleet) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_EC2Fleet {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_EC2Fleet) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_EC2Fleet {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_EC2Fleet) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_EC2Fleet {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_EC2Fleet) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_EC2Fleet {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_EC2Fleet) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_EC2Fleet {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_EC2Fleet) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_EC2Fleet {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Context updates property "Context".
func (t *AWS_EC2_EC2Fleet) Set__Context(v cfz.Expression[string]) *AWS_EC2_EC2Fleet {
	t.Context = v
	return t
}

// SetV__Context updates property "Context".
func (t *AWS_EC2_EC2Fleet) SetV__Context(v string) *AWS_EC2_EC2Fleet {
	t.Context = cfz.V(v)
	return t
}

// Set__ExcessCapacityTerminationPolicy updates property "ExcessCapacityTerminationPolicy".
func (t *AWS_EC2_EC2Fleet) Set__ExcessCapacityTerminationPolicy(v cfz.Expression[string]) *AWS_EC2_EC2Fleet {
	t.ExcessCapacityTerminationPolicy = v
	return t
}

// SetV__ExcessCapacityTerminationPolicy updates property "ExcessCapacityTerminationPolicy".
func (t *AWS_EC2_EC2Fleet) SetV__ExcessCapacityTerminationPolicy(v string) *AWS_EC2_EC2Fleet {
	t.ExcessCapacityTerminationPolicy = cfz.V(v)
	return t
}

// Set__LaunchTemplateConfigs updates property "LaunchTemplateConfigs".
func (t *AWS_EC2_EC2Fleet) Set__LaunchTemplateConfigs(v cfz.ExpressionSlice[AWS_EC2_EC2Fleet_FleetLaunchTemplateConfigRequest]) *AWS_EC2_EC2Fleet {
	t.LaunchTemplateConfigs = v
	return t
}

// SetS__LaunchTemplateConfigs updates property "LaunchTemplateConfigs".
func (t *AWS_EC2_EC2Fleet) SetS__LaunchTemplateConfigs(v ...cfz.Expression[AWS_EC2_EC2Fleet_FleetLaunchTemplateConfigRequest]) *AWS_EC2_EC2Fleet {
	t.LaunchTemplateConfigs = cfz.S(v...)
	return t
}

// SetSV__LaunchTemplateConfigs updates property "LaunchTemplateConfigs".
func (t *AWS_EC2_EC2Fleet) SetSV__LaunchTemplateConfigs(v ...AWS_EC2_EC2Fleet_FleetLaunchTemplateConfigRequest) *AWS_EC2_EC2Fleet {
	t.LaunchTemplateConfigs = cfz.SV(v...)
	return t
}

// Set__OnDemandOptions updates property "OnDemandOptions".
func (t *AWS_EC2_EC2Fleet) Set__OnDemandOptions(v cfz.Expression[AWS_EC2_EC2Fleet_OnDemandOptionsRequest]) *AWS_EC2_EC2Fleet {
	t.OnDemandOptions = v
	return t
}

// SetV__OnDemandOptions updates property "OnDemandOptions".
func (t *AWS_EC2_EC2Fleet) SetV__OnDemandOptions(v AWS_EC2_EC2Fleet_OnDemandOptionsRequest) *AWS_EC2_EC2Fleet {
	t.OnDemandOptions = cfz.V(v)
	return t
}

// Set__ReplaceUnhealthyInstances updates property "ReplaceUnhealthyInstances".
func (t *AWS_EC2_EC2Fleet) Set__ReplaceUnhealthyInstances(v cfz.Expression[bool]) *AWS_EC2_EC2Fleet {
	t.ReplaceUnhealthyInstances = v
	return t
}

// SetV__ReplaceUnhealthyInstances updates property "ReplaceUnhealthyInstances".
func (t *AWS_EC2_EC2Fleet) SetV__ReplaceUnhealthyInstances(v bool) *AWS_EC2_EC2Fleet {
	t.ReplaceUnhealthyInstances = cfz.V(v)
	return t
}

// Set__SpotOptions updates property "SpotOptions".
func (t *AWS_EC2_EC2Fleet) Set__SpotOptions(v cfz.Expression[AWS_EC2_EC2Fleet_SpotOptionsRequest]) *AWS_EC2_EC2Fleet {
	t.SpotOptions = v
	return t
}

// SetV__SpotOptions updates property "SpotOptions".
func (t *AWS_EC2_EC2Fleet) SetV__SpotOptions(v AWS_EC2_EC2Fleet_SpotOptionsRequest) *AWS_EC2_EC2Fleet {
	t.SpotOptions = cfz.V(v)
	return t
}

// Set__TagSpecifications updates property "TagSpecifications".
func (t *AWS_EC2_EC2Fleet) Set__TagSpecifications(v cfz.ExpressionSlice[AWS_EC2_EC2Fleet_TagSpecification]) *AWS_EC2_EC2Fleet {
	t.TagSpecifications = v
	return t
}

// SetS__TagSpecifications updates property "TagSpecifications".
func (t *AWS_EC2_EC2Fleet) SetS__TagSpecifications(v ...cfz.Expression[AWS_EC2_EC2Fleet_TagSpecification]) *AWS_EC2_EC2Fleet {
	t.TagSpecifications = cfz.S(v...)
	return t
}

// SetSV__TagSpecifications updates property "TagSpecifications".
func (t *AWS_EC2_EC2Fleet) SetSV__TagSpecifications(v ...AWS_EC2_EC2Fleet_TagSpecification) *AWS_EC2_EC2Fleet {
	t.TagSpecifications = cfz.SV(v...)
	return t
}

// Set__TargetCapacitySpecification updates property "TargetCapacitySpecification".
func (t *AWS_EC2_EC2Fleet) Set__TargetCapacitySpecification(v cfz.Expression[AWS_EC2_EC2Fleet_TargetCapacitySpecificationRequest]) *AWS_EC2_EC2Fleet {
	t.TargetCapacitySpecification = v
	return t
}

// SetV__TargetCapacitySpecification updates property "TargetCapacitySpecification".
func (t *AWS_EC2_EC2Fleet) SetV__TargetCapacitySpecification(v AWS_EC2_EC2Fleet_TargetCapacitySpecificationRequest) *AWS_EC2_EC2Fleet {
	t.TargetCapacitySpecification = cfz.V(v)
	return t
}

// Set__TerminateInstancesWithExpiration updates property "TerminateInstancesWithExpiration".
func (t *AWS_EC2_EC2Fleet) Set__TerminateInstancesWithExpiration(v cfz.Expression[bool]) *AWS_EC2_EC2Fleet {
	t.TerminateInstancesWithExpiration = v
	return t
}

// SetV__TerminateInstancesWithExpiration updates property "TerminateInstancesWithExpiration".
func (t *AWS_EC2_EC2Fleet) SetV__TerminateInstancesWithExpiration(v bool) *AWS_EC2_EC2Fleet {
	t.TerminateInstancesWithExpiration = cfz.V(v)
	return t
}

// Set__Type updates property "Type".
func (t *AWS_EC2_EC2Fleet) Set__Type(v cfz.Expression[string]) *AWS_EC2_EC2Fleet {
	t.Type = v
	return t
}

// SetV__Type updates property "Type".
func (t *AWS_EC2_EC2Fleet) SetV__Type(v string) *AWS_EC2_EC2Fleet {
	t.Type = cfz.V(v)
	return t
}

// Set__ValidFrom updates property "ValidFrom".
func (t *AWS_EC2_EC2Fleet) Set__ValidFrom(v cfz.Expression[string]) *AWS_EC2_EC2Fleet {
	t.ValidFrom = v
	return t
}

// SetV__ValidFrom updates property "ValidFrom".
func (t *AWS_EC2_EC2Fleet) SetV__ValidFrom(v string) *AWS_EC2_EC2Fleet {
	t.ValidFrom = cfz.V(v)
	return t
}

// Set__ValidUntil updates property "ValidUntil".
func (t *AWS_EC2_EC2Fleet) Set__ValidUntil(v cfz.Expression[string]) *AWS_EC2_EC2Fleet {
	t.ValidUntil = v
	return t
}

// SetV__ValidUntil updates property "ValidUntil".
func (t *AWS_EC2_EC2Fleet) SetV__ValidUntil(v string) *AWS_EC2_EC2Fleet {
	t.ValidUntil = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_EC2Fleet) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__FleetId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: FleetId
func (t *AWS_EC2_EC2Fleet) GetAtt__FleetId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_EC2Fleet__AttributesMap.FleetId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_EC2Fleet) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__FleetId returns a conventionally configured output for an attribute of this resource.
// Attribute: FleetId
func (t *AWS_EC2_EC2Fleet) GetConventionalOutputAtt__FleetId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttFleetId", t.GetAtt__FleetId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_EC2Fleet) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_EC2Fleet

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_EC2Fleet) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
