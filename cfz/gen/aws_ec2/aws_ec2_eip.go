// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_EIP)(nil)
	_ cfz.Resource                   = (*AWS_EC2_EIP)(nil)
)

const (
	// AWS_EC2_EIP__Type is the CloudFormation type for AWS::EC2::EIP.
	AWS_EC2_EIP__Type = "AWS::EC2::EIP"
)

var (
	// AWS_EC2_EIP__AttributesMap reports all the CloudFormation attributes for AWS::EC2::EIP.
	AWS_EC2_EIP__AttributesMap = struct {
		AllocationId string
		PublicIp     string
	}{
		AllocationId: "AllocationId",
		PublicIp:     "PublicIp",
	}

	// AWS_EC2_EIP__AttributesSlice reports all the CloudFormation attributes for AWS::EC2::EIP.
	AWS_EC2_EIP__AttributesSlice = []string{
		AWS_EC2_EIP__AttributesMap.AllocationId,
		AWS_EC2_EIP__AttributesMap.PublicIp,
	}
)

var (
	// AWS_EC2_EIP__PropertiesMap reports all the CloudFormation properties for AWS::EC2::EIP.
	AWS_EC2_EIP__PropertiesMap = struct {
		Address            string
		Domain             string
		InstanceId         string
		IpamPoolId         string
		NetworkBorderGroup string
		PublicIpv4Pool     string
		Tags               string
		TransferAddress    string
	}{
		Address:            "Address",
		Domain:             "Domain",
		InstanceId:         "InstanceId",
		IpamPoolId:         "IpamPoolId",
		NetworkBorderGroup: "NetworkBorderGroup",
		PublicIpv4Pool:     "PublicIpv4Pool",
		Tags:               "Tags",
		TransferAddress:    "TransferAddress",
	}

	// AWS_EC2_EIP__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::EIP.
	AWS_EC2_EIP__PropertiesSlice = []string{
		AWS_EC2_EIP__PropertiesMap.Address,
		AWS_EC2_EIP__PropertiesMap.Domain,
		AWS_EC2_EIP__PropertiesMap.InstanceId,
		AWS_EC2_EIP__PropertiesMap.IpamPoolId,
		AWS_EC2_EIP__PropertiesMap.NetworkBorderGroup,
		AWS_EC2_EIP__PropertiesMap.PublicIpv4Pool,
		AWS_EC2_EIP__PropertiesMap.Tags,
		AWS_EC2_EIP__PropertiesMap.TransferAddress,
	}
)

// AWS_EC2_EIP is a binding for AWS::EC2::EIP.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-eip.html
type AWS_EC2_EIP struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Address is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-eip.html#cfn-ec2-eip-address
	Address cfz.Expression[string] `json:"Address,omitempty"`

	// Domain is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-eip.html#cfn-ec2-eip-domain
	Domain cfz.Expression[string] `json:"Domain,omitempty"`

	// InstanceId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-eip.html#cfn-ec2-eip-instanceid
	InstanceId cfz.Expression[string] `json:"InstanceId,omitempty"`

	// IpamPoolId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-eip.html#cfn-ec2-eip-ipampoolid
	IpamPoolId cfz.Expression[string] `json:"IpamPoolId,omitempty"`

	// NetworkBorderGroup is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-eip.html#cfn-ec2-eip-networkbordergroup
	NetworkBorderGroup cfz.Expression[string] `json:"NetworkBorderGroup,omitempty"`

	// PublicIpv4Pool is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-eip.html#cfn-ec2-eip-publicipv4pool
	PublicIpv4Pool cfz.Expression[string] `json:"PublicIpv4Pool,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-eip.html#cfn-ec2-eip-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// TransferAddress is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-eip.html#cfn-ec2-eip-transferaddress
	TransferAddress cfz.Expression[string] `json:"TransferAddress,omitempty"`
}

// New__AWS_EC2_EIP initializes a new *AWS_EC2_EIP.
func New__AWS_EC2_EIP(logicalName string) *AWS_EC2_EIP {
	return &AWS_EC2_EIP{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_EIP) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_EIP) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_EIP) GetType() string {
	return AWS_EC2_EIP__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_EIP) Set__LogicalName(v string) *AWS_EC2_EIP {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_EIP) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_EIP {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_EIP) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_EIP {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_EIP) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_EIP {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_EIP) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_EIP {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_EIP) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_EIP {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_EIP) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_EIP {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Address updates property "Address".
func (t *AWS_EC2_EIP) Set__Address(v cfz.Expression[string]) *AWS_EC2_EIP {
	t.Address = v
	return t
}

// SetV__Address updates property "Address".
func (t *AWS_EC2_EIP) SetV__Address(v string) *AWS_EC2_EIP {
	t.Address = cfz.V(v)
	return t
}

// Set__Domain updates property "Domain".
func (t *AWS_EC2_EIP) Set__Domain(v cfz.Expression[string]) *AWS_EC2_EIP {
	t.Domain = v
	return t
}

// SetV__Domain updates property "Domain".
func (t *AWS_EC2_EIP) SetV__Domain(v string) *AWS_EC2_EIP {
	t.Domain = cfz.V(v)
	return t
}

// Set__InstanceId updates property "InstanceId".
func (t *AWS_EC2_EIP) Set__InstanceId(v cfz.Expression[string]) *AWS_EC2_EIP {
	t.InstanceId = v
	return t
}

// SetV__InstanceId updates property "InstanceId".
func (t *AWS_EC2_EIP) SetV__InstanceId(v string) *AWS_EC2_EIP {
	t.InstanceId = cfz.V(v)
	return t
}

// Set__IpamPoolId updates property "IpamPoolId".
func (t *AWS_EC2_EIP) Set__IpamPoolId(v cfz.Expression[string]) *AWS_EC2_EIP {
	t.IpamPoolId = v
	return t
}

// SetV__IpamPoolId updates property "IpamPoolId".
func (t *AWS_EC2_EIP) SetV__IpamPoolId(v string) *AWS_EC2_EIP {
	t.IpamPoolId = cfz.V(v)
	return t
}

// Set__NetworkBorderGroup updates property "NetworkBorderGroup".
func (t *AWS_EC2_EIP) Set__NetworkBorderGroup(v cfz.Expression[string]) *AWS_EC2_EIP {
	t.NetworkBorderGroup = v
	return t
}

// SetV__NetworkBorderGroup updates property "NetworkBorderGroup".
func (t *AWS_EC2_EIP) SetV__NetworkBorderGroup(v string) *AWS_EC2_EIP {
	t.NetworkBorderGroup = cfz.V(v)
	return t
}

// Set__PublicIpv4Pool updates property "PublicIpv4Pool".
func (t *AWS_EC2_EIP) Set__PublicIpv4Pool(v cfz.Expression[string]) *AWS_EC2_EIP {
	t.PublicIpv4Pool = v
	return t
}

// SetV__PublicIpv4Pool updates property "PublicIpv4Pool".
func (t *AWS_EC2_EIP) SetV__PublicIpv4Pool(v string) *AWS_EC2_EIP {
	t.PublicIpv4Pool = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_EC2_EIP) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_EC2_EIP {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_EC2_EIP) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_EC2_EIP {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_EC2_EIP) SetSV__Tags(v ...cfz.Tag) *AWS_EC2_EIP {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__TransferAddress updates property "TransferAddress".
func (t *AWS_EC2_EIP) Set__TransferAddress(v cfz.Expression[string]) *AWS_EC2_EIP {
	t.TransferAddress = v
	return t
}

// SetV__TransferAddress updates property "TransferAddress".
func (t *AWS_EC2_EIP) SetV__TransferAddress(v string) *AWS_EC2_EIP {
	t.TransferAddress = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_EIP) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__AllocationId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AllocationId
func (t *AWS_EC2_EIP) GetAtt__AllocationId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_EIP__AttributesMap.AllocationId))
}

// GetAtt__PublicIp returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: PublicIp
func (t *AWS_EC2_EIP) GetAtt__PublicIp() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_EIP__AttributesMap.PublicIp))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_EIP) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AllocationId returns a conventionally configured output for an attribute of this resource.
// Attribute: AllocationId
func (t *AWS_EC2_EIP) GetConventionalOutputAtt__AllocationId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAllocationId", t.GetAtt__AllocationId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__PublicIp returns a conventionally configured output for an attribute of this resource.
// Attribute: PublicIp
func (t *AWS_EC2_EIP) GetConventionalOutputAtt__PublicIp(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttPublicIp", t.GetAtt__PublicIp())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_EIP) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_EIP

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_EIP) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
