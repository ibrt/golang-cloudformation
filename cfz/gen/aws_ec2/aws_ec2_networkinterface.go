// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_NetworkInterface)(nil)
	_ cfz.Resource                   = (*AWS_EC2_NetworkInterface)(nil)
)

const (
	// AWS_EC2_NetworkInterface__Type is the CloudFormation type for AWS::EC2::NetworkInterface.
	AWS_EC2_NetworkInterface__Type = "AWS::EC2::NetworkInterface"
)

var (
	// AWS_EC2_NetworkInterface__AttributesMap reports all the CloudFormation attributes for AWS::EC2::NetworkInterface.
	AWS_EC2_NetworkInterface__AttributesMap = struct {
		Id                          string
		PrimaryIpv6Address          string
		PrimaryPrivateIpAddress     string
		SecondaryPrivateIpAddresses string
		VpcId                       string
	}{
		Id:                          "Id",
		PrimaryIpv6Address:          "PrimaryIpv6Address",
		PrimaryPrivateIpAddress:     "PrimaryPrivateIpAddress",
		SecondaryPrivateIpAddresses: "SecondaryPrivateIpAddresses",
		VpcId:                       "VpcId",
	}

	// AWS_EC2_NetworkInterface__AttributesSlice reports all the CloudFormation attributes for AWS::EC2::NetworkInterface.
	AWS_EC2_NetworkInterface__AttributesSlice = []string{
		AWS_EC2_NetworkInterface__AttributesMap.Id,
		AWS_EC2_NetworkInterface__AttributesMap.PrimaryIpv6Address,
		AWS_EC2_NetworkInterface__AttributesMap.PrimaryPrivateIpAddress,
		AWS_EC2_NetworkInterface__AttributesMap.SecondaryPrivateIpAddresses,
		AWS_EC2_NetworkInterface__AttributesMap.VpcId,
	}
)

var (
	// AWS_EC2_NetworkInterface__PropertiesMap reports all the CloudFormation properties for AWS::EC2::NetworkInterface.
	AWS_EC2_NetworkInterface__PropertiesMap = struct {
		ConnectionTrackingSpecification string
		Description                     string
		GroupSet                        string
		InterfaceType                   string
		Ipv4PrefixCount                 string
		Ipv4Prefixes                    string
		Ipv6AddressCount                string
		Ipv6Addresses                   string
		Ipv6PrefixCount                 string
		Ipv6Prefixes                    string
		PrivateIpAddress                string
		PrivateIpAddresses              string
		SecondaryPrivateIpAddressCount  string
		SourceDestCheck                 string
		SubnetId                        string
		Tags                            string
	}{
		ConnectionTrackingSpecification: "ConnectionTrackingSpecification",
		Description:                     "Description",
		GroupSet:                        "GroupSet",
		InterfaceType:                   "InterfaceType",
		Ipv4PrefixCount:                 "Ipv4PrefixCount",
		Ipv4Prefixes:                    "Ipv4Prefixes",
		Ipv6AddressCount:                "Ipv6AddressCount",
		Ipv6Addresses:                   "Ipv6Addresses",
		Ipv6PrefixCount:                 "Ipv6PrefixCount",
		Ipv6Prefixes:                    "Ipv6Prefixes",
		PrivateIpAddress:                "PrivateIpAddress",
		PrivateIpAddresses:              "PrivateIpAddresses",
		SecondaryPrivateIpAddressCount:  "SecondaryPrivateIpAddressCount",
		SourceDestCheck:                 "SourceDestCheck",
		SubnetId:                        "SubnetId",
		Tags:                            "Tags",
	}

	// AWS_EC2_NetworkInterface__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::NetworkInterface.
	AWS_EC2_NetworkInterface__PropertiesSlice = []string{
		AWS_EC2_NetworkInterface__PropertiesMap.ConnectionTrackingSpecification,
		AWS_EC2_NetworkInterface__PropertiesMap.Description,
		AWS_EC2_NetworkInterface__PropertiesMap.GroupSet,
		AWS_EC2_NetworkInterface__PropertiesMap.InterfaceType,
		AWS_EC2_NetworkInterface__PropertiesMap.Ipv4PrefixCount,
		AWS_EC2_NetworkInterface__PropertiesMap.Ipv4Prefixes,
		AWS_EC2_NetworkInterface__PropertiesMap.Ipv6AddressCount,
		AWS_EC2_NetworkInterface__PropertiesMap.Ipv6Addresses,
		AWS_EC2_NetworkInterface__PropertiesMap.Ipv6PrefixCount,
		AWS_EC2_NetworkInterface__PropertiesMap.Ipv6Prefixes,
		AWS_EC2_NetworkInterface__PropertiesMap.PrivateIpAddress,
		AWS_EC2_NetworkInterface__PropertiesMap.PrivateIpAddresses,
		AWS_EC2_NetworkInterface__PropertiesMap.SecondaryPrivateIpAddressCount,
		AWS_EC2_NetworkInterface__PropertiesMap.SourceDestCheck,
		AWS_EC2_NetworkInterface__PropertiesMap.SubnetId,
		AWS_EC2_NetworkInterface__PropertiesMap.Tags,
	}
)

// AWS_EC2_NetworkInterface is a binding for AWS::EC2::NetworkInterface.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html
type AWS_EC2_NetworkInterface struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ConnectionTrackingSpecification is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-connectiontrackingspecification
	ConnectionTrackingSpecification cfz.Expression[AWS_EC2_NetworkInterface_ConnectionTrackingSpecification] `json:"ConnectionTrackingSpecification,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// GroupSet is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-groupset
	GroupSet cfz.ExpressionSlice[string] `json:"GroupSet,omitempty"`

	// InterfaceType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-interfacetype
	InterfaceType cfz.Expression[string] `json:"InterfaceType,omitempty"`

	// Ipv4PrefixCount is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-ipv4prefixcount
	Ipv4PrefixCount cfz.Expression[int32] `json:"Ipv4PrefixCount,omitempty"`

	// Ipv4Prefixes is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-ipv4prefixes
	Ipv4Prefixes cfz.ExpressionSlice[AWS_EC2_NetworkInterface_Ipv4PrefixSpecification] `json:"Ipv4Prefixes,omitempty"`

	// Ipv6AddressCount is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-ipv6addresscount
	Ipv6AddressCount cfz.Expression[int32] `json:"Ipv6AddressCount,omitempty"`

	// Ipv6Addresses is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-ipv6addresses
	Ipv6Addresses cfz.ExpressionSlice[AWS_EC2_NetworkInterface_InstanceIpv6Address] `json:"Ipv6Addresses,omitempty"`

	// Ipv6PrefixCount is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-ipv6prefixcount
	Ipv6PrefixCount cfz.Expression[int32] `json:"Ipv6PrefixCount,omitempty"`

	// Ipv6Prefixes is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-ipv6prefixes
	Ipv6Prefixes cfz.ExpressionSlice[AWS_EC2_NetworkInterface_Ipv6PrefixSpecification] `json:"Ipv6Prefixes,omitempty"`

	// PrivateIpAddress is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-privateipaddress
	PrivateIpAddress cfz.Expression[string] `json:"PrivateIpAddress,omitempty"`

	// PrivateIpAddresses is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-privateipaddresses
	PrivateIpAddresses cfz.ExpressionSlice[AWS_EC2_NetworkInterface_PrivateIpAddressSpecification] `json:"PrivateIpAddresses,omitempty"`

	// SecondaryPrivateIpAddressCount is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-secondaryprivateipaddresscount
	SecondaryPrivateIpAddressCount cfz.Expression[int32] `json:"SecondaryPrivateIpAddressCount,omitempty"`

	// SourceDestCheck is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-sourcedestcheck
	SourceDestCheck cfz.Expression[bool] `json:"SourceDestCheck,omitempty"`

	// SubnetId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-subnetid
	SubnetId cfz.Expression[string] `json:"SubnetId,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterface.html#cfn-ec2-networkinterface-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_EC2_NetworkInterface initializes a new *AWS_EC2_NetworkInterface.
func New__AWS_EC2_NetworkInterface(logicalName string) *AWS_EC2_NetworkInterface {
	return &AWS_EC2_NetworkInterface{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_NetworkInterface) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_NetworkInterface) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_NetworkInterface) GetType() string {
	return AWS_EC2_NetworkInterface__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_NetworkInterface) Set__LogicalName(v string) *AWS_EC2_NetworkInterface {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_NetworkInterface) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_NetworkInterface {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_NetworkInterface) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_NetworkInterface {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_NetworkInterface) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_NetworkInterface {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_NetworkInterface) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_NetworkInterface {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_NetworkInterface) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_NetworkInterface {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_NetworkInterface) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_NetworkInterface {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ConnectionTrackingSpecification updates property "ConnectionTrackingSpecification".
func (t *AWS_EC2_NetworkInterface) Set__ConnectionTrackingSpecification(v cfz.Expression[AWS_EC2_NetworkInterface_ConnectionTrackingSpecification]) *AWS_EC2_NetworkInterface {
	t.ConnectionTrackingSpecification = v
	return t
}

// SetV__ConnectionTrackingSpecification updates property "ConnectionTrackingSpecification".
func (t *AWS_EC2_NetworkInterface) SetV__ConnectionTrackingSpecification(v AWS_EC2_NetworkInterface_ConnectionTrackingSpecification) *AWS_EC2_NetworkInterface {
	t.ConnectionTrackingSpecification = cfz.V(v)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_EC2_NetworkInterface) Set__Description(v cfz.Expression[string]) *AWS_EC2_NetworkInterface {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_EC2_NetworkInterface) SetV__Description(v string) *AWS_EC2_NetworkInterface {
	t.Description = cfz.V(v)
	return t
}

// Set__GroupSet updates property "GroupSet".
func (t *AWS_EC2_NetworkInterface) Set__GroupSet(v cfz.ExpressionSlice[string]) *AWS_EC2_NetworkInterface {
	t.GroupSet = v
	return t
}

// SetS__GroupSet updates property "GroupSet".
func (t *AWS_EC2_NetworkInterface) SetS__GroupSet(v ...cfz.Expression[string]) *AWS_EC2_NetworkInterface {
	t.GroupSet = cfz.S(v...)
	return t
}

// SetSV__GroupSet updates property "GroupSet".
func (t *AWS_EC2_NetworkInterface) SetSV__GroupSet(v ...string) *AWS_EC2_NetworkInterface {
	t.GroupSet = cfz.SV(v...)
	return t
}

// Set__InterfaceType updates property "InterfaceType".
func (t *AWS_EC2_NetworkInterface) Set__InterfaceType(v cfz.Expression[string]) *AWS_EC2_NetworkInterface {
	t.InterfaceType = v
	return t
}

// SetV__InterfaceType updates property "InterfaceType".
func (t *AWS_EC2_NetworkInterface) SetV__InterfaceType(v string) *AWS_EC2_NetworkInterface {
	t.InterfaceType = cfz.V(v)
	return t
}

// Set__Ipv4PrefixCount updates property "Ipv4PrefixCount".
func (t *AWS_EC2_NetworkInterface) Set__Ipv4PrefixCount(v cfz.Expression[int32]) *AWS_EC2_NetworkInterface {
	t.Ipv4PrefixCount = v
	return t
}

// SetV__Ipv4PrefixCount updates property "Ipv4PrefixCount".
func (t *AWS_EC2_NetworkInterface) SetV__Ipv4PrefixCount(v int32) *AWS_EC2_NetworkInterface {
	t.Ipv4PrefixCount = cfz.V(v)
	return t
}

// Set__Ipv4Prefixes updates property "Ipv4Prefixes".
func (t *AWS_EC2_NetworkInterface) Set__Ipv4Prefixes(v cfz.ExpressionSlice[AWS_EC2_NetworkInterface_Ipv4PrefixSpecification]) *AWS_EC2_NetworkInterface {
	t.Ipv4Prefixes = v
	return t
}

// SetS__Ipv4Prefixes updates property "Ipv4Prefixes".
func (t *AWS_EC2_NetworkInterface) SetS__Ipv4Prefixes(v ...cfz.Expression[AWS_EC2_NetworkInterface_Ipv4PrefixSpecification]) *AWS_EC2_NetworkInterface {
	t.Ipv4Prefixes = cfz.S(v...)
	return t
}

// SetSV__Ipv4Prefixes updates property "Ipv4Prefixes".
func (t *AWS_EC2_NetworkInterface) SetSV__Ipv4Prefixes(v ...AWS_EC2_NetworkInterface_Ipv4PrefixSpecification) *AWS_EC2_NetworkInterface {
	t.Ipv4Prefixes = cfz.SV(v...)
	return t
}

// Set__Ipv6AddressCount updates property "Ipv6AddressCount".
func (t *AWS_EC2_NetworkInterface) Set__Ipv6AddressCount(v cfz.Expression[int32]) *AWS_EC2_NetworkInterface {
	t.Ipv6AddressCount = v
	return t
}

// SetV__Ipv6AddressCount updates property "Ipv6AddressCount".
func (t *AWS_EC2_NetworkInterface) SetV__Ipv6AddressCount(v int32) *AWS_EC2_NetworkInterface {
	t.Ipv6AddressCount = cfz.V(v)
	return t
}

// Set__Ipv6Addresses updates property "Ipv6Addresses".
func (t *AWS_EC2_NetworkInterface) Set__Ipv6Addresses(v cfz.ExpressionSlice[AWS_EC2_NetworkInterface_InstanceIpv6Address]) *AWS_EC2_NetworkInterface {
	t.Ipv6Addresses = v
	return t
}

// SetS__Ipv6Addresses updates property "Ipv6Addresses".
func (t *AWS_EC2_NetworkInterface) SetS__Ipv6Addresses(v ...cfz.Expression[AWS_EC2_NetworkInterface_InstanceIpv6Address]) *AWS_EC2_NetworkInterface {
	t.Ipv6Addresses = cfz.S(v...)
	return t
}

// SetSV__Ipv6Addresses updates property "Ipv6Addresses".
func (t *AWS_EC2_NetworkInterface) SetSV__Ipv6Addresses(v ...AWS_EC2_NetworkInterface_InstanceIpv6Address) *AWS_EC2_NetworkInterface {
	t.Ipv6Addresses = cfz.SV(v...)
	return t
}

// Set__Ipv6PrefixCount updates property "Ipv6PrefixCount".
func (t *AWS_EC2_NetworkInterface) Set__Ipv6PrefixCount(v cfz.Expression[int32]) *AWS_EC2_NetworkInterface {
	t.Ipv6PrefixCount = v
	return t
}

// SetV__Ipv6PrefixCount updates property "Ipv6PrefixCount".
func (t *AWS_EC2_NetworkInterface) SetV__Ipv6PrefixCount(v int32) *AWS_EC2_NetworkInterface {
	t.Ipv6PrefixCount = cfz.V(v)
	return t
}

// Set__Ipv6Prefixes updates property "Ipv6Prefixes".
func (t *AWS_EC2_NetworkInterface) Set__Ipv6Prefixes(v cfz.ExpressionSlice[AWS_EC2_NetworkInterface_Ipv6PrefixSpecification]) *AWS_EC2_NetworkInterface {
	t.Ipv6Prefixes = v
	return t
}

// SetS__Ipv6Prefixes updates property "Ipv6Prefixes".
func (t *AWS_EC2_NetworkInterface) SetS__Ipv6Prefixes(v ...cfz.Expression[AWS_EC2_NetworkInterface_Ipv6PrefixSpecification]) *AWS_EC2_NetworkInterface {
	t.Ipv6Prefixes = cfz.S(v...)
	return t
}

// SetSV__Ipv6Prefixes updates property "Ipv6Prefixes".
func (t *AWS_EC2_NetworkInterface) SetSV__Ipv6Prefixes(v ...AWS_EC2_NetworkInterface_Ipv6PrefixSpecification) *AWS_EC2_NetworkInterface {
	t.Ipv6Prefixes = cfz.SV(v...)
	return t
}

// Set__PrivateIpAddress updates property "PrivateIpAddress".
func (t *AWS_EC2_NetworkInterface) Set__PrivateIpAddress(v cfz.Expression[string]) *AWS_EC2_NetworkInterface {
	t.PrivateIpAddress = v
	return t
}

// SetV__PrivateIpAddress updates property "PrivateIpAddress".
func (t *AWS_EC2_NetworkInterface) SetV__PrivateIpAddress(v string) *AWS_EC2_NetworkInterface {
	t.PrivateIpAddress = cfz.V(v)
	return t
}

// Set__PrivateIpAddresses updates property "PrivateIpAddresses".
func (t *AWS_EC2_NetworkInterface) Set__PrivateIpAddresses(v cfz.ExpressionSlice[AWS_EC2_NetworkInterface_PrivateIpAddressSpecification]) *AWS_EC2_NetworkInterface {
	t.PrivateIpAddresses = v
	return t
}

// SetS__PrivateIpAddresses updates property "PrivateIpAddresses".
func (t *AWS_EC2_NetworkInterface) SetS__PrivateIpAddresses(v ...cfz.Expression[AWS_EC2_NetworkInterface_PrivateIpAddressSpecification]) *AWS_EC2_NetworkInterface {
	t.PrivateIpAddresses = cfz.S(v...)
	return t
}

// SetSV__PrivateIpAddresses updates property "PrivateIpAddresses".
func (t *AWS_EC2_NetworkInterface) SetSV__PrivateIpAddresses(v ...AWS_EC2_NetworkInterface_PrivateIpAddressSpecification) *AWS_EC2_NetworkInterface {
	t.PrivateIpAddresses = cfz.SV(v...)
	return t
}

// Set__SecondaryPrivateIpAddressCount updates property "SecondaryPrivateIpAddressCount".
func (t *AWS_EC2_NetworkInterface) Set__SecondaryPrivateIpAddressCount(v cfz.Expression[int32]) *AWS_EC2_NetworkInterface {
	t.SecondaryPrivateIpAddressCount = v
	return t
}

// SetV__SecondaryPrivateIpAddressCount updates property "SecondaryPrivateIpAddressCount".
func (t *AWS_EC2_NetworkInterface) SetV__SecondaryPrivateIpAddressCount(v int32) *AWS_EC2_NetworkInterface {
	t.SecondaryPrivateIpAddressCount = cfz.V(v)
	return t
}

// Set__SourceDestCheck updates property "SourceDestCheck".
func (t *AWS_EC2_NetworkInterface) Set__SourceDestCheck(v cfz.Expression[bool]) *AWS_EC2_NetworkInterface {
	t.SourceDestCheck = v
	return t
}

// SetV__SourceDestCheck updates property "SourceDestCheck".
func (t *AWS_EC2_NetworkInterface) SetV__SourceDestCheck(v bool) *AWS_EC2_NetworkInterface {
	t.SourceDestCheck = cfz.V(v)
	return t
}

// Set__SubnetId updates property "SubnetId".
func (t *AWS_EC2_NetworkInterface) Set__SubnetId(v cfz.Expression[string]) *AWS_EC2_NetworkInterface {
	t.SubnetId = v
	return t
}

// SetV__SubnetId updates property "SubnetId".
func (t *AWS_EC2_NetworkInterface) SetV__SubnetId(v string) *AWS_EC2_NetworkInterface {
	t.SubnetId = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_EC2_NetworkInterface) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_EC2_NetworkInterface {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_EC2_NetworkInterface) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_EC2_NetworkInterface {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_EC2_NetworkInterface) SetSV__Tags(v ...cfz.Tag) *AWS_EC2_NetworkInterface {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_NetworkInterface) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Id returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Id
func (t *AWS_EC2_NetworkInterface) GetAtt__Id() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_NetworkInterface__AttributesMap.Id))
}

// GetAtt__PrimaryIpv6Address returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: PrimaryIpv6Address
func (t *AWS_EC2_NetworkInterface) GetAtt__PrimaryIpv6Address() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_NetworkInterface__AttributesMap.PrimaryIpv6Address))
}

// GetAtt__PrimaryPrivateIpAddress returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: PrimaryPrivateIpAddress
func (t *AWS_EC2_NetworkInterface) GetAtt__PrimaryPrivateIpAddress() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_NetworkInterface__AttributesMap.PrimaryPrivateIpAddress))
}

// GetAttSlice__SecondaryPrivateIpAddresses returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: SecondaryPrivateIpAddresses
func (t *AWS_EC2_NetworkInterface) GetAttSlice__SecondaryPrivateIpAddresses() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_NetworkInterface__AttributesMap.SecondaryPrivateIpAddresses))
}

// GetAtt__VpcId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: VpcId
func (t *AWS_EC2_NetworkInterface) GetAtt__VpcId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_NetworkInterface__AttributesMap.VpcId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_NetworkInterface) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Id returns a conventionally configured output for an attribute of this resource.
// Attribute: Id
func (t *AWS_EC2_NetworkInterface) GetConventionalOutputAtt__Id(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttId", t.GetAtt__Id())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__PrimaryIpv6Address returns a conventionally configured output for an attribute of this resource.
// Attribute: PrimaryIpv6Address
func (t *AWS_EC2_NetworkInterface) GetConventionalOutputAtt__PrimaryIpv6Address(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttPrimaryIpv6Address", t.GetAtt__PrimaryIpv6Address())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__PrimaryPrivateIpAddress returns a conventionally configured output for an attribute of this resource.
// Attribute: PrimaryPrivateIpAddress
func (t *AWS_EC2_NetworkInterface) GetConventionalOutputAtt__PrimaryPrivateIpAddress(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttPrimaryPrivateIpAddress", t.GetAtt__PrimaryPrivateIpAddress())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__SecondaryPrivateIpAddresses returns a conventionally configured output for an attribute of this resource.
// Attribute: SecondaryPrivateIpAddresses
func (t *AWS_EC2_NetworkInterface) GetConventionalOutputAtt__SecondaryPrivateIpAddresses(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSecondaryPrivateIpAddresses", t.GetAttSlice__SecondaryPrivateIpAddresses())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__VpcId returns a conventionally configured output for an attribute of this resource.
// Attribute: VpcId
func (t *AWS_EC2_NetworkInterface) GetConventionalOutputAtt__VpcId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVpcId", t.GetAtt__VpcId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_NetworkInterface) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_NetworkInterface

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_NetworkInterface) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
