// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_LaunchTemplate)(nil)
	_ cfz.Resource                   = (*AWS_EC2_LaunchTemplate)(nil)
)

const (
	// AWS_EC2_LaunchTemplate__Type is the CloudFormation type for AWS::EC2::LaunchTemplate.
	AWS_EC2_LaunchTemplate__Type = "AWS::EC2::LaunchTemplate"
)

var (
	// AWS_EC2_LaunchTemplate__AttributesMap reports all the CloudFormation attributes for AWS::EC2::LaunchTemplate.
	AWS_EC2_LaunchTemplate__AttributesMap = struct {
		DefaultVersionNumber string
		LatestVersionNumber  string
		LaunchTemplateId     string
	}{
		DefaultVersionNumber: "DefaultVersionNumber",
		LatestVersionNumber:  "LatestVersionNumber",
		LaunchTemplateId:     "LaunchTemplateId",
	}

	// AWS_EC2_LaunchTemplate__AttributesSlice reports all the CloudFormation attributes for AWS::EC2::LaunchTemplate.
	AWS_EC2_LaunchTemplate__AttributesSlice = []string{
		AWS_EC2_LaunchTemplate__AttributesMap.DefaultVersionNumber,
		AWS_EC2_LaunchTemplate__AttributesMap.LatestVersionNumber,
		AWS_EC2_LaunchTemplate__AttributesMap.LaunchTemplateId,
	}
)

var (
	// AWS_EC2_LaunchTemplate__PropertiesMap reports all the CloudFormation properties for AWS::EC2::LaunchTemplate.
	AWS_EC2_LaunchTemplate__PropertiesMap = struct {
		LaunchTemplateData string
		LaunchTemplateName string
		TagSpecifications  string
		VersionDescription string
	}{
		LaunchTemplateData: "LaunchTemplateData",
		LaunchTemplateName: "LaunchTemplateName",
		TagSpecifications:  "TagSpecifications",
		VersionDescription: "VersionDescription",
	}

	// AWS_EC2_LaunchTemplate__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::LaunchTemplate.
	AWS_EC2_LaunchTemplate__PropertiesSlice = []string{
		AWS_EC2_LaunchTemplate__PropertiesMap.LaunchTemplateData,
		AWS_EC2_LaunchTemplate__PropertiesMap.LaunchTemplateName,
		AWS_EC2_LaunchTemplate__PropertiesMap.TagSpecifications,
		AWS_EC2_LaunchTemplate__PropertiesMap.VersionDescription,
	}
)

// AWS_EC2_LaunchTemplate is a binding for AWS::EC2::LaunchTemplate.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html
type AWS_EC2_LaunchTemplate struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// LaunchTemplateData is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#cfn-ec2-launchtemplate-launchtemplatedata
	LaunchTemplateData cfz.Expression[AWS_EC2_LaunchTemplate_LaunchTemplateData] `json:"LaunchTemplateData,omitempty"`

	// LaunchTemplateName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#cfn-ec2-launchtemplate-launchtemplatename
	LaunchTemplateName cfz.Expression[string] `json:"LaunchTemplateName,omitempty"`

	// TagSpecifications is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#cfn-ec2-launchtemplate-tagspecifications
	TagSpecifications cfz.ExpressionSlice[AWS_EC2_LaunchTemplate_LaunchTemplateTagSpecification] `json:"TagSpecifications,omitempty"`

	// VersionDescription is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#cfn-ec2-launchtemplate-versiondescription
	VersionDescription cfz.Expression[string] `json:"VersionDescription,omitempty"`
}

// New__AWS_EC2_LaunchTemplate initializes a new *AWS_EC2_LaunchTemplate.
func New__AWS_EC2_LaunchTemplate(logicalName string) *AWS_EC2_LaunchTemplate {
	return &AWS_EC2_LaunchTemplate{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_LaunchTemplate) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_LaunchTemplate) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_LaunchTemplate) GetType() string {
	return AWS_EC2_LaunchTemplate__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_LaunchTemplate) Set__LogicalName(v string) *AWS_EC2_LaunchTemplate {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_LaunchTemplate) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_LaunchTemplate {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_LaunchTemplate) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_LaunchTemplate {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_LaunchTemplate) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_LaunchTemplate {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_LaunchTemplate) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_LaunchTemplate {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_LaunchTemplate) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_LaunchTemplate {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_LaunchTemplate) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_LaunchTemplate {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__LaunchTemplateData updates property "LaunchTemplateData".
func (t *AWS_EC2_LaunchTemplate) Set__LaunchTemplateData(v cfz.Expression[AWS_EC2_LaunchTemplate_LaunchTemplateData]) *AWS_EC2_LaunchTemplate {
	t.LaunchTemplateData = v
	return t
}

// SetV__LaunchTemplateData updates property "LaunchTemplateData".
func (t *AWS_EC2_LaunchTemplate) SetV__LaunchTemplateData(v AWS_EC2_LaunchTemplate_LaunchTemplateData) *AWS_EC2_LaunchTemplate {
	t.LaunchTemplateData = cfz.V(v)
	return t
}

// Set__LaunchTemplateName updates property "LaunchTemplateName".
func (t *AWS_EC2_LaunchTemplate) Set__LaunchTemplateName(v cfz.Expression[string]) *AWS_EC2_LaunchTemplate {
	t.LaunchTemplateName = v
	return t
}

// SetV__LaunchTemplateName updates property "LaunchTemplateName".
func (t *AWS_EC2_LaunchTemplate) SetV__LaunchTemplateName(v string) *AWS_EC2_LaunchTemplate {
	t.LaunchTemplateName = cfz.V(v)
	return t
}

// Set__TagSpecifications updates property "TagSpecifications".
func (t *AWS_EC2_LaunchTemplate) Set__TagSpecifications(v cfz.ExpressionSlice[AWS_EC2_LaunchTemplate_LaunchTemplateTagSpecification]) *AWS_EC2_LaunchTemplate {
	t.TagSpecifications = v
	return t
}

// SetS__TagSpecifications updates property "TagSpecifications".
func (t *AWS_EC2_LaunchTemplate) SetS__TagSpecifications(v ...cfz.Expression[AWS_EC2_LaunchTemplate_LaunchTemplateTagSpecification]) *AWS_EC2_LaunchTemplate {
	t.TagSpecifications = cfz.S(v...)
	return t
}

// SetSV__TagSpecifications updates property "TagSpecifications".
func (t *AWS_EC2_LaunchTemplate) SetSV__TagSpecifications(v ...AWS_EC2_LaunchTemplate_LaunchTemplateTagSpecification) *AWS_EC2_LaunchTemplate {
	t.TagSpecifications = cfz.SV(v...)
	return t
}

// Set__VersionDescription updates property "VersionDescription".
func (t *AWS_EC2_LaunchTemplate) Set__VersionDescription(v cfz.Expression[string]) *AWS_EC2_LaunchTemplate {
	t.VersionDescription = v
	return t
}

// SetV__VersionDescription updates property "VersionDescription".
func (t *AWS_EC2_LaunchTemplate) SetV__VersionDescription(v string) *AWS_EC2_LaunchTemplate {
	t.VersionDescription = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_LaunchTemplate) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__DefaultVersionNumber returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DefaultVersionNumber
func (t *AWS_EC2_LaunchTemplate) GetAtt__DefaultVersionNumber() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_LaunchTemplate__AttributesMap.DefaultVersionNumber))
}

// GetAtt__LatestVersionNumber returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LatestVersionNumber
func (t *AWS_EC2_LaunchTemplate) GetAtt__LatestVersionNumber() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_LaunchTemplate__AttributesMap.LatestVersionNumber))
}

// GetAtt__LaunchTemplateId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LaunchTemplateId
func (t *AWS_EC2_LaunchTemplate) GetAtt__LaunchTemplateId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_LaunchTemplate__AttributesMap.LaunchTemplateId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_LaunchTemplate) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DefaultVersionNumber returns a conventionally configured output for an attribute of this resource.
// Attribute: DefaultVersionNumber
func (t *AWS_EC2_LaunchTemplate) GetConventionalOutputAtt__DefaultVersionNumber(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDefaultVersionNumber", t.GetAtt__DefaultVersionNumber())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LatestVersionNumber returns a conventionally configured output for an attribute of this resource.
// Attribute: LatestVersionNumber
func (t *AWS_EC2_LaunchTemplate) GetConventionalOutputAtt__LatestVersionNumber(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLatestVersionNumber", t.GetAtt__LatestVersionNumber())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LaunchTemplateId returns a conventionally configured output for an attribute of this resource.
// Attribute: LaunchTemplateId
func (t *AWS_EC2_LaunchTemplate) GetConventionalOutputAtt__LaunchTemplateId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLaunchTemplateId", t.GetAtt__LaunchTemplateId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_LaunchTemplate) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_LaunchTemplate

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_LaunchTemplate) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
