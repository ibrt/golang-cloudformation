// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_TrafficMirrorSession)(nil)
	_ cfz.Resource                   = (*AWS_EC2_TrafficMirrorSession)(nil)
)

const (
	// AWS_EC2_TrafficMirrorSession__Type is the CloudFormation type for AWS::EC2::TrafficMirrorSession.
	AWS_EC2_TrafficMirrorSession__Type = "AWS::EC2::TrafficMirrorSession"
)

var (
	// AWS_EC2_TrafficMirrorSession__PropertiesMap reports all the CloudFormation properties for AWS::EC2::TrafficMirrorSession.
	AWS_EC2_TrafficMirrorSession__PropertiesMap = struct {
		Description           string
		NetworkInterfaceId    string
		PacketLength          string
		SessionNumber         string
		Tags                  string
		TrafficMirrorFilterId string
		TrafficMirrorTargetId string
		VirtualNetworkId      string
	}{
		Description:           "Description",
		NetworkInterfaceId:    "NetworkInterfaceId",
		PacketLength:          "PacketLength",
		SessionNumber:         "SessionNumber",
		Tags:                  "Tags",
		TrafficMirrorFilterId: "TrafficMirrorFilterId",
		TrafficMirrorTargetId: "TrafficMirrorTargetId",
		VirtualNetworkId:      "VirtualNetworkId",
	}

	// AWS_EC2_TrafficMirrorSession__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::TrafficMirrorSession.
	AWS_EC2_TrafficMirrorSession__PropertiesSlice = []string{
		AWS_EC2_TrafficMirrorSession__PropertiesMap.Description,
		AWS_EC2_TrafficMirrorSession__PropertiesMap.NetworkInterfaceId,
		AWS_EC2_TrafficMirrorSession__PropertiesMap.PacketLength,
		AWS_EC2_TrafficMirrorSession__PropertiesMap.SessionNumber,
		AWS_EC2_TrafficMirrorSession__PropertiesMap.Tags,
		AWS_EC2_TrafficMirrorSession__PropertiesMap.TrafficMirrorFilterId,
		AWS_EC2_TrafficMirrorSession__PropertiesMap.TrafficMirrorTargetId,
		AWS_EC2_TrafficMirrorSession__PropertiesMap.VirtualNetworkId,
	}
)

// AWS_EC2_TrafficMirrorSession is a binding for AWS::EC2::TrafficMirrorSession.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrorsession.html
type AWS_EC2_TrafficMirrorSession struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrorsession.html#cfn-ec2-trafficmirrorsession-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// NetworkInterfaceId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrorsession.html#cfn-ec2-trafficmirrorsession-networkinterfaceid
	NetworkInterfaceId cfz.Expression[string] `json:"NetworkInterfaceId,omitempty"`

	// PacketLength is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrorsession.html#cfn-ec2-trafficmirrorsession-packetlength
	PacketLength cfz.Expression[int32] `json:"PacketLength,omitempty"`

	// SessionNumber is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrorsession.html#cfn-ec2-trafficmirrorsession-sessionnumber
	SessionNumber cfz.Expression[int32] `json:"SessionNumber,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrorsession.html#cfn-ec2-trafficmirrorsession-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// TrafficMirrorFilterId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrorsession.html#cfn-ec2-trafficmirrorsession-trafficmirrorfilterid
	TrafficMirrorFilterId cfz.Expression[string] `json:"TrafficMirrorFilterId,omitempty"`

	// TrafficMirrorTargetId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrorsession.html#cfn-ec2-trafficmirrorsession-trafficmirrortargetid
	TrafficMirrorTargetId cfz.Expression[string] `json:"TrafficMirrorTargetId,omitempty"`

	// VirtualNetworkId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrorsession.html#cfn-ec2-trafficmirrorsession-virtualnetworkid
	VirtualNetworkId cfz.Expression[int32] `json:"VirtualNetworkId,omitempty"`
}

// New__AWS_EC2_TrafficMirrorSession initializes a new *AWS_EC2_TrafficMirrorSession.
func New__AWS_EC2_TrafficMirrorSession(logicalName string) *AWS_EC2_TrafficMirrorSession {
	return &AWS_EC2_TrafficMirrorSession{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_TrafficMirrorSession) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_TrafficMirrorSession) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_TrafficMirrorSession) GetType() string {
	return AWS_EC2_TrafficMirrorSession__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_TrafficMirrorSession) Set__LogicalName(v string) *AWS_EC2_TrafficMirrorSession {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_TrafficMirrorSession) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_TrafficMirrorSession {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_TrafficMirrorSession) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_TrafficMirrorSession {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_TrafficMirrorSession) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_TrafficMirrorSession {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_TrafficMirrorSession) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_TrafficMirrorSession {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_TrafficMirrorSession) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_TrafficMirrorSession {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_TrafficMirrorSession) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_TrafficMirrorSession {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_EC2_TrafficMirrorSession) Set__Description(v cfz.Expression[string]) *AWS_EC2_TrafficMirrorSession {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_EC2_TrafficMirrorSession) SetV__Description(v string) *AWS_EC2_TrafficMirrorSession {
	t.Description = cfz.V(v)
	return t
}

// Set__NetworkInterfaceId updates property "NetworkInterfaceId".
func (t *AWS_EC2_TrafficMirrorSession) Set__NetworkInterfaceId(v cfz.Expression[string]) *AWS_EC2_TrafficMirrorSession {
	t.NetworkInterfaceId = v
	return t
}

// SetV__NetworkInterfaceId updates property "NetworkInterfaceId".
func (t *AWS_EC2_TrafficMirrorSession) SetV__NetworkInterfaceId(v string) *AWS_EC2_TrafficMirrorSession {
	t.NetworkInterfaceId = cfz.V(v)
	return t
}

// Set__PacketLength updates property "PacketLength".
func (t *AWS_EC2_TrafficMirrorSession) Set__PacketLength(v cfz.Expression[int32]) *AWS_EC2_TrafficMirrorSession {
	t.PacketLength = v
	return t
}

// SetV__PacketLength updates property "PacketLength".
func (t *AWS_EC2_TrafficMirrorSession) SetV__PacketLength(v int32) *AWS_EC2_TrafficMirrorSession {
	t.PacketLength = cfz.V(v)
	return t
}

// Set__SessionNumber updates property "SessionNumber".
func (t *AWS_EC2_TrafficMirrorSession) Set__SessionNumber(v cfz.Expression[int32]) *AWS_EC2_TrafficMirrorSession {
	t.SessionNumber = v
	return t
}

// SetV__SessionNumber updates property "SessionNumber".
func (t *AWS_EC2_TrafficMirrorSession) SetV__SessionNumber(v int32) *AWS_EC2_TrafficMirrorSession {
	t.SessionNumber = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_EC2_TrafficMirrorSession) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_EC2_TrafficMirrorSession {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_EC2_TrafficMirrorSession) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_EC2_TrafficMirrorSession {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_EC2_TrafficMirrorSession) SetSV__Tags(v ...cfz.Tag) *AWS_EC2_TrafficMirrorSession {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__TrafficMirrorFilterId updates property "TrafficMirrorFilterId".
func (t *AWS_EC2_TrafficMirrorSession) Set__TrafficMirrorFilterId(v cfz.Expression[string]) *AWS_EC2_TrafficMirrorSession {
	t.TrafficMirrorFilterId = v
	return t
}

// SetV__TrafficMirrorFilterId updates property "TrafficMirrorFilterId".
func (t *AWS_EC2_TrafficMirrorSession) SetV__TrafficMirrorFilterId(v string) *AWS_EC2_TrafficMirrorSession {
	t.TrafficMirrorFilterId = cfz.V(v)
	return t
}

// Set__TrafficMirrorTargetId updates property "TrafficMirrorTargetId".
func (t *AWS_EC2_TrafficMirrorSession) Set__TrafficMirrorTargetId(v cfz.Expression[string]) *AWS_EC2_TrafficMirrorSession {
	t.TrafficMirrorTargetId = v
	return t
}

// SetV__TrafficMirrorTargetId updates property "TrafficMirrorTargetId".
func (t *AWS_EC2_TrafficMirrorSession) SetV__TrafficMirrorTargetId(v string) *AWS_EC2_TrafficMirrorSession {
	t.TrafficMirrorTargetId = cfz.V(v)
	return t
}

// Set__VirtualNetworkId updates property "VirtualNetworkId".
func (t *AWS_EC2_TrafficMirrorSession) Set__VirtualNetworkId(v cfz.Expression[int32]) *AWS_EC2_TrafficMirrorSession {
	t.VirtualNetworkId = v
	return t
}

// SetV__VirtualNetworkId updates property "VirtualNetworkId".
func (t *AWS_EC2_TrafficMirrorSession) SetV__VirtualNetworkId(v int32) *AWS_EC2_TrafficMirrorSession {
	t.VirtualNetworkId = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_TrafficMirrorSession) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_TrafficMirrorSession) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_TrafficMirrorSession) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_TrafficMirrorSession

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_TrafficMirrorSession) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
