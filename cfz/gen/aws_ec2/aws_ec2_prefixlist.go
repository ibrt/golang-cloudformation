// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_PrefixList)(nil)
	_ cfz.Resource                   = (*AWS_EC2_PrefixList)(nil)
)

const (
	// AWS_EC2_PrefixList__Type is the CloudFormation type for AWS::EC2::PrefixList.
	AWS_EC2_PrefixList__Type = "AWS::EC2::PrefixList"
)

var (
	// AWS_EC2_PrefixList__AttributesMap reports all the CloudFormation attributes for AWS::EC2::PrefixList.
	AWS_EC2_PrefixList__AttributesMap = struct {
		Arn          string
		OwnerId      string
		PrefixListId string
		Version      string
	}{
		Arn:          "Arn",
		OwnerId:      "OwnerId",
		PrefixListId: "PrefixListId",
		Version:      "Version",
	}

	// AWS_EC2_PrefixList__AttributesSlice reports all the CloudFormation attributes for AWS::EC2::PrefixList.
	AWS_EC2_PrefixList__AttributesSlice = []string{
		AWS_EC2_PrefixList__AttributesMap.Arn,
		AWS_EC2_PrefixList__AttributesMap.OwnerId,
		AWS_EC2_PrefixList__AttributesMap.PrefixListId,
		AWS_EC2_PrefixList__AttributesMap.Version,
	}
)

var (
	// AWS_EC2_PrefixList__PropertiesMap reports all the CloudFormation properties for AWS::EC2::PrefixList.
	AWS_EC2_PrefixList__PropertiesMap = struct {
		AddressFamily  string
		Entries        string
		MaxEntries     string
		PrefixListName string
		Tags           string
	}{
		AddressFamily:  "AddressFamily",
		Entries:        "Entries",
		MaxEntries:     "MaxEntries",
		PrefixListName: "PrefixListName",
		Tags:           "Tags",
	}

	// AWS_EC2_PrefixList__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::PrefixList.
	AWS_EC2_PrefixList__PropertiesSlice = []string{
		AWS_EC2_PrefixList__PropertiesMap.AddressFamily,
		AWS_EC2_PrefixList__PropertiesMap.Entries,
		AWS_EC2_PrefixList__PropertiesMap.MaxEntries,
		AWS_EC2_PrefixList__PropertiesMap.PrefixListName,
		AWS_EC2_PrefixList__PropertiesMap.Tags,
	}
)

// AWS_EC2_PrefixList is a binding for AWS::EC2::PrefixList.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-prefixlist.html
type AWS_EC2_PrefixList struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AddressFamily is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-prefixlist.html#cfn-ec2-prefixlist-addressfamily
	AddressFamily cfz.Expression[string] `json:"AddressFamily,omitempty"`

	// Entries is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-prefixlist.html#cfn-ec2-prefixlist-entries
	Entries cfz.ExpressionSlice[AWS_EC2_PrefixList_Entry] `json:"Entries,omitempty"`

	// MaxEntries is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-prefixlist.html#cfn-ec2-prefixlist-maxentries
	MaxEntries cfz.Expression[int32] `json:"MaxEntries,omitempty"`

	// PrefixListName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-prefixlist.html#cfn-ec2-prefixlist-prefixlistname
	PrefixListName cfz.Expression[string] `json:"PrefixListName,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-prefixlist.html#cfn-ec2-prefixlist-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_EC2_PrefixList initializes a new *AWS_EC2_PrefixList.
func New__AWS_EC2_PrefixList(logicalName string) *AWS_EC2_PrefixList {
	return &AWS_EC2_PrefixList{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_PrefixList) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_PrefixList) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_PrefixList) GetType() string {
	return AWS_EC2_PrefixList__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_PrefixList) Set__LogicalName(v string) *AWS_EC2_PrefixList {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_PrefixList) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_PrefixList {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_PrefixList) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_PrefixList {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_PrefixList) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_PrefixList {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_PrefixList) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_PrefixList {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_PrefixList) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_PrefixList {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_PrefixList) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_PrefixList {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AddressFamily updates property "AddressFamily".
func (t *AWS_EC2_PrefixList) Set__AddressFamily(v cfz.Expression[string]) *AWS_EC2_PrefixList {
	t.AddressFamily = v
	return t
}

// SetV__AddressFamily updates property "AddressFamily".
func (t *AWS_EC2_PrefixList) SetV__AddressFamily(v string) *AWS_EC2_PrefixList {
	t.AddressFamily = cfz.V(v)
	return t
}

// Set__Entries updates property "Entries".
func (t *AWS_EC2_PrefixList) Set__Entries(v cfz.ExpressionSlice[AWS_EC2_PrefixList_Entry]) *AWS_EC2_PrefixList {
	t.Entries = v
	return t
}

// SetS__Entries updates property "Entries".
func (t *AWS_EC2_PrefixList) SetS__Entries(v ...cfz.Expression[AWS_EC2_PrefixList_Entry]) *AWS_EC2_PrefixList {
	t.Entries = cfz.S(v...)
	return t
}

// SetSV__Entries updates property "Entries".
func (t *AWS_EC2_PrefixList) SetSV__Entries(v ...AWS_EC2_PrefixList_Entry) *AWS_EC2_PrefixList {
	t.Entries = cfz.SV(v...)
	return t
}

// Set__MaxEntries updates property "MaxEntries".
func (t *AWS_EC2_PrefixList) Set__MaxEntries(v cfz.Expression[int32]) *AWS_EC2_PrefixList {
	t.MaxEntries = v
	return t
}

// SetV__MaxEntries updates property "MaxEntries".
func (t *AWS_EC2_PrefixList) SetV__MaxEntries(v int32) *AWS_EC2_PrefixList {
	t.MaxEntries = cfz.V(v)
	return t
}

// Set__PrefixListName updates property "PrefixListName".
func (t *AWS_EC2_PrefixList) Set__PrefixListName(v cfz.Expression[string]) *AWS_EC2_PrefixList {
	t.PrefixListName = v
	return t
}

// SetV__PrefixListName updates property "PrefixListName".
func (t *AWS_EC2_PrefixList) SetV__PrefixListName(v string) *AWS_EC2_PrefixList {
	t.PrefixListName = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_EC2_PrefixList) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_EC2_PrefixList {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_EC2_PrefixList) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_EC2_PrefixList {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_EC2_PrefixList) SetSV__Tags(v ...cfz.Tag) *AWS_EC2_PrefixList {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_PrefixList) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_EC2_PrefixList) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_PrefixList__AttributesMap.Arn))
}

// GetAtt__OwnerId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: OwnerId
func (t *AWS_EC2_PrefixList) GetAtt__OwnerId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_PrefixList__AttributesMap.OwnerId))
}

// GetAtt__PrefixListId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: PrefixListId
func (t *AWS_EC2_PrefixList) GetAtt__PrefixListId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_PrefixList__AttributesMap.PrefixListId))
}

// GetAtt__Version returns a $cfz.Expression[int32] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version
func (t *AWS_EC2_PrefixList) GetAtt__Version() cfz.Expression[int32] {
	return cfz.GetAtt[int32](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_PrefixList__AttributesMap.Version))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_PrefixList) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_EC2_PrefixList) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__OwnerId returns a conventionally configured output for an attribute of this resource.
// Attribute: OwnerId
func (t *AWS_EC2_PrefixList) GetConventionalOutputAtt__OwnerId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttOwnerId", t.GetAtt__OwnerId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__PrefixListId returns a conventionally configured output for an attribute of this resource.
// Attribute: PrefixListId
func (t *AWS_EC2_PrefixList) GetConventionalOutputAtt__PrefixListId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttPrefixListId", t.GetAtt__PrefixListId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version returns a conventionally configured output for an attribute of this resource.
// Attribute: Version
func (t *AWS_EC2_PrefixList) GetConventionalOutputAtt__Version(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersion", t.GetAtt__Version())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_PrefixList) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_PrefixList

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_PrefixList) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
