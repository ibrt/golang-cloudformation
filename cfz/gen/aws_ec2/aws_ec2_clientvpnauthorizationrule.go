// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_ClientVpnAuthorizationRule)(nil)
	_ cfz.Resource                   = (*AWS_EC2_ClientVpnAuthorizationRule)(nil)
)

const (
	// AWS_EC2_ClientVpnAuthorizationRule__Type is the CloudFormation type for AWS::EC2::ClientVpnAuthorizationRule.
	AWS_EC2_ClientVpnAuthorizationRule__Type = "AWS::EC2::ClientVpnAuthorizationRule"
)

var (
	// AWS_EC2_ClientVpnAuthorizationRule__PropertiesMap reports all the CloudFormation properties for AWS::EC2::ClientVpnAuthorizationRule.
	AWS_EC2_ClientVpnAuthorizationRule__PropertiesMap = struct {
		AccessGroupId       string
		AuthorizeAllGroups  string
		ClientVpnEndpointId string
		Description         string
		TargetNetworkCidr   string
	}{
		AccessGroupId:       "AccessGroupId",
		AuthorizeAllGroups:  "AuthorizeAllGroups",
		ClientVpnEndpointId: "ClientVpnEndpointId",
		Description:         "Description",
		TargetNetworkCidr:   "TargetNetworkCidr",
	}

	// AWS_EC2_ClientVpnAuthorizationRule__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::ClientVpnAuthorizationRule.
	AWS_EC2_ClientVpnAuthorizationRule__PropertiesSlice = []string{
		AWS_EC2_ClientVpnAuthorizationRule__PropertiesMap.AccessGroupId,
		AWS_EC2_ClientVpnAuthorizationRule__PropertiesMap.AuthorizeAllGroups,
		AWS_EC2_ClientVpnAuthorizationRule__PropertiesMap.ClientVpnEndpointId,
		AWS_EC2_ClientVpnAuthorizationRule__PropertiesMap.Description,
		AWS_EC2_ClientVpnAuthorizationRule__PropertiesMap.TargetNetworkCidr,
	}
)

// AWS_EC2_ClientVpnAuthorizationRule is a binding for AWS::EC2::ClientVpnAuthorizationRule.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnauthorizationrule.html
type AWS_EC2_ClientVpnAuthorizationRule struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AccessGroupId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnauthorizationrule.html#cfn-ec2-clientvpnauthorizationrule-accessgroupid
	AccessGroupId cfz.Expression[string] `json:"AccessGroupId,omitempty"`

	// AuthorizeAllGroups is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnauthorizationrule.html#cfn-ec2-clientvpnauthorizationrule-authorizeallgroups
	AuthorizeAllGroups cfz.Expression[bool] `json:"AuthorizeAllGroups,omitempty"`

	// ClientVpnEndpointId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnauthorizationrule.html#cfn-ec2-clientvpnauthorizationrule-clientvpnendpointid
	ClientVpnEndpointId cfz.Expression[string] `json:"ClientVpnEndpointId,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnauthorizationrule.html#cfn-ec2-clientvpnauthorizationrule-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// TargetNetworkCidr is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnauthorizationrule.html#cfn-ec2-clientvpnauthorizationrule-targetnetworkcidr
	TargetNetworkCidr cfz.Expression[string] `json:"TargetNetworkCidr,omitempty"`
}

// New__AWS_EC2_ClientVpnAuthorizationRule initializes a new *AWS_EC2_ClientVpnAuthorizationRule.
func New__AWS_EC2_ClientVpnAuthorizationRule(logicalName string) *AWS_EC2_ClientVpnAuthorizationRule {
	return &AWS_EC2_ClientVpnAuthorizationRule{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_ClientVpnAuthorizationRule) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_ClientVpnAuthorizationRule) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_ClientVpnAuthorizationRule) GetType() string {
	return AWS_EC2_ClientVpnAuthorizationRule__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_ClientVpnAuthorizationRule) Set__LogicalName(v string) *AWS_EC2_ClientVpnAuthorizationRule {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_ClientVpnAuthorizationRule) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_ClientVpnAuthorizationRule {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_ClientVpnAuthorizationRule) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_ClientVpnAuthorizationRule {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_ClientVpnAuthorizationRule) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_ClientVpnAuthorizationRule {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_ClientVpnAuthorizationRule) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_ClientVpnAuthorizationRule {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_ClientVpnAuthorizationRule) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_ClientVpnAuthorizationRule {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_ClientVpnAuthorizationRule) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_ClientVpnAuthorizationRule {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AccessGroupId updates property "AccessGroupId".
func (t *AWS_EC2_ClientVpnAuthorizationRule) Set__AccessGroupId(v cfz.Expression[string]) *AWS_EC2_ClientVpnAuthorizationRule {
	t.AccessGroupId = v
	return t
}

// SetV__AccessGroupId updates property "AccessGroupId".
func (t *AWS_EC2_ClientVpnAuthorizationRule) SetV__AccessGroupId(v string) *AWS_EC2_ClientVpnAuthorizationRule {
	t.AccessGroupId = cfz.V(v)
	return t
}

// Set__AuthorizeAllGroups updates property "AuthorizeAllGroups".
func (t *AWS_EC2_ClientVpnAuthorizationRule) Set__AuthorizeAllGroups(v cfz.Expression[bool]) *AWS_EC2_ClientVpnAuthorizationRule {
	t.AuthorizeAllGroups = v
	return t
}

// SetV__AuthorizeAllGroups updates property "AuthorizeAllGroups".
func (t *AWS_EC2_ClientVpnAuthorizationRule) SetV__AuthorizeAllGroups(v bool) *AWS_EC2_ClientVpnAuthorizationRule {
	t.AuthorizeAllGroups = cfz.V(v)
	return t
}

// Set__ClientVpnEndpointId updates property "ClientVpnEndpointId".
func (t *AWS_EC2_ClientVpnAuthorizationRule) Set__ClientVpnEndpointId(v cfz.Expression[string]) *AWS_EC2_ClientVpnAuthorizationRule {
	t.ClientVpnEndpointId = v
	return t
}

// SetV__ClientVpnEndpointId updates property "ClientVpnEndpointId".
func (t *AWS_EC2_ClientVpnAuthorizationRule) SetV__ClientVpnEndpointId(v string) *AWS_EC2_ClientVpnAuthorizationRule {
	t.ClientVpnEndpointId = cfz.V(v)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_EC2_ClientVpnAuthorizationRule) Set__Description(v cfz.Expression[string]) *AWS_EC2_ClientVpnAuthorizationRule {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_EC2_ClientVpnAuthorizationRule) SetV__Description(v string) *AWS_EC2_ClientVpnAuthorizationRule {
	t.Description = cfz.V(v)
	return t
}

// Set__TargetNetworkCidr updates property "TargetNetworkCidr".
func (t *AWS_EC2_ClientVpnAuthorizationRule) Set__TargetNetworkCidr(v cfz.Expression[string]) *AWS_EC2_ClientVpnAuthorizationRule {
	t.TargetNetworkCidr = v
	return t
}

// SetV__TargetNetworkCidr updates property "TargetNetworkCidr".
func (t *AWS_EC2_ClientVpnAuthorizationRule) SetV__TargetNetworkCidr(v string) *AWS_EC2_ClientVpnAuthorizationRule {
	t.TargetNetworkCidr = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_ClientVpnAuthorizationRule) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_ClientVpnAuthorizationRule) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_ClientVpnAuthorizationRule) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_ClientVpnAuthorizationRule

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_ClientVpnAuthorizationRule) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
