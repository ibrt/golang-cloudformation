// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ec2

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EC2_NatGateway)(nil)
	_ cfz.Resource                   = (*AWS_EC2_NatGateway)(nil)
)

const (
	// AWS_EC2_NatGateway__Type is the CloudFormation type for AWS::EC2::NatGateway.
	AWS_EC2_NatGateway__Type = "AWS::EC2::NatGateway"
)

var (
	// AWS_EC2_NatGateway__AttributesMap reports all the CloudFormation attributes for AWS::EC2::NatGateway.
	AWS_EC2_NatGateway__AttributesMap = struct {
		NatGatewayId string
	}{
		NatGatewayId: "NatGatewayId",
	}

	// AWS_EC2_NatGateway__AttributesSlice reports all the CloudFormation attributes for AWS::EC2::NatGateway.
	AWS_EC2_NatGateway__AttributesSlice = []string{
		AWS_EC2_NatGateway__AttributesMap.NatGatewayId,
	}
)

var (
	// AWS_EC2_NatGateway__PropertiesMap reports all the CloudFormation properties for AWS::EC2::NatGateway.
	AWS_EC2_NatGateway__PropertiesMap = struct {
		AllocationId                   string
		ConnectivityType               string
		MaxDrainDurationSeconds        string
		PrivateIpAddress               string
		SecondaryAllocationIds         string
		SecondaryPrivateIpAddressCount string
		SecondaryPrivateIpAddresses    string
		SubnetId                       string
		Tags                           string
	}{
		AllocationId:                   "AllocationId",
		ConnectivityType:               "ConnectivityType",
		MaxDrainDurationSeconds:        "MaxDrainDurationSeconds",
		PrivateIpAddress:               "PrivateIpAddress",
		SecondaryAllocationIds:         "SecondaryAllocationIds",
		SecondaryPrivateIpAddressCount: "SecondaryPrivateIpAddressCount",
		SecondaryPrivateIpAddresses:    "SecondaryPrivateIpAddresses",
		SubnetId:                       "SubnetId",
		Tags:                           "Tags",
	}

	// AWS_EC2_NatGateway__PropertiesSlice reports all the CloudFormation properties for AWS::EC2::NatGateway.
	AWS_EC2_NatGateway__PropertiesSlice = []string{
		AWS_EC2_NatGateway__PropertiesMap.AllocationId,
		AWS_EC2_NatGateway__PropertiesMap.ConnectivityType,
		AWS_EC2_NatGateway__PropertiesMap.MaxDrainDurationSeconds,
		AWS_EC2_NatGateway__PropertiesMap.PrivateIpAddress,
		AWS_EC2_NatGateway__PropertiesMap.SecondaryAllocationIds,
		AWS_EC2_NatGateway__PropertiesMap.SecondaryPrivateIpAddressCount,
		AWS_EC2_NatGateway__PropertiesMap.SecondaryPrivateIpAddresses,
		AWS_EC2_NatGateway__PropertiesMap.SubnetId,
		AWS_EC2_NatGateway__PropertiesMap.Tags,
	}
)

// AWS_EC2_NatGateway is a binding for AWS::EC2::NatGateway.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html
type AWS_EC2_NatGateway struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AllocationId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html#cfn-ec2-natgateway-allocationid
	AllocationId cfz.Expression[string] `json:"AllocationId,omitempty"`

	// ConnectivityType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html#cfn-ec2-natgateway-connectivitytype
	ConnectivityType cfz.Expression[string] `json:"ConnectivityType,omitempty"`

	// MaxDrainDurationSeconds is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html#cfn-ec2-natgateway-maxdraindurationseconds
	MaxDrainDurationSeconds cfz.Expression[int32] `json:"MaxDrainDurationSeconds,omitempty"`

	// PrivateIpAddress is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html#cfn-ec2-natgateway-privateipaddress
	PrivateIpAddress cfz.Expression[string] `json:"PrivateIpAddress,omitempty"`

	// SecondaryAllocationIds is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html#cfn-ec2-natgateway-secondaryallocationids
	SecondaryAllocationIds cfz.ExpressionSlice[string] `json:"SecondaryAllocationIds,omitempty"`

	// SecondaryPrivateIpAddressCount is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html#cfn-ec2-natgateway-secondaryprivateipaddresscount
	SecondaryPrivateIpAddressCount cfz.Expression[int32] `json:"SecondaryPrivateIpAddressCount,omitempty"`

	// SecondaryPrivateIpAddresses is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html#cfn-ec2-natgateway-secondaryprivateipaddresses
	SecondaryPrivateIpAddresses cfz.ExpressionSlice[string] `json:"SecondaryPrivateIpAddresses,omitempty"`

	// SubnetId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html#cfn-ec2-natgateway-subnetid
	SubnetId cfz.Expression[string] `json:"SubnetId,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html#cfn-ec2-natgateway-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_EC2_NatGateway initializes a new *AWS_EC2_NatGateway.
func New__AWS_EC2_NatGateway(logicalName string) *AWS_EC2_NatGateway {
	return &AWS_EC2_NatGateway{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EC2_NatGateway) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EC2_NatGateway) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EC2_NatGateway) GetType() string {
	return AWS_EC2_NatGateway__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EC2_NatGateway) Set__LogicalName(v string) *AWS_EC2_NatGateway {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EC2_NatGateway) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EC2_NatGateway {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EC2_NatGateway) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EC2_NatGateway {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EC2_NatGateway) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EC2_NatGateway {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EC2_NatGateway) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EC2_NatGateway {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EC2_NatGateway) Set__RequestedOutputs(v []cfz.Output) *AWS_EC2_NatGateway {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EC2_NatGateway) Add__RequestedOutputs(v ...cfz.Output) *AWS_EC2_NatGateway {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AllocationId updates property "AllocationId".
func (t *AWS_EC2_NatGateway) Set__AllocationId(v cfz.Expression[string]) *AWS_EC2_NatGateway {
	t.AllocationId = v
	return t
}

// SetV__AllocationId updates property "AllocationId".
func (t *AWS_EC2_NatGateway) SetV__AllocationId(v string) *AWS_EC2_NatGateway {
	t.AllocationId = cfz.V(v)
	return t
}

// Set__ConnectivityType updates property "ConnectivityType".
func (t *AWS_EC2_NatGateway) Set__ConnectivityType(v cfz.Expression[string]) *AWS_EC2_NatGateway {
	t.ConnectivityType = v
	return t
}

// SetV__ConnectivityType updates property "ConnectivityType".
func (t *AWS_EC2_NatGateway) SetV__ConnectivityType(v string) *AWS_EC2_NatGateway {
	t.ConnectivityType = cfz.V(v)
	return t
}

// Set__MaxDrainDurationSeconds updates property "MaxDrainDurationSeconds".
func (t *AWS_EC2_NatGateway) Set__MaxDrainDurationSeconds(v cfz.Expression[int32]) *AWS_EC2_NatGateway {
	t.MaxDrainDurationSeconds = v
	return t
}

// SetV__MaxDrainDurationSeconds updates property "MaxDrainDurationSeconds".
func (t *AWS_EC2_NatGateway) SetV__MaxDrainDurationSeconds(v int32) *AWS_EC2_NatGateway {
	t.MaxDrainDurationSeconds = cfz.V(v)
	return t
}

// Set__PrivateIpAddress updates property "PrivateIpAddress".
func (t *AWS_EC2_NatGateway) Set__PrivateIpAddress(v cfz.Expression[string]) *AWS_EC2_NatGateway {
	t.PrivateIpAddress = v
	return t
}

// SetV__PrivateIpAddress updates property "PrivateIpAddress".
func (t *AWS_EC2_NatGateway) SetV__PrivateIpAddress(v string) *AWS_EC2_NatGateway {
	t.PrivateIpAddress = cfz.V(v)
	return t
}

// Set__SecondaryAllocationIds updates property "SecondaryAllocationIds".
func (t *AWS_EC2_NatGateway) Set__SecondaryAllocationIds(v cfz.ExpressionSlice[string]) *AWS_EC2_NatGateway {
	t.SecondaryAllocationIds = v
	return t
}

// SetS__SecondaryAllocationIds updates property "SecondaryAllocationIds".
func (t *AWS_EC2_NatGateway) SetS__SecondaryAllocationIds(v ...cfz.Expression[string]) *AWS_EC2_NatGateway {
	t.SecondaryAllocationIds = cfz.S(v...)
	return t
}

// SetSV__SecondaryAllocationIds updates property "SecondaryAllocationIds".
func (t *AWS_EC2_NatGateway) SetSV__SecondaryAllocationIds(v ...string) *AWS_EC2_NatGateway {
	t.SecondaryAllocationIds = cfz.SV(v...)
	return t
}

// Set__SecondaryPrivateIpAddressCount updates property "SecondaryPrivateIpAddressCount".
func (t *AWS_EC2_NatGateway) Set__SecondaryPrivateIpAddressCount(v cfz.Expression[int32]) *AWS_EC2_NatGateway {
	t.SecondaryPrivateIpAddressCount = v
	return t
}

// SetV__SecondaryPrivateIpAddressCount updates property "SecondaryPrivateIpAddressCount".
func (t *AWS_EC2_NatGateway) SetV__SecondaryPrivateIpAddressCount(v int32) *AWS_EC2_NatGateway {
	t.SecondaryPrivateIpAddressCount = cfz.V(v)
	return t
}

// Set__SecondaryPrivateIpAddresses updates property "SecondaryPrivateIpAddresses".
func (t *AWS_EC2_NatGateway) Set__SecondaryPrivateIpAddresses(v cfz.ExpressionSlice[string]) *AWS_EC2_NatGateway {
	t.SecondaryPrivateIpAddresses = v
	return t
}

// SetS__SecondaryPrivateIpAddresses updates property "SecondaryPrivateIpAddresses".
func (t *AWS_EC2_NatGateway) SetS__SecondaryPrivateIpAddresses(v ...cfz.Expression[string]) *AWS_EC2_NatGateway {
	t.SecondaryPrivateIpAddresses = cfz.S(v...)
	return t
}

// SetSV__SecondaryPrivateIpAddresses updates property "SecondaryPrivateIpAddresses".
func (t *AWS_EC2_NatGateway) SetSV__SecondaryPrivateIpAddresses(v ...string) *AWS_EC2_NatGateway {
	t.SecondaryPrivateIpAddresses = cfz.SV(v...)
	return t
}

// Set__SubnetId updates property "SubnetId".
func (t *AWS_EC2_NatGateway) Set__SubnetId(v cfz.Expression[string]) *AWS_EC2_NatGateway {
	t.SubnetId = v
	return t
}

// SetV__SubnetId updates property "SubnetId".
func (t *AWS_EC2_NatGateway) SetV__SubnetId(v string) *AWS_EC2_NatGateway {
	t.SubnetId = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_EC2_NatGateway) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_EC2_NatGateway {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_EC2_NatGateway) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_EC2_NatGateway {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_EC2_NatGateway) SetSV__Tags(v ...cfz.Tag) *AWS_EC2_NatGateway {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EC2_NatGateway) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__NatGatewayId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: NatGatewayId
func (t *AWS_EC2_NatGateway) GetAtt__NatGatewayId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EC2_NatGateway__AttributesMap.NatGatewayId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EC2_NatGateway) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__NatGatewayId returns a conventionally configured output for an attribute of this resource.
// Attribute: NatGatewayId
func (t *AWS_EC2_NatGateway) GetConventionalOutputAtt__NatGatewayId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNatGatewayId", t.GetAtt__NatGatewayId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EC2_NatGateway) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EC2_NatGateway

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EC2_NatGateway) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
