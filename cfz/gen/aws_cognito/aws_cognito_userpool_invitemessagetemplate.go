// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_cognito

import (
	"github.com/ibrt/golang-cloudformation/cfz"
)

const (
	// AWS_Cognito_UserPool_InviteMessageTemplate__Type is the CloudFormation type for AWS::Cognito::UserPool.InviteMessageTemplate.
	AWS_Cognito_UserPool_InviteMessageTemplate__Type = "AWS::Cognito::UserPool.InviteMessageTemplate"
)

var (
	// AWS_Cognito_UserPool_InviteMessageTemplate__PropertiesMap reports all the CloudFormation properties for AWS::Cognito::UserPool.InviteMessageTemplate.
	AWS_Cognito_UserPool_InviteMessageTemplate__PropertiesMap = struct {
		EmailMessage string
		EmailSubject string
		SMSMessage   string
	}{
		EmailMessage: "EmailMessage",
		EmailSubject: "EmailSubject",
		SMSMessage:   "SMSMessage",
	}

	// AWS_Cognito_UserPool_InviteMessageTemplate__PropertiesSlice reports all the CloudFormation properties for AWS::Cognito::UserPool.InviteMessageTemplate.
	AWS_Cognito_UserPool_InviteMessageTemplate__PropertiesSlice = []string{
		AWS_Cognito_UserPool_InviteMessageTemplate__PropertiesMap.EmailMessage,
		AWS_Cognito_UserPool_InviteMessageTemplate__PropertiesMap.EmailSubject,
		AWS_Cognito_UserPool_InviteMessageTemplate__PropertiesMap.SMSMessage,
	}
)

// AWS_Cognito_UserPool_InviteMessageTemplate is a binding for AWS::Cognito::UserPool.InviteMessageTemplate.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-invitemessagetemplate.html
type AWS_Cognito_UserPool_InviteMessageTemplate struct {
	// EmailMessage is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-invitemessagetemplate.html#cfn-cognito-userpool-invitemessagetemplate-emailmessage
	EmailMessage cfz.Expression[string] `json:"EmailMessage,omitempty"`

	// EmailSubject is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-invitemessagetemplate.html#cfn-cognito-userpool-invitemessagetemplate-emailsubject
	EmailSubject cfz.Expression[string] `json:"EmailSubject,omitempty"`

	// SMSMessage is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-invitemessagetemplate.html#cfn-cognito-userpool-invitemessagetemplate-smsmessage
	SMSMessage cfz.Expression[string] `json:"SMSMessage,omitempty"`
}

// New__AWS_Cognito_UserPool_InviteMessageTemplate initializes a new AWS_Cognito_UserPool_InviteMessageTemplate.
func New__AWS_Cognito_UserPool_InviteMessageTemplate() AWS_Cognito_UserPool_InviteMessageTemplate {
	return AWS_Cognito_UserPool_InviteMessageTemplate{}
}

// GetType returns the CloudFormation type.
func (AWS_Cognito_UserPool_InviteMessageTemplate) GetType() string {
	return AWS_Cognito_UserPool_InviteMessageTemplate__Type
}

// Set__EmailMessage updates property "EmailMessage".
func (t AWS_Cognito_UserPool_InviteMessageTemplate) Set__EmailMessage(v cfz.Expression[string]) AWS_Cognito_UserPool_InviteMessageTemplate {
	t.EmailMessage = v
	return t
}

// SetV__EmailMessage updates property "EmailMessage".
func (t AWS_Cognito_UserPool_InviteMessageTemplate) SetV__EmailMessage(v string) AWS_Cognito_UserPool_InviteMessageTemplate {
	t.EmailMessage = cfz.V(v)
	return t
}

// Set__EmailSubject updates property "EmailSubject".
func (t AWS_Cognito_UserPool_InviteMessageTemplate) Set__EmailSubject(v cfz.Expression[string]) AWS_Cognito_UserPool_InviteMessageTemplate {
	t.EmailSubject = v
	return t
}

// SetV__EmailSubject updates property "EmailSubject".
func (t AWS_Cognito_UserPool_InviteMessageTemplate) SetV__EmailSubject(v string) AWS_Cognito_UserPool_InviteMessageTemplate {
	t.EmailSubject = cfz.V(v)
	return t
}

// Set__SMSMessage updates property "SMSMessage".
func (t AWS_Cognito_UserPool_InviteMessageTemplate) Set__SMSMessage(v cfz.Expression[string]) AWS_Cognito_UserPool_InviteMessageTemplate {
	t.SMSMessage = v
	return t
}

// SetV__SMSMessage updates property "SMSMessage".
func (t AWS_Cognito_UserPool_InviteMessageTemplate) SetV__SMSMessage(v string) AWS_Cognito_UserPool_InviteMessageTemplate {
	t.SMSMessage = cfz.V(v)
	return t
}
