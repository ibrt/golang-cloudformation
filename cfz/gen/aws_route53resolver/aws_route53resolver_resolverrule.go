// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_route53resolver

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Route53Resolver_ResolverRule)(nil)
	_ cfz.Resource                   = (*AWS_Route53Resolver_ResolverRule)(nil)
)

const (
	// AWS_Route53Resolver_ResolverRule__Type is the CloudFormation type for AWS::Route53Resolver::ResolverRule.
	AWS_Route53Resolver_ResolverRule__Type = "AWS::Route53Resolver::ResolverRule"
)

var (
	// AWS_Route53Resolver_ResolverRule__AttributesMap reports all the CloudFormation attributes for AWS::Route53Resolver::ResolverRule.
	AWS_Route53Resolver_ResolverRule__AttributesMap = struct {
		Arn                string
		DomainName         string
		Name               string
		ResolverEndpointId string
		ResolverRuleId     string
		TargetIps          string
	}{
		Arn:                "Arn",
		DomainName:         "DomainName",
		Name:               "Name",
		ResolverEndpointId: "ResolverEndpointId",
		ResolverRuleId:     "ResolverRuleId",
		TargetIps:          "TargetIps",
	}

	// AWS_Route53Resolver_ResolverRule__AttributesSlice reports all the CloudFormation attributes for AWS::Route53Resolver::ResolverRule.
	AWS_Route53Resolver_ResolverRule__AttributesSlice = []string{
		AWS_Route53Resolver_ResolverRule__AttributesMap.Arn,
		AWS_Route53Resolver_ResolverRule__AttributesMap.DomainName,
		AWS_Route53Resolver_ResolverRule__AttributesMap.Name,
		AWS_Route53Resolver_ResolverRule__AttributesMap.ResolverEndpointId,
		AWS_Route53Resolver_ResolverRule__AttributesMap.ResolverRuleId,
		AWS_Route53Resolver_ResolverRule__AttributesMap.TargetIps,
	}
)

var (
	// AWS_Route53Resolver_ResolverRule__PropertiesMap reports all the CloudFormation properties for AWS::Route53Resolver::ResolverRule.
	AWS_Route53Resolver_ResolverRule__PropertiesMap = struct {
		DomainName         string
		Name               string
		ResolverEndpointId string
		RuleType           string
		Tags               string
		TargetIps          string
	}{
		DomainName:         "DomainName",
		Name:               "Name",
		ResolverEndpointId: "ResolverEndpointId",
		RuleType:           "RuleType",
		Tags:               "Tags",
		TargetIps:          "TargetIps",
	}

	// AWS_Route53Resolver_ResolverRule__PropertiesSlice reports all the CloudFormation properties for AWS::Route53Resolver::ResolverRule.
	AWS_Route53Resolver_ResolverRule__PropertiesSlice = []string{
		AWS_Route53Resolver_ResolverRule__PropertiesMap.DomainName,
		AWS_Route53Resolver_ResolverRule__PropertiesMap.Name,
		AWS_Route53Resolver_ResolverRule__PropertiesMap.ResolverEndpointId,
		AWS_Route53Resolver_ResolverRule__PropertiesMap.RuleType,
		AWS_Route53Resolver_ResolverRule__PropertiesMap.Tags,
		AWS_Route53Resolver_ResolverRule__PropertiesMap.TargetIps,
	}
)

// AWS_Route53Resolver_ResolverRule is a binding for AWS::Route53Resolver::ResolverRule.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverrule.html
type AWS_Route53Resolver_ResolverRule struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// DomainName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverrule.html#cfn-route53resolver-resolverrule-domainname
	DomainName cfz.Expression[string] `json:"DomainName,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverrule.html#cfn-route53resolver-resolverrule-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// ResolverEndpointId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverrule.html#cfn-route53resolver-resolverrule-resolverendpointid
	ResolverEndpointId cfz.Expression[string] `json:"ResolverEndpointId,omitempty"`

	// RuleType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverrule.html#cfn-route53resolver-resolverrule-ruletype
	RuleType cfz.Expression[string] `json:"RuleType,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverrule.html#cfn-route53resolver-resolverrule-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// TargetIps is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverrule.html#cfn-route53resolver-resolverrule-targetips
	TargetIps cfz.ExpressionSlice[AWS_Route53Resolver_ResolverRule_TargetAddress] `json:"TargetIps,omitempty"`
}

// New__AWS_Route53Resolver_ResolverRule initializes a new *AWS_Route53Resolver_ResolverRule.
func New__AWS_Route53Resolver_ResolverRule(logicalName string) *AWS_Route53Resolver_ResolverRule {
	return &AWS_Route53Resolver_ResolverRule{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Route53Resolver_ResolverRule) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Route53Resolver_ResolverRule) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Route53Resolver_ResolverRule) GetType() string {
	return AWS_Route53Resolver_ResolverRule__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Route53Resolver_ResolverRule) Set__LogicalName(v string) *AWS_Route53Resolver_ResolverRule {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Route53Resolver_ResolverRule) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Route53Resolver_ResolverRule {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Route53Resolver_ResolverRule) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Route53Resolver_ResolverRule {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Route53Resolver_ResolverRule) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Route53Resolver_ResolverRule {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Route53Resolver_ResolverRule) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Route53Resolver_ResolverRule {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Route53Resolver_ResolverRule) Set__RequestedOutputs(v []cfz.Output) *AWS_Route53Resolver_ResolverRule {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Route53Resolver_ResolverRule) Add__RequestedOutputs(v ...cfz.Output) *AWS_Route53Resolver_ResolverRule {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__DomainName updates property "DomainName".
func (t *AWS_Route53Resolver_ResolverRule) Set__DomainName(v cfz.Expression[string]) *AWS_Route53Resolver_ResolverRule {
	t.DomainName = v
	return t
}

// SetV__DomainName updates property "DomainName".
func (t *AWS_Route53Resolver_ResolverRule) SetV__DomainName(v string) *AWS_Route53Resolver_ResolverRule {
	t.DomainName = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_Route53Resolver_ResolverRule) Set__Name(v cfz.Expression[string]) *AWS_Route53Resolver_ResolverRule {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_Route53Resolver_ResolverRule) SetV__Name(v string) *AWS_Route53Resolver_ResolverRule {
	t.Name = cfz.V(v)
	return t
}

// Set__ResolverEndpointId updates property "ResolverEndpointId".
func (t *AWS_Route53Resolver_ResolverRule) Set__ResolverEndpointId(v cfz.Expression[string]) *AWS_Route53Resolver_ResolverRule {
	t.ResolverEndpointId = v
	return t
}

// SetV__ResolverEndpointId updates property "ResolverEndpointId".
func (t *AWS_Route53Resolver_ResolverRule) SetV__ResolverEndpointId(v string) *AWS_Route53Resolver_ResolverRule {
	t.ResolverEndpointId = cfz.V(v)
	return t
}

// Set__RuleType updates property "RuleType".
func (t *AWS_Route53Resolver_ResolverRule) Set__RuleType(v cfz.Expression[string]) *AWS_Route53Resolver_ResolverRule {
	t.RuleType = v
	return t
}

// SetV__RuleType updates property "RuleType".
func (t *AWS_Route53Resolver_ResolverRule) SetV__RuleType(v string) *AWS_Route53Resolver_ResolverRule {
	t.RuleType = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_Route53Resolver_ResolverRule) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_Route53Resolver_ResolverRule {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_Route53Resolver_ResolverRule) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_Route53Resolver_ResolverRule {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_Route53Resolver_ResolverRule) SetSV__Tags(v ...cfz.Tag) *AWS_Route53Resolver_ResolverRule {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__TargetIps updates property "TargetIps".
func (t *AWS_Route53Resolver_ResolverRule) Set__TargetIps(v cfz.ExpressionSlice[AWS_Route53Resolver_ResolverRule_TargetAddress]) *AWS_Route53Resolver_ResolverRule {
	t.TargetIps = v
	return t
}

// SetS__TargetIps updates property "TargetIps".
func (t *AWS_Route53Resolver_ResolverRule) SetS__TargetIps(v ...cfz.Expression[AWS_Route53Resolver_ResolverRule_TargetAddress]) *AWS_Route53Resolver_ResolverRule {
	t.TargetIps = cfz.S(v...)
	return t
}

// SetSV__TargetIps updates property "TargetIps".
func (t *AWS_Route53Resolver_ResolverRule) SetSV__TargetIps(v ...AWS_Route53Resolver_ResolverRule_TargetAddress) *AWS_Route53Resolver_ResolverRule {
	t.TargetIps = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Route53Resolver_ResolverRule) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_Route53Resolver_ResolverRule) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverRule__AttributesMap.Arn))
}

// GetAtt__DomainName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DomainName
func (t *AWS_Route53Resolver_ResolverRule) GetAtt__DomainName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverRule__AttributesMap.DomainName))
}

// GetAtt__Name returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Name
func (t *AWS_Route53Resolver_ResolverRule) GetAtt__Name() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverRule__AttributesMap.Name))
}

// GetAtt__ResolverEndpointId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ResolverEndpointId
func (t *AWS_Route53Resolver_ResolverRule) GetAtt__ResolverEndpointId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverRule__AttributesMap.ResolverEndpointId))
}

// GetAtt__ResolverRuleId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ResolverRuleId
func (t *AWS_Route53Resolver_ResolverRule) GetAtt__ResolverRuleId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverRule__AttributesMap.ResolverRuleId))
}

// GetAttSlice__TargetIps returns a $cfz.ExpressionSlice[AWS_Route53Resolver_ResolverRule_TargetAddress] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: TargetIps
func (t *AWS_Route53Resolver_ResolverRule) GetAttSlice__TargetIps() cfz.ExpressionSlice[AWS_Route53Resolver_ResolverRule_TargetAddress] {
	return cfz.GetAttSlice[AWS_Route53Resolver_ResolverRule_TargetAddress](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverRule__AttributesMap.TargetIps))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Route53Resolver_ResolverRule) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_Route53Resolver_ResolverRule) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DomainName returns a conventionally configured output for an attribute of this resource.
// Attribute: DomainName
func (t *AWS_Route53Resolver_ResolverRule) GetConventionalOutputAtt__DomainName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDomainName", t.GetAtt__DomainName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Name returns a conventionally configured output for an attribute of this resource.
// Attribute: Name
func (t *AWS_Route53Resolver_ResolverRule) GetConventionalOutputAtt__Name(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttName", t.GetAtt__Name())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ResolverEndpointId returns a conventionally configured output for an attribute of this resource.
// Attribute: ResolverEndpointId
func (t *AWS_Route53Resolver_ResolverRule) GetConventionalOutputAtt__ResolverEndpointId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttResolverEndpointId", t.GetAtt__ResolverEndpointId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ResolverRuleId returns a conventionally configured output for an attribute of this resource.
// Attribute: ResolverRuleId
func (t *AWS_Route53Resolver_ResolverRule) GetConventionalOutputAtt__ResolverRuleId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttResolverRuleId", t.GetAtt__ResolverRuleId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__TargetIps returns a conventionally configured output for an attribute of this resource.
// Attribute: TargetIps
func (t *AWS_Route53Resolver_ResolverRule) GetConventionalOutputAtt__TargetIps(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttTargetIps", t.GetAttSlice__TargetIps())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Route53Resolver_ResolverRule) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Route53Resolver_ResolverRule

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Route53Resolver_ResolverRule) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
