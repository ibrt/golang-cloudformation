// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_route53resolver

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Route53Resolver_ResolverQueryLoggingConfig)(nil)
	_ cfz.Resource                   = (*AWS_Route53Resolver_ResolverQueryLoggingConfig)(nil)
)

const (
	// AWS_Route53Resolver_ResolverQueryLoggingConfig__Type is the CloudFormation type for AWS::Route53Resolver::ResolverQueryLoggingConfig.
	AWS_Route53Resolver_ResolverQueryLoggingConfig__Type = "AWS::Route53Resolver::ResolverQueryLoggingConfig"
)

var (
	// AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap reports all the CloudFormation attributes for AWS::Route53Resolver::ResolverQueryLoggingConfig.
	AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap = struct {
		Arn              string
		AssociationCount string
		CreationTime     string
		CreatorRequestId string
		Id               string
		OwnerId          string
		ShareStatus      string
		Status           string
	}{
		Arn:              "Arn",
		AssociationCount: "AssociationCount",
		CreationTime:     "CreationTime",
		CreatorRequestId: "CreatorRequestId",
		Id:               "Id",
		OwnerId:          "OwnerId",
		ShareStatus:      "ShareStatus",
		Status:           "Status",
	}

	// AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesSlice reports all the CloudFormation attributes for AWS::Route53Resolver::ResolverQueryLoggingConfig.
	AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesSlice = []string{
		AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.Arn,
		AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.AssociationCount,
		AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.CreationTime,
		AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.CreatorRequestId,
		AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.Id,
		AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.OwnerId,
		AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.ShareStatus,
		AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.Status,
	}
)

var (
	// AWS_Route53Resolver_ResolverQueryLoggingConfig__PropertiesMap reports all the CloudFormation properties for AWS::Route53Resolver::ResolverQueryLoggingConfig.
	AWS_Route53Resolver_ResolverQueryLoggingConfig__PropertiesMap = struct {
		DestinationArn string
		Name           string
	}{
		DestinationArn: "DestinationArn",
		Name:           "Name",
	}

	// AWS_Route53Resolver_ResolverQueryLoggingConfig__PropertiesSlice reports all the CloudFormation properties for AWS::Route53Resolver::ResolverQueryLoggingConfig.
	AWS_Route53Resolver_ResolverQueryLoggingConfig__PropertiesSlice = []string{
		AWS_Route53Resolver_ResolverQueryLoggingConfig__PropertiesMap.DestinationArn,
		AWS_Route53Resolver_ResolverQueryLoggingConfig__PropertiesMap.Name,
	}
)

// AWS_Route53Resolver_ResolverQueryLoggingConfig is a binding for AWS::Route53Resolver::ResolverQueryLoggingConfig.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverqueryloggingconfig.html
type AWS_Route53Resolver_ResolverQueryLoggingConfig struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// DestinationArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverqueryloggingconfig.html#cfn-route53resolver-resolverqueryloggingconfig-destinationarn
	DestinationArn cfz.Expression[string] `json:"DestinationArn,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverqueryloggingconfig.html#cfn-route53resolver-resolverqueryloggingconfig-name
	Name cfz.Expression[string] `json:"Name,omitempty"`
}

// New__AWS_Route53Resolver_ResolverQueryLoggingConfig initializes a new *AWS_Route53Resolver_ResolverQueryLoggingConfig.
func New__AWS_Route53Resolver_ResolverQueryLoggingConfig(logicalName string) *AWS_Route53Resolver_ResolverQueryLoggingConfig {
	return &AWS_Route53Resolver_ResolverQueryLoggingConfig{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Route53Resolver_ResolverQueryLoggingConfig) GetType() string {
	return AWS_Route53Resolver_ResolverQueryLoggingConfig__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) Set__LogicalName(v string) *AWS_Route53Resolver_ResolverQueryLoggingConfig {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Route53Resolver_ResolverQueryLoggingConfig {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Route53Resolver_ResolverQueryLoggingConfig {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Route53Resolver_ResolverQueryLoggingConfig {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Route53Resolver_ResolverQueryLoggingConfig {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) Set__RequestedOutputs(v []cfz.Output) *AWS_Route53Resolver_ResolverQueryLoggingConfig {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) Add__RequestedOutputs(v ...cfz.Output) *AWS_Route53Resolver_ResolverQueryLoggingConfig {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__DestinationArn updates property "DestinationArn".
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) Set__DestinationArn(v cfz.Expression[string]) *AWS_Route53Resolver_ResolverQueryLoggingConfig {
	t.DestinationArn = v
	return t
}

// SetV__DestinationArn updates property "DestinationArn".
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) SetV__DestinationArn(v string) *AWS_Route53Resolver_ResolverQueryLoggingConfig {
	t.DestinationArn = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) Set__Name(v cfz.Expression[string]) *AWS_Route53Resolver_ResolverQueryLoggingConfig {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) SetV__Name(v string) *AWS_Route53Resolver_ResolverQueryLoggingConfig {
	t.Name = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.Arn))
}

// GetAtt__AssociationCount returns a $cfz.Expression[int32] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AssociationCount
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetAtt__AssociationCount() cfz.Expression[int32] {
	return cfz.GetAtt[int32](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.AssociationCount))
}

// GetAtt__CreationTime returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreationTime
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetAtt__CreationTime() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.CreationTime))
}

// GetAtt__CreatorRequestId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatorRequestId
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetAtt__CreatorRequestId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.CreatorRequestId))
}

// GetAtt__Id returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Id
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetAtt__Id() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.Id))
}

// GetAtt__OwnerId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: OwnerId
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetAtt__OwnerId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.OwnerId))
}

// GetAtt__ShareStatus returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ShareStatus
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetAtt__ShareStatus() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.ShareStatus))
}

// GetAtt__Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Status
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetAtt__Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverQueryLoggingConfig__AttributesMap.Status))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AssociationCount returns a conventionally configured output for an attribute of this resource.
// Attribute: AssociationCount
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetConventionalOutputAtt__AssociationCount(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAssociationCount", t.GetAtt__AssociationCount())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreationTime returns a conventionally configured output for an attribute of this resource.
// Attribute: CreationTime
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetConventionalOutputAtt__CreationTime(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreationTime", t.GetAtt__CreationTime())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatorRequestId returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatorRequestId
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetConventionalOutputAtt__CreatorRequestId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatorRequestId", t.GetAtt__CreatorRequestId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Id returns a conventionally configured output for an attribute of this resource.
// Attribute: Id
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetConventionalOutputAtt__Id(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttId", t.GetAtt__Id())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__OwnerId returns a conventionally configured output for an attribute of this resource.
// Attribute: OwnerId
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetConventionalOutputAtt__OwnerId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttOwnerId", t.GetAtt__OwnerId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ShareStatus returns a conventionally configured output for an attribute of this resource.
// Attribute: ShareStatus
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetConventionalOutputAtt__ShareStatus(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttShareStatus", t.GetAtt__ShareStatus())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Status returns a conventionally configured output for an attribute of this resource.
// Attribute: Status
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) GetConventionalOutputAtt__Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStatus", t.GetAtt__Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Route53Resolver_ResolverQueryLoggingConfig

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Route53Resolver_ResolverQueryLoggingConfig) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
