// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_route53resolver

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Route53Resolver_ResolverEndpoint)(nil)
	_ cfz.Resource                   = (*AWS_Route53Resolver_ResolverEndpoint)(nil)
)

const (
	// AWS_Route53Resolver_ResolverEndpoint__Type is the CloudFormation type for AWS::Route53Resolver::ResolverEndpoint.
	AWS_Route53Resolver_ResolverEndpoint__Type = "AWS::Route53Resolver::ResolverEndpoint"
)

var (
	// AWS_Route53Resolver_ResolverEndpoint__AttributesMap reports all the CloudFormation attributes for AWS::Route53Resolver::ResolverEndpoint.
	AWS_Route53Resolver_ResolverEndpoint__AttributesMap = struct {
		Arn                   string
		Direction             string
		HostVPCId             string
		IpAddressCount        string
		Name                  string
		OutpostArn            string
		PreferredInstanceType string
		ResolverEndpointId    string
		ResolverEndpointType  string
	}{
		Arn:                   "Arn",
		Direction:             "Direction",
		HostVPCId:             "HostVPCId",
		IpAddressCount:        "IpAddressCount",
		Name:                  "Name",
		OutpostArn:            "OutpostArn",
		PreferredInstanceType: "PreferredInstanceType",
		ResolverEndpointId:    "ResolverEndpointId",
		ResolverEndpointType:  "ResolverEndpointType",
	}

	// AWS_Route53Resolver_ResolverEndpoint__AttributesSlice reports all the CloudFormation attributes for AWS::Route53Resolver::ResolverEndpoint.
	AWS_Route53Resolver_ResolverEndpoint__AttributesSlice = []string{
		AWS_Route53Resolver_ResolverEndpoint__AttributesMap.Arn,
		AWS_Route53Resolver_ResolverEndpoint__AttributesMap.Direction,
		AWS_Route53Resolver_ResolverEndpoint__AttributesMap.HostVPCId,
		AWS_Route53Resolver_ResolverEndpoint__AttributesMap.IpAddressCount,
		AWS_Route53Resolver_ResolverEndpoint__AttributesMap.Name,
		AWS_Route53Resolver_ResolverEndpoint__AttributesMap.OutpostArn,
		AWS_Route53Resolver_ResolverEndpoint__AttributesMap.PreferredInstanceType,
		AWS_Route53Resolver_ResolverEndpoint__AttributesMap.ResolverEndpointId,
		AWS_Route53Resolver_ResolverEndpoint__AttributesMap.ResolverEndpointType,
	}
)

var (
	// AWS_Route53Resolver_ResolverEndpoint__PropertiesMap reports all the CloudFormation properties for AWS::Route53Resolver::ResolverEndpoint.
	AWS_Route53Resolver_ResolverEndpoint__PropertiesMap = struct {
		Direction             string
		IpAddresses           string
		Name                  string
		OutpostArn            string
		PreferredInstanceType string
		Protocols             string
		ResolverEndpointType  string
		SecurityGroupIds      string
		Tags                  string
	}{
		Direction:             "Direction",
		IpAddresses:           "IpAddresses",
		Name:                  "Name",
		OutpostArn:            "OutpostArn",
		PreferredInstanceType: "PreferredInstanceType",
		Protocols:             "Protocols",
		ResolverEndpointType:  "ResolverEndpointType",
		SecurityGroupIds:      "SecurityGroupIds",
		Tags:                  "Tags",
	}

	// AWS_Route53Resolver_ResolverEndpoint__PropertiesSlice reports all the CloudFormation properties for AWS::Route53Resolver::ResolverEndpoint.
	AWS_Route53Resolver_ResolverEndpoint__PropertiesSlice = []string{
		AWS_Route53Resolver_ResolverEndpoint__PropertiesMap.Direction,
		AWS_Route53Resolver_ResolverEndpoint__PropertiesMap.IpAddresses,
		AWS_Route53Resolver_ResolverEndpoint__PropertiesMap.Name,
		AWS_Route53Resolver_ResolverEndpoint__PropertiesMap.OutpostArn,
		AWS_Route53Resolver_ResolverEndpoint__PropertiesMap.PreferredInstanceType,
		AWS_Route53Resolver_ResolverEndpoint__PropertiesMap.Protocols,
		AWS_Route53Resolver_ResolverEndpoint__PropertiesMap.ResolverEndpointType,
		AWS_Route53Resolver_ResolverEndpoint__PropertiesMap.SecurityGroupIds,
		AWS_Route53Resolver_ResolverEndpoint__PropertiesMap.Tags,
	}
)

// AWS_Route53Resolver_ResolverEndpoint is a binding for AWS::Route53Resolver::ResolverEndpoint.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverendpoint.html
type AWS_Route53Resolver_ResolverEndpoint struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Direction is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverendpoint.html#cfn-route53resolver-resolverendpoint-direction
	Direction cfz.Expression[string] `json:"Direction,omitempty"`

	// IpAddresses is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverendpoint.html#cfn-route53resolver-resolverendpoint-ipaddresses
	IpAddresses cfz.ExpressionSlice[AWS_Route53Resolver_ResolverEndpoint_IpAddressRequest] `json:"IpAddresses,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverendpoint.html#cfn-route53resolver-resolverendpoint-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// OutpostArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverendpoint.html#cfn-route53resolver-resolverendpoint-outpostarn
	OutpostArn cfz.Expression[string] `json:"OutpostArn,omitempty"`

	// PreferredInstanceType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverendpoint.html#cfn-route53resolver-resolverendpoint-preferredinstancetype
	PreferredInstanceType cfz.Expression[string] `json:"PreferredInstanceType,omitempty"`

	// Protocols is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverendpoint.html#cfn-route53resolver-resolverendpoint-protocols
	Protocols cfz.ExpressionSlice[string] `json:"Protocols,omitempty"`

	// ResolverEndpointType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverendpoint.html#cfn-route53resolver-resolverendpoint-resolverendpointtype
	ResolverEndpointType cfz.Expression[string] `json:"ResolverEndpointType,omitempty"`

	// SecurityGroupIds is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverendpoint.html#cfn-route53resolver-resolverendpoint-securitygroupids
	SecurityGroupIds cfz.ExpressionSlice[string] `json:"SecurityGroupIds,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverendpoint.html#cfn-route53resolver-resolverendpoint-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_Route53Resolver_ResolverEndpoint initializes a new *AWS_Route53Resolver_ResolverEndpoint.
func New__AWS_Route53Resolver_ResolverEndpoint(logicalName string) *AWS_Route53Resolver_ResolverEndpoint {
	return &AWS_Route53Resolver_ResolverEndpoint{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Route53Resolver_ResolverEndpoint) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Route53Resolver_ResolverEndpoint) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Route53Resolver_ResolverEndpoint) GetType() string {
	return AWS_Route53Resolver_ResolverEndpoint__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Route53Resolver_ResolverEndpoint) Set__LogicalName(v string) *AWS_Route53Resolver_ResolverEndpoint {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Route53Resolver_ResolverEndpoint) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Route53Resolver_ResolverEndpoint {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Route53Resolver_ResolverEndpoint) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Route53Resolver_ResolverEndpoint {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Route53Resolver_ResolverEndpoint) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Route53Resolver_ResolverEndpoint {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Route53Resolver_ResolverEndpoint) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Route53Resolver_ResolverEndpoint {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Route53Resolver_ResolverEndpoint) Set__RequestedOutputs(v []cfz.Output) *AWS_Route53Resolver_ResolverEndpoint {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Route53Resolver_ResolverEndpoint) Add__RequestedOutputs(v ...cfz.Output) *AWS_Route53Resolver_ResolverEndpoint {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Direction updates property "Direction".
func (t *AWS_Route53Resolver_ResolverEndpoint) Set__Direction(v cfz.Expression[string]) *AWS_Route53Resolver_ResolverEndpoint {
	t.Direction = v
	return t
}

// SetV__Direction updates property "Direction".
func (t *AWS_Route53Resolver_ResolverEndpoint) SetV__Direction(v string) *AWS_Route53Resolver_ResolverEndpoint {
	t.Direction = cfz.V(v)
	return t
}

// Set__IpAddresses updates property "IpAddresses".
func (t *AWS_Route53Resolver_ResolverEndpoint) Set__IpAddresses(v cfz.ExpressionSlice[AWS_Route53Resolver_ResolverEndpoint_IpAddressRequest]) *AWS_Route53Resolver_ResolverEndpoint {
	t.IpAddresses = v
	return t
}

// SetS__IpAddresses updates property "IpAddresses".
func (t *AWS_Route53Resolver_ResolverEndpoint) SetS__IpAddresses(v ...cfz.Expression[AWS_Route53Resolver_ResolverEndpoint_IpAddressRequest]) *AWS_Route53Resolver_ResolverEndpoint {
	t.IpAddresses = cfz.S(v...)
	return t
}

// SetSV__IpAddresses updates property "IpAddresses".
func (t *AWS_Route53Resolver_ResolverEndpoint) SetSV__IpAddresses(v ...AWS_Route53Resolver_ResolverEndpoint_IpAddressRequest) *AWS_Route53Resolver_ResolverEndpoint {
	t.IpAddresses = cfz.SV(v...)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_Route53Resolver_ResolverEndpoint) Set__Name(v cfz.Expression[string]) *AWS_Route53Resolver_ResolverEndpoint {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_Route53Resolver_ResolverEndpoint) SetV__Name(v string) *AWS_Route53Resolver_ResolverEndpoint {
	t.Name = cfz.V(v)
	return t
}

// Set__OutpostArn updates property "OutpostArn".
func (t *AWS_Route53Resolver_ResolverEndpoint) Set__OutpostArn(v cfz.Expression[string]) *AWS_Route53Resolver_ResolverEndpoint {
	t.OutpostArn = v
	return t
}

// SetV__OutpostArn updates property "OutpostArn".
func (t *AWS_Route53Resolver_ResolverEndpoint) SetV__OutpostArn(v string) *AWS_Route53Resolver_ResolverEndpoint {
	t.OutpostArn = cfz.V(v)
	return t
}

// Set__PreferredInstanceType updates property "PreferredInstanceType".
func (t *AWS_Route53Resolver_ResolverEndpoint) Set__PreferredInstanceType(v cfz.Expression[string]) *AWS_Route53Resolver_ResolverEndpoint {
	t.PreferredInstanceType = v
	return t
}

// SetV__PreferredInstanceType updates property "PreferredInstanceType".
func (t *AWS_Route53Resolver_ResolverEndpoint) SetV__PreferredInstanceType(v string) *AWS_Route53Resolver_ResolverEndpoint {
	t.PreferredInstanceType = cfz.V(v)
	return t
}

// Set__Protocols updates property "Protocols".
func (t *AWS_Route53Resolver_ResolverEndpoint) Set__Protocols(v cfz.ExpressionSlice[string]) *AWS_Route53Resolver_ResolverEndpoint {
	t.Protocols = v
	return t
}

// SetS__Protocols updates property "Protocols".
func (t *AWS_Route53Resolver_ResolverEndpoint) SetS__Protocols(v ...cfz.Expression[string]) *AWS_Route53Resolver_ResolverEndpoint {
	t.Protocols = cfz.S(v...)
	return t
}

// SetSV__Protocols updates property "Protocols".
func (t *AWS_Route53Resolver_ResolverEndpoint) SetSV__Protocols(v ...string) *AWS_Route53Resolver_ResolverEndpoint {
	t.Protocols = cfz.SV(v...)
	return t
}

// Set__ResolverEndpointType updates property "ResolverEndpointType".
func (t *AWS_Route53Resolver_ResolverEndpoint) Set__ResolverEndpointType(v cfz.Expression[string]) *AWS_Route53Resolver_ResolverEndpoint {
	t.ResolverEndpointType = v
	return t
}

// SetV__ResolverEndpointType updates property "ResolverEndpointType".
func (t *AWS_Route53Resolver_ResolverEndpoint) SetV__ResolverEndpointType(v string) *AWS_Route53Resolver_ResolverEndpoint {
	t.ResolverEndpointType = cfz.V(v)
	return t
}

// Set__SecurityGroupIds updates property "SecurityGroupIds".
func (t *AWS_Route53Resolver_ResolverEndpoint) Set__SecurityGroupIds(v cfz.ExpressionSlice[string]) *AWS_Route53Resolver_ResolverEndpoint {
	t.SecurityGroupIds = v
	return t
}

// SetS__SecurityGroupIds updates property "SecurityGroupIds".
func (t *AWS_Route53Resolver_ResolverEndpoint) SetS__SecurityGroupIds(v ...cfz.Expression[string]) *AWS_Route53Resolver_ResolverEndpoint {
	t.SecurityGroupIds = cfz.S(v...)
	return t
}

// SetSV__SecurityGroupIds updates property "SecurityGroupIds".
func (t *AWS_Route53Resolver_ResolverEndpoint) SetSV__SecurityGroupIds(v ...string) *AWS_Route53Resolver_ResolverEndpoint {
	t.SecurityGroupIds = cfz.SV(v...)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_Route53Resolver_ResolverEndpoint) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_Route53Resolver_ResolverEndpoint {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_Route53Resolver_ResolverEndpoint) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_Route53Resolver_ResolverEndpoint {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_Route53Resolver_ResolverEndpoint) SetSV__Tags(v ...cfz.Tag) *AWS_Route53Resolver_ResolverEndpoint {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Route53Resolver_ResolverEndpoint) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_Route53Resolver_ResolverEndpoint) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverEndpoint__AttributesMap.Arn))
}

// GetAtt__Direction returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Direction
func (t *AWS_Route53Resolver_ResolverEndpoint) GetAtt__Direction() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverEndpoint__AttributesMap.Direction))
}

// GetAtt__HostVPCId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: HostVPCId
func (t *AWS_Route53Resolver_ResolverEndpoint) GetAtt__HostVPCId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverEndpoint__AttributesMap.HostVPCId))
}

// GetAtt__IpAddressCount returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: IpAddressCount
func (t *AWS_Route53Resolver_ResolverEndpoint) GetAtt__IpAddressCount() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverEndpoint__AttributesMap.IpAddressCount))
}

// GetAtt__Name returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Name
func (t *AWS_Route53Resolver_ResolverEndpoint) GetAtt__Name() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverEndpoint__AttributesMap.Name))
}

// GetAtt__OutpostArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: OutpostArn
func (t *AWS_Route53Resolver_ResolverEndpoint) GetAtt__OutpostArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverEndpoint__AttributesMap.OutpostArn))
}

// GetAtt__PreferredInstanceType returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: PreferredInstanceType
func (t *AWS_Route53Resolver_ResolverEndpoint) GetAtt__PreferredInstanceType() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverEndpoint__AttributesMap.PreferredInstanceType))
}

// GetAtt__ResolverEndpointId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ResolverEndpointId
func (t *AWS_Route53Resolver_ResolverEndpoint) GetAtt__ResolverEndpointId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverEndpoint__AttributesMap.ResolverEndpointId))
}

// GetAtt__ResolverEndpointType returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ResolverEndpointType
func (t *AWS_Route53Resolver_ResolverEndpoint) GetAtt__ResolverEndpointType() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53Resolver_ResolverEndpoint__AttributesMap.ResolverEndpointType))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Route53Resolver_ResolverEndpoint) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_Route53Resolver_ResolverEndpoint) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Direction returns a conventionally configured output for an attribute of this resource.
// Attribute: Direction
func (t *AWS_Route53Resolver_ResolverEndpoint) GetConventionalOutputAtt__Direction(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDirection", t.GetAtt__Direction())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__HostVPCId returns a conventionally configured output for an attribute of this resource.
// Attribute: HostVPCId
func (t *AWS_Route53Resolver_ResolverEndpoint) GetConventionalOutputAtt__HostVPCId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttHostVPCId", t.GetAtt__HostVPCId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__IpAddressCount returns a conventionally configured output for an attribute of this resource.
// Attribute: IpAddressCount
func (t *AWS_Route53Resolver_ResolverEndpoint) GetConventionalOutputAtt__IpAddressCount(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIpAddressCount", t.GetAtt__IpAddressCount())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Name returns a conventionally configured output for an attribute of this resource.
// Attribute: Name
func (t *AWS_Route53Resolver_ResolverEndpoint) GetConventionalOutputAtt__Name(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttName", t.GetAtt__Name())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__OutpostArn returns a conventionally configured output for an attribute of this resource.
// Attribute: OutpostArn
func (t *AWS_Route53Resolver_ResolverEndpoint) GetConventionalOutputAtt__OutpostArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttOutpostArn", t.GetAtt__OutpostArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__PreferredInstanceType returns a conventionally configured output for an attribute of this resource.
// Attribute: PreferredInstanceType
func (t *AWS_Route53Resolver_ResolverEndpoint) GetConventionalOutputAtt__PreferredInstanceType(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttPreferredInstanceType", t.GetAtt__PreferredInstanceType())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ResolverEndpointId returns a conventionally configured output for an attribute of this resource.
// Attribute: ResolverEndpointId
func (t *AWS_Route53Resolver_ResolverEndpoint) GetConventionalOutputAtt__ResolverEndpointId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttResolverEndpointId", t.GetAtt__ResolverEndpointId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ResolverEndpointType returns a conventionally configured output for an attribute of this resource.
// Attribute: ResolverEndpointType
func (t *AWS_Route53Resolver_ResolverEndpoint) GetConventionalOutputAtt__ResolverEndpointType(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttResolverEndpointType", t.GetAtt__ResolverEndpointType())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Route53Resolver_ResolverEndpoint) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Route53Resolver_ResolverEndpoint

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Route53Resolver_ResolverEndpoint) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
