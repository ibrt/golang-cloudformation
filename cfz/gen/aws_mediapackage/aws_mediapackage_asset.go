// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_mediapackage

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_MediaPackage_Asset)(nil)
	_ cfz.Resource                   = (*AWS_MediaPackage_Asset)(nil)
)

const (
	// AWS_MediaPackage_Asset__Type is the CloudFormation type for AWS::MediaPackage::Asset.
	AWS_MediaPackage_Asset__Type = "AWS::MediaPackage::Asset"
)

var (
	// AWS_MediaPackage_Asset__AttributesMap reports all the CloudFormation attributes for AWS::MediaPackage::Asset.
	AWS_MediaPackage_Asset__AttributesMap = struct {
		Arn       string
		CreatedAt string
	}{
		Arn:       "Arn",
		CreatedAt: "CreatedAt",
	}

	// AWS_MediaPackage_Asset__AttributesSlice reports all the CloudFormation attributes for AWS::MediaPackage::Asset.
	AWS_MediaPackage_Asset__AttributesSlice = []string{
		AWS_MediaPackage_Asset__AttributesMap.Arn,
		AWS_MediaPackage_Asset__AttributesMap.CreatedAt,
	}
)

var (
	// AWS_MediaPackage_Asset__PropertiesMap reports all the CloudFormation properties for AWS::MediaPackage::Asset.
	AWS_MediaPackage_Asset__PropertiesMap = struct {
		EgressEndpoints  string
		Id               string
		PackagingGroupId string
		ResourceId       string
		SourceArn        string
		SourceRoleArn    string
		Tags             string
	}{
		EgressEndpoints:  "EgressEndpoints",
		Id:               "Id",
		PackagingGroupId: "PackagingGroupId",
		ResourceId:       "ResourceId",
		SourceArn:        "SourceArn",
		SourceRoleArn:    "SourceRoleArn",
		Tags:             "Tags",
	}

	// AWS_MediaPackage_Asset__PropertiesSlice reports all the CloudFormation properties for AWS::MediaPackage::Asset.
	AWS_MediaPackage_Asset__PropertiesSlice = []string{
		AWS_MediaPackage_Asset__PropertiesMap.EgressEndpoints,
		AWS_MediaPackage_Asset__PropertiesMap.Id,
		AWS_MediaPackage_Asset__PropertiesMap.PackagingGroupId,
		AWS_MediaPackage_Asset__PropertiesMap.ResourceId,
		AWS_MediaPackage_Asset__PropertiesMap.SourceArn,
		AWS_MediaPackage_Asset__PropertiesMap.SourceRoleArn,
		AWS_MediaPackage_Asset__PropertiesMap.Tags,
	}
)

// AWS_MediaPackage_Asset is a binding for AWS::MediaPackage::Asset.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-asset.html
type AWS_MediaPackage_Asset struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// EgressEndpoints is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-asset.html#cfn-mediapackage-asset-egressendpoints
	EgressEndpoints cfz.ExpressionSlice[AWS_MediaPackage_Asset_EgressEndpoint] `json:"EgressEndpoints,omitempty"`

	// Id is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-asset.html#cfn-mediapackage-asset-id
	Id cfz.Expression[string] `json:"Id,omitempty"`

	// PackagingGroupId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-asset.html#cfn-mediapackage-asset-packaginggroupid
	PackagingGroupId cfz.Expression[string] `json:"PackagingGroupId,omitempty"`

	// ResourceId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-asset.html#cfn-mediapackage-asset-resourceid
	ResourceId cfz.Expression[string] `json:"ResourceId,omitempty"`

	// SourceArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-asset.html#cfn-mediapackage-asset-sourcearn
	SourceArn cfz.Expression[string] `json:"SourceArn,omitempty"`

	// SourceRoleArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-asset.html#cfn-mediapackage-asset-sourcerolearn
	SourceRoleArn cfz.Expression[string] `json:"SourceRoleArn,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-asset.html#cfn-mediapackage-asset-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_MediaPackage_Asset initializes a new *AWS_MediaPackage_Asset.
func New__AWS_MediaPackage_Asset(logicalName string) *AWS_MediaPackage_Asset {
	return &AWS_MediaPackage_Asset{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_MediaPackage_Asset) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_MediaPackage_Asset) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_MediaPackage_Asset) GetType() string {
	return AWS_MediaPackage_Asset__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_MediaPackage_Asset) Set__LogicalName(v string) *AWS_MediaPackage_Asset {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_MediaPackage_Asset) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_MediaPackage_Asset {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_MediaPackage_Asset) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_MediaPackage_Asset {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_MediaPackage_Asset) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_MediaPackage_Asset {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_MediaPackage_Asset) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_MediaPackage_Asset {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_MediaPackage_Asset) Set__RequestedOutputs(v []cfz.Output) *AWS_MediaPackage_Asset {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_MediaPackage_Asset) Add__RequestedOutputs(v ...cfz.Output) *AWS_MediaPackage_Asset {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__EgressEndpoints updates property "EgressEndpoints".
func (t *AWS_MediaPackage_Asset) Set__EgressEndpoints(v cfz.ExpressionSlice[AWS_MediaPackage_Asset_EgressEndpoint]) *AWS_MediaPackage_Asset {
	t.EgressEndpoints = v
	return t
}

// SetS__EgressEndpoints updates property "EgressEndpoints".
func (t *AWS_MediaPackage_Asset) SetS__EgressEndpoints(v ...cfz.Expression[AWS_MediaPackage_Asset_EgressEndpoint]) *AWS_MediaPackage_Asset {
	t.EgressEndpoints = cfz.S(v...)
	return t
}

// SetSV__EgressEndpoints updates property "EgressEndpoints".
func (t *AWS_MediaPackage_Asset) SetSV__EgressEndpoints(v ...AWS_MediaPackage_Asset_EgressEndpoint) *AWS_MediaPackage_Asset {
	t.EgressEndpoints = cfz.SV(v...)
	return t
}

// Set__Id updates property "Id".
func (t *AWS_MediaPackage_Asset) Set__Id(v cfz.Expression[string]) *AWS_MediaPackage_Asset {
	t.Id = v
	return t
}

// SetV__Id updates property "Id".
func (t *AWS_MediaPackage_Asset) SetV__Id(v string) *AWS_MediaPackage_Asset {
	t.Id = cfz.V(v)
	return t
}

// Set__PackagingGroupId updates property "PackagingGroupId".
func (t *AWS_MediaPackage_Asset) Set__PackagingGroupId(v cfz.Expression[string]) *AWS_MediaPackage_Asset {
	t.PackagingGroupId = v
	return t
}

// SetV__PackagingGroupId updates property "PackagingGroupId".
func (t *AWS_MediaPackage_Asset) SetV__PackagingGroupId(v string) *AWS_MediaPackage_Asset {
	t.PackagingGroupId = cfz.V(v)
	return t
}

// Set__ResourceId updates property "ResourceId".
func (t *AWS_MediaPackage_Asset) Set__ResourceId(v cfz.Expression[string]) *AWS_MediaPackage_Asset {
	t.ResourceId = v
	return t
}

// SetV__ResourceId updates property "ResourceId".
func (t *AWS_MediaPackage_Asset) SetV__ResourceId(v string) *AWS_MediaPackage_Asset {
	t.ResourceId = cfz.V(v)
	return t
}

// Set__SourceArn updates property "SourceArn".
func (t *AWS_MediaPackage_Asset) Set__SourceArn(v cfz.Expression[string]) *AWS_MediaPackage_Asset {
	t.SourceArn = v
	return t
}

// SetV__SourceArn updates property "SourceArn".
func (t *AWS_MediaPackage_Asset) SetV__SourceArn(v string) *AWS_MediaPackage_Asset {
	t.SourceArn = cfz.V(v)
	return t
}

// Set__SourceRoleArn updates property "SourceRoleArn".
func (t *AWS_MediaPackage_Asset) Set__SourceRoleArn(v cfz.Expression[string]) *AWS_MediaPackage_Asset {
	t.SourceRoleArn = v
	return t
}

// SetV__SourceRoleArn updates property "SourceRoleArn".
func (t *AWS_MediaPackage_Asset) SetV__SourceRoleArn(v string) *AWS_MediaPackage_Asset {
	t.SourceRoleArn = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_MediaPackage_Asset) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_MediaPackage_Asset {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_MediaPackage_Asset) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_MediaPackage_Asset {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_MediaPackage_Asset) SetSV__Tags(v ...cfz.Tag) *AWS_MediaPackage_Asset {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_MediaPackage_Asset) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_MediaPackage_Asset) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaPackage_Asset__AttributesMap.Arn))
}

// GetAtt__CreatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedAt
func (t *AWS_MediaPackage_Asset) GetAtt__CreatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaPackage_Asset__AttributesMap.CreatedAt))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_MediaPackage_Asset) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_MediaPackage_Asset) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedAt
func (t *AWS_MediaPackage_Asset) GetConventionalOutputAtt__CreatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedAt", t.GetAtt__CreatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_MediaPackage_Asset) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_MediaPackage_Asset

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_MediaPackage_Asset) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
