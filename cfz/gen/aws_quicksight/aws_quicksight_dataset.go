// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_quicksight

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_QuickSight_DataSet)(nil)
	_ cfz.Resource                   = (*AWS_QuickSight_DataSet)(nil)
)

const (
	// AWS_QuickSight_DataSet__Type is the CloudFormation type for AWS::QuickSight::DataSet.
	AWS_QuickSight_DataSet__Type = "AWS::QuickSight::DataSet"
)

var (
	// AWS_QuickSight_DataSet__AttributesMap reports all the CloudFormation attributes for AWS::QuickSight::DataSet.
	AWS_QuickSight_DataSet__AttributesMap = struct {
		Arn                          string
		ConsumedSpiceCapacityInBytes string
		CreatedTime                  string
		LastUpdatedTime              string
		OutputColumns                string
	}{
		Arn:                          "Arn",
		ConsumedSpiceCapacityInBytes: "ConsumedSpiceCapacityInBytes",
		CreatedTime:                  "CreatedTime",
		LastUpdatedTime:              "LastUpdatedTime",
		OutputColumns:                "OutputColumns",
	}

	// AWS_QuickSight_DataSet__AttributesSlice reports all the CloudFormation attributes for AWS::QuickSight::DataSet.
	AWS_QuickSight_DataSet__AttributesSlice = []string{
		AWS_QuickSight_DataSet__AttributesMap.Arn,
		AWS_QuickSight_DataSet__AttributesMap.ConsumedSpiceCapacityInBytes,
		AWS_QuickSight_DataSet__AttributesMap.CreatedTime,
		AWS_QuickSight_DataSet__AttributesMap.LastUpdatedTime,
		AWS_QuickSight_DataSet__AttributesMap.OutputColumns,
	}
)

var (
	// AWS_QuickSight_DataSet__PropertiesMap reports all the CloudFormation properties for AWS::QuickSight::DataSet.
	AWS_QuickSight_DataSet__PropertiesMap = struct {
		AwsAccountId                       string
		ColumnGroups                       string
		ColumnLevelPermissionRules         string
		DataSetId                          string
		DataSetRefreshProperties           string
		DataSetUsageConfiguration          string
		DatasetParameters                  string
		FieldFolders                       string
		FolderArns                         string
		ImportMode                         string
		IngestionWaitPolicy                string
		LogicalTableMap                    string
		Name                               string
		Permissions                        string
		PhysicalTableMap                   string
		RowLevelPermissionDataSet          string
		RowLevelPermissionTagConfiguration string
		Tags                               string
	}{
		AwsAccountId:                       "AwsAccountId",
		ColumnGroups:                       "ColumnGroups",
		ColumnLevelPermissionRules:         "ColumnLevelPermissionRules",
		DataSetId:                          "DataSetId",
		DataSetRefreshProperties:           "DataSetRefreshProperties",
		DataSetUsageConfiguration:          "DataSetUsageConfiguration",
		DatasetParameters:                  "DatasetParameters",
		FieldFolders:                       "FieldFolders",
		FolderArns:                         "FolderArns",
		ImportMode:                         "ImportMode",
		IngestionWaitPolicy:                "IngestionWaitPolicy",
		LogicalTableMap:                    "LogicalTableMap",
		Name:                               "Name",
		Permissions:                        "Permissions",
		PhysicalTableMap:                   "PhysicalTableMap",
		RowLevelPermissionDataSet:          "RowLevelPermissionDataSet",
		RowLevelPermissionTagConfiguration: "RowLevelPermissionTagConfiguration",
		Tags:                               "Tags",
	}

	// AWS_QuickSight_DataSet__PropertiesSlice reports all the CloudFormation properties for AWS::QuickSight::DataSet.
	AWS_QuickSight_DataSet__PropertiesSlice = []string{
		AWS_QuickSight_DataSet__PropertiesMap.AwsAccountId,
		AWS_QuickSight_DataSet__PropertiesMap.ColumnGroups,
		AWS_QuickSight_DataSet__PropertiesMap.ColumnLevelPermissionRules,
		AWS_QuickSight_DataSet__PropertiesMap.DataSetId,
		AWS_QuickSight_DataSet__PropertiesMap.DataSetRefreshProperties,
		AWS_QuickSight_DataSet__PropertiesMap.DataSetUsageConfiguration,
		AWS_QuickSight_DataSet__PropertiesMap.DatasetParameters,
		AWS_QuickSight_DataSet__PropertiesMap.FieldFolders,
		AWS_QuickSight_DataSet__PropertiesMap.FolderArns,
		AWS_QuickSight_DataSet__PropertiesMap.ImportMode,
		AWS_QuickSight_DataSet__PropertiesMap.IngestionWaitPolicy,
		AWS_QuickSight_DataSet__PropertiesMap.LogicalTableMap,
		AWS_QuickSight_DataSet__PropertiesMap.Name,
		AWS_QuickSight_DataSet__PropertiesMap.Permissions,
		AWS_QuickSight_DataSet__PropertiesMap.PhysicalTableMap,
		AWS_QuickSight_DataSet__PropertiesMap.RowLevelPermissionDataSet,
		AWS_QuickSight_DataSet__PropertiesMap.RowLevelPermissionTagConfiguration,
		AWS_QuickSight_DataSet__PropertiesMap.Tags,
	}
)

// AWS_QuickSight_DataSet is a binding for AWS::QuickSight::DataSet.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html
type AWS_QuickSight_DataSet struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AwsAccountId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-awsaccountid
	AwsAccountId cfz.Expression[string] `json:"AwsAccountId,omitempty"`

	// ColumnGroups is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-columngroups
	ColumnGroups cfz.ExpressionSlice[AWS_QuickSight_DataSet_ColumnGroup] `json:"ColumnGroups,omitempty"`

	// ColumnLevelPermissionRules is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-columnlevelpermissionrules
	ColumnLevelPermissionRules cfz.ExpressionSlice[AWS_QuickSight_DataSet_ColumnLevelPermissionRule] `json:"ColumnLevelPermissionRules,omitempty"`

	// DataSetId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-datasetid
	DataSetId cfz.Expression[string] `json:"DataSetId,omitempty"`

	// DataSetRefreshProperties is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-datasetrefreshproperties
	DataSetRefreshProperties cfz.Expression[AWS_QuickSight_DataSet_DataSetRefreshProperties] `json:"DataSetRefreshProperties,omitempty"`

	// DataSetUsageConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-datasetusageconfiguration
	DataSetUsageConfiguration cfz.Expression[AWS_QuickSight_DataSet_DataSetUsageConfiguration] `json:"DataSetUsageConfiguration,omitempty"`

	// DatasetParameters is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-datasetparameters
	DatasetParameters cfz.ExpressionSlice[AWS_QuickSight_DataSet_DatasetParameter] `json:"DatasetParameters,omitempty"`

	// FieldFolders is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-fieldfolders
	FieldFolders cfz.ExpressionMap[AWS_QuickSight_DataSet_FieldFolder] `json:"FieldFolders,omitempty"`

	// FolderArns is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-folderarns
	FolderArns cfz.ExpressionSlice[string] `json:"FolderArns,omitempty"`

	// ImportMode is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-importmode
	ImportMode cfz.Expression[string] `json:"ImportMode,omitempty"`

	// IngestionWaitPolicy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-ingestionwaitpolicy
	IngestionWaitPolicy cfz.Expression[AWS_QuickSight_DataSet_IngestionWaitPolicy] `json:"IngestionWaitPolicy,omitempty"`

	// LogicalTableMap is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-logicaltablemap
	LogicalTableMap cfz.ExpressionMap[AWS_QuickSight_DataSet_LogicalTable] `json:"LogicalTableMap,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// Permissions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-permissions
	Permissions cfz.ExpressionSlice[AWS_QuickSight_DataSet_ResourcePermission] `json:"Permissions,omitempty"`

	// PhysicalTableMap is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-physicaltablemap
	PhysicalTableMap cfz.ExpressionMap[AWS_QuickSight_DataSet_PhysicalTable] `json:"PhysicalTableMap,omitempty"`

	// RowLevelPermissionDataSet is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-rowlevelpermissiondataset
	RowLevelPermissionDataSet cfz.Expression[AWS_QuickSight_DataSet_RowLevelPermissionDataSet] `json:"RowLevelPermissionDataSet,omitempty"`

	// RowLevelPermissionTagConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-rowlevelpermissiontagconfiguration
	RowLevelPermissionTagConfiguration cfz.Expression[AWS_QuickSight_DataSet_RowLevelPermissionTagConfiguration] `json:"RowLevelPermissionTagConfiguration,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_QuickSight_DataSet initializes a new *AWS_QuickSight_DataSet.
func New__AWS_QuickSight_DataSet(logicalName string) *AWS_QuickSight_DataSet {
	return &AWS_QuickSight_DataSet{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_QuickSight_DataSet) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_QuickSight_DataSet) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_QuickSight_DataSet) GetType() string {
	return AWS_QuickSight_DataSet__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_QuickSight_DataSet) Set__LogicalName(v string) *AWS_QuickSight_DataSet {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_QuickSight_DataSet) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_QuickSight_DataSet {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_QuickSight_DataSet) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_QuickSight_DataSet {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_QuickSight_DataSet) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_QuickSight_DataSet {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_QuickSight_DataSet) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_QuickSight_DataSet {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_QuickSight_DataSet) Set__RequestedOutputs(v []cfz.Output) *AWS_QuickSight_DataSet {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_QuickSight_DataSet) Add__RequestedOutputs(v ...cfz.Output) *AWS_QuickSight_DataSet {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AwsAccountId updates property "AwsAccountId".
func (t *AWS_QuickSight_DataSet) Set__AwsAccountId(v cfz.Expression[string]) *AWS_QuickSight_DataSet {
	t.AwsAccountId = v
	return t
}

// SetV__AwsAccountId updates property "AwsAccountId".
func (t *AWS_QuickSight_DataSet) SetV__AwsAccountId(v string) *AWS_QuickSight_DataSet {
	t.AwsAccountId = cfz.V(v)
	return t
}

// Set__ColumnGroups updates property "ColumnGroups".
func (t *AWS_QuickSight_DataSet) Set__ColumnGroups(v cfz.ExpressionSlice[AWS_QuickSight_DataSet_ColumnGroup]) *AWS_QuickSight_DataSet {
	t.ColumnGroups = v
	return t
}

// SetS__ColumnGroups updates property "ColumnGroups".
func (t *AWS_QuickSight_DataSet) SetS__ColumnGroups(v ...cfz.Expression[AWS_QuickSight_DataSet_ColumnGroup]) *AWS_QuickSight_DataSet {
	t.ColumnGroups = cfz.S(v...)
	return t
}

// SetSV__ColumnGroups updates property "ColumnGroups".
func (t *AWS_QuickSight_DataSet) SetSV__ColumnGroups(v ...AWS_QuickSight_DataSet_ColumnGroup) *AWS_QuickSight_DataSet {
	t.ColumnGroups = cfz.SV(v...)
	return t
}

// Set__ColumnLevelPermissionRules updates property "ColumnLevelPermissionRules".
func (t *AWS_QuickSight_DataSet) Set__ColumnLevelPermissionRules(v cfz.ExpressionSlice[AWS_QuickSight_DataSet_ColumnLevelPermissionRule]) *AWS_QuickSight_DataSet {
	t.ColumnLevelPermissionRules = v
	return t
}

// SetS__ColumnLevelPermissionRules updates property "ColumnLevelPermissionRules".
func (t *AWS_QuickSight_DataSet) SetS__ColumnLevelPermissionRules(v ...cfz.Expression[AWS_QuickSight_DataSet_ColumnLevelPermissionRule]) *AWS_QuickSight_DataSet {
	t.ColumnLevelPermissionRules = cfz.S(v...)
	return t
}

// SetSV__ColumnLevelPermissionRules updates property "ColumnLevelPermissionRules".
func (t *AWS_QuickSight_DataSet) SetSV__ColumnLevelPermissionRules(v ...AWS_QuickSight_DataSet_ColumnLevelPermissionRule) *AWS_QuickSight_DataSet {
	t.ColumnLevelPermissionRules = cfz.SV(v...)
	return t
}

// Set__DataSetId updates property "DataSetId".
func (t *AWS_QuickSight_DataSet) Set__DataSetId(v cfz.Expression[string]) *AWS_QuickSight_DataSet {
	t.DataSetId = v
	return t
}

// SetV__DataSetId updates property "DataSetId".
func (t *AWS_QuickSight_DataSet) SetV__DataSetId(v string) *AWS_QuickSight_DataSet {
	t.DataSetId = cfz.V(v)
	return t
}

// Set__DataSetRefreshProperties updates property "DataSetRefreshProperties".
func (t *AWS_QuickSight_DataSet) Set__DataSetRefreshProperties(v cfz.Expression[AWS_QuickSight_DataSet_DataSetRefreshProperties]) *AWS_QuickSight_DataSet {
	t.DataSetRefreshProperties = v
	return t
}

// SetV__DataSetRefreshProperties updates property "DataSetRefreshProperties".
func (t *AWS_QuickSight_DataSet) SetV__DataSetRefreshProperties(v AWS_QuickSight_DataSet_DataSetRefreshProperties) *AWS_QuickSight_DataSet {
	t.DataSetRefreshProperties = cfz.V(v)
	return t
}

// Set__DataSetUsageConfiguration updates property "DataSetUsageConfiguration".
func (t *AWS_QuickSight_DataSet) Set__DataSetUsageConfiguration(v cfz.Expression[AWS_QuickSight_DataSet_DataSetUsageConfiguration]) *AWS_QuickSight_DataSet {
	t.DataSetUsageConfiguration = v
	return t
}

// SetV__DataSetUsageConfiguration updates property "DataSetUsageConfiguration".
func (t *AWS_QuickSight_DataSet) SetV__DataSetUsageConfiguration(v AWS_QuickSight_DataSet_DataSetUsageConfiguration) *AWS_QuickSight_DataSet {
	t.DataSetUsageConfiguration = cfz.V(v)
	return t
}

// Set__DatasetParameters updates property "DatasetParameters".
func (t *AWS_QuickSight_DataSet) Set__DatasetParameters(v cfz.ExpressionSlice[AWS_QuickSight_DataSet_DatasetParameter]) *AWS_QuickSight_DataSet {
	t.DatasetParameters = v
	return t
}

// SetS__DatasetParameters updates property "DatasetParameters".
func (t *AWS_QuickSight_DataSet) SetS__DatasetParameters(v ...cfz.Expression[AWS_QuickSight_DataSet_DatasetParameter]) *AWS_QuickSight_DataSet {
	t.DatasetParameters = cfz.S(v...)
	return t
}

// SetSV__DatasetParameters updates property "DatasetParameters".
func (t *AWS_QuickSight_DataSet) SetSV__DatasetParameters(v ...AWS_QuickSight_DataSet_DatasetParameter) *AWS_QuickSight_DataSet {
	t.DatasetParameters = cfz.SV(v...)
	return t
}

// Set__FieldFolders updates property "FieldFolders".
func (t *AWS_QuickSight_DataSet) Set__FieldFolders(v cfz.ExpressionMap[AWS_QuickSight_DataSet_FieldFolder]) *AWS_QuickSight_DataSet {
	t.FieldFolders = v
	return t
}

// SetM__FieldFolders updates property "FieldFolders".
func (t *AWS_QuickSight_DataSet) SetM__FieldFolders(v ...map[string]cfz.Expression[AWS_QuickSight_DataSet_FieldFolder]) *AWS_QuickSight_DataSet {
	t.FieldFolders = cfz.M(v...)
	return t
}

// SetMV__FieldFolders updates property "FieldFolders".
func (t *AWS_QuickSight_DataSet) SetMV__FieldFolders(v ...map[string]AWS_QuickSight_DataSet_FieldFolder) *AWS_QuickSight_DataSet {
	t.FieldFolders = cfz.MV(v...)
	return t
}

// Set__FolderArns updates property "FolderArns".
func (t *AWS_QuickSight_DataSet) Set__FolderArns(v cfz.ExpressionSlice[string]) *AWS_QuickSight_DataSet {
	t.FolderArns = v
	return t
}

// SetS__FolderArns updates property "FolderArns".
func (t *AWS_QuickSight_DataSet) SetS__FolderArns(v ...cfz.Expression[string]) *AWS_QuickSight_DataSet {
	t.FolderArns = cfz.S(v...)
	return t
}

// SetSV__FolderArns updates property "FolderArns".
func (t *AWS_QuickSight_DataSet) SetSV__FolderArns(v ...string) *AWS_QuickSight_DataSet {
	t.FolderArns = cfz.SV(v...)
	return t
}

// Set__ImportMode updates property "ImportMode".
func (t *AWS_QuickSight_DataSet) Set__ImportMode(v cfz.Expression[string]) *AWS_QuickSight_DataSet {
	t.ImportMode = v
	return t
}

// SetV__ImportMode updates property "ImportMode".
func (t *AWS_QuickSight_DataSet) SetV__ImportMode(v string) *AWS_QuickSight_DataSet {
	t.ImportMode = cfz.V(v)
	return t
}

// Set__IngestionWaitPolicy updates property "IngestionWaitPolicy".
func (t *AWS_QuickSight_DataSet) Set__IngestionWaitPolicy(v cfz.Expression[AWS_QuickSight_DataSet_IngestionWaitPolicy]) *AWS_QuickSight_DataSet {
	t.IngestionWaitPolicy = v
	return t
}

// SetV__IngestionWaitPolicy updates property "IngestionWaitPolicy".
func (t *AWS_QuickSight_DataSet) SetV__IngestionWaitPolicy(v AWS_QuickSight_DataSet_IngestionWaitPolicy) *AWS_QuickSight_DataSet {
	t.IngestionWaitPolicy = cfz.V(v)
	return t
}

// Set__LogicalTableMap updates property "LogicalTableMap".
func (t *AWS_QuickSight_DataSet) Set__LogicalTableMap(v cfz.ExpressionMap[AWS_QuickSight_DataSet_LogicalTable]) *AWS_QuickSight_DataSet {
	t.LogicalTableMap = v
	return t
}

// SetM__LogicalTableMap updates property "LogicalTableMap".
func (t *AWS_QuickSight_DataSet) SetM__LogicalTableMap(v ...map[string]cfz.Expression[AWS_QuickSight_DataSet_LogicalTable]) *AWS_QuickSight_DataSet {
	t.LogicalTableMap = cfz.M(v...)
	return t
}

// SetMV__LogicalTableMap updates property "LogicalTableMap".
func (t *AWS_QuickSight_DataSet) SetMV__LogicalTableMap(v ...map[string]AWS_QuickSight_DataSet_LogicalTable) *AWS_QuickSight_DataSet {
	t.LogicalTableMap = cfz.MV(v...)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_QuickSight_DataSet) Set__Name(v cfz.Expression[string]) *AWS_QuickSight_DataSet {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_QuickSight_DataSet) SetV__Name(v string) *AWS_QuickSight_DataSet {
	t.Name = cfz.V(v)
	return t
}

// Set__Permissions updates property "Permissions".
func (t *AWS_QuickSight_DataSet) Set__Permissions(v cfz.ExpressionSlice[AWS_QuickSight_DataSet_ResourcePermission]) *AWS_QuickSight_DataSet {
	t.Permissions = v
	return t
}

// SetS__Permissions updates property "Permissions".
func (t *AWS_QuickSight_DataSet) SetS__Permissions(v ...cfz.Expression[AWS_QuickSight_DataSet_ResourcePermission]) *AWS_QuickSight_DataSet {
	t.Permissions = cfz.S(v...)
	return t
}

// SetSV__Permissions updates property "Permissions".
func (t *AWS_QuickSight_DataSet) SetSV__Permissions(v ...AWS_QuickSight_DataSet_ResourcePermission) *AWS_QuickSight_DataSet {
	t.Permissions = cfz.SV(v...)
	return t
}

// Set__PhysicalTableMap updates property "PhysicalTableMap".
func (t *AWS_QuickSight_DataSet) Set__PhysicalTableMap(v cfz.ExpressionMap[AWS_QuickSight_DataSet_PhysicalTable]) *AWS_QuickSight_DataSet {
	t.PhysicalTableMap = v
	return t
}

// SetM__PhysicalTableMap updates property "PhysicalTableMap".
func (t *AWS_QuickSight_DataSet) SetM__PhysicalTableMap(v ...map[string]cfz.Expression[AWS_QuickSight_DataSet_PhysicalTable]) *AWS_QuickSight_DataSet {
	t.PhysicalTableMap = cfz.M(v...)
	return t
}

// SetMV__PhysicalTableMap updates property "PhysicalTableMap".
func (t *AWS_QuickSight_DataSet) SetMV__PhysicalTableMap(v ...map[string]AWS_QuickSight_DataSet_PhysicalTable) *AWS_QuickSight_DataSet {
	t.PhysicalTableMap = cfz.MV(v...)
	return t
}

// Set__RowLevelPermissionDataSet updates property "RowLevelPermissionDataSet".
func (t *AWS_QuickSight_DataSet) Set__RowLevelPermissionDataSet(v cfz.Expression[AWS_QuickSight_DataSet_RowLevelPermissionDataSet]) *AWS_QuickSight_DataSet {
	t.RowLevelPermissionDataSet = v
	return t
}

// SetV__RowLevelPermissionDataSet updates property "RowLevelPermissionDataSet".
func (t *AWS_QuickSight_DataSet) SetV__RowLevelPermissionDataSet(v AWS_QuickSight_DataSet_RowLevelPermissionDataSet) *AWS_QuickSight_DataSet {
	t.RowLevelPermissionDataSet = cfz.V(v)
	return t
}

// Set__RowLevelPermissionTagConfiguration updates property "RowLevelPermissionTagConfiguration".
func (t *AWS_QuickSight_DataSet) Set__RowLevelPermissionTagConfiguration(v cfz.Expression[AWS_QuickSight_DataSet_RowLevelPermissionTagConfiguration]) *AWS_QuickSight_DataSet {
	t.RowLevelPermissionTagConfiguration = v
	return t
}

// SetV__RowLevelPermissionTagConfiguration updates property "RowLevelPermissionTagConfiguration".
func (t *AWS_QuickSight_DataSet) SetV__RowLevelPermissionTagConfiguration(v AWS_QuickSight_DataSet_RowLevelPermissionTagConfiguration) *AWS_QuickSight_DataSet {
	t.RowLevelPermissionTagConfiguration = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_QuickSight_DataSet) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_QuickSight_DataSet {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_QuickSight_DataSet) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_QuickSight_DataSet {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_QuickSight_DataSet) SetSV__Tags(v ...cfz.Tag) *AWS_QuickSight_DataSet {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_QuickSight_DataSet) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_QuickSight_DataSet) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_DataSet__AttributesMap.Arn))
}

// GetAtt__ConsumedSpiceCapacityInBytes returns a $cfz.Expression[float64] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ConsumedSpiceCapacityInBytes
func (t *AWS_QuickSight_DataSet) GetAtt__ConsumedSpiceCapacityInBytes() cfz.Expression[float64] {
	return cfz.GetAtt[float64](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_DataSet__AttributesMap.ConsumedSpiceCapacityInBytes))
}

// GetAtt__CreatedTime returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedTime
func (t *AWS_QuickSight_DataSet) GetAtt__CreatedTime() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_DataSet__AttributesMap.CreatedTime))
}

// GetAtt__LastUpdatedTime returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LastUpdatedTime
func (t *AWS_QuickSight_DataSet) GetAtt__LastUpdatedTime() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_DataSet__AttributesMap.LastUpdatedTime))
}

// GetAttSlice__OutputColumns returns a $cfz.ExpressionSlice[AWS_QuickSight_DataSet_OutputColumn] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: OutputColumns
func (t *AWS_QuickSight_DataSet) GetAttSlice__OutputColumns() cfz.ExpressionSlice[AWS_QuickSight_DataSet_OutputColumn] {
	return cfz.GetAttSlice[AWS_QuickSight_DataSet_OutputColumn](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_DataSet__AttributesMap.OutputColumns))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_QuickSight_DataSet) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_QuickSight_DataSet) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ConsumedSpiceCapacityInBytes returns a conventionally configured output for an attribute of this resource.
// Attribute: ConsumedSpiceCapacityInBytes
func (t *AWS_QuickSight_DataSet) GetConventionalOutputAtt__ConsumedSpiceCapacityInBytes(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttConsumedSpiceCapacityInBytes", t.GetAtt__ConsumedSpiceCapacityInBytes())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedTime returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedTime
func (t *AWS_QuickSight_DataSet) GetConventionalOutputAtt__CreatedTime(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedTime", t.GetAtt__CreatedTime())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LastUpdatedTime returns a conventionally configured output for an attribute of this resource.
// Attribute: LastUpdatedTime
func (t *AWS_QuickSight_DataSet) GetConventionalOutputAtt__LastUpdatedTime(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLastUpdatedTime", t.GetAtt__LastUpdatedTime())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__OutputColumns returns a conventionally configured output for an attribute of this resource.
// Attribute: OutputColumns
func (t *AWS_QuickSight_DataSet) GetConventionalOutputAtt__OutputColumns(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttOutputColumns", t.GetAttSlice__OutputColumns())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_QuickSight_DataSet) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_QuickSight_DataSet

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_QuickSight_DataSet) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
