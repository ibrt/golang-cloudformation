// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_quicksight

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_QuickSight_Theme)(nil)
	_ cfz.Resource                   = (*AWS_QuickSight_Theme)(nil)
)

const (
	// AWS_QuickSight_Theme__Type is the CloudFormation type for AWS::QuickSight::Theme.
	AWS_QuickSight_Theme__Type = "AWS::QuickSight::Theme"
)

var (
	// AWS_QuickSight_Theme__AttributesMap reports all the CloudFormation attributes for AWS::QuickSight::Theme.
	AWS_QuickSight_Theme__AttributesMap = struct {
		Arn                                    string
		CreatedTime                            string
		LastUpdatedTime                        string
		Type                                   string
		Version                                string
		Version_Arn                            string
		Version_BaseThemeId                    string
		Version_Configuration                  string
		Version_Configuration_DataColorPalette string
		Version_Configuration_Sheet            string
		Version_Configuration_Typography       string
		Version_Configuration_UIColorPalette   string
		Version_CreatedTime                    string
		Version_Description                    string
		Version_Errors                         string
		Version_Status                         string
		Version_VersionNumber                  string
	}{
		Arn:                                    "Arn",
		CreatedTime:                            "CreatedTime",
		LastUpdatedTime:                        "LastUpdatedTime",
		Type:                                   "Type",
		Version:                                "Version",
		Version_Arn:                            "Version.Arn",
		Version_BaseThemeId:                    "Version.BaseThemeId",
		Version_Configuration:                  "Version.Configuration",
		Version_Configuration_DataColorPalette: "Version.Configuration.DataColorPalette",
		Version_Configuration_Sheet:            "Version.Configuration.Sheet",
		Version_Configuration_Typography:       "Version.Configuration.Typography",
		Version_Configuration_UIColorPalette:   "Version.Configuration.UIColorPalette",
		Version_CreatedTime:                    "Version.CreatedTime",
		Version_Description:                    "Version.Description",
		Version_Errors:                         "Version.Errors",
		Version_Status:                         "Version.Status",
		Version_VersionNumber:                  "Version.VersionNumber",
	}

	// AWS_QuickSight_Theme__AttributesSlice reports all the CloudFormation attributes for AWS::QuickSight::Theme.
	AWS_QuickSight_Theme__AttributesSlice = []string{
		AWS_QuickSight_Theme__AttributesMap.Arn,
		AWS_QuickSight_Theme__AttributesMap.CreatedTime,
		AWS_QuickSight_Theme__AttributesMap.LastUpdatedTime,
		AWS_QuickSight_Theme__AttributesMap.Type,
		AWS_QuickSight_Theme__AttributesMap.Version,
		AWS_QuickSight_Theme__AttributesMap.Version_Arn,
		AWS_QuickSight_Theme__AttributesMap.Version_BaseThemeId,
		AWS_QuickSight_Theme__AttributesMap.Version_Configuration,
		AWS_QuickSight_Theme__AttributesMap.Version_Configuration_DataColorPalette,
		AWS_QuickSight_Theme__AttributesMap.Version_Configuration_Sheet,
		AWS_QuickSight_Theme__AttributesMap.Version_Configuration_Typography,
		AWS_QuickSight_Theme__AttributesMap.Version_Configuration_UIColorPalette,
		AWS_QuickSight_Theme__AttributesMap.Version_CreatedTime,
		AWS_QuickSight_Theme__AttributesMap.Version_Description,
		AWS_QuickSight_Theme__AttributesMap.Version_Errors,
		AWS_QuickSight_Theme__AttributesMap.Version_Status,
		AWS_QuickSight_Theme__AttributesMap.Version_VersionNumber,
	}
)

var (
	// AWS_QuickSight_Theme__PropertiesMap reports all the CloudFormation properties for AWS::QuickSight::Theme.
	AWS_QuickSight_Theme__PropertiesMap = struct {
		AwsAccountId       string
		BaseThemeId        string
		Configuration      string
		Name               string
		Permissions        string
		Tags               string
		ThemeId            string
		VersionDescription string
	}{
		AwsAccountId:       "AwsAccountId",
		BaseThemeId:        "BaseThemeId",
		Configuration:      "Configuration",
		Name:               "Name",
		Permissions:        "Permissions",
		Tags:               "Tags",
		ThemeId:            "ThemeId",
		VersionDescription: "VersionDescription",
	}

	// AWS_QuickSight_Theme__PropertiesSlice reports all the CloudFormation properties for AWS::QuickSight::Theme.
	AWS_QuickSight_Theme__PropertiesSlice = []string{
		AWS_QuickSight_Theme__PropertiesMap.AwsAccountId,
		AWS_QuickSight_Theme__PropertiesMap.BaseThemeId,
		AWS_QuickSight_Theme__PropertiesMap.Configuration,
		AWS_QuickSight_Theme__PropertiesMap.Name,
		AWS_QuickSight_Theme__PropertiesMap.Permissions,
		AWS_QuickSight_Theme__PropertiesMap.Tags,
		AWS_QuickSight_Theme__PropertiesMap.ThemeId,
		AWS_QuickSight_Theme__PropertiesMap.VersionDescription,
	}
)

// AWS_QuickSight_Theme is a binding for AWS::QuickSight::Theme.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html
type AWS_QuickSight_Theme struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AwsAccountId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-awsaccountid
	AwsAccountId cfz.Expression[string] `json:"AwsAccountId,omitempty"`

	// BaseThemeId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-basethemeid
	BaseThemeId cfz.Expression[string] `json:"BaseThemeId,omitempty"`

	// Configuration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-configuration
	Configuration cfz.Expression[AWS_QuickSight_Theme_ThemeConfiguration] `json:"Configuration,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// Permissions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-permissions
	Permissions cfz.ExpressionSlice[AWS_QuickSight_Theme_ResourcePermission] `json:"Permissions,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// ThemeId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-themeid
	ThemeId cfz.Expression[string] `json:"ThemeId,omitempty"`

	// VersionDescription is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-versiondescription
	VersionDescription cfz.Expression[string] `json:"VersionDescription,omitempty"`
}

// New__AWS_QuickSight_Theme initializes a new *AWS_QuickSight_Theme.
func New__AWS_QuickSight_Theme(logicalName string) *AWS_QuickSight_Theme {
	return &AWS_QuickSight_Theme{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_QuickSight_Theme) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_QuickSight_Theme) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_QuickSight_Theme) GetType() string {
	return AWS_QuickSight_Theme__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_QuickSight_Theme) Set__LogicalName(v string) *AWS_QuickSight_Theme {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_QuickSight_Theme) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_QuickSight_Theme {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_QuickSight_Theme) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_QuickSight_Theme {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_QuickSight_Theme) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_QuickSight_Theme {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_QuickSight_Theme) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_QuickSight_Theme {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_QuickSight_Theme) Set__RequestedOutputs(v []cfz.Output) *AWS_QuickSight_Theme {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_QuickSight_Theme) Add__RequestedOutputs(v ...cfz.Output) *AWS_QuickSight_Theme {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AwsAccountId updates property "AwsAccountId".
func (t *AWS_QuickSight_Theme) Set__AwsAccountId(v cfz.Expression[string]) *AWS_QuickSight_Theme {
	t.AwsAccountId = v
	return t
}

// SetV__AwsAccountId updates property "AwsAccountId".
func (t *AWS_QuickSight_Theme) SetV__AwsAccountId(v string) *AWS_QuickSight_Theme {
	t.AwsAccountId = cfz.V(v)
	return t
}

// Set__BaseThemeId updates property "BaseThemeId".
func (t *AWS_QuickSight_Theme) Set__BaseThemeId(v cfz.Expression[string]) *AWS_QuickSight_Theme {
	t.BaseThemeId = v
	return t
}

// SetV__BaseThemeId updates property "BaseThemeId".
func (t *AWS_QuickSight_Theme) SetV__BaseThemeId(v string) *AWS_QuickSight_Theme {
	t.BaseThemeId = cfz.V(v)
	return t
}

// Set__Configuration updates property "Configuration".
func (t *AWS_QuickSight_Theme) Set__Configuration(v cfz.Expression[AWS_QuickSight_Theme_ThemeConfiguration]) *AWS_QuickSight_Theme {
	t.Configuration = v
	return t
}

// SetV__Configuration updates property "Configuration".
func (t *AWS_QuickSight_Theme) SetV__Configuration(v AWS_QuickSight_Theme_ThemeConfiguration) *AWS_QuickSight_Theme {
	t.Configuration = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_QuickSight_Theme) Set__Name(v cfz.Expression[string]) *AWS_QuickSight_Theme {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_QuickSight_Theme) SetV__Name(v string) *AWS_QuickSight_Theme {
	t.Name = cfz.V(v)
	return t
}

// Set__Permissions updates property "Permissions".
func (t *AWS_QuickSight_Theme) Set__Permissions(v cfz.ExpressionSlice[AWS_QuickSight_Theme_ResourcePermission]) *AWS_QuickSight_Theme {
	t.Permissions = v
	return t
}

// SetS__Permissions updates property "Permissions".
func (t *AWS_QuickSight_Theme) SetS__Permissions(v ...cfz.Expression[AWS_QuickSight_Theme_ResourcePermission]) *AWS_QuickSight_Theme {
	t.Permissions = cfz.S(v...)
	return t
}

// SetSV__Permissions updates property "Permissions".
func (t *AWS_QuickSight_Theme) SetSV__Permissions(v ...AWS_QuickSight_Theme_ResourcePermission) *AWS_QuickSight_Theme {
	t.Permissions = cfz.SV(v...)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_QuickSight_Theme) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_QuickSight_Theme {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_QuickSight_Theme) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_QuickSight_Theme {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_QuickSight_Theme) SetSV__Tags(v ...cfz.Tag) *AWS_QuickSight_Theme {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__ThemeId updates property "ThemeId".
func (t *AWS_QuickSight_Theme) Set__ThemeId(v cfz.Expression[string]) *AWS_QuickSight_Theme {
	t.ThemeId = v
	return t
}

// SetV__ThemeId updates property "ThemeId".
func (t *AWS_QuickSight_Theme) SetV__ThemeId(v string) *AWS_QuickSight_Theme {
	t.ThemeId = cfz.V(v)
	return t
}

// Set__VersionDescription updates property "VersionDescription".
func (t *AWS_QuickSight_Theme) Set__VersionDescription(v cfz.Expression[string]) *AWS_QuickSight_Theme {
	t.VersionDescription = v
	return t
}

// SetV__VersionDescription updates property "VersionDescription".
func (t *AWS_QuickSight_Theme) SetV__VersionDescription(v string) *AWS_QuickSight_Theme {
	t.VersionDescription = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_QuickSight_Theme) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_QuickSight_Theme) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.Arn))
}

// GetAtt__CreatedTime returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedTime
func (t *AWS_QuickSight_Theme) GetAtt__CreatedTime() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.CreatedTime))
}

// GetAtt__LastUpdatedTime returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LastUpdatedTime
func (t *AWS_QuickSight_Theme) GetAtt__LastUpdatedTime() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.LastUpdatedTime))
}

// GetAtt__Type returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Type
func (t *AWS_QuickSight_Theme) GetAtt__Type() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.Type))
}

// GetAtt__Version returns a $cfz.Expression[AWS_QuickSight_Theme_ThemeVersion] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version
func (t *AWS_QuickSight_Theme) GetAtt__Version() cfz.Expression[AWS_QuickSight_Theme_ThemeVersion] {
	return cfz.GetAtt[AWS_QuickSight_Theme_ThemeVersion](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.Version))
}

// GetAtt__Version_Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version.Arn
func (t *AWS_QuickSight_Theme) GetAtt__Version_Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.Version_Arn))
}

// GetAtt__Version_BaseThemeId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version.BaseThemeId
func (t *AWS_QuickSight_Theme) GetAtt__Version_BaseThemeId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.Version_BaseThemeId))
}

// GetAtt__Version_Configuration returns a $cfz.Expression[AWS_QuickSight_Theme_ThemeConfiguration] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version.Configuration
func (t *AWS_QuickSight_Theme) GetAtt__Version_Configuration() cfz.Expression[AWS_QuickSight_Theme_ThemeConfiguration] {
	return cfz.GetAtt[AWS_QuickSight_Theme_ThemeConfiguration](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.Version_Configuration))
}

// GetAtt__Version_Configuration_DataColorPalette returns a $cfz.Expression[AWS_QuickSight_Theme_DataColorPalette] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version.Configuration.DataColorPalette
func (t *AWS_QuickSight_Theme) GetAtt__Version_Configuration_DataColorPalette() cfz.Expression[AWS_QuickSight_Theme_DataColorPalette] {
	return cfz.GetAtt[AWS_QuickSight_Theme_DataColorPalette](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.Version_Configuration_DataColorPalette))
}

// GetAtt__Version_Configuration_Sheet returns a $cfz.Expression[AWS_QuickSight_Theme_SheetStyle] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version.Configuration.Sheet
func (t *AWS_QuickSight_Theme) GetAtt__Version_Configuration_Sheet() cfz.Expression[AWS_QuickSight_Theme_SheetStyle] {
	return cfz.GetAtt[AWS_QuickSight_Theme_SheetStyle](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.Version_Configuration_Sheet))
}

// GetAtt__Version_Configuration_Typography returns a $cfz.Expression[AWS_QuickSight_Theme_Typography] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version.Configuration.Typography
func (t *AWS_QuickSight_Theme) GetAtt__Version_Configuration_Typography() cfz.Expression[AWS_QuickSight_Theme_Typography] {
	return cfz.GetAtt[AWS_QuickSight_Theme_Typography](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.Version_Configuration_Typography))
}

// GetAtt__Version_Configuration_UIColorPalette returns a $cfz.Expression[AWS_QuickSight_Theme_UIColorPalette] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version.Configuration.UIColorPalette
func (t *AWS_QuickSight_Theme) GetAtt__Version_Configuration_UIColorPalette() cfz.Expression[AWS_QuickSight_Theme_UIColorPalette] {
	return cfz.GetAtt[AWS_QuickSight_Theme_UIColorPalette](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.Version_Configuration_UIColorPalette))
}

// GetAtt__Version_CreatedTime returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version.CreatedTime
func (t *AWS_QuickSight_Theme) GetAtt__Version_CreatedTime() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.Version_CreatedTime))
}

// GetAtt__Version_Description returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version.Description
func (t *AWS_QuickSight_Theme) GetAtt__Version_Description() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.Version_Description))
}

// GetAttSlice__Version_Errors returns a $cfz.ExpressionSlice[AWS_QuickSight_Theme_ThemeError] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version.Errors
func (t *AWS_QuickSight_Theme) GetAttSlice__Version_Errors() cfz.ExpressionSlice[AWS_QuickSight_Theme_ThemeError] {
	return cfz.GetAttSlice[AWS_QuickSight_Theme_ThemeError](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.Version_Errors))
}

// GetAtt__Version_Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version.Status
func (t *AWS_QuickSight_Theme) GetAtt__Version_Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.Version_Status))
}

// GetAtt__Version_VersionNumber returns a $cfz.Expression[float64] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version.VersionNumber
func (t *AWS_QuickSight_Theme) GetAtt__Version_VersionNumber() cfz.Expression[float64] {
	return cfz.GetAtt[float64](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_QuickSight_Theme__AttributesMap.Version_VersionNumber))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_QuickSight_Theme) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedTime returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedTime
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__CreatedTime(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedTime", t.GetAtt__CreatedTime())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LastUpdatedTime returns a conventionally configured output for an attribute of this resource.
// Attribute: LastUpdatedTime
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__LastUpdatedTime(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLastUpdatedTime", t.GetAtt__LastUpdatedTime())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Type returns a conventionally configured output for an attribute of this resource.
// Attribute: Type
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__Type(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttType", t.GetAtt__Type())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version returns a conventionally configured output for an attribute of this resource.
// Attribute: Version
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__Version(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersion", t.GetAtt__Version())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version_Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Version.Arn
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__Version_Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersionArn", t.GetAtt__Version_Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version_BaseThemeId returns a conventionally configured output for an attribute of this resource.
// Attribute: Version.BaseThemeId
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__Version_BaseThemeId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersionBaseThemeId", t.GetAtt__Version_BaseThemeId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version_Configuration returns a conventionally configured output for an attribute of this resource.
// Attribute: Version.Configuration
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__Version_Configuration(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersionConfiguration", t.GetAtt__Version_Configuration())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version_Configuration_DataColorPalette returns a conventionally configured output for an attribute of this resource.
// Attribute: Version.Configuration.DataColorPalette
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__Version_Configuration_DataColorPalette(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersionConfigurationDataColorPalette", t.GetAtt__Version_Configuration_DataColorPalette())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version_Configuration_Sheet returns a conventionally configured output for an attribute of this resource.
// Attribute: Version.Configuration.Sheet
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__Version_Configuration_Sheet(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersionConfigurationSheet", t.GetAtt__Version_Configuration_Sheet())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version_Configuration_Typography returns a conventionally configured output for an attribute of this resource.
// Attribute: Version.Configuration.Typography
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__Version_Configuration_Typography(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersionConfigurationTypography", t.GetAtt__Version_Configuration_Typography())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version_Configuration_UIColorPalette returns a conventionally configured output for an attribute of this resource.
// Attribute: Version.Configuration.UIColorPalette
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__Version_Configuration_UIColorPalette(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersionConfigurationUIColorPalette", t.GetAtt__Version_Configuration_UIColorPalette())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version_CreatedTime returns a conventionally configured output for an attribute of this resource.
// Attribute: Version.CreatedTime
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__Version_CreatedTime(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersionCreatedTime", t.GetAtt__Version_CreatedTime())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version_Description returns a conventionally configured output for an attribute of this resource.
// Attribute: Version.Description
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__Version_Description(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersionDescription", t.GetAtt__Version_Description())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version_Errors returns a conventionally configured output for an attribute of this resource.
// Attribute: Version.Errors
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__Version_Errors(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersionErrors", t.GetAttSlice__Version_Errors())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version_Status returns a conventionally configured output for an attribute of this resource.
// Attribute: Version.Status
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__Version_Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersionStatus", t.GetAtt__Version_Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version_VersionNumber returns a conventionally configured output for an attribute of this resource.
// Attribute: Version.VersionNumber
func (t *AWS_QuickSight_Theme) GetConventionalOutputAtt__Version_VersionNumber(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersionVersionNumber", t.GetAtt__Version_VersionNumber())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_QuickSight_Theme) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_QuickSight_Theme

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_QuickSight_Theme) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
