// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_datasync

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_DataSync_LocationS3)(nil)
	_ cfz.Resource                   = (*AWS_DataSync_LocationS3)(nil)
)

const (
	// AWS_DataSync_LocationS3__Type is the CloudFormation type for AWS::DataSync::LocationS3.
	AWS_DataSync_LocationS3__Type = "AWS::DataSync::LocationS3"
)

var (
	// AWS_DataSync_LocationS3__AttributesMap reports all the CloudFormation attributes for AWS::DataSync::LocationS3.
	AWS_DataSync_LocationS3__AttributesMap = struct {
		LocationArn string
		LocationUri string
	}{
		LocationArn: "LocationArn",
		LocationUri: "LocationUri",
	}

	// AWS_DataSync_LocationS3__AttributesSlice reports all the CloudFormation attributes for AWS::DataSync::LocationS3.
	AWS_DataSync_LocationS3__AttributesSlice = []string{
		AWS_DataSync_LocationS3__AttributesMap.LocationArn,
		AWS_DataSync_LocationS3__AttributesMap.LocationUri,
	}
)

var (
	// AWS_DataSync_LocationS3__PropertiesMap reports all the CloudFormation properties for AWS::DataSync::LocationS3.
	AWS_DataSync_LocationS3__PropertiesMap = struct {
		S3BucketArn    string
		S3Config       string
		S3StorageClass string
		Subdirectory   string
		Tags           string
	}{
		S3BucketArn:    "S3BucketArn",
		S3Config:       "S3Config",
		S3StorageClass: "S3StorageClass",
		Subdirectory:   "Subdirectory",
		Tags:           "Tags",
	}

	// AWS_DataSync_LocationS3__PropertiesSlice reports all the CloudFormation properties for AWS::DataSync::LocationS3.
	AWS_DataSync_LocationS3__PropertiesSlice = []string{
		AWS_DataSync_LocationS3__PropertiesMap.S3BucketArn,
		AWS_DataSync_LocationS3__PropertiesMap.S3Config,
		AWS_DataSync_LocationS3__PropertiesMap.S3StorageClass,
		AWS_DataSync_LocationS3__PropertiesMap.Subdirectory,
		AWS_DataSync_LocationS3__PropertiesMap.Tags,
	}
)

// AWS_DataSync_LocationS3 is a binding for AWS::DataSync::LocationS3.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datasync-locations3.html
type AWS_DataSync_LocationS3 struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// S3BucketArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datasync-locations3.html#cfn-datasync-locations3-s3bucketarn
	S3BucketArn cfz.Expression[string] `json:"S3BucketArn,omitempty"`

	// S3Config is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datasync-locations3.html#cfn-datasync-locations3-s3config
	S3Config cfz.Expression[AWS_DataSync_LocationS3_S3Config] `json:"S3Config,omitempty"`

	// S3StorageClass is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datasync-locations3.html#cfn-datasync-locations3-s3storageclass
	S3StorageClass cfz.Expression[string] `json:"S3StorageClass,omitempty"`

	// Subdirectory is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datasync-locations3.html#cfn-datasync-locations3-subdirectory
	Subdirectory cfz.Expression[string] `json:"Subdirectory,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datasync-locations3.html#cfn-datasync-locations3-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_DataSync_LocationS3 initializes a new *AWS_DataSync_LocationS3.
func New__AWS_DataSync_LocationS3(logicalName string) *AWS_DataSync_LocationS3 {
	return &AWS_DataSync_LocationS3{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_DataSync_LocationS3) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_DataSync_LocationS3) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_DataSync_LocationS3) GetType() string {
	return AWS_DataSync_LocationS3__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_DataSync_LocationS3) Set__LogicalName(v string) *AWS_DataSync_LocationS3 {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_DataSync_LocationS3) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_DataSync_LocationS3 {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_DataSync_LocationS3) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_DataSync_LocationS3 {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_DataSync_LocationS3) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_DataSync_LocationS3 {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_DataSync_LocationS3) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_DataSync_LocationS3 {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_DataSync_LocationS3) Set__RequestedOutputs(v []cfz.Output) *AWS_DataSync_LocationS3 {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_DataSync_LocationS3) Add__RequestedOutputs(v ...cfz.Output) *AWS_DataSync_LocationS3 {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__S3BucketArn updates property "S3BucketArn".
func (t *AWS_DataSync_LocationS3) Set__S3BucketArn(v cfz.Expression[string]) *AWS_DataSync_LocationS3 {
	t.S3BucketArn = v
	return t
}

// SetV__S3BucketArn updates property "S3BucketArn".
func (t *AWS_DataSync_LocationS3) SetV__S3BucketArn(v string) *AWS_DataSync_LocationS3 {
	t.S3BucketArn = cfz.V(v)
	return t
}

// Set__S3Config updates property "S3Config".
func (t *AWS_DataSync_LocationS3) Set__S3Config(v cfz.Expression[AWS_DataSync_LocationS3_S3Config]) *AWS_DataSync_LocationS3 {
	t.S3Config = v
	return t
}

// SetV__S3Config updates property "S3Config".
func (t *AWS_DataSync_LocationS3) SetV__S3Config(v AWS_DataSync_LocationS3_S3Config) *AWS_DataSync_LocationS3 {
	t.S3Config = cfz.V(v)
	return t
}

// Set__S3StorageClass updates property "S3StorageClass".
func (t *AWS_DataSync_LocationS3) Set__S3StorageClass(v cfz.Expression[string]) *AWS_DataSync_LocationS3 {
	t.S3StorageClass = v
	return t
}

// SetV__S3StorageClass updates property "S3StorageClass".
func (t *AWS_DataSync_LocationS3) SetV__S3StorageClass(v string) *AWS_DataSync_LocationS3 {
	t.S3StorageClass = cfz.V(v)
	return t
}

// Set__Subdirectory updates property "Subdirectory".
func (t *AWS_DataSync_LocationS3) Set__Subdirectory(v cfz.Expression[string]) *AWS_DataSync_LocationS3 {
	t.Subdirectory = v
	return t
}

// SetV__Subdirectory updates property "Subdirectory".
func (t *AWS_DataSync_LocationS3) SetV__Subdirectory(v string) *AWS_DataSync_LocationS3 {
	t.Subdirectory = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_DataSync_LocationS3) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_DataSync_LocationS3 {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_DataSync_LocationS3) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_DataSync_LocationS3 {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_DataSync_LocationS3) SetSV__Tags(v ...cfz.Tag) *AWS_DataSync_LocationS3 {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_DataSync_LocationS3) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__LocationArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LocationArn
func (t *AWS_DataSync_LocationS3) GetAtt__LocationArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_DataSync_LocationS3__AttributesMap.LocationArn))
}

// GetAtt__LocationUri returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LocationUri
func (t *AWS_DataSync_LocationS3) GetAtt__LocationUri() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_DataSync_LocationS3__AttributesMap.LocationUri))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_DataSync_LocationS3) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LocationArn returns a conventionally configured output for an attribute of this resource.
// Attribute: LocationArn
func (t *AWS_DataSync_LocationS3) GetConventionalOutputAtt__LocationArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLocationArn", t.GetAtt__LocationArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LocationUri returns a conventionally configured output for an attribute of this resource.
// Attribute: LocationUri
func (t *AWS_DataSync_LocationS3) GetConventionalOutputAtt__LocationUri(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLocationUri", t.GetAtt__LocationUri())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_DataSync_LocationS3) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_DataSync_LocationS3

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_DataSync_LocationS3) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
