// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_route53

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Route53_HostedZone)(nil)
	_ cfz.Resource                   = (*AWS_Route53_HostedZone)(nil)
)

const (
	// AWS_Route53_HostedZone__Type is the CloudFormation type for AWS::Route53::HostedZone.
	AWS_Route53_HostedZone__Type = "AWS::Route53::HostedZone"
)

var (
	// AWS_Route53_HostedZone__AttributesMap reports all the CloudFormation attributes for AWS::Route53::HostedZone.
	AWS_Route53_HostedZone__AttributesMap = struct {
		Id          string
		NameServers string
	}{
		Id:          "Id",
		NameServers: "NameServers",
	}

	// AWS_Route53_HostedZone__AttributesSlice reports all the CloudFormation attributes for AWS::Route53::HostedZone.
	AWS_Route53_HostedZone__AttributesSlice = []string{
		AWS_Route53_HostedZone__AttributesMap.Id,
		AWS_Route53_HostedZone__AttributesMap.NameServers,
	}
)

var (
	// AWS_Route53_HostedZone__PropertiesMap reports all the CloudFormation properties for AWS::Route53::HostedZone.
	AWS_Route53_HostedZone__PropertiesMap = struct {
		HostedZoneConfig   string
		HostedZoneTags     string
		Name               string
		QueryLoggingConfig string
		VPCs               string
	}{
		HostedZoneConfig:   "HostedZoneConfig",
		HostedZoneTags:     "HostedZoneTags",
		Name:               "Name",
		QueryLoggingConfig: "QueryLoggingConfig",
		VPCs:               "VPCs",
	}

	// AWS_Route53_HostedZone__PropertiesSlice reports all the CloudFormation properties for AWS::Route53::HostedZone.
	AWS_Route53_HostedZone__PropertiesSlice = []string{
		AWS_Route53_HostedZone__PropertiesMap.HostedZoneConfig,
		AWS_Route53_HostedZone__PropertiesMap.HostedZoneTags,
		AWS_Route53_HostedZone__PropertiesMap.Name,
		AWS_Route53_HostedZone__PropertiesMap.QueryLoggingConfig,
		AWS_Route53_HostedZone__PropertiesMap.VPCs,
	}
)

// AWS_Route53_HostedZone is a binding for AWS::Route53::HostedZone.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-hostedzone.html
type AWS_Route53_HostedZone struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// HostedZoneConfig is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-hostedzone.html#cfn-route53-hostedzone-hostedzoneconfig
	HostedZoneConfig cfz.Expression[AWS_Route53_HostedZone_HostedZoneConfig] `json:"HostedZoneConfig,omitempty"`

	// HostedZoneTags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-hostedzone.html#cfn-route53-hostedzone-hostedzonetags
	HostedZoneTags cfz.ExpressionSlice[AWS_Route53_HostedZone_HostedZoneTag] `json:"HostedZoneTags,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-hostedzone.html#cfn-route53-hostedzone-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// QueryLoggingConfig is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-hostedzone.html#cfn-route53-hostedzone-queryloggingconfig
	QueryLoggingConfig cfz.Expression[AWS_Route53_HostedZone_QueryLoggingConfig] `json:"QueryLoggingConfig,omitempty"`

	// VPCs is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-hostedzone.html#cfn-route53-hostedzone-vpcs
	VPCs cfz.ExpressionSlice[AWS_Route53_HostedZone_VPC] `json:"VPCs,omitempty"`
}

// New__AWS_Route53_HostedZone initializes a new *AWS_Route53_HostedZone.
func New__AWS_Route53_HostedZone(logicalName string) *AWS_Route53_HostedZone {
	return &AWS_Route53_HostedZone{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Route53_HostedZone) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Route53_HostedZone) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Route53_HostedZone) GetType() string {
	return AWS_Route53_HostedZone__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Route53_HostedZone) Set__LogicalName(v string) *AWS_Route53_HostedZone {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Route53_HostedZone) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Route53_HostedZone {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Route53_HostedZone) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Route53_HostedZone {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Route53_HostedZone) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Route53_HostedZone {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Route53_HostedZone) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Route53_HostedZone {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Route53_HostedZone) Set__RequestedOutputs(v []cfz.Output) *AWS_Route53_HostedZone {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Route53_HostedZone) Add__RequestedOutputs(v ...cfz.Output) *AWS_Route53_HostedZone {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__HostedZoneConfig updates property "HostedZoneConfig".
func (t *AWS_Route53_HostedZone) Set__HostedZoneConfig(v cfz.Expression[AWS_Route53_HostedZone_HostedZoneConfig]) *AWS_Route53_HostedZone {
	t.HostedZoneConfig = v
	return t
}

// SetV__HostedZoneConfig updates property "HostedZoneConfig".
func (t *AWS_Route53_HostedZone) SetV__HostedZoneConfig(v AWS_Route53_HostedZone_HostedZoneConfig) *AWS_Route53_HostedZone {
	t.HostedZoneConfig = cfz.V(v)
	return t
}

// Set__HostedZoneTags updates property "HostedZoneTags".
func (t *AWS_Route53_HostedZone) Set__HostedZoneTags(v cfz.ExpressionSlice[AWS_Route53_HostedZone_HostedZoneTag]) *AWS_Route53_HostedZone {
	t.HostedZoneTags = v
	return t
}

// SetS__HostedZoneTags updates property "HostedZoneTags".
func (t *AWS_Route53_HostedZone) SetS__HostedZoneTags(v ...cfz.Expression[AWS_Route53_HostedZone_HostedZoneTag]) *AWS_Route53_HostedZone {
	t.HostedZoneTags = cfz.S(v...)
	return t
}

// SetSV__HostedZoneTags updates property "HostedZoneTags".
func (t *AWS_Route53_HostedZone) SetSV__HostedZoneTags(v ...AWS_Route53_HostedZone_HostedZoneTag) *AWS_Route53_HostedZone {
	t.HostedZoneTags = cfz.SV(v...)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_Route53_HostedZone) Set__Name(v cfz.Expression[string]) *AWS_Route53_HostedZone {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_Route53_HostedZone) SetV__Name(v string) *AWS_Route53_HostedZone {
	t.Name = cfz.V(v)
	return t
}

// Set__QueryLoggingConfig updates property "QueryLoggingConfig".
func (t *AWS_Route53_HostedZone) Set__QueryLoggingConfig(v cfz.Expression[AWS_Route53_HostedZone_QueryLoggingConfig]) *AWS_Route53_HostedZone {
	t.QueryLoggingConfig = v
	return t
}

// SetV__QueryLoggingConfig updates property "QueryLoggingConfig".
func (t *AWS_Route53_HostedZone) SetV__QueryLoggingConfig(v AWS_Route53_HostedZone_QueryLoggingConfig) *AWS_Route53_HostedZone {
	t.QueryLoggingConfig = cfz.V(v)
	return t
}

// Set__VPCs updates property "VPCs".
func (t *AWS_Route53_HostedZone) Set__VPCs(v cfz.ExpressionSlice[AWS_Route53_HostedZone_VPC]) *AWS_Route53_HostedZone {
	t.VPCs = v
	return t
}

// SetS__VPCs updates property "VPCs".
func (t *AWS_Route53_HostedZone) SetS__VPCs(v ...cfz.Expression[AWS_Route53_HostedZone_VPC]) *AWS_Route53_HostedZone {
	t.VPCs = cfz.S(v...)
	return t
}

// SetSV__VPCs updates property "VPCs".
func (t *AWS_Route53_HostedZone) SetSV__VPCs(v ...AWS_Route53_HostedZone_VPC) *AWS_Route53_HostedZone {
	t.VPCs = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Route53_HostedZone) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Id returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Id
func (t *AWS_Route53_HostedZone) GetAtt__Id() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53_HostedZone__AttributesMap.Id))
}

// GetAttSlice__NameServers returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: NameServers
func (t *AWS_Route53_HostedZone) GetAttSlice__NameServers() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Route53_HostedZone__AttributesMap.NameServers))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Route53_HostedZone) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Id returns a conventionally configured output for an attribute of this resource.
// Attribute: Id
func (t *AWS_Route53_HostedZone) GetConventionalOutputAtt__Id(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttId", t.GetAtt__Id())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__NameServers returns a conventionally configured output for an attribute of this resource.
// Attribute: NameServers
func (t *AWS_Route53_HostedZone) GetConventionalOutputAtt__NameServers(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNameServers", t.GetAttSlice__NameServers())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Route53_HostedZone) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Route53_HostedZone

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Route53_HostedZone) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
