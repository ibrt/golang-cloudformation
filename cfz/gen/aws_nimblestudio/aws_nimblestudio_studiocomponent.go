// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_nimblestudio

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_NimbleStudio_StudioComponent)(nil)
	_ cfz.Resource                   = (*AWS_NimbleStudio_StudioComponent)(nil)
)

const (
	// AWS_NimbleStudio_StudioComponent__Type is the CloudFormation type for AWS::NimbleStudio::StudioComponent.
	AWS_NimbleStudio_StudioComponent__Type = "AWS::NimbleStudio::StudioComponent"
)

var (
	// AWS_NimbleStudio_StudioComponent__AttributesMap reports all the CloudFormation attributes for AWS::NimbleStudio::StudioComponent.
	AWS_NimbleStudio_StudioComponent__AttributesMap = struct {
		StudioComponentId string
	}{
		StudioComponentId: "StudioComponentId",
	}

	// AWS_NimbleStudio_StudioComponent__AttributesSlice reports all the CloudFormation attributes for AWS::NimbleStudio::StudioComponent.
	AWS_NimbleStudio_StudioComponent__AttributesSlice = []string{
		AWS_NimbleStudio_StudioComponent__AttributesMap.StudioComponentId,
	}
)

var (
	// AWS_NimbleStudio_StudioComponent__PropertiesMap reports all the CloudFormation properties for AWS::NimbleStudio::StudioComponent.
	AWS_NimbleStudio_StudioComponent__PropertiesMap = struct {
		Configuration         string
		Description           string
		Ec2SecurityGroupIds   string
		InitializationScripts string
		Name                  string
		ScriptParameters      string
		StudioId              string
		Subtype               string
		Tags                  string
		Type                  string
	}{
		Configuration:         "Configuration",
		Description:           "Description",
		Ec2SecurityGroupIds:   "Ec2SecurityGroupIds",
		InitializationScripts: "InitializationScripts",
		Name:                  "Name",
		ScriptParameters:      "ScriptParameters",
		StudioId:              "StudioId",
		Subtype:               "Subtype",
		Tags:                  "Tags",
		Type:                  "Type",
	}

	// AWS_NimbleStudio_StudioComponent__PropertiesSlice reports all the CloudFormation properties for AWS::NimbleStudio::StudioComponent.
	AWS_NimbleStudio_StudioComponent__PropertiesSlice = []string{
		AWS_NimbleStudio_StudioComponent__PropertiesMap.Configuration,
		AWS_NimbleStudio_StudioComponent__PropertiesMap.Description,
		AWS_NimbleStudio_StudioComponent__PropertiesMap.Ec2SecurityGroupIds,
		AWS_NimbleStudio_StudioComponent__PropertiesMap.InitializationScripts,
		AWS_NimbleStudio_StudioComponent__PropertiesMap.Name,
		AWS_NimbleStudio_StudioComponent__PropertiesMap.ScriptParameters,
		AWS_NimbleStudio_StudioComponent__PropertiesMap.StudioId,
		AWS_NimbleStudio_StudioComponent__PropertiesMap.Subtype,
		AWS_NimbleStudio_StudioComponent__PropertiesMap.Tags,
		AWS_NimbleStudio_StudioComponent__PropertiesMap.Type,
	}
)

// AWS_NimbleStudio_StudioComponent is a binding for AWS::NimbleStudio::StudioComponent.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-nimblestudio-studiocomponent.html
type AWS_NimbleStudio_StudioComponent struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Configuration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-nimblestudio-studiocomponent.html#cfn-nimblestudio-studiocomponent-configuration
	Configuration cfz.Expression[AWS_NimbleStudio_StudioComponent_StudioComponentConfiguration] `json:"Configuration,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-nimblestudio-studiocomponent.html#cfn-nimblestudio-studiocomponent-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// Ec2SecurityGroupIds is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-nimblestudio-studiocomponent.html#cfn-nimblestudio-studiocomponent-ec2securitygroupids
	Ec2SecurityGroupIds cfz.ExpressionSlice[string] `json:"Ec2SecurityGroupIds,omitempty"`

	// InitializationScripts is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-nimblestudio-studiocomponent.html#cfn-nimblestudio-studiocomponent-initializationscripts
	InitializationScripts cfz.ExpressionSlice[AWS_NimbleStudio_StudioComponent_StudioComponentInitializationScript] `json:"InitializationScripts,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-nimblestudio-studiocomponent.html#cfn-nimblestudio-studiocomponent-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// ScriptParameters is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-nimblestudio-studiocomponent.html#cfn-nimblestudio-studiocomponent-scriptparameters
	ScriptParameters cfz.ExpressionSlice[AWS_NimbleStudio_StudioComponent_ScriptParameterKeyValue] `json:"ScriptParameters,omitempty"`

	// StudioId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-nimblestudio-studiocomponent.html#cfn-nimblestudio-studiocomponent-studioid
	StudioId cfz.Expression[string] `json:"StudioId,omitempty"`

	// Subtype is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-nimblestudio-studiocomponent.html#cfn-nimblestudio-studiocomponent-subtype
	Subtype cfz.Expression[string] `json:"Subtype,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-nimblestudio-studiocomponent.html#cfn-nimblestudio-studiocomponent-tags
	Tags cfz.ExpressionMap[string] `json:"Tags,omitempty"`

	// Type is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-nimblestudio-studiocomponent.html#cfn-nimblestudio-studiocomponent-type
	Type cfz.Expression[string] `json:"Type,omitempty"`
}

// New__AWS_NimbleStudio_StudioComponent initializes a new *AWS_NimbleStudio_StudioComponent.
func New__AWS_NimbleStudio_StudioComponent(logicalName string) *AWS_NimbleStudio_StudioComponent {
	return &AWS_NimbleStudio_StudioComponent{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_NimbleStudio_StudioComponent) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_NimbleStudio_StudioComponent) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_NimbleStudio_StudioComponent) GetType() string {
	return AWS_NimbleStudio_StudioComponent__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_NimbleStudio_StudioComponent) Set__LogicalName(v string) *AWS_NimbleStudio_StudioComponent {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_NimbleStudio_StudioComponent) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_NimbleStudio_StudioComponent {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_NimbleStudio_StudioComponent) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_NimbleStudio_StudioComponent {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_NimbleStudio_StudioComponent) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_NimbleStudio_StudioComponent {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_NimbleStudio_StudioComponent) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_NimbleStudio_StudioComponent {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_NimbleStudio_StudioComponent) Set__RequestedOutputs(v []cfz.Output) *AWS_NimbleStudio_StudioComponent {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_NimbleStudio_StudioComponent) Add__RequestedOutputs(v ...cfz.Output) *AWS_NimbleStudio_StudioComponent {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Configuration updates property "Configuration".
func (t *AWS_NimbleStudio_StudioComponent) Set__Configuration(v cfz.Expression[AWS_NimbleStudio_StudioComponent_StudioComponentConfiguration]) *AWS_NimbleStudio_StudioComponent {
	t.Configuration = v
	return t
}

// SetV__Configuration updates property "Configuration".
func (t *AWS_NimbleStudio_StudioComponent) SetV__Configuration(v AWS_NimbleStudio_StudioComponent_StudioComponentConfiguration) *AWS_NimbleStudio_StudioComponent {
	t.Configuration = cfz.V(v)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_NimbleStudio_StudioComponent) Set__Description(v cfz.Expression[string]) *AWS_NimbleStudio_StudioComponent {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_NimbleStudio_StudioComponent) SetV__Description(v string) *AWS_NimbleStudio_StudioComponent {
	t.Description = cfz.V(v)
	return t
}

// Set__Ec2SecurityGroupIds updates property "Ec2SecurityGroupIds".
func (t *AWS_NimbleStudio_StudioComponent) Set__Ec2SecurityGroupIds(v cfz.ExpressionSlice[string]) *AWS_NimbleStudio_StudioComponent {
	t.Ec2SecurityGroupIds = v
	return t
}

// SetS__Ec2SecurityGroupIds updates property "Ec2SecurityGroupIds".
func (t *AWS_NimbleStudio_StudioComponent) SetS__Ec2SecurityGroupIds(v ...cfz.Expression[string]) *AWS_NimbleStudio_StudioComponent {
	t.Ec2SecurityGroupIds = cfz.S(v...)
	return t
}

// SetSV__Ec2SecurityGroupIds updates property "Ec2SecurityGroupIds".
func (t *AWS_NimbleStudio_StudioComponent) SetSV__Ec2SecurityGroupIds(v ...string) *AWS_NimbleStudio_StudioComponent {
	t.Ec2SecurityGroupIds = cfz.SV(v...)
	return t
}

// Set__InitializationScripts updates property "InitializationScripts".
func (t *AWS_NimbleStudio_StudioComponent) Set__InitializationScripts(v cfz.ExpressionSlice[AWS_NimbleStudio_StudioComponent_StudioComponentInitializationScript]) *AWS_NimbleStudio_StudioComponent {
	t.InitializationScripts = v
	return t
}

// SetS__InitializationScripts updates property "InitializationScripts".
func (t *AWS_NimbleStudio_StudioComponent) SetS__InitializationScripts(v ...cfz.Expression[AWS_NimbleStudio_StudioComponent_StudioComponentInitializationScript]) *AWS_NimbleStudio_StudioComponent {
	t.InitializationScripts = cfz.S(v...)
	return t
}

// SetSV__InitializationScripts updates property "InitializationScripts".
func (t *AWS_NimbleStudio_StudioComponent) SetSV__InitializationScripts(v ...AWS_NimbleStudio_StudioComponent_StudioComponentInitializationScript) *AWS_NimbleStudio_StudioComponent {
	t.InitializationScripts = cfz.SV(v...)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_NimbleStudio_StudioComponent) Set__Name(v cfz.Expression[string]) *AWS_NimbleStudio_StudioComponent {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_NimbleStudio_StudioComponent) SetV__Name(v string) *AWS_NimbleStudio_StudioComponent {
	t.Name = cfz.V(v)
	return t
}

// Set__ScriptParameters updates property "ScriptParameters".
func (t *AWS_NimbleStudio_StudioComponent) Set__ScriptParameters(v cfz.ExpressionSlice[AWS_NimbleStudio_StudioComponent_ScriptParameterKeyValue]) *AWS_NimbleStudio_StudioComponent {
	t.ScriptParameters = v
	return t
}

// SetS__ScriptParameters updates property "ScriptParameters".
func (t *AWS_NimbleStudio_StudioComponent) SetS__ScriptParameters(v ...cfz.Expression[AWS_NimbleStudio_StudioComponent_ScriptParameterKeyValue]) *AWS_NimbleStudio_StudioComponent {
	t.ScriptParameters = cfz.S(v...)
	return t
}

// SetSV__ScriptParameters updates property "ScriptParameters".
func (t *AWS_NimbleStudio_StudioComponent) SetSV__ScriptParameters(v ...AWS_NimbleStudio_StudioComponent_ScriptParameterKeyValue) *AWS_NimbleStudio_StudioComponent {
	t.ScriptParameters = cfz.SV(v...)
	return t
}

// Set__StudioId updates property "StudioId".
func (t *AWS_NimbleStudio_StudioComponent) Set__StudioId(v cfz.Expression[string]) *AWS_NimbleStudio_StudioComponent {
	t.StudioId = v
	return t
}

// SetV__StudioId updates property "StudioId".
func (t *AWS_NimbleStudio_StudioComponent) SetV__StudioId(v string) *AWS_NimbleStudio_StudioComponent {
	t.StudioId = cfz.V(v)
	return t
}

// Set__Subtype updates property "Subtype".
func (t *AWS_NimbleStudio_StudioComponent) Set__Subtype(v cfz.Expression[string]) *AWS_NimbleStudio_StudioComponent {
	t.Subtype = v
	return t
}

// SetV__Subtype updates property "Subtype".
func (t *AWS_NimbleStudio_StudioComponent) SetV__Subtype(v string) *AWS_NimbleStudio_StudioComponent {
	t.Subtype = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_NimbleStudio_StudioComponent) Set__Tags(v cfz.ExpressionMap[string]) *AWS_NimbleStudio_StudioComponent {
	t.Tags = v
	return t
}

// SetM__Tags updates property "Tags".
func (t *AWS_NimbleStudio_StudioComponent) SetM__Tags(v ...map[string]cfz.Expression[string]) *AWS_NimbleStudio_StudioComponent {
	t.Tags = cfz.M(v...)
	return t
}

// SetMV__Tags updates property "Tags".
func (t *AWS_NimbleStudio_StudioComponent) SetMV__Tags(v ...map[string]string) *AWS_NimbleStudio_StudioComponent {
	t.Tags = cfz.MV(v...)
	return t
}

// Set__Type updates property "Type".
func (t *AWS_NimbleStudio_StudioComponent) Set__Type(v cfz.Expression[string]) *AWS_NimbleStudio_StudioComponent {
	t.Type = v
	return t
}

// SetV__Type updates property "Type".
func (t *AWS_NimbleStudio_StudioComponent) SetV__Type(v string) *AWS_NimbleStudio_StudioComponent {
	t.Type = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_NimbleStudio_StudioComponent) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__StudioComponentId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: StudioComponentId
func (t *AWS_NimbleStudio_StudioComponent) GetAtt__StudioComponentId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NimbleStudio_StudioComponent__AttributesMap.StudioComponentId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_NimbleStudio_StudioComponent) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__StudioComponentId returns a conventionally configured output for an attribute of this resource.
// Attribute: StudioComponentId
func (t *AWS_NimbleStudio_StudioComponent) GetConventionalOutputAtt__StudioComponentId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStudioComponentId", t.GetAtt__StudioComponentId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_NimbleStudio_StudioComponent) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_NimbleStudio_StudioComponent

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_NimbleStudio_StudioComponent) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
