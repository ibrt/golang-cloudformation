// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_medialive

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_MediaLive_Multiplexprogram)(nil)
	_ cfz.Resource                   = (*AWS_MediaLive_Multiplexprogram)(nil)
)

const (
	// AWS_MediaLive_Multiplexprogram__Type is the CloudFormation type for AWS::MediaLive::Multiplexprogram.
	AWS_MediaLive_Multiplexprogram__Type = "AWS::MediaLive::Multiplexprogram"
)

var (
	// AWS_MediaLive_Multiplexprogram__AttributesMap reports all the CloudFormation attributes for AWS::MediaLive::Multiplexprogram.
	AWS_MediaLive_Multiplexprogram__AttributesMap = struct {
		ChannelId string
	}{
		ChannelId: "ChannelId",
	}

	// AWS_MediaLive_Multiplexprogram__AttributesSlice reports all the CloudFormation attributes for AWS::MediaLive::Multiplexprogram.
	AWS_MediaLive_Multiplexprogram__AttributesSlice = []string{
		AWS_MediaLive_Multiplexprogram__AttributesMap.ChannelId,
	}
)

var (
	// AWS_MediaLive_Multiplexprogram__PropertiesMap reports all the CloudFormation properties for AWS::MediaLive::Multiplexprogram.
	AWS_MediaLive_Multiplexprogram__PropertiesMap = struct {
		MultiplexId              string
		MultiplexProgramSettings string
		PacketIdentifiersMap     string
		PipelineDetails          string
		PreferredChannelPipeline string
		ProgramName              string
	}{
		MultiplexId:              "MultiplexId",
		MultiplexProgramSettings: "MultiplexProgramSettings",
		PacketIdentifiersMap:     "PacketIdentifiersMap",
		PipelineDetails:          "PipelineDetails",
		PreferredChannelPipeline: "PreferredChannelPipeline",
		ProgramName:              "ProgramName",
	}

	// AWS_MediaLive_Multiplexprogram__PropertiesSlice reports all the CloudFormation properties for AWS::MediaLive::Multiplexprogram.
	AWS_MediaLive_Multiplexprogram__PropertiesSlice = []string{
		AWS_MediaLive_Multiplexprogram__PropertiesMap.MultiplexId,
		AWS_MediaLive_Multiplexprogram__PropertiesMap.MultiplexProgramSettings,
		AWS_MediaLive_Multiplexprogram__PropertiesMap.PacketIdentifiersMap,
		AWS_MediaLive_Multiplexprogram__PropertiesMap.PipelineDetails,
		AWS_MediaLive_Multiplexprogram__PropertiesMap.PreferredChannelPipeline,
		AWS_MediaLive_Multiplexprogram__PropertiesMap.ProgramName,
	}
)

// AWS_MediaLive_Multiplexprogram is a binding for AWS::MediaLive::Multiplexprogram.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-multiplexprogram.html
type AWS_MediaLive_Multiplexprogram struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// MultiplexId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-multiplexprogram.html#cfn-medialive-multiplexprogram-multiplexid
	MultiplexId cfz.Expression[string] `json:"MultiplexId,omitempty"`

	// MultiplexProgramSettings is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-multiplexprogram.html#cfn-medialive-multiplexprogram-multiplexprogramsettings
	MultiplexProgramSettings cfz.Expression[AWS_MediaLive_Multiplexprogram_MultiplexProgramSettings] `json:"MultiplexProgramSettings,omitempty"`

	// PacketIdentifiersMap is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-multiplexprogram.html#cfn-medialive-multiplexprogram-packetidentifiersmap
	PacketIdentifiersMap cfz.Expression[AWS_MediaLive_Multiplexprogram_MultiplexProgramPacketIdentifiersMap] `json:"PacketIdentifiersMap,omitempty"`

	// PipelineDetails is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-multiplexprogram.html#cfn-medialive-multiplexprogram-pipelinedetails
	PipelineDetails cfz.ExpressionSlice[AWS_MediaLive_Multiplexprogram_MultiplexProgramPipelineDetail] `json:"PipelineDetails,omitempty"`

	// PreferredChannelPipeline is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-multiplexprogram.html#cfn-medialive-multiplexprogram-preferredchannelpipeline
	PreferredChannelPipeline cfz.Expression[string] `json:"PreferredChannelPipeline,omitempty"`

	// ProgramName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-multiplexprogram.html#cfn-medialive-multiplexprogram-programname
	ProgramName cfz.Expression[string] `json:"ProgramName,omitempty"`
}

// New__AWS_MediaLive_Multiplexprogram initializes a new *AWS_MediaLive_Multiplexprogram.
func New__AWS_MediaLive_Multiplexprogram(logicalName string) *AWS_MediaLive_Multiplexprogram {
	return &AWS_MediaLive_Multiplexprogram{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_MediaLive_Multiplexprogram) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_MediaLive_Multiplexprogram) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_MediaLive_Multiplexprogram) GetType() string {
	return AWS_MediaLive_Multiplexprogram__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_MediaLive_Multiplexprogram) Set__LogicalName(v string) *AWS_MediaLive_Multiplexprogram {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_MediaLive_Multiplexprogram) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_MediaLive_Multiplexprogram {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_MediaLive_Multiplexprogram) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_MediaLive_Multiplexprogram {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_MediaLive_Multiplexprogram) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_MediaLive_Multiplexprogram {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_MediaLive_Multiplexprogram) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_MediaLive_Multiplexprogram {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_MediaLive_Multiplexprogram) Set__RequestedOutputs(v []cfz.Output) *AWS_MediaLive_Multiplexprogram {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_MediaLive_Multiplexprogram) Add__RequestedOutputs(v ...cfz.Output) *AWS_MediaLive_Multiplexprogram {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__MultiplexId updates property "MultiplexId".
func (t *AWS_MediaLive_Multiplexprogram) Set__MultiplexId(v cfz.Expression[string]) *AWS_MediaLive_Multiplexprogram {
	t.MultiplexId = v
	return t
}

// SetV__MultiplexId updates property "MultiplexId".
func (t *AWS_MediaLive_Multiplexprogram) SetV__MultiplexId(v string) *AWS_MediaLive_Multiplexprogram {
	t.MultiplexId = cfz.V(v)
	return t
}

// Set__MultiplexProgramSettings updates property "MultiplexProgramSettings".
func (t *AWS_MediaLive_Multiplexprogram) Set__MultiplexProgramSettings(v cfz.Expression[AWS_MediaLive_Multiplexprogram_MultiplexProgramSettings]) *AWS_MediaLive_Multiplexprogram {
	t.MultiplexProgramSettings = v
	return t
}

// SetV__MultiplexProgramSettings updates property "MultiplexProgramSettings".
func (t *AWS_MediaLive_Multiplexprogram) SetV__MultiplexProgramSettings(v AWS_MediaLive_Multiplexprogram_MultiplexProgramSettings) *AWS_MediaLive_Multiplexprogram {
	t.MultiplexProgramSettings = cfz.V(v)
	return t
}

// Set__PacketIdentifiersMap updates property "PacketIdentifiersMap".
func (t *AWS_MediaLive_Multiplexprogram) Set__PacketIdentifiersMap(v cfz.Expression[AWS_MediaLive_Multiplexprogram_MultiplexProgramPacketIdentifiersMap]) *AWS_MediaLive_Multiplexprogram {
	t.PacketIdentifiersMap = v
	return t
}

// SetV__PacketIdentifiersMap updates property "PacketIdentifiersMap".
func (t *AWS_MediaLive_Multiplexprogram) SetV__PacketIdentifiersMap(v AWS_MediaLive_Multiplexprogram_MultiplexProgramPacketIdentifiersMap) *AWS_MediaLive_Multiplexprogram {
	t.PacketIdentifiersMap = cfz.V(v)
	return t
}

// Set__PipelineDetails updates property "PipelineDetails".
func (t *AWS_MediaLive_Multiplexprogram) Set__PipelineDetails(v cfz.ExpressionSlice[AWS_MediaLive_Multiplexprogram_MultiplexProgramPipelineDetail]) *AWS_MediaLive_Multiplexprogram {
	t.PipelineDetails = v
	return t
}

// SetS__PipelineDetails updates property "PipelineDetails".
func (t *AWS_MediaLive_Multiplexprogram) SetS__PipelineDetails(v ...cfz.Expression[AWS_MediaLive_Multiplexprogram_MultiplexProgramPipelineDetail]) *AWS_MediaLive_Multiplexprogram {
	t.PipelineDetails = cfz.S(v...)
	return t
}

// SetSV__PipelineDetails updates property "PipelineDetails".
func (t *AWS_MediaLive_Multiplexprogram) SetSV__PipelineDetails(v ...AWS_MediaLive_Multiplexprogram_MultiplexProgramPipelineDetail) *AWS_MediaLive_Multiplexprogram {
	t.PipelineDetails = cfz.SV(v...)
	return t
}

// Set__PreferredChannelPipeline updates property "PreferredChannelPipeline".
func (t *AWS_MediaLive_Multiplexprogram) Set__PreferredChannelPipeline(v cfz.Expression[string]) *AWS_MediaLive_Multiplexprogram {
	t.PreferredChannelPipeline = v
	return t
}

// SetV__PreferredChannelPipeline updates property "PreferredChannelPipeline".
func (t *AWS_MediaLive_Multiplexprogram) SetV__PreferredChannelPipeline(v string) *AWS_MediaLive_Multiplexprogram {
	t.PreferredChannelPipeline = cfz.V(v)
	return t
}

// Set__ProgramName updates property "ProgramName".
func (t *AWS_MediaLive_Multiplexprogram) Set__ProgramName(v cfz.Expression[string]) *AWS_MediaLive_Multiplexprogram {
	t.ProgramName = v
	return t
}

// SetV__ProgramName updates property "ProgramName".
func (t *AWS_MediaLive_Multiplexprogram) SetV__ProgramName(v string) *AWS_MediaLive_Multiplexprogram {
	t.ProgramName = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_MediaLive_Multiplexprogram) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__ChannelId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ChannelId
func (t *AWS_MediaLive_Multiplexprogram) GetAtt__ChannelId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_Multiplexprogram__AttributesMap.ChannelId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_MediaLive_Multiplexprogram) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ChannelId returns a conventionally configured output for an attribute of this resource.
// Attribute: ChannelId
func (t *AWS_MediaLive_Multiplexprogram) GetConventionalOutputAtt__ChannelId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttChannelId", t.GetAtt__ChannelId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_MediaLive_Multiplexprogram) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_MediaLive_Multiplexprogram

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_MediaLive_Multiplexprogram) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
