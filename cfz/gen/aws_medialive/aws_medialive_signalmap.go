// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_medialive

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_MediaLive_SignalMap)(nil)
	_ cfz.Resource                   = (*AWS_MediaLive_SignalMap)(nil)
)

const (
	// AWS_MediaLive_SignalMap__Type is the CloudFormation type for AWS::MediaLive::SignalMap.
	AWS_MediaLive_SignalMap__Type = "AWS::MediaLive::SignalMap"
)

var (
	// AWS_MediaLive_SignalMap__AttributesMap reports all the CloudFormation attributes for AWS::MediaLive::SignalMap.
	AWS_MediaLive_SignalMap__AttributesMap = struct {
		Arn                                        string
		CloudWatchAlarmTemplateGroupIds            string
		CreatedAt                                  string
		ErrorMessage                               string
		EventBridgeRuleTemplateGroupIds            string
		Id                                         string
		Identifier                                 string
		LastDiscoveredAt                           string
		LastSuccessfulMonitorDeployment            string
		LastSuccessfulMonitorDeployment_DetailsUri string
		LastSuccessfulMonitorDeployment_Status     string
		ModifiedAt                                 string
		MonitorChangesPendingDeployment            string
		MonitorDeployment                          string
		MonitorDeployment_DetailsUri               string
		MonitorDeployment_ErrorMessage             string
		MonitorDeployment_Status                   string
		Status                                     string
	}{
		Arn:                             "Arn",
		CloudWatchAlarmTemplateGroupIds: "CloudWatchAlarmTemplateGroupIds",
		CreatedAt:                       "CreatedAt",
		ErrorMessage:                    "ErrorMessage",
		EventBridgeRuleTemplateGroupIds: "EventBridgeRuleTemplateGroupIds",
		Id:                              "Id",
		Identifier:                      "Identifier",
		LastDiscoveredAt:                "LastDiscoveredAt",
		LastSuccessfulMonitorDeployment: "LastSuccessfulMonitorDeployment",
		LastSuccessfulMonitorDeployment_DetailsUri: "LastSuccessfulMonitorDeployment.DetailsUri",
		LastSuccessfulMonitorDeployment_Status:     "LastSuccessfulMonitorDeployment.Status",
		ModifiedAt:                                 "ModifiedAt",
		MonitorChangesPendingDeployment:            "MonitorChangesPendingDeployment",
		MonitorDeployment:                          "MonitorDeployment",
		MonitorDeployment_DetailsUri:               "MonitorDeployment.DetailsUri",
		MonitorDeployment_ErrorMessage:             "MonitorDeployment.ErrorMessage",
		MonitorDeployment_Status:                   "MonitorDeployment.Status",
		Status:                                     "Status",
	}

	// AWS_MediaLive_SignalMap__AttributesSlice reports all the CloudFormation attributes for AWS::MediaLive::SignalMap.
	AWS_MediaLive_SignalMap__AttributesSlice = []string{
		AWS_MediaLive_SignalMap__AttributesMap.Arn,
		AWS_MediaLive_SignalMap__AttributesMap.CloudWatchAlarmTemplateGroupIds,
		AWS_MediaLive_SignalMap__AttributesMap.CreatedAt,
		AWS_MediaLive_SignalMap__AttributesMap.ErrorMessage,
		AWS_MediaLive_SignalMap__AttributesMap.EventBridgeRuleTemplateGroupIds,
		AWS_MediaLive_SignalMap__AttributesMap.Id,
		AWS_MediaLive_SignalMap__AttributesMap.Identifier,
		AWS_MediaLive_SignalMap__AttributesMap.LastDiscoveredAt,
		AWS_MediaLive_SignalMap__AttributesMap.LastSuccessfulMonitorDeployment,
		AWS_MediaLive_SignalMap__AttributesMap.LastSuccessfulMonitorDeployment_DetailsUri,
		AWS_MediaLive_SignalMap__AttributesMap.LastSuccessfulMonitorDeployment_Status,
		AWS_MediaLive_SignalMap__AttributesMap.ModifiedAt,
		AWS_MediaLive_SignalMap__AttributesMap.MonitorChangesPendingDeployment,
		AWS_MediaLive_SignalMap__AttributesMap.MonitorDeployment,
		AWS_MediaLive_SignalMap__AttributesMap.MonitorDeployment_DetailsUri,
		AWS_MediaLive_SignalMap__AttributesMap.MonitorDeployment_ErrorMessage,
		AWS_MediaLive_SignalMap__AttributesMap.MonitorDeployment_Status,
		AWS_MediaLive_SignalMap__AttributesMap.Status,
	}
)

var (
	// AWS_MediaLive_SignalMap__PropertiesMap reports all the CloudFormation properties for AWS::MediaLive::SignalMap.
	AWS_MediaLive_SignalMap__PropertiesMap = struct {
		CloudWatchAlarmTemplateGroupIdentifiers string
		Description                             string
		DiscoveryEntryPointArn                  string
		EventBridgeRuleTemplateGroupIdentifiers string
		ForceRediscovery                        string
		Name                                    string
		Tags                                    string
	}{
		CloudWatchAlarmTemplateGroupIdentifiers: "CloudWatchAlarmTemplateGroupIdentifiers",
		Description:                             "Description",
		DiscoveryEntryPointArn:                  "DiscoveryEntryPointArn",
		EventBridgeRuleTemplateGroupIdentifiers: "EventBridgeRuleTemplateGroupIdentifiers",
		ForceRediscovery:                        "ForceRediscovery",
		Name:                                    "Name",
		Tags:                                    "Tags",
	}

	// AWS_MediaLive_SignalMap__PropertiesSlice reports all the CloudFormation properties for AWS::MediaLive::SignalMap.
	AWS_MediaLive_SignalMap__PropertiesSlice = []string{
		AWS_MediaLive_SignalMap__PropertiesMap.CloudWatchAlarmTemplateGroupIdentifiers,
		AWS_MediaLive_SignalMap__PropertiesMap.Description,
		AWS_MediaLive_SignalMap__PropertiesMap.DiscoveryEntryPointArn,
		AWS_MediaLive_SignalMap__PropertiesMap.EventBridgeRuleTemplateGroupIdentifiers,
		AWS_MediaLive_SignalMap__PropertiesMap.ForceRediscovery,
		AWS_MediaLive_SignalMap__PropertiesMap.Name,
		AWS_MediaLive_SignalMap__PropertiesMap.Tags,
	}
)

// AWS_MediaLive_SignalMap is a binding for AWS::MediaLive::SignalMap.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-signalmap.html
type AWS_MediaLive_SignalMap struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// CloudWatchAlarmTemplateGroupIdentifiers is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-signalmap.html#cfn-medialive-signalmap-cloudwatchalarmtemplategroupidentifiers
	CloudWatchAlarmTemplateGroupIdentifiers cfz.ExpressionSlice[string] `json:"CloudWatchAlarmTemplateGroupIdentifiers,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-signalmap.html#cfn-medialive-signalmap-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// DiscoveryEntryPointArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-signalmap.html#cfn-medialive-signalmap-discoveryentrypointarn
	DiscoveryEntryPointArn cfz.Expression[string] `json:"DiscoveryEntryPointArn,omitempty"`

	// EventBridgeRuleTemplateGroupIdentifiers is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-signalmap.html#cfn-medialive-signalmap-eventbridgeruletemplategroupidentifiers
	EventBridgeRuleTemplateGroupIdentifiers cfz.ExpressionSlice[string] `json:"EventBridgeRuleTemplateGroupIdentifiers,omitempty"`

	// ForceRediscovery is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-signalmap.html#cfn-medialive-signalmap-forcerediscovery
	ForceRediscovery cfz.Expression[bool] `json:"ForceRediscovery,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-signalmap.html#cfn-medialive-signalmap-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-signalmap.html#cfn-medialive-signalmap-tags
	Tags cfz.ExpressionMap[string] `json:"Tags,omitempty"`
}

// New__AWS_MediaLive_SignalMap initializes a new *AWS_MediaLive_SignalMap.
func New__AWS_MediaLive_SignalMap(logicalName string) *AWS_MediaLive_SignalMap {
	return &AWS_MediaLive_SignalMap{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_MediaLive_SignalMap) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_MediaLive_SignalMap) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_MediaLive_SignalMap) GetType() string {
	return AWS_MediaLive_SignalMap__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_MediaLive_SignalMap) Set__LogicalName(v string) *AWS_MediaLive_SignalMap {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_MediaLive_SignalMap) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_MediaLive_SignalMap {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_MediaLive_SignalMap) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_MediaLive_SignalMap {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_MediaLive_SignalMap) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_MediaLive_SignalMap {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_MediaLive_SignalMap) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_MediaLive_SignalMap {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_MediaLive_SignalMap) Set__RequestedOutputs(v []cfz.Output) *AWS_MediaLive_SignalMap {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_MediaLive_SignalMap) Add__RequestedOutputs(v ...cfz.Output) *AWS_MediaLive_SignalMap {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__CloudWatchAlarmTemplateGroupIdentifiers updates property "CloudWatchAlarmTemplateGroupIdentifiers".
func (t *AWS_MediaLive_SignalMap) Set__CloudWatchAlarmTemplateGroupIdentifiers(v cfz.ExpressionSlice[string]) *AWS_MediaLive_SignalMap {
	t.CloudWatchAlarmTemplateGroupIdentifiers = v
	return t
}

// SetS__CloudWatchAlarmTemplateGroupIdentifiers updates property "CloudWatchAlarmTemplateGroupIdentifiers".
func (t *AWS_MediaLive_SignalMap) SetS__CloudWatchAlarmTemplateGroupIdentifiers(v ...cfz.Expression[string]) *AWS_MediaLive_SignalMap {
	t.CloudWatchAlarmTemplateGroupIdentifiers = cfz.S(v...)
	return t
}

// SetSV__CloudWatchAlarmTemplateGroupIdentifiers updates property "CloudWatchAlarmTemplateGroupIdentifiers".
func (t *AWS_MediaLive_SignalMap) SetSV__CloudWatchAlarmTemplateGroupIdentifiers(v ...string) *AWS_MediaLive_SignalMap {
	t.CloudWatchAlarmTemplateGroupIdentifiers = cfz.SV(v...)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_MediaLive_SignalMap) Set__Description(v cfz.Expression[string]) *AWS_MediaLive_SignalMap {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_MediaLive_SignalMap) SetV__Description(v string) *AWS_MediaLive_SignalMap {
	t.Description = cfz.V(v)
	return t
}

// Set__DiscoveryEntryPointArn updates property "DiscoveryEntryPointArn".
func (t *AWS_MediaLive_SignalMap) Set__DiscoveryEntryPointArn(v cfz.Expression[string]) *AWS_MediaLive_SignalMap {
	t.DiscoveryEntryPointArn = v
	return t
}

// SetV__DiscoveryEntryPointArn updates property "DiscoveryEntryPointArn".
func (t *AWS_MediaLive_SignalMap) SetV__DiscoveryEntryPointArn(v string) *AWS_MediaLive_SignalMap {
	t.DiscoveryEntryPointArn = cfz.V(v)
	return t
}

// Set__EventBridgeRuleTemplateGroupIdentifiers updates property "EventBridgeRuleTemplateGroupIdentifiers".
func (t *AWS_MediaLive_SignalMap) Set__EventBridgeRuleTemplateGroupIdentifiers(v cfz.ExpressionSlice[string]) *AWS_MediaLive_SignalMap {
	t.EventBridgeRuleTemplateGroupIdentifiers = v
	return t
}

// SetS__EventBridgeRuleTemplateGroupIdentifiers updates property "EventBridgeRuleTemplateGroupIdentifiers".
func (t *AWS_MediaLive_SignalMap) SetS__EventBridgeRuleTemplateGroupIdentifiers(v ...cfz.Expression[string]) *AWS_MediaLive_SignalMap {
	t.EventBridgeRuleTemplateGroupIdentifiers = cfz.S(v...)
	return t
}

// SetSV__EventBridgeRuleTemplateGroupIdentifiers updates property "EventBridgeRuleTemplateGroupIdentifiers".
func (t *AWS_MediaLive_SignalMap) SetSV__EventBridgeRuleTemplateGroupIdentifiers(v ...string) *AWS_MediaLive_SignalMap {
	t.EventBridgeRuleTemplateGroupIdentifiers = cfz.SV(v...)
	return t
}

// Set__ForceRediscovery updates property "ForceRediscovery".
func (t *AWS_MediaLive_SignalMap) Set__ForceRediscovery(v cfz.Expression[bool]) *AWS_MediaLive_SignalMap {
	t.ForceRediscovery = v
	return t
}

// SetV__ForceRediscovery updates property "ForceRediscovery".
func (t *AWS_MediaLive_SignalMap) SetV__ForceRediscovery(v bool) *AWS_MediaLive_SignalMap {
	t.ForceRediscovery = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_MediaLive_SignalMap) Set__Name(v cfz.Expression[string]) *AWS_MediaLive_SignalMap {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_MediaLive_SignalMap) SetV__Name(v string) *AWS_MediaLive_SignalMap {
	t.Name = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_MediaLive_SignalMap) Set__Tags(v cfz.ExpressionMap[string]) *AWS_MediaLive_SignalMap {
	t.Tags = v
	return t
}

// SetM__Tags updates property "Tags".
func (t *AWS_MediaLive_SignalMap) SetM__Tags(v ...map[string]cfz.Expression[string]) *AWS_MediaLive_SignalMap {
	t.Tags = cfz.M(v...)
	return t
}

// SetMV__Tags updates property "Tags".
func (t *AWS_MediaLive_SignalMap) SetMV__Tags(v ...map[string]string) *AWS_MediaLive_SignalMap {
	t.Tags = cfz.MV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_MediaLive_SignalMap) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_MediaLive_SignalMap) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.Arn))
}

// GetAttSlice__CloudWatchAlarmTemplateGroupIds returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CloudWatchAlarmTemplateGroupIds
func (t *AWS_MediaLive_SignalMap) GetAttSlice__CloudWatchAlarmTemplateGroupIds() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.CloudWatchAlarmTemplateGroupIds))
}

// GetAtt__CreatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedAt
func (t *AWS_MediaLive_SignalMap) GetAtt__CreatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.CreatedAt))
}

// GetAtt__ErrorMessage returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ErrorMessage
func (t *AWS_MediaLive_SignalMap) GetAtt__ErrorMessage() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.ErrorMessage))
}

// GetAttSlice__EventBridgeRuleTemplateGroupIds returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: EventBridgeRuleTemplateGroupIds
func (t *AWS_MediaLive_SignalMap) GetAttSlice__EventBridgeRuleTemplateGroupIds() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.EventBridgeRuleTemplateGroupIds))
}

// GetAtt__Id returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Id
func (t *AWS_MediaLive_SignalMap) GetAtt__Id() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.Id))
}

// GetAtt__Identifier returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Identifier
func (t *AWS_MediaLive_SignalMap) GetAtt__Identifier() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.Identifier))
}

// GetAtt__LastDiscoveredAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LastDiscoveredAt
func (t *AWS_MediaLive_SignalMap) GetAtt__LastDiscoveredAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.LastDiscoveredAt))
}

// GetAtt__LastSuccessfulMonitorDeployment returns a $cfz.Expression[AWS_MediaLive_SignalMap_SuccessfulMonitorDeployment] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LastSuccessfulMonitorDeployment
func (t *AWS_MediaLive_SignalMap) GetAtt__LastSuccessfulMonitorDeployment() cfz.Expression[AWS_MediaLive_SignalMap_SuccessfulMonitorDeployment] {
	return cfz.GetAtt[AWS_MediaLive_SignalMap_SuccessfulMonitorDeployment](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.LastSuccessfulMonitorDeployment))
}

// GetAtt__LastSuccessfulMonitorDeployment_DetailsUri returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LastSuccessfulMonitorDeployment.DetailsUri
func (t *AWS_MediaLive_SignalMap) GetAtt__LastSuccessfulMonitorDeployment_DetailsUri() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.LastSuccessfulMonitorDeployment_DetailsUri))
}

// GetAtt__LastSuccessfulMonitorDeployment_Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LastSuccessfulMonitorDeployment.Status
func (t *AWS_MediaLive_SignalMap) GetAtt__LastSuccessfulMonitorDeployment_Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.LastSuccessfulMonitorDeployment_Status))
}

// GetAtt__ModifiedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ModifiedAt
func (t *AWS_MediaLive_SignalMap) GetAtt__ModifiedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.ModifiedAt))
}

// GetAtt__MonitorChangesPendingDeployment returns a $cfz.Expression[bool] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: MonitorChangesPendingDeployment
func (t *AWS_MediaLive_SignalMap) GetAtt__MonitorChangesPendingDeployment() cfz.Expression[bool] {
	return cfz.GetAtt[bool](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.MonitorChangesPendingDeployment))
}

// GetAtt__MonitorDeployment returns a $cfz.Expression[AWS_MediaLive_SignalMap_MonitorDeployment] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: MonitorDeployment
func (t *AWS_MediaLive_SignalMap) GetAtt__MonitorDeployment() cfz.Expression[AWS_MediaLive_SignalMap_MonitorDeployment] {
	return cfz.GetAtt[AWS_MediaLive_SignalMap_MonitorDeployment](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.MonitorDeployment))
}

// GetAtt__MonitorDeployment_DetailsUri returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: MonitorDeployment.DetailsUri
func (t *AWS_MediaLive_SignalMap) GetAtt__MonitorDeployment_DetailsUri() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.MonitorDeployment_DetailsUri))
}

// GetAtt__MonitorDeployment_ErrorMessage returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: MonitorDeployment.ErrorMessage
func (t *AWS_MediaLive_SignalMap) GetAtt__MonitorDeployment_ErrorMessage() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.MonitorDeployment_ErrorMessage))
}

// GetAtt__MonitorDeployment_Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: MonitorDeployment.Status
func (t *AWS_MediaLive_SignalMap) GetAtt__MonitorDeployment_Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.MonitorDeployment_Status))
}

// GetAtt__Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Status
func (t *AWS_MediaLive_SignalMap) GetAtt__Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_SignalMap__AttributesMap.Status))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CloudWatchAlarmTemplateGroupIds returns a conventionally configured output for an attribute of this resource.
// Attribute: CloudWatchAlarmTemplateGroupIds
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__CloudWatchAlarmTemplateGroupIds(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCloudWatchAlarmTemplateGroupIds", t.GetAttSlice__CloudWatchAlarmTemplateGroupIds())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedAt
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__CreatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedAt", t.GetAtt__CreatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ErrorMessage returns a conventionally configured output for an attribute of this resource.
// Attribute: ErrorMessage
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__ErrorMessage(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttErrorMessage", t.GetAtt__ErrorMessage())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__EventBridgeRuleTemplateGroupIds returns a conventionally configured output for an attribute of this resource.
// Attribute: EventBridgeRuleTemplateGroupIds
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__EventBridgeRuleTemplateGroupIds(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttEventBridgeRuleTemplateGroupIds", t.GetAttSlice__EventBridgeRuleTemplateGroupIds())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Id returns a conventionally configured output for an attribute of this resource.
// Attribute: Id
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__Id(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttId", t.GetAtt__Id())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Identifier returns a conventionally configured output for an attribute of this resource.
// Attribute: Identifier
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__Identifier(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIdentifier", t.GetAtt__Identifier())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LastDiscoveredAt returns a conventionally configured output for an attribute of this resource.
// Attribute: LastDiscoveredAt
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__LastDiscoveredAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLastDiscoveredAt", t.GetAtt__LastDiscoveredAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LastSuccessfulMonitorDeployment returns a conventionally configured output for an attribute of this resource.
// Attribute: LastSuccessfulMonitorDeployment
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__LastSuccessfulMonitorDeployment(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLastSuccessfulMonitorDeployment", t.GetAtt__LastSuccessfulMonitorDeployment())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LastSuccessfulMonitorDeployment_DetailsUri returns a conventionally configured output for an attribute of this resource.
// Attribute: LastSuccessfulMonitorDeployment.DetailsUri
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__LastSuccessfulMonitorDeployment_DetailsUri(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLastSuccessfulMonitorDeploymentDetailsUri", t.GetAtt__LastSuccessfulMonitorDeployment_DetailsUri())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LastSuccessfulMonitorDeployment_Status returns a conventionally configured output for an attribute of this resource.
// Attribute: LastSuccessfulMonitorDeployment.Status
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__LastSuccessfulMonitorDeployment_Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLastSuccessfulMonitorDeploymentStatus", t.GetAtt__LastSuccessfulMonitorDeployment_Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ModifiedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: ModifiedAt
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__ModifiedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttModifiedAt", t.GetAtt__ModifiedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__MonitorChangesPendingDeployment returns a conventionally configured output for an attribute of this resource.
// Attribute: MonitorChangesPendingDeployment
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__MonitorChangesPendingDeployment(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttMonitorChangesPendingDeployment", t.GetAtt__MonitorChangesPendingDeployment())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__MonitorDeployment returns a conventionally configured output for an attribute of this resource.
// Attribute: MonitorDeployment
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__MonitorDeployment(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttMonitorDeployment", t.GetAtt__MonitorDeployment())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__MonitorDeployment_DetailsUri returns a conventionally configured output for an attribute of this resource.
// Attribute: MonitorDeployment.DetailsUri
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__MonitorDeployment_DetailsUri(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttMonitorDeploymentDetailsUri", t.GetAtt__MonitorDeployment_DetailsUri())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__MonitorDeployment_ErrorMessage returns a conventionally configured output for an attribute of this resource.
// Attribute: MonitorDeployment.ErrorMessage
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__MonitorDeployment_ErrorMessage(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttMonitorDeploymentErrorMessage", t.GetAtt__MonitorDeployment_ErrorMessage())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__MonitorDeployment_Status returns a conventionally configured output for an attribute of this resource.
// Attribute: MonitorDeployment.Status
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__MonitorDeployment_Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttMonitorDeploymentStatus", t.GetAtt__MonitorDeployment_Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Status returns a conventionally configured output for an attribute of this resource.
// Attribute: Status
func (t *AWS_MediaLive_SignalMap) GetConventionalOutputAtt__Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStatus", t.GetAtt__Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_MediaLive_SignalMap) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_MediaLive_SignalMap

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_MediaLive_SignalMap) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
