// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_medialive

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_MediaLive_Multiplex)(nil)
	_ cfz.Resource                   = (*AWS_MediaLive_Multiplex)(nil)
)

const (
	// AWS_MediaLive_Multiplex__Type is the CloudFormation type for AWS::MediaLive::Multiplex.
	AWS_MediaLive_Multiplex__Type = "AWS::MediaLive::Multiplex"
)

var (
	// AWS_MediaLive_Multiplex__AttributesMap reports all the CloudFormation attributes for AWS::MediaLive::Multiplex.
	AWS_MediaLive_Multiplex__AttributesMap = struct {
		Arn                   string
		Id                    string
		PipelinesRunningCount string
		ProgramCount          string
		State                 string
	}{
		Arn:                   "Arn",
		Id:                    "Id",
		PipelinesRunningCount: "PipelinesRunningCount",
		ProgramCount:          "ProgramCount",
		State:                 "State",
	}

	// AWS_MediaLive_Multiplex__AttributesSlice reports all the CloudFormation attributes for AWS::MediaLive::Multiplex.
	AWS_MediaLive_Multiplex__AttributesSlice = []string{
		AWS_MediaLive_Multiplex__AttributesMap.Arn,
		AWS_MediaLive_Multiplex__AttributesMap.Id,
		AWS_MediaLive_Multiplex__AttributesMap.PipelinesRunningCount,
		AWS_MediaLive_Multiplex__AttributesMap.ProgramCount,
		AWS_MediaLive_Multiplex__AttributesMap.State,
	}
)

var (
	// AWS_MediaLive_Multiplex__PropertiesMap reports all the CloudFormation properties for AWS::MediaLive::Multiplex.
	AWS_MediaLive_Multiplex__PropertiesMap = struct {
		AvailabilityZones string
		Destinations      string
		MultiplexSettings string
		Name              string
		Tags              string
	}{
		AvailabilityZones: "AvailabilityZones",
		Destinations:      "Destinations",
		MultiplexSettings: "MultiplexSettings",
		Name:              "Name",
		Tags:              "Tags",
	}

	// AWS_MediaLive_Multiplex__PropertiesSlice reports all the CloudFormation properties for AWS::MediaLive::Multiplex.
	AWS_MediaLive_Multiplex__PropertiesSlice = []string{
		AWS_MediaLive_Multiplex__PropertiesMap.AvailabilityZones,
		AWS_MediaLive_Multiplex__PropertiesMap.Destinations,
		AWS_MediaLive_Multiplex__PropertiesMap.MultiplexSettings,
		AWS_MediaLive_Multiplex__PropertiesMap.Name,
		AWS_MediaLive_Multiplex__PropertiesMap.Tags,
	}
)

// AWS_MediaLive_Multiplex is a binding for AWS::MediaLive::Multiplex.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-multiplex.html
type AWS_MediaLive_Multiplex struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AvailabilityZones is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-multiplex.html#cfn-medialive-multiplex-availabilityzones
	AvailabilityZones cfz.ExpressionSlice[string] `json:"AvailabilityZones,omitempty"`

	// Destinations is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-multiplex.html#cfn-medialive-multiplex-destinations
	Destinations cfz.ExpressionSlice[AWS_MediaLive_Multiplex_MultiplexOutputDestination] `json:"Destinations,omitempty"`

	// MultiplexSettings is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-multiplex.html#cfn-medialive-multiplex-multiplexsettings
	MultiplexSettings cfz.Expression[AWS_MediaLive_Multiplex_MultiplexSettings] `json:"MultiplexSettings,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-multiplex.html#cfn-medialive-multiplex-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-multiplex.html#cfn-medialive-multiplex-tags
	Tags cfz.ExpressionSlice[AWS_MediaLive_Multiplex_Tags] `json:"Tags,omitempty"`
}

// New__AWS_MediaLive_Multiplex initializes a new *AWS_MediaLive_Multiplex.
func New__AWS_MediaLive_Multiplex(logicalName string) *AWS_MediaLive_Multiplex {
	return &AWS_MediaLive_Multiplex{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_MediaLive_Multiplex) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_MediaLive_Multiplex) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_MediaLive_Multiplex) GetType() string {
	return AWS_MediaLive_Multiplex__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_MediaLive_Multiplex) Set__LogicalName(v string) *AWS_MediaLive_Multiplex {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_MediaLive_Multiplex) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_MediaLive_Multiplex {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_MediaLive_Multiplex) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_MediaLive_Multiplex {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_MediaLive_Multiplex) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_MediaLive_Multiplex {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_MediaLive_Multiplex) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_MediaLive_Multiplex {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_MediaLive_Multiplex) Set__RequestedOutputs(v []cfz.Output) *AWS_MediaLive_Multiplex {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_MediaLive_Multiplex) Add__RequestedOutputs(v ...cfz.Output) *AWS_MediaLive_Multiplex {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AvailabilityZones updates property "AvailabilityZones".
func (t *AWS_MediaLive_Multiplex) Set__AvailabilityZones(v cfz.ExpressionSlice[string]) *AWS_MediaLive_Multiplex {
	t.AvailabilityZones = v
	return t
}

// SetS__AvailabilityZones updates property "AvailabilityZones".
func (t *AWS_MediaLive_Multiplex) SetS__AvailabilityZones(v ...cfz.Expression[string]) *AWS_MediaLive_Multiplex {
	t.AvailabilityZones = cfz.S(v...)
	return t
}

// SetSV__AvailabilityZones updates property "AvailabilityZones".
func (t *AWS_MediaLive_Multiplex) SetSV__AvailabilityZones(v ...string) *AWS_MediaLive_Multiplex {
	t.AvailabilityZones = cfz.SV(v...)
	return t
}

// Set__Destinations updates property "Destinations".
func (t *AWS_MediaLive_Multiplex) Set__Destinations(v cfz.ExpressionSlice[AWS_MediaLive_Multiplex_MultiplexOutputDestination]) *AWS_MediaLive_Multiplex {
	t.Destinations = v
	return t
}

// SetS__Destinations updates property "Destinations".
func (t *AWS_MediaLive_Multiplex) SetS__Destinations(v ...cfz.Expression[AWS_MediaLive_Multiplex_MultiplexOutputDestination]) *AWS_MediaLive_Multiplex {
	t.Destinations = cfz.S(v...)
	return t
}

// SetSV__Destinations updates property "Destinations".
func (t *AWS_MediaLive_Multiplex) SetSV__Destinations(v ...AWS_MediaLive_Multiplex_MultiplexOutputDestination) *AWS_MediaLive_Multiplex {
	t.Destinations = cfz.SV(v...)
	return t
}

// Set__MultiplexSettings updates property "MultiplexSettings".
func (t *AWS_MediaLive_Multiplex) Set__MultiplexSettings(v cfz.Expression[AWS_MediaLive_Multiplex_MultiplexSettings]) *AWS_MediaLive_Multiplex {
	t.MultiplexSettings = v
	return t
}

// SetV__MultiplexSettings updates property "MultiplexSettings".
func (t *AWS_MediaLive_Multiplex) SetV__MultiplexSettings(v AWS_MediaLive_Multiplex_MultiplexSettings) *AWS_MediaLive_Multiplex {
	t.MultiplexSettings = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_MediaLive_Multiplex) Set__Name(v cfz.Expression[string]) *AWS_MediaLive_Multiplex {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_MediaLive_Multiplex) SetV__Name(v string) *AWS_MediaLive_Multiplex {
	t.Name = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_MediaLive_Multiplex) Set__Tags(v cfz.ExpressionSlice[AWS_MediaLive_Multiplex_Tags]) *AWS_MediaLive_Multiplex {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_MediaLive_Multiplex) SetS__Tags(v ...cfz.Expression[AWS_MediaLive_Multiplex_Tags]) *AWS_MediaLive_Multiplex {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_MediaLive_Multiplex) SetSV__Tags(v ...AWS_MediaLive_Multiplex_Tags) *AWS_MediaLive_Multiplex {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_MediaLive_Multiplex) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_MediaLive_Multiplex) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_Multiplex__AttributesMap.Arn))
}

// GetAtt__Id returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Id
func (t *AWS_MediaLive_Multiplex) GetAtt__Id() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_Multiplex__AttributesMap.Id))
}

// GetAtt__PipelinesRunningCount returns a $cfz.Expression[int32] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: PipelinesRunningCount
func (t *AWS_MediaLive_Multiplex) GetAtt__PipelinesRunningCount() cfz.Expression[int32] {
	return cfz.GetAtt[int32](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_Multiplex__AttributesMap.PipelinesRunningCount))
}

// GetAtt__ProgramCount returns a $cfz.Expression[int32] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ProgramCount
func (t *AWS_MediaLive_Multiplex) GetAtt__ProgramCount() cfz.Expression[int32] {
	return cfz.GetAtt[int32](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_Multiplex__AttributesMap.ProgramCount))
}

// GetAtt__State returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: State
func (t *AWS_MediaLive_Multiplex) GetAtt__State() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_Multiplex__AttributesMap.State))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_MediaLive_Multiplex) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_MediaLive_Multiplex) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Id returns a conventionally configured output for an attribute of this resource.
// Attribute: Id
func (t *AWS_MediaLive_Multiplex) GetConventionalOutputAtt__Id(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttId", t.GetAtt__Id())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__PipelinesRunningCount returns a conventionally configured output for an attribute of this resource.
// Attribute: PipelinesRunningCount
func (t *AWS_MediaLive_Multiplex) GetConventionalOutputAtt__PipelinesRunningCount(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttPipelinesRunningCount", t.GetAtt__PipelinesRunningCount())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ProgramCount returns a conventionally configured output for an attribute of this resource.
// Attribute: ProgramCount
func (t *AWS_MediaLive_Multiplex) GetConventionalOutputAtt__ProgramCount(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttProgramCount", t.GetAtt__ProgramCount())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__State returns a conventionally configured output for an attribute of this resource.
// Attribute: State
func (t *AWS_MediaLive_Multiplex) GetConventionalOutputAtt__State(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttState", t.GetAtt__State())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_MediaLive_Multiplex) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_MediaLive_Multiplex

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_MediaLive_Multiplex) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
