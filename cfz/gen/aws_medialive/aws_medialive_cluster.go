// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_medialive

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_MediaLive_Cluster)(nil)
	_ cfz.Resource                   = (*AWS_MediaLive_Cluster)(nil)
)

const (
	// AWS_MediaLive_Cluster__Type is the CloudFormation type for AWS::MediaLive::Cluster.
	AWS_MediaLive_Cluster__Type = "AWS::MediaLive::Cluster"
)

var (
	// AWS_MediaLive_Cluster__AttributesMap reports all the CloudFormation attributes for AWS::MediaLive::Cluster.
	AWS_MediaLive_Cluster__AttributesMap = struct {
		Arn        string
		ChannelIds string
		Id         string
		State      string
	}{
		Arn:        "Arn",
		ChannelIds: "ChannelIds",
		Id:         "Id",
		State:      "State",
	}

	// AWS_MediaLive_Cluster__AttributesSlice reports all the CloudFormation attributes for AWS::MediaLive::Cluster.
	AWS_MediaLive_Cluster__AttributesSlice = []string{
		AWS_MediaLive_Cluster__AttributesMap.Arn,
		AWS_MediaLive_Cluster__AttributesMap.ChannelIds,
		AWS_MediaLive_Cluster__AttributesMap.Id,
		AWS_MediaLive_Cluster__AttributesMap.State,
	}
)

var (
	// AWS_MediaLive_Cluster__PropertiesMap reports all the CloudFormation properties for AWS::MediaLive::Cluster.
	AWS_MediaLive_Cluster__PropertiesMap = struct {
		ClusterType     string
		InstanceRoleArn string
		Name            string
		NetworkSettings string
		Tags            string
	}{
		ClusterType:     "ClusterType",
		InstanceRoleArn: "InstanceRoleArn",
		Name:            "Name",
		NetworkSettings: "NetworkSettings",
		Tags:            "Tags",
	}

	// AWS_MediaLive_Cluster__PropertiesSlice reports all the CloudFormation properties for AWS::MediaLive::Cluster.
	AWS_MediaLive_Cluster__PropertiesSlice = []string{
		AWS_MediaLive_Cluster__PropertiesMap.ClusterType,
		AWS_MediaLive_Cluster__PropertiesMap.InstanceRoleArn,
		AWS_MediaLive_Cluster__PropertiesMap.Name,
		AWS_MediaLive_Cluster__PropertiesMap.NetworkSettings,
		AWS_MediaLive_Cluster__PropertiesMap.Tags,
	}
)

// AWS_MediaLive_Cluster is a binding for AWS::MediaLive::Cluster.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-cluster.html
type AWS_MediaLive_Cluster struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ClusterType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-cluster.html#cfn-medialive-cluster-clustertype
	ClusterType cfz.Expression[string] `json:"ClusterType,omitempty"`

	// InstanceRoleArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-cluster.html#cfn-medialive-cluster-instancerolearn
	InstanceRoleArn cfz.Expression[string] `json:"InstanceRoleArn,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-cluster.html#cfn-medialive-cluster-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// NetworkSettings is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-cluster.html#cfn-medialive-cluster-networksettings
	NetworkSettings cfz.Expression[AWS_MediaLive_Cluster_ClusterNetworkSettings] `json:"NetworkSettings,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-cluster.html#cfn-medialive-cluster-tags
	Tags cfz.ExpressionSlice[AWS_MediaLive_Cluster_Tags] `json:"Tags,omitempty"`
}

// New__AWS_MediaLive_Cluster initializes a new *AWS_MediaLive_Cluster.
func New__AWS_MediaLive_Cluster(logicalName string) *AWS_MediaLive_Cluster {
	return &AWS_MediaLive_Cluster{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_MediaLive_Cluster) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_MediaLive_Cluster) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_MediaLive_Cluster) GetType() string {
	return AWS_MediaLive_Cluster__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_MediaLive_Cluster) Set__LogicalName(v string) *AWS_MediaLive_Cluster {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_MediaLive_Cluster) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_MediaLive_Cluster {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_MediaLive_Cluster) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_MediaLive_Cluster {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_MediaLive_Cluster) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_MediaLive_Cluster {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_MediaLive_Cluster) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_MediaLive_Cluster {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_MediaLive_Cluster) Set__RequestedOutputs(v []cfz.Output) *AWS_MediaLive_Cluster {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_MediaLive_Cluster) Add__RequestedOutputs(v ...cfz.Output) *AWS_MediaLive_Cluster {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ClusterType updates property "ClusterType".
func (t *AWS_MediaLive_Cluster) Set__ClusterType(v cfz.Expression[string]) *AWS_MediaLive_Cluster {
	t.ClusterType = v
	return t
}

// SetV__ClusterType updates property "ClusterType".
func (t *AWS_MediaLive_Cluster) SetV__ClusterType(v string) *AWS_MediaLive_Cluster {
	t.ClusterType = cfz.V(v)
	return t
}

// Set__InstanceRoleArn updates property "InstanceRoleArn".
func (t *AWS_MediaLive_Cluster) Set__InstanceRoleArn(v cfz.Expression[string]) *AWS_MediaLive_Cluster {
	t.InstanceRoleArn = v
	return t
}

// SetV__InstanceRoleArn updates property "InstanceRoleArn".
func (t *AWS_MediaLive_Cluster) SetV__InstanceRoleArn(v string) *AWS_MediaLive_Cluster {
	t.InstanceRoleArn = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_MediaLive_Cluster) Set__Name(v cfz.Expression[string]) *AWS_MediaLive_Cluster {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_MediaLive_Cluster) SetV__Name(v string) *AWS_MediaLive_Cluster {
	t.Name = cfz.V(v)
	return t
}

// Set__NetworkSettings updates property "NetworkSettings".
func (t *AWS_MediaLive_Cluster) Set__NetworkSettings(v cfz.Expression[AWS_MediaLive_Cluster_ClusterNetworkSettings]) *AWS_MediaLive_Cluster {
	t.NetworkSettings = v
	return t
}

// SetV__NetworkSettings updates property "NetworkSettings".
func (t *AWS_MediaLive_Cluster) SetV__NetworkSettings(v AWS_MediaLive_Cluster_ClusterNetworkSettings) *AWS_MediaLive_Cluster {
	t.NetworkSettings = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_MediaLive_Cluster) Set__Tags(v cfz.ExpressionSlice[AWS_MediaLive_Cluster_Tags]) *AWS_MediaLive_Cluster {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_MediaLive_Cluster) SetS__Tags(v ...cfz.Expression[AWS_MediaLive_Cluster_Tags]) *AWS_MediaLive_Cluster {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_MediaLive_Cluster) SetSV__Tags(v ...AWS_MediaLive_Cluster_Tags) *AWS_MediaLive_Cluster {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_MediaLive_Cluster) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_MediaLive_Cluster) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_Cluster__AttributesMap.Arn))
}

// GetAttSlice__ChannelIds returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ChannelIds
func (t *AWS_MediaLive_Cluster) GetAttSlice__ChannelIds() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_Cluster__AttributesMap.ChannelIds))
}

// GetAtt__Id returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Id
func (t *AWS_MediaLive_Cluster) GetAtt__Id() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_Cluster__AttributesMap.Id))
}

// GetAtt__State returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: State
func (t *AWS_MediaLive_Cluster) GetAtt__State() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaLive_Cluster__AttributesMap.State))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_MediaLive_Cluster) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_MediaLive_Cluster) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ChannelIds returns a conventionally configured output for an attribute of this resource.
// Attribute: ChannelIds
func (t *AWS_MediaLive_Cluster) GetConventionalOutputAtt__ChannelIds(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttChannelIds", t.GetAttSlice__ChannelIds())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Id returns a conventionally configured output for an attribute of this resource.
// Attribute: Id
func (t *AWS_MediaLive_Cluster) GetConventionalOutputAtt__Id(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttId", t.GetAtt__Id())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__State returns a conventionally configured output for an attribute of this resource.
// Attribute: State
func (t *AWS_MediaLive_Cluster) GetConventionalOutputAtt__State(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttState", t.GetAtt__State())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_MediaLive_Cluster) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_MediaLive_Cluster

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_MediaLive_Cluster) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
