// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_lightsail

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Lightsail_LoadBalancer)(nil)
	_ cfz.Resource                   = (*AWS_Lightsail_LoadBalancer)(nil)
)

const (
	// AWS_Lightsail_LoadBalancer__Type is the CloudFormation type for AWS::Lightsail::LoadBalancer.
	AWS_Lightsail_LoadBalancer__Type = "AWS::Lightsail::LoadBalancer"
)

var (
	// AWS_Lightsail_LoadBalancer__AttributesMap reports all the CloudFormation attributes for AWS::Lightsail::LoadBalancer.
	AWS_Lightsail_LoadBalancer__AttributesMap = struct {
		LoadBalancerArn string
	}{
		LoadBalancerArn: "LoadBalancerArn",
	}

	// AWS_Lightsail_LoadBalancer__AttributesSlice reports all the CloudFormation attributes for AWS::Lightsail::LoadBalancer.
	AWS_Lightsail_LoadBalancer__AttributesSlice = []string{
		AWS_Lightsail_LoadBalancer__AttributesMap.LoadBalancerArn,
	}
)

var (
	// AWS_Lightsail_LoadBalancer__PropertiesMap reports all the CloudFormation properties for AWS::Lightsail::LoadBalancer.
	AWS_Lightsail_LoadBalancer__PropertiesMap = struct {
		AttachedInstances                        string
		HealthCheckPath                          string
		InstancePort                             string
		IpAddressType                            string
		LoadBalancerName                         string
		SessionStickinessEnabled                 string
		SessionStickinessLBCookieDurationSeconds string
		Tags                                     string
		TlsPolicyName                            string
	}{
		AttachedInstances:                        "AttachedInstances",
		HealthCheckPath:                          "HealthCheckPath",
		InstancePort:                             "InstancePort",
		IpAddressType:                            "IpAddressType",
		LoadBalancerName:                         "LoadBalancerName",
		SessionStickinessEnabled:                 "SessionStickinessEnabled",
		SessionStickinessLBCookieDurationSeconds: "SessionStickinessLBCookieDurationSeconds",
		Tags:                                     "Tags",
		TlsPolicyName:                            "TlsPolicyName",
	}

	// AWS_Lightsail_LoadBalancer__PropertiesSlice reports all the CloudFormation properties for AWS::Lightsail::LoadBalancer.
	AWS_Lightsail_LoadBalancer__PropertiesSlice = []string{
		AWS_Lightsail_LoadBalancer__PropertiesMap.AttachedInstances,
		AWS_Lightsail_LoadBalancer__PropertiesMap.HealthCheckPath,
		AWS_Lightsail_LoadBalancer__PropertiesMap.InstancePort,
		AWS_Lightsail_LoadBalancer__PropertiesMap.IpAddressType,
		AWS_Lightsail_LoadBalancer__PropertiesMap.LoadBalancerName,
		AWS_Lightsail_LoadBalancer__PropertiesMap.SessionStickinessEnabled,
		AWS_Lightsail_LoadBalancer__PropertiesMap.SessionStickinessLBCookieDurationSeconds,
		AWS_Lightsail_LoadBalancer__PropertiesMap.Tags,
		AWS_Lightsail_LoadBalancer__PropertiesMap.TlsPolicyName,
	}
)

// AWS_Lightsail_LoadBalancer is a binding for AWS::Lightsail::LoadBalancer.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancer.html
type AWS_Lightsail_LoadBalancer struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AttachedInstances is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancer.html#cfn-lightsail-loadbalancer-attachedinstances
	AttachedInstances cfz.ExpressionSlice[string] `json:"AttachedInstances,omitempty"`

	// HealthCheckPath is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancer.html#cfn-lightsail-loadbalancer-healthcheckpath
	HealthCheckPath cfz.Expression[string] `json:"HealthCheckPath,omitempty"`

	// InstancePort is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancer.html#cfn-lightsail-loadbalancer-instanceport
	InstancePort cfz.Expression[int32] `json:"InstancePort,omitempty"`

	// IpAddressType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancer.html#cfn-lightsail-loadbalancer-ipaddresstype
	IpAddressType cfz.Expression[string] `json:"IpAddressType,omitempty"`

	// LoadBalancerName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancer.html#cfn-lightsail-loadbalancer-loadbalancername
	LoadBalancerName cfz.Expression[string] `json:"LoadBalancerName,omitempty"`

	// SessionStickinessEnabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancer.html#cfn-lightsail-loadbalancer-sessionstickinessenabled
	SessionStickinessEnabled cfz.Expression[bool] `json:"SessionStickinessEnabled,omitempty"`

	// SessionStickinessLBCookieDurationSeconds is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancer.html#cfn-lightsail-loadbalancer-sessionstickinesslbcookiedurationseconds
	SessionStickinessLBCookieDurationSeconds cfz.Expression[string] `json:"SessionStickinessLBCookieDurationSeconds,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancer.html#cfn-lightsail-loadbalancer-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// TlsPolicyName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancer.html#cfn-lightsail-loadbalancer-tlspolicyname
	TlsPolicyName cfz.Expression[string] `json:"TlsPolicyName,omitempty"`
}

// New__AWS_Lightsail_LoadBalancer initializes a new *AWS_Lightsail_LoadBalancer.
func New__AWS_Lightsail_LoadBalancer(logicalName string) *AWS_Lightsail_LoadBalancer {
	return &AWS_Lightsail_LoadBalancer{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Lightsail_LoadBalancer) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Lightsail_LoadBalancer) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Lightsail_LoadBalancer) GetType() string {
	return AWS_Lightsail_LoadBalancer__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Lightsail_LoadBalancer) Set__LogicalName(v string) *AWS_Lightsail_LoadBalancer {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Lightsail_LoadBalancer) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Lightsail_LoadBalancer {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Lightsail_LoadBalancer) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Lightsail_LoadBalancer {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Lightsail_LoadBalancer) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Lightsail_LoadBalancer {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Lightsail_LoadBalancer) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Lightsail_LoadBalancer {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Lightsail_LoadBalancer) Set__RequestedOutputs(v []cfz.Output) *AWS_Lightsail_LoadBalancer {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Lightsail_LoadBalancer) Add__RequestedOutputs(v ...cfz.Output) *AWS_Lightsail_LoadBalancer {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AttachedInstances updates property "AttachedInstances".
func (t *AWS_Lightsail_LoadBalancer) Set__AttachedInstances(v cfz.ExpressionSlice[string]) *AWS_Lightsail_LoadBalancer {
	t.AttachedInstances = v
	return t
}

// SetS__AttachedInstances updates property "AttachedInstances".
func (t *AWS_Lightsail_LoadBalancer) SetS__AttachedInstances(v ...cfz.Expression[string]) *AWS_Lightsail_LoadBalancer {
	t.AttachedInstances = cfz.S(v...)
	return t
}

// SetSV__AttachedInstances updates property "AttachedInstances".
func (t *AWS_Lightsail_LoadBalancer) SetSV__AttachedInstances(v ...string) *AWS_Lightsail_LoadBalancer {
	t.AttachedInstances = cfz.SV(v...)
	return t
}

// Set__HealthCheckPath updates property "HealthCheckPath".
func (t *AWS_Lightsail_LoadBalancer) Set__HealthCheckPath(v cfz.Expression[string]) *AWS_Lightsail_LoadBalancer {
	t.HealthCheckPath = v
	return t
}

// SetV__HealthCheckPath updates property "HealthCheckPath".
func (t *AWS_Lightsail_LoadBalancer) SetV__HealthCheckPath(v string) *AWS_Lightsail_LoadBalancer {
	t.HealthCheckPath = cfz.V(v)
	return t
}

// Set__InstancePort updates property "InstancePort".
func (t *AWS_Lightsail_LoadBalancer) Set__InstancePort(v cfz.Expression[int32]) *AWS_Lightsail_LoadBalancer {
	t.InstancePort = v
	return t
}

// SetV__InstancePort updates property "InstancePort".
func (t *AWS_Lightsail_LoadBalancer) SetV__InstancePort(v int32) *AWS_Lightsail_LoadBalancer {
	t.InstancePort = cfz.V(v)
	return t
}

// Set__IpAddressType updates property "IpAddressType".
func (t *AWS_Lightsail_LoadBalancer) Set__IpAddressType(v cfz.Expression[string]) *AWS_Lightsail_LoadBalancer {
	t.IpAddressType = v
	return t
}

// SetV__IpAddressType updates property "IpAddressType".
func (t *AWS_Lightsail_LoadBalancer) SetV__IpAddressType(v string) *AWS_Lightsail_LoadBalancer {
	t.IpAddressType = cfz.V(v)
	return t
}

// Set__LoadBalancerName updates property "LoadBalancerName".
func (t *AWS_Lightsail_LoadBalancer) Set__LoadBalancerName(v cfz.Expression[string]) *AWS_Lightsail_LoadBalancer {
	t.LoadBalancerName = v
	return t
}

// SetV__LoadBalancerName updates property "LoadBalancerName".
func (t *AWS_Lightsail_LoadBalancer) SetV__LoadBalancerName(v string) *AWS_Lightsail_LoadBalancer {
	t.LoadBalancerName = cfz.V(v)
	return t
}

// Set__SessionStickinessEnabled updates property "SessionStickinessEnabled".
func (t *AWS_Lightsail_LoadBalancer) Set__SessionStickinessEnabled(v cfz.Expression[bool]) *AWS_Lightsail_LoadBalancer {
	t.SessionStickinessEnabled = v
	return t
}

// SetV__SessionStickinessEnabled updates property "SessionStickinessEnabled".
func (t *AWS_Lightsail_LoadBalancer) SetV__SessionStickinessEnabled(v bool) *AWS_Lightsail_LoadBalancer {
	t.SessionStickinessEnabled = cfz.V(v)
	return t
}

// Set__SessionStickinessLBCookieDurationSeconds updates property "SessionStickinessLBCookieDurationSeconds".
func (t *AWS_Lightsail_LoadBalancer) Set__SessionStickinessLBCookieDurationSeconds(v cfz.Expression[string]) *AWS_Lightsail_LoadBalancer {
	t.SessionStickinessLBCookieDurationSeconds = v
	return t
}

// SetV__SessionStickinessLBCookieDurationSeconds updates property "SessionStickinessLBCookieDurationSeconds".
func (t *AWS_Lightsail_LoadBalancer) SetV__SessionStickinessLBCookieDurationSeconds(v string) *AWS_Lightsail_LoadBalancer {
	t.SessionStickinessLBCookieDurationSeconds = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_Lightsail_LoadBalancer) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_Lightsail_LoadBalancer {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_Lightsail_LoadBalancer) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_Lightsail_LoadBalancer {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_Lightsail_LoadBalancer) SetSV__Tags(v ...cfz.Tag) *AWS_Lightsail_LoadBalancer {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__TlsPolicyName updates property "TlsPolicyName".
func (t *AWS_Lightsail_LoadBalancer) Set__TlsPolicyName(v cfz.Expression[string]) *AWS_Lightsail_LoadBalancer {
	t.TlsPolicyName = v
	return t
}

// SetV__TlsPolicyName updates property "TlsPolicyName".
func (t *AWS_Lightsail_LoadBalancer) SetV__TlsPolicyName(v string) *AWS_Lightsail_LoadBalancer {
	t.TlsPolicyName = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Lightsail_LoadBalancer) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__LoadBalancerArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LoadBalancerArn
func (t *AWS_Lightsail_LoadBalancer) GetAtt__LoadBalancerArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_LoadBalancer__AttributesMap.LoadBalancerArn))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Lightsail_LoadBalancer) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LoadBalancerArn returns a conventionally configured output for an attribute of this resource.
// Attribute: LoadBalancerArn
func (t *AWS_Lightsail_LoadBalancer) GetConventionalOutputAtt__LoadBalancerArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLoadBalancerArn", t.GetAtt__LoadBalancerArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Lightsail_LoadBalancer) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Lightsail_LoadBalancer

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Lightsail_LoadBalancer) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
