// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_lightsail

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Lightsail_Instance)(nil)
	_ cfz.Resource                   = (*AWS_Lightsail_Instance)(nil)
)

const (
	// AWS_Lightsail_Instance__Type is the CloudFormation type for AWS::Lightsail::Instance.
	AWS_Lightsail_Instance__Type = "AWS::Lightsail::Instance"
)

var (
	// AWS_Lightsail_Instance__AttributesMap reports all the CloudFormation attributes for AWS::Lightsail::Instance.
	AWS_Lightsail_Instance__AttributesMap = struct {
		Hardware_CpuCount                              string
		Hardware_RamSizeInGb                           string
		InstanceArn                                    string
		Ipv6Addresses                                  string
		IsStaticIp                                     string
		Location_AvailabilityZone                      string
		Location_RegionName                            string
		Networking_MonthlyTransfer_GbPerMonthAllocated string
		PrivateIpAddress                               string
		PublicIpAddress                                string
		ResourceType                                   string
		SshKeyName                                     string
		State_Code                                     string
		State_Name                                     string
		SupportCode                                    string
		UserName                                       string
	}{
		Hardware_CpuCount:         "Hardware.CpuCount",
		Hardware_RamSizeInGb:      "Hardware.RamSizeInGb",
		InstanceArn:               "InstanceArn",
		Ipv6Addresses:             "Ipv6Addresses",
		IsStaticIp:                "IsStaticIp",
		Location_AvailabilityZone: "Location.AvailabilityZone",
		Location_RegionName:       "Location.RegionName",
		Networking_MonthlyTransfer_GbPerMonthAllocated: "Networking.MonthlyTransfer.GbPerMonthAllocated",
		PrivateIpAddress: "PrivateIpAddress",
		PublicIpAddress:  "PublicIpAddress",
		ResourceType:     "ResourceType",
		SshKeyName:       "SshKeyName",
		State_Code:       "State.Code",
		State_Name:       "State.Name",
		SupportCode:      "SupportCode",
		UserName:         "UserName",
	}

	// AWS_Lightsail_Instance__AttributesSlice reports all the CloudFormation attributes for AWS::Lightsail::Instance.
	AWS_Lightsail_Instance__AttributesSlice = []string{
		AWS_Lightsail_Instance__AttributesMap.Hardware_CpuCount,
		AWS_Lightsail_Instance__AttributesMap.Hardware_RamSizeInGb,
		AWS_Lightsail_Instance__AttributesMap.InstanceArn,
		AWS_Lightsail_Instance__AttributesMap.Ipv6Addresses,
		AWS_Lightsail_Instance__AttributesMap.IsStaticIp,
		AWS_Lightsail_Instance__AttributesMap.Location_AvailabilityZone,
		AWS_Lightsail_Instance__AttributesMap.Location_RegionName,
		AWS_Lightsail_Instance__AttributesMap.Networking_MonthlyTransfer_GbPerMonthAllocated,
		AWS_Lightsail_Instance__AttributesMap.PrivateIpAddress,
		AWS_Lightsail_Instance__AttributesMap.PublicIpAddress,
		AWS_Lightsail_Instance__AttributesMap.ResourceType,
		AWS_Lightsail_Instance__AttributesMap.SshKeyName,
		AWS_Lightsail_Instance__AttributesMap.State_Code,
		AWS_Lightsail_Instance__AttributesMap.State_Name,
		AWS_Lightsail_Instance__AttributesMap.SupportCode,
		AWS_Lightsail_Instance__AttributesMap.UserName,
	}
)

var (
	// AWS_Lightsail_Instance__PropertiesMap reports all the CloudFormation properties for AWS::Lightsail::Instance.
	AWS_Lightsail_Instance__PropertiesMap = struct {
		AddOns           string
		AvailabilityZone string
		BlueprintId      string
		BundleId         string
		Hardware         string
		InstanceName     string
		KeyPairName      string
		Location         string
		Networking       string
		State            string
		Tags             string
		UserData         string
	}{
		AddOns:           "AddOns",
		AvailabilityZone: "AvailabilityZone",
		BlueprintId:      "BlueprintId",
		BundleId:         "BundleId",
		Hardware:         "Hardware",
		InstanceName:     "InstanceName",
		KeyPairName:      "KeyPairName",
		Location:         "Location",
		Networking:       "Networking",
		State:            "State",
		Tags:             "Tags",
		UserData:         "UserData",
	}

	// AWS_Lightsail_Instance__PropertiesSlice reports all the CloudFormation properties for AWS::Lightsail::Instance.
	AWS_Lightsail_Instance__PropertiesSlice = []string{
		AWS_Lightsail_Instance__PropertiesMap.AddOns,
		AWS_Lightsail_Instance__PropertiesMap.AvailabilityZone,
		AWS_Lightsail_Instance__PropertiesMap.BlueprintId,
		AWS_Lightsail_Instance__PropertiesMap.BundleId,
		AWS_Lightsail_Instance__PropertiesMap.Hardware,
		AWS_Lightsail_Instance__PropertiesMap.InstanceName,
		AWS_Lightsail_Instance__PropertiesMap.KeyPairName,
		AWS_Lightsail_Instance__PropertiesMap.Location,
		AWS_Lightsail_Instance__PropertiesMap.Networking,
		AWS_Lightsail_Instance__PropertiesMap.State,
		AWS_Lightsail_Instance__PropertiesMap.Tags,
		AWS_Lightsail_Instance__PropertiesMap.UserData,
	}
)

// AWS_Lightsail_Instance is a binding for AWS::Lightsail::Instance.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-instance.html
type AWS_Lightsail_Instance struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AddOns is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-instance.html#cfn-lightsail-instance-addons
	AddOns cfz.ExpressionSlice[AWS_Lightsail_Instance_AddOn] `json:"AddOns,omitempty"`

	// AvailabilityZone is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-instance.html#cfn-lightsail-instance-availabilityzone
	AvailabilityZone cfz.Expression[string] `json:"AvailabilityZone,omitempty"`

	// BlueprintId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-instance.html#cfn-lightsail-instance-blueprintid
	BlueprintId cfz.Expression[string] `json:"BlueprintId,omitempty"`

	// BundleId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-instance.html#cfn-lightsail-instance-bundleid
	BundleId cfz.Expression[string] `json:"BundleId,omitempty"`

	// Hardware is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-instance.html#cfn-lightsail-instance-hardware
	Hardware cfz.Expression[AWS_Lightsail_Instance_Hardware] `json:"Hardware,omitempty"`

	// InstanceName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-instance.html#cfn-lightsail-instance-instancename
	InstanceName cfz.Expression[string] `json:"InstanceName,omitempty"`

	// KeyPairName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-instance.html#cfn-lightsail-instance-keypairname
	KeyPairName cfz.Expression[string] `json:"KeyPairName,omitempty"`

	// Location is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-instance.html#cfn-lightsail-instance-location
	Location cfz.Expression[AWS_Lightsail_Instance_Location] `json:"Location,omitempty"`

	// Networking is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-instance.html#cfn-lightsail-instance-networking
	Networking cfz.Expression[AWS_Lightsail_Instance_Networking] `json:"Networking,omitempty"`

	// State is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-instance.html#cfn-lightsail-instance-state
	State cfz.Expression[AWS_Lightsail_Instance_State] `json:"State,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-instance.html#cfn-lightsail-instance-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// UserData is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-instance.html#cfn-lightsail-instance-userdata
	UserData cfz.Expression[string] `json:"UserData,omitempty"`
}

// New__AWS_Lightsail_Instance initializes a new *AWS_Lightsail_Instance.
func New__AWS_Lightsail_Instance(logicalName string) *AWS_Lightsail_Instance {
	return &AWS_Lightsail_Instance{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Lightsail_Instance) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Lightsail_Instance) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Lightsail_Instance) GetType() string {
	return AWS_Lightsail_Instance__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Lightsail_Instance) Set__LogicalName(v string) *AWS_Lightsail_Instance {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Lightsail_Instance) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Lightsail_Instance {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Lightsail_Instance) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Lightsail_Instance {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Lightsail_Instance) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Lightsail_Instance {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Lightsail_Instance) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Lightsail_Instance {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Lightsail_Instance) Set__RequestedOutputs(v []cfz.Output) *AWS_Lightsail_Instance {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Lightsail_Instance) Add__RequestedOutputs(v ...cfz.Output) *AWS_Lightsail_Instance {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AddOns updates property "AddOns".
func (t *AWS_Lightsail_Instance) Set__AddOns(v cfz.ExpressionSlice[AWS_Lightsail_Instance_AddOn]) *AWS_Lightsail_Instance {
	t.AddOns = v
	return t
}

// SetS__AddOns updates property "AddOns".
func (t *AWS_Lightsail_Instance) SetS__AddOns(v ...cfz.Expression[AWS_Lightsail_Instance_AddOn]) *AWS_Lightsail_Instance {
	t.AddOns = cfz.S(v...)
	return t
}

// SetSV__AddOns updates property "AddOns".
func (t *AWS_Lightsail_Instance) SetSV__AddOns(v ...AWS_Lightsail_Instance_AddOn) *AWS_Lightsail_Instance {
	t.AddOns = cfz.SV(v...)
	return t
}

// Set__AvailabilityZone updates property "AvailabilityZone".
func (t *AWS_Lightsail_Instance) Set__AvailabilityZone(v cfz.Expression[string]) *AWS_Lightsail_Instance {
	t.AvailabilityZone = v
	return t
}

// SetV__AvailabilityZone updates property "AvailabilityZone".
func (t *AWS_Lightsail_Instance) SetV__AvailabilityZone(v string) *AWS_Lightsail_Instance {
	t.AvailabilityZone = cfz.V(v)
	return t
}

// Set__BlueprintId updates property "BlueprintId".
func (t *AWS_Lightsail_Instance) Set__BlueprintId(v cfz.Expression[string]) *AWS_Lightsail_Instance {
	t.BlueprintId = v
	return t
}

// SetV__BlueprintId updates property "BlueprintId".
func (t *AWS_Lightsail_Instance) SetV__BlueprintId(v string) *AWS_Lightsail_Instance {
	t.BlueprintId = cfz.V(v)
	return t
}

// Set__BundleId updates property "BundleId".
func (t *AWS_Lightsail_Instance) Set__BundleId(v cfz.Expression[string]) *AWS_Lightsail_Instance {
	t.BundleId = v
	return t
}

// SetV__BundleId updates property "BundleId".
func (t *AWS_Lightsail_Instance) SetV__BundleId(v string) *AWS_Lightsail_Instance {
	t.BundleId = cfz.V(v)
	return t
}

// Set__Hardware updates property "Hardware".
func (t *AWS_Lightsail_Instance) Set__Hardware(v cfz.Expression[AWS_Lightsail_Instance_Hardware]) *AWS_Lightsail_Instance {
	t.Hardware = v
	return t
}

// SetV__Hardware updates property "Hardware".
func (t *AWS_Lightsail_Instance) SetV__Hardware(v AWS_Lightsail_Instance_Hardware) *AWS_Lightsail_Instance {
	t.Hardware = cfz.V(v)
	return t
}

// Set__InstanceName updates property "InstanceName".
func (t *AWS_Lightsail_Instance) Set__InstanceName(v cfz.Expression[string]) *AWS_Lightsail_Instance {
	t.InstanceName = v
	return t
}

// SetV__InstanceName updates property "InstanceName".
func (t *AWS_Lightsail_Instance) SetV__InstanceName(v string) *AWS_Lightsail_Instance {
	t.InstanceName = cfz.V(v)
	return t
}

// Set__KeyPairName updates property "KeyPairName".
func (t *AWS_Lightsail_Instance) Set__KeyPairName(v cfz.Expression[string]) *AWS_Lightsail_Instance {
	t.KeyPairName = v
	return t
}

// SetV__KeyPairName updates property "KeyPairName".
func (t *AWS_Lightsail_Instance) SetV__KeyPairName(v string) *AWS_Lightsail_Instance {
	t.KeyPairName = cfz.V(v)
	return t
}

// Set__Location updates property "Location".
func (t *AWS_Lightsail_Instance) Set__Location(v cfz.Expression[AWS_Lightsail_Instance_Location]) *AWS_Lightsail_Instance {
	t.Location = v
	return t
}

// SetV__Location updates property "Location".
func (t *AWS_Lightsail_Instance) SetV__Location(v AWS_Lightsail_Instance_Location) *AWS_Lightsail_Instance {
	t.Location = cfz.V(v)
	return t
}

// Set__Networking updates property "Networking".
func (t *AWS_Lightsail_Instance) Set__Networking(v cfz.Expression[AWS_Lightsail_Instance_Networking]) *AWS_Lightsail_Instance {
	t.Networking = v
	return t
}

// SetV__Networking updates property "Networking".
func (t *AWS_Lightsail_Instance) SetV__Networking(v AWS_Lightsail_Instance_Networking) *AWS_Lightsail_Instance {
	t.Networking = cfz.V(v)
	return t
}

// Set__State updates property "State".
func (t *AWS_Lightsail_Instance) Set__State(v cfz.Expression[AWS_Lightsail_Instance_State]) *AWS_Lightsail_Instance {
	t.State = v
	return t
}

// SetV__State updates property "State".
func (t *AWS_Lightsail_Instance) SetV__State(v AWS_Lightsail_Instance_State) *AWS_Lightsail_Instance {
	t.State = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_Lightsail_Instance) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_Lightsail_Instance {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_Lightsail_Instance) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_Lightsail_Instance {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_Lightsail_Instance) SetSV__Tags(v ...cfz.Tag) *AWS_Lightsail_Instance {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__UserData updates property "UserData".
func (t *AWS_Lightsail_Instance) Set__UserData(v cfz.Expression[string]) *AWS_Lightsail_Instance {
	t.UserData = v
	return t
}

// SetV__UserData updates property "UserData".
func (t *AWS_Lightsail_Instance) SetV__UserData(v string) *AWS_Lightsail_Instance {
	t.UserData = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Lightsail_Instance) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Hardware_CpuCount returns a $cfz.Expression[int32] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Hardware.CpuCount
func (t *AWS_Lightsail_Instance) GetAtt__Hardware_CpuCount() cfz.Expression[int32] {
	return cfz.GetAtt[int32](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.Hardware_CpuCount))
}

// GetAtt__Hardware_RamSizeInGb returns a $cfz.Expression[int32] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Hardware.RamSizeInGb
func (t *AWS_Lightsail_Instance) GetAtt__Hardware_RamSizeInGb() cfz.Expression[int32] {
	return cfz.GetAtt[int32](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.Hardware_RamSizeInGb))
}

// GetAtt__InstanceArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: InstanceArn
func (t *AWS_Lightsail_Instance) GetAtt__InstanceArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.InstanceArn))
}

// GetAttSlice__Ipv6Addresses returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Ipv6Addresses
func (t *AWS_Lightsail_Instance) GetAttSlice__Ipv6Addresses() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.Ipv6Addresses))
}

// GetAtt__IsStaticIp returns a $cfz.Expression[bool] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: IsStaticIp
func (t *AWS_Lightsail_Instance) GetAtt__IsStaticIp() cfz.Expression[bool] {
	return cfz.GetAtt[bool](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.IsStaticIp))
}

// GetAtt__Location_AvailabilityZone returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Location.AvailabilityZone
func (t *AWS_Lightsail_Instance) GetAtt__Location_AvailabilityZone() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.Location_AvailabilityZone))
}

// GetAtt__Location_RegionName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Location.RegionName
func (t *AWS_Lightsail_Instance) GetAtt__Location_RegionName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.Location_RegionName))
}

// GetAtt__Networking_MonthlyTransfer_GbPerMonthAllocated returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Networking.MonthlyTransfer.GbPerMonthAllocated
func (t *AWS_Lightsail_Instance) GetAtt__Networking_MonthlyTransfer_GbPerMonthAllocated() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.Networking_MonthlyTransfer_GbPerMonthAllocated))
}

// GetAtt__PrivateIpAddress returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: PrivateIpAddress
func (t *AWS_Lightsail_Instance) GetAtt__PrivateIpAddress() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.PrivateIpAddress))
}

// GetAtt__PublicIpAddress returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: PublicIpAddress
func (t *AWS_Lightsail_Instance) GetAtt__PublicIpAddress() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.PublicIpAddress))
}

// GetAtt__ResourceType returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ResourceType
func (t *AWS_Lightsail_Instance) GetAtt__ResourceType() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.ResourceType))
}

// GetAtt__SshKeyName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: SshKeyName
func (t *AWS_Lightsail_Instance) GetAtt__SshKeyName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.SshKeyName))
}

// GetAtt__State_Code returns a $cfz.Expression[int32] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: State.Code
func (t *AWS_Lightsail_Instance) GetAtt__State_Code() cfz.Expression[int32] {
	return cfz.GetAtt[int32](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.State_Code))
}

// GetAtt__State_Name returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: State.Name
func (t *AWS_Lightsail_Instance) GetAtt__State_Name() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.State_Name))
}

// GetAtt__SupportCode returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: SupportCode
func (t *AWS_Lightsail_Instance) GetAtt__SupportCode() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.SupportCode))
}

// GetAtt__UserName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: UserName
func (t *AWS_Lightsail_Instance) GetAtt__UserName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Instance__AttributesMap.UserName))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Lightsail_Instance) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Hardware_CpuCount returns a conventionally configured output for an attribute of this resource.
// Attribute: Hardware.CpuCount
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__Hardware_CpuCount(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttHardwareCpuCount", t.GetAtt__Hardware_CpuCount())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Hardware_RamSizeInGb returns a conventionally configured output for an attribute of this resource.
// Attribute: Hardware.RamSizeInGb
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__Hardware_RamSizeInGb(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttHardwareRamSizeInGb", t.GetAtt__Hardware_RamSizeInGb())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__InstanceArn returns a conventionally configured output for an attribute of this resource.
// Attribute: InstanceArn
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__InstanceArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttInstanceArn", t.GetAtt__InstanceArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Ipv6Addresses returns a conventionally configured output for an attribute of this resource.
// Attribute: Ipv6Addresses
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__Ipv6Addresses(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIpv6Addresses", t.GetAttSlice__Ipv6Addresses())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__IsStaticIp returns a conventionally configured output for an attribute of this resource.
// Attribute: IsStaticIp
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__IsStaticIp(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIsStaticIp", t.GetAtt__IsStaticIp())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Location_AvailabilityZone returns a conventionally configured output for an attribute of this resource.
// Attribute: Location.AvailabilityZone
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__Location_AvailabilityZone(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLocationAvailabilityZone", t.GetAtt__Location_AvailabilityZone())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Location_RegionName returns a conventionally configured output for an attribute of this resource.
// Attribute: Location.RegionName
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__Location_RegionName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLocationRegionName", t.GetAtt__Location_RegionName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Networking_MonthlyTransfer_GbPerMonthAllocated returns a conventionally configured output for an attribute of this resource.
// Attribute: Networking.MonthlyTransfer.GbPerMonthAllocated
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__Networking_MonthlyTransfer_GbPerMonthAllocated(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNetworkingMonthlyTransferGbPerMonthAllocated", t.GetAtt__Networking_MonthlyTransfer_GbPerMonthAllocated())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__PrivateIpAddress returns a conventionally configured output for an attribute of this resource.
// Attribute: PrivateIpAddress
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__PrivateIpAddress(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttPrivateIpAddress", t.GetAtt__PrivateIpAddress())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__PublicIpAddress returns a conventionally configured output for an attribute of this resource.
// Attribute: PublicIpAddress
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__PublicIpAddress(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttPublicIpAddress", t.GetAtt__PublicIpAddress())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ResourceType returns a conventionally configured output for an attribute of this resource.
// Attribute: ResourceType
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__ResourceType(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttResourceType", t.GetAtt__ResourceType())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__SshKeyName returns a conventionally configured output for an attribute of this resource.
// Attribute: SshKeyName
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__SshKeyName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSshKeyName", t.GetAtt__SshKeyName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__State_Code returns a conventionally configured output for an attribute of this resource.
// Attribute: State.Code
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__State_Code(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStateCode", t.GetAtt__State_Code())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__State_Name returns a conventionally configured output for an attribute of this resource.
// Attribute: State.Name
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__State_Name(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStateName", t.GetAtt__State_Name())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__SupportCode returns a conventionally configured output for an attribute of this resource.
// Attribute: SupportCode
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__SupportCode(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSupportCode", t.GetAtt__SupportCode())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__UserName returns a conventionally configured output for an attribute of this resource.
// Attribute: UserName
func (t *AWS_Lightsail_Instance) GetConventionalOutputAtt__UserName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttUserName", t.GetAtt__UserName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Lightsail_Instance) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Lightsail_Instance

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Lightsail_Instance) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
