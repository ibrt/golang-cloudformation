// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_lightsail

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Lightsail_Disk)(nil)
	_ cfz.Resource                   = (*AWS_Lightsail_Disk)(nil)
)

const (
	// AWS_Lightsail_Disk__Type is the CloudFormation type for AWS::Lightsail::Disk.
	AWS_Lightsail_Disk__Type = "AWS::Lightsail::Disk"
)

var (
	// AWS_Lightsail_Disk__AttributesMap reports all the CloudFormation attributes for AWS::Lightsail::Disk.
	AWS_Lightsail_Disk__AttributesMap = struct {
		AttachedTo                string
		AttachmentState           string
		DiskArn                   string
		Iops                      string
		IsAttached                string
		Location_AvailabilityZone string
		Location_RegionName       string
		Path                      string
		ResourceType              string
		State                     string
		SupportCode               string
	}{
		AttachedTo:                "AttachedTo",
		AttachmentState:           "AttachmentState",
		DiskArn:                   "DiskArn",
		Iops:                      "Iops",
		IsAttached:                "IsAttached",
		Location_AvailabilityZone: "Location.AvailabilityZone",
		Location_RegionName:       "Location.RegionName",
		Path:                      "Path",
		ResourceType:              "ResourceType",
		State:                     "State",
		SupportCode:               "SupportCode",
	}

	// AWS_Lightsail_Disk__AttributesSlice reports all the CloudFormation attributes for AWS::Lightsail::Disk.
	AWS_Lightsail_Disk__AttributesSlice = []string{
		AWS_Lightsail_Disk__AttributesMap.AttachedTo,
		AWS_Lightsail_Disk__AttributesMap.AttachmentState,
		AWS_Lightsail_Disk__AttributesMap.DiskArn,
		AWS_Lightsail_Disk__AttributesMap.Iops,
		AWS_Lightsail_Disk__AttributesMap.IsAttached,
		AWS_Lightsail_Disk__AttributesMap.Location_AvailabilityZone,
		AWS_Lightsail_Disk__AttributesMap.Location_RegionName,
		AWS_Lightsail_Disk__AttributesMap.Path,
		AWS_Lightsail_Disk__AttributesMap.ResourceType,
		AWS_Lightsail_Disk__AttributesMap.State,
		AWS_Lightsail_Disk__AttributesMap.SupportCode,
	}
)

var (
	// AWS_Lightsail_Disk__PropertiesMap reports all the CloudFormation properties for AWS::Lightsail::Disk.
	AWS_Lightsail_Disk__PropertiesMap = struct {
		AddOns           string
		AvailabilityZone string
		DiskName         string
		Location         string
		SizeInGb         string
		Tags             string
	}{
		AddOns:           "AddOns",
		AvailabilityZone: "AvailabilityZone",
		DiskName:         "DiskName",
		Location:         "Location",
		SizeInGb:         "SizeInGb",
		Tags:             "Tags",
	}

	// AWS_Lightsail_Disk__PropertiesSlice reports all the CloudFormation properties for AWS::Lightsail::Disk.
	AWS_Lightsail_Disk__PropertiesSlice = []string{
		AWS_Lightsail_Disk__PropertiesMap.AddOns,
		AWS_Lightsail_Disk__PropertiesMap.AvailabilityZone,
		AWS_Lightsail_Disk__PropertiesMap.DiskName,
		AWS_Lightsail_Disk__PropertiesMap.Location,
		AWS_Lightsail_Disk__PropertiesMap.SizeInGb,
		AWS_Lightsail_Disk__PropertiesMap.Tags,
	}
)

// AWS_Lightsail_Disk is a binding for AWS::Lightsail::Disk.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-disk.html
type AWS_Lightsail_Disk struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AddOns is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-disk.html#cfn-lightsail-disk-addons
	AddOns cfz.ExpressionSlice[AWS_Lightsail_Disk_AddOn] `json:"AddOns,omitempty"`

	// AvailabilityZone is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-disk.html#cfn-lightsail-disk-availabilityzone
	AvailabilityZone cfz.Expression[string] `json:"AvailabilityZone,omitempty"`

	// DiskName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-disk.html#cfn-lightsail-disk-diskname
	DiskName cfz.Expression[string] `json:"DiskName,omitempty"`

	// Location is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-disk.html#cfn-lightsail-disk-location
	Location cfz.Expression[AWS_Lightsail_Disk_Location] `json:"Location,omitempty"`

	// SizeInGb is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-disk.html#cfn-lightsail-disk-sizeingb
	SizeInGb cfz.Expression[int32] `json:"SizeInGb,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-disk.html#cfn-lightsail-disk-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_Lightsail_Disk initializes a new *AWS_Lightsail_Disk.
func New__AWS_Lightsail_Disk(logicalName string) *AWS_Lightsail_Disk {
	return &AWS_Lightsail_Disk{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Lightsail_Disk) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Lightsail_Disk) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Lightsail_Disk) GetType() string {
	return AWS_Lightsail_Disk__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Lightsail_Disk) Set__LogicalName(v string) *AWS_Lightsail_Disk {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Lightsail_Disk) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Lightsail_Disk {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Lightsail_Disk) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Lightsail_Disk {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Lightsail_Disk) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Lightsail_Disk {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Lightsail_Disk) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Lightsail_Disk {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Lightsail_Disk) Set__RequestedOutputs(v []cfz.Output) *AWS_Lightsail_Disk {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Lightsail_Disk) Add__RequestedOutputs(v ...cfz.Output) *AWS_Lightsail_Disk {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AddOns updates property "AddOns".
func (t *AWS_Lightsail_Disk) Set__AddOns(v cfz.ExpressionSlice[AWS_Lightsail_Disk_AddOn]) *AWS_Lightsail_Disk {
	t.AddOns = v
	return t
}

// SetS__AddOns updates property "AddOns".
func (t *AWS_Lightsail_Disk) SetS__AddOns(v ...cfz.Expression[AWS_Lightsail_Disk_AddOn]) *AWS_Lightsail_Disk {
	t.AddOns = cfz.S(v...)
	return t
}

// SetSV__AddOns updates property "AddOns".
func (t *AWS_Lightsail_Disk) SetSV__AddOns(v ...AWS_Lightsail_Disk_AddOn) *AWS_Lightsail_Disk {
	t.AddOns = cfz.SV(v...)
	return t
}

// Set__AvailabilityZone updates property "AvailabilityZone".
func (t *AWS_Lightsail_Disk) Set__AvailabilityZone(v cfz.Expression[string]) *AWS_Lightsail_Disk {
	t.AvailabilityZone = v
	return t
}

// SetV__AvailabilityZone updates property "AvailabilityZone".
func (t *AWS_Lightsail_Disk) SetV__AvailabilityZone(v string) *AWS_Lightsail_Disk {
	t.AvailabilityZone = cfz.V(v)
	return t
}

// Set__DiskName updates property "DiskName".
func (t *AWS_Lightsail_Disk) Set__DiskName(v cfz.Expression[string]) *AWS_Lightsail_Disk {
	t.DiskName = v
	return t
}

// SetV__DiskName updates property "DiskName".
func (t *AWS_Lightsail_Disk) SetV__DiskName(v string) *AWS_Lightsail_Disk {
	t.DiskName = cfz.V(v)
	return t
}

// Set__Location updates property "Location".
func (t *AWS_Lightsail_Disk) Set__Location(v cfz.Expression[AWS_Lightsail_Disk_Location]) *AWS_Lightsail_Disk {
	t.Location = v
	return t
}

// SetV__Location updates property "Location".
func (t *AWS_Lightsail_Disk) SetV__Location(v AWS_Lightsail_Disk_Location) *AWS_Lightsail_Disk {
	t.Location = cfz.V(v)
	return t
}

// Set__SizeInGb updates property "SizeInGb".
func (t *AWS_Lightsail_Disk) Set__SizeInGb(v cfz.Expression[int32]) *AWS_Lightsail_Disk {
	t.SizeInGb = v
	return t
}

// SetV__SizeInGb updates property "SizeInGb".
func (t *AWS_Lightsail_Disk) SetV__SizeInGb(v int32) *AWS_Lightsail_Disk {
	t.SizeInGb = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_Lightsail_Disk) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_Lightsail_Disk {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_Lightsail_Disk) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_Lightsail_Disk {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_Lightsail_Disk) SetSV__Tags(v ...cfz.Tag) *AWS_Lightsail_Disk {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Lightsail_Disk) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__AttachedTo returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AttachedTo
func (t *AWS_Lightsail_Disk) GetAtt__AttachedTo() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Disk__AttributesMap.AttachedTo))
}

// GetAtt__AttachmentState returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AttachmentState
func (t *AWS_Lightsail_Disk) GetAtt__AttachmentState() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Disk__AttributesMap.AttachmentState))
}

// GetAtt__DiskArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DiskArn
func (t *AWS_Lightsail_Disk) GetAtt__DiskArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Disk__AttributesMap.DiskArn))
}

// GetAtt__Iops returns a $cfz.Expression[int32] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Iops
func (t *AWS_Lightsail_Disk) GetAtt__Iops() cfz.Expression[int32] {
	return cfz.GetAtt[int32](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Disk__AttributesMap.Iops))
}

// GetAtt__IsAttached returns a $cfz.Expression[bool] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: IsAttached
func (t *AWS_Lightsail_Disk) GetAtt__IsAttached() cfz.Expression[bool] {
	return cfz.GetAtt[bool](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Disk__AttributesMap.IsAttached))
}

// GetAtt__Location_AvailabilityZone returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Location.AvailabilityZone
func (t *AWS_Lightsail_Disk) GetAtt__Location_AvailabilityZone() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Disk__AttributesMap.Location_AvailabilityZone))
}

// GetAtt__Location_RegionName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Location.RegionName
func (t *AWS_Lightsail_Disk) GetAtt__Location_RegionName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Disk__AttributesMap.Location_RegionName))
}

// GetAtt__Path returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Path
func (t *AWS_Lightsail_Disk) GetAtt__Path() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Disk__AttributesMap.Path))
}

// GetAtt__ResourceType returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ResourceType
func (t *AWS_Lightsail_Disk) GetAtt__ResourceType() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Disk__AttributesMap.ResourceType))
}

// GetAtt__State returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: State
func (t *AWS_Lightsail_Disk) GetAtt__State() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Disk__AttributesMap.State))
}

// GetAtt__SupportCode returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: SupportCode
func (t *AWS_Lightsail_Disk) GetAtt__SupportCode() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Disk__AttributesMap.SupportCode))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Lightsail_Disk) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AttachedTo returns a conventionally configured output for an attribute of this resource.
// Attribute: AttachedTo
func (t *AWS_Lightsail_Disk) GetConventionalOutputAtt__AttachedTo(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAttachedTo", t.GetAtt__AttachedTo())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AttachmentState returns a conventionally configured output for an attribute of this resource.
// Attribute: AttachmentState
func (t *AWS_Lightsail_Disk) GetConventionalOutputAtt__AttachmentState(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAttachmentState", t.GetAtt__AttachmentState())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DiskArn returns a conventionally configured output for an attribute of this resource.
// Attribute: DiskArn
func (t *AWS_Lightsail_Disk) GetConventionalOutputAtt__DiskArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDiskArn", t.GetAtt__DiskArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Iops returns a conventionally configured output for an attribute of this resource.
// Attribute: Iops
func (t *AWS_Lightsail_Disk) GetConventionalOutputAtt__Iops(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIops", t.GetAtt__Iops())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__IsAttached returns a conventionally configured output for an attribute of this resource.
// Attribute: IsAttached
func (t *AWS_Lightsail_Disk) GetConventionalOutputAtt__IsAttached(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIsAttached", t.GetAtt__IsAttached())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Location_AvailabilityZone returns a conventionally configured output for an attribute of this resource.
// Attribute: Location.AvailabilityZone
func (t *AWS_Lightsail_Disk) GetConventionalOutputAtt__Location_AvailabilityZone(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLocationAvailabilityZone", t.GetAtt__Location_AvailabilityZone())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Location_RegionName returns a conventionally configured output for an attribute of this resource.
// Attribute: Location.RegionName
func (t *AWS_Lightsail_Disk) GetConventionalOutputAtt__Location_RegionName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLocationRegionName", t.GetAtt__Location_RegionName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Path returns a conventionally configured output for an attribute of this resource.
// Attribute: Path
func (t *AWS_Lightsail_Disk) GetConventionalOutputAtt__Path(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttPath", t.GetAtt__Path())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ResourceType returns a conventionally configured output for an attribute of this resource.
// Attribute: ResourceType
func (t *AWS_Lightsail_Disk) GetConventionalOutputAtt__ResourceType(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttResourceType", t.GetAtt__ResourceType())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__State returns a conventionally configured output for an attribute of this resource.
// Attribute: State
func (t *AWS_Lightsail_Disk) GetConventionalOutputAtt__State(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttState", t.GetAtt__State())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__SupportCode returns a conventionally configured output for an attribute of this resource.
// Attribute: SupportCode
func (t *AWS_Lightsail_Disk) GetConventionalOutputAtt__SupportCode(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSupportCode", t.GetAtt__SupportCode())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Lightsail_Disk) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Lightsail_Disk

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Lightsail_Disk) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
