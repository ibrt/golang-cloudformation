// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_lightsail

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Lightsail_Distribution)(nil)
	_ cfz.Resource                   = (*AWS_Lightsail_Distribution)(nil)
)

const (
	// AWS_Lightsail_Distribution__Type is the CloudFormation type for AWS::Lightsail::Distribution.
	AWS_Lightsail_Distribution__Type = "AWS::Lightsail::Distribution"
)

var (
	// AWS_Lightsail_Distribution__AttributesMap reports all the CloudFormation attributes for AWS::Lightsail::Distribution.
	AWS_Lightsail_Distribution__AttributesMap = struct {
		AbleToUpdateBundle string
		DistributionArn    string
		Status             string
	}{
		AbleToUpdateBundle: "AbleToUpdateBundle",
		DistributionArn:    "DistributionArn",
		Status:             "Status",
	}

	// AWS_Lightsail_Distribution__AttributesSlice reports all the CloudFormation attributes for AWS::Lightsail::Distribution.
	AWS_Lightsail_Distribution__AttributesSlice = []string{
		AWS_Lightsail_Distribution__AttributesMap.AbleToUpdateBundle,
		AWS_Lightsail_Distribution__AttributesMap.DistributionArn,
		AWS_Lightsail_Distribution__AttributesMap.Status,
	}
)

var (
	// AWS_Lightsail_Distribution__PropertiesMap reports all the CloudFormation properties for AWS::Lightsail::Distribution.
	AWS_Lightsail_Distribution__PropertiesMap = struct {
		BundleId              string
		CacheBehaviorSettings string
		CacheBehaviors        string
		CertificateName       string
		DefaultCacheBehavior  string
		DistributionName      string
		IpAddressType         string
		IsEnabled             string
		Origin                string
		Tags                  string
	}{
		BundleId:              "BundleId",
		CacheBehaviorSettings: "CacheBehaviorSettings",
		CacheBehaviors:        "CacheBehaviors",
		CertificateName:       "CertificateName",
		DefaultCacheBehavior:  "DefaultCacheBehavior",
		DistributionName:      "DistributionName",
		IpAddressType:         "IpAddressType",
		IsEnabled:             "IsEnabled",
		Origin:                "Origin",
		Tags:                  "Tags",
	}

	// AWS_Lightsail_Distribution__PropertiesSlice reports all the CloudFormation properties for AWS::Lightsail::Distribution.
	AWS_Lightsail_Distribution__PropertiesSlice = []string{
		AWS_Lightsail_Distribution__PropertiesMap.BundleId,
		AWS_Lightsail_Distribution__PropertiesMap.CacheBehaviorSettings,
		AWS_Lightsail_Distribution__PropertiesMap.CacheBehaviors,
		AWS_Lightsail_Distribution__PropertiesMap.CertificateName,
		AWS_Lightsail_Distribution__PropertiesMap.DefaultCacheBehavior,
		AWS_Lightsail_Distribution__PropertiesMap.DistributionName,
		AWS_Lightsail_Distribution__PropertiesMap.IpAddressType,
		AWS_Lightsail_Distribution__PropertiesMap.IsEnabled,
		AWS_Lightsail_Distribution__PropertiesMap.Origin,
		AWS_Lightsail_Distribution__PropertiesMap.Tags,
	}
)

// AWS_Lightsail_Distribution is a binding for AWS::Lightsail::Distribution.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-distribution.html
type AWS_Lightsail_Distribution struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// BundleId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-distribution.html#cfn-lightsail-distribution-bundleid
	BundleId cfz.Expression[string] `json:"BundleId,omitempty"`

	// CacheBehaviorSettings is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-distribution.html#cfn-lightsail-distribution-cachebehaviorsettings
	CacheBehaviorSettings cfz.Expression[AWS_Lightsail_Distribution_CacheSettings] `json:"CacheBehaviorSettings,omitempty"`

	// CacheBehaviors is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-distribution.html#cfn-lightsail-distribution-cachebehaviors
	CacheBehaviors cfz.ExpressionSlice[AWS_Lightsail_Distribution_CacheBehaviorPerPath] `json:"CacheBehaviors,omitempty"`

	// CertificateName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-distribution.html#cfn-lightsail-distribution-certificatename
	CertificateName cfz.Expression[string] `json:"CertificateName,omitempty"`

	// DefaultCacheBehavior is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-distribution.html#cfn-lightsail-distribution-defaultcachebehavior
	DefaultCacheBehavior cfz.Expression[AWS_Lightsail_Distribution_CacheBehavior] `json:"DefaultCacheBehavior,omitempty"`

	// DistributionName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-distribution.html#cfn-lightsail-distribution-distributionname
	DistributionName cfz.Expression[string] `json:"DistributionName,omitempty"`

	// IpAddressType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-distribution.html#cfn-lightsail-distribution-ipaddresstype
	IpAddressType cfz.Expression[string] `json:"IpAddressType,omitempty"`

	// IsEnabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-distribution.html#cfn-lightsail-distribution-isenabled
	IsEnabled cfz.Expression[bool] `json:"IsEnabled,omitempty"`

	// Origin is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-distribution.html#cfn-lightsail-distribution-origin
	Origin cfz.Expression[AWS_Lightsail_Distribution_InputOrigin] `json:"Origin,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-distribution.html#cfn-lightsail-distribution-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_Lightsail_Distribution initializes a new *AWS_Lightsail_Distribution.
func New__AWS_Lightsail_Distribution(logicalName string) *AWS_Lightsail_Distribution {
	return &AWS_Lightsail_Distribution{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Lightsail_Distribution) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Lightsail_Distribution) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Lightsail_Distribution) GetType() string {
	return AWS_Lightsail_Distribution__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Lightsail_Distribution) Set__LogicalName(v string) *AWS_Lightsail_Distribution {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Lightsail_Distribution) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Lightsail_Distribution {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Lightsail_Distribution) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Lightsail_Distribution {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Lightsail_Distribution) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Lightsail_Distribution {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Lightsail_Distribution) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Lightsail_Distribution {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Lightsail_Distribution) Set__RequestedOutputs(v []cfz.Output) *AWS_Lightsail_Distribution {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Lightsail_Distribution) Add__RequestedOutputs(v ...cfz.Output) *AWS_Lightsail_Distribution {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__BundleId updates property "BundleId".
func (t *AWS_Lightsail_Distribution) Set__BundleId(v cfz.Expression[string]) *AWS_Lightsail_Distribution {
	t.BundleId = v
	return t
}

// SetV__BundleId updates property "BundleId".
func (t *AWS_Lightsail_Distribution) SetV__BundleId(v string) *AWS_Lightsail_Distribution {
	t.BundleId = cfz.V(v)
	return t
}

// Set__CacheBehaviorSettings updates property "CacheBehaviorSettings".
func (t *AWS_Lightsail_Distribution) Set__CacheBehaviorSettings(v cfz.Expression[AWS_Lightsail_Distribution_CacheSettings]) *AWS_Lightsail_Distribution {
	t.CacheBehaviorSettings = v
	return t
}

// SetV__CacheBehaviorSettings updates property "CacheBehaviorSettings".
func (t *AWS_Lightsail_Distribution) SetV__CacheBehaviorSettings(v AWS_Lightsail_Distribution_CacheSettings) *AWS_Lightsail_Distribution {
	t.CacheBehaviorSettings = cfz.V(v)
	return t
}

// Set__CacheBehaviors updates property "CacheBehaviors".
func (t *AWS_Lightsail_Distribution) Set__CacheBehaviors(v cfz.ExpressionSlice[AWS_Lightsail_Distribution_CacheBehaviorPerPath]) *AWS_Lightsail_Distribution {
	t.CacheBehaviors = v
	return t
}

// SetS__CacheBehaviors updates property "CacheBehaviors".
func (t *AWS_Lightsail_Distribution) SetS__CacheBehaviors(v ...cfz.Expression[AWS_Lightsail_Distribution_CacheBehaviorPerPath]) *AWS_Lightsail_Distribution {
	t.CacheBehaviors = cfz.S(v...)
	return t
}

// SetSV__CacheBehaviors updates property "CacheBehaviors".
func (t *AWS_Lightsail_Distribution) SetSV__CacheBehaviors(v ...AWS_Lightsail_Distribution_CacheBehaviorPerPath) *AWS_Lightsail_Distribution {
	t.CacheBehaviors = cfz.SV(v...)
	return t
}

// Set__CertificateName updates property "CertificateName".
func (t *AWS_Lightsail_Distribution) Set__CertificateName(v cfz.Expression[string]) *AWS_Lightsail_Distribution {
	t.CertificateName = v
	return t
}

// SetV__CertificateName updates property "CertificateName".
func (t *AWS_Lightsail_Distribution) SetV__CertificateName(v string) *AWS_Lightsail_Distribution {
	t.CertificateName = cfz.V(v)
	return t
}

// Set__DefaultCacheBehavior updates property "DefaultCacheBehavior".
func (t *AWS_Lightsail_Distribution) Set__DefaultCacheBehavior(v cfz.Expression[AWS_Lightsail_Distribution_CacheBehavior]) *AWS_Lightsail_Distribution {
	t.DefaultCacheBehavior = v
	return t
}

// SetV__DefaultCacheBehavior updates property "DefaultCacheBehavior".
func (t *AWS_Lightsail_Distribution) SetV__DefaultCacheBehavior(v AWS_Lightsail_Distribution_CacheBehavior) *AWS_Lightsail_Distribution {
	t.DefaultCacheBehavior = cfz.V(v)
	return t
}

// Set__DistributionName updates property "DistributionName".
func (t *AWS_Lightsail_Distribution) Set__DistributionName(v cfz.Expression[string]) *AWS_Lightsail_Distribution {
	t.DistributionName = v
	return t
}

// SetV__DistributionName updates property "DistributionName".
func (t *AWS_Lightsail_Distribution) SetV__DistributionName(v string) *AWS_Lightsail_Distribution {
	t.DistributionName = cfz.V(v)
	return t
}

// Set__IpAddressType updates property "IpAddressType".
func (t *AWS_Lightsail_Distribution) Set__IpAddressType(v cfz.Expression[string]) *AWS_Lightsail_Distribution {
	t.IpAddressType = v
	return t
}

// SetV__IpAddressType updates property "IpAddressType".
func (t *AWS_Lightsail_Distribution) SetV__IpAddressType(v string) *AWS_Lightsail_Distribution {
	t.IpAddressType = cfz.V(v)
	return t
}

// Set__IsEnabled updates property "IsEnabled".
func (t *AWS_Lightsail_Distribution) Set__IsEnabled(v cfz.Expression[bool]) *AWS_Lightsail_Distribution {
	t.IsEnabled = v
	return t
}

// SetV__IsEnabled updates property "IsEnabled".
func (t *AWS_Lightsail_Distribution) SetV__IsEnabled(v bool) *AWS_Lightsail_Distribution {
	t.IsEnabled = cfz.V(v)
	return t
}

// Set__Origin updates property "Origin".
func (t *AWS_Lightsail_Distribution) Set__Origin(v cfz.Expression[AWS_Lightsail_Distribution_InputOrigin]) *AWS_Lightsail_Distribution {
	t.Origin = v
	return t
}

// SetV__Origin updates property "Origin".
func (t *AWS_Lightsail_Distribution) SetV__Origin(v AWS_Lightsail_Distribution_InputOrigin) *AWS_Lightsail_Distribution {
	t.Origin = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_Lightsail_Distribution) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_Lightsail_Distribution {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_Lightsail_Distribution) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_Lightsail_Distribution {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_Lightsail_Distribution) SetSV__Tags(v ...cfz.Tag) *AWS_Lightsail_Distribution {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Lightsail_Distribution) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__AbleToUpdateBundle returns a $cfz.Expression[bool] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AbleToUpdateBundle
func (t *AWS_Lightsail_Distribution) GetAtt__AbleToUpdateBundle() cfz.Expression[bool] {
	return cfz.GetAtt[bool](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Distribution__AttributesMap.AbleToUpdateBundle))
}

// GetAtt__DistributionArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DistributionArn
func (t *AWS_Lightsail_Distribution) GetAtt__DistributionArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Distribution__AttributesMap.DistributionArn))
}

// GetAtt__Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Status
func (t *AWS_Lightsail_Distribution) GetAtt__Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_Distribution__AttributesMap.Status))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Lightsail_Distribution) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AbleToUpdateBundle returns a conventionally configured output for an attribute of this resource.
// Attribute: AbleToUpdateBundle
func (t *AWS_Lightsail_Distribution) GetConventionalOutputAtt__AbleToUpdateBundle(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAbleToUpdateBundle", t.GetAtt__AbleToUpdateBundle())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DistributionArn returns a conventionally configured output for an attribute of this resource.
// Attribute: DistributionArn
func (t *AWS_Lightsail_Distribution) GetConventionalOutputAtt__DistributionArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDistributionArn", t.GetAtt__DistributionArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Status returns a conventionally configured output for an attribute of this resource.
// Attribute: Status
func (t *AWS_Lightsail_Distribution) GetConventionalOutputAtt__Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStatus", t.GetAtt__Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Lightsail_Distribution) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Lightsail_Distribution

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Lightsail_Distribution) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
