// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_lightsail

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Lightsail_LoadBalancerTlsCertificate)(nil)
	_ cfz.Resource                   = (*AWS_Lightsail_LoadBalancerTlsCertificate)(nil)
)

const (
	// AWS_Lightsail_LoadBalancerTlsCertificate__Type is the CloudFormation type for AWS::Lightsail::LoadBalancerTlsCertificate.
	AWS_Lightsail_LoadBalancerTlsCertificate__Type = "AWS::Lightsail::LoadBalancerTlsCertificate"
)

var (
	// AWS_Lightsail_LoadBalancerTlsCertificate__AttributesMap reports all the CloudFormation attributes for AWS::Lightsail::LoadBalancerTlsCertificate.
	AWS_Lightsail_LoadBalancerTlsCertificate__AttributesMap = struct {
		LoadBalancerTlsCertificateArn string
		Status                        string
	}{
		LoadBalancerTlsCertificateArn: "LoadBalancerTlsCertificateArn",
		Status:                        "Status",
	}

	// AWS_Lightsail_LoadBalancerTlsCertificate__AttributesSlice reports all the CloudFormation attributes for AWS::Lightsail::LoadBalancerTlsCertificate.
	AWS_Lightsail_LoadBalancerTlsCertificate__AttributesSlice = []string{
		AWS_Lightsail_LoadBalancerTlsCertificate__AttributesMap.LoadBalancerTlsCertificateArn,
		AWS_Lightsail_LoadBalancerTlsCertificate__AttributesMap.Status,
	}
)

var (
	// AWS_Lightsail_LoadBalancerTlsCertificate__PropertiesMap reports all the CloudFormation properties for AWS::Lightsail::LoadBalancerTlsCertificate.
	AWS_Lightsail_LoadBalancerTlsCertificate__PropertiesMap = struct {
		CertificateAlternativeNames string
		CertificateDomainName       string
		CertificateName             string
		HttpsRedirectionEnabled     string
		IsAttached                  string
		LoadBalancerName            string
	}{
		CertificateAlternativeNames: "CertificateAlternativeNames",
		CertificateDomainName:       "CertificateDomainName",
		CertificateName:             "CertificateName",
		HttpsRedirectionEnabled:     "HttpsRedirectionEnabled",
		IsAttached:                  "IsAttached",
		LoadBalancerName:            "LoadBalancerName",
	}

	// AWS_Lightsail_LoadBalancerTlsCertificate__PropertiesSlice reports all the CloudFormation properties for AWS::Lightsail::LoadBalancerTlsCertificate.
	AWS_Lightsail_LoadBalancerTlsCertificate__PropertiesSlice = []string{
		AWS_Lightsail_LoadBalancerTlsCertificate__PropertiesMap.CertificateAlternativeNames,
		AWS_Lightsail_LoadBalancerTlsCertificate__PropertiesMap.CertificateDomainName,
		AWS_Lightsail_LoadBalancerTlsCertificate__PropertiesMap.CertificateName,
		AWS_Lightsail_LoadBalancerTlsCertificate__PropertiesMap.HttpsRedirectionEnabled,
		AWS_Lightsail_LoadBalancerTlsCertificate__PropertiesMap.IsAttached,
		AWS_Lightsail_LoadBalancerTlsCertificate__PropertiesMap.LoadBalancerName,
	}
)

// AWS_Lightsail_LoadBalancerTlsCertificate is a binding for AWS::Lightsail::LoadBalancerTlsCertificate.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancertlscertificate.html
type AWS_Lightsail_LoadBalancerTlsCertificate struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// CertificateAlternativeNames is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancertlscertificate.html#cfn-lightsail-loadbalancertlscertificate-certificatealternativenames
	CertificateAlternativeNames cfz.ExpressionSlice[string] `json:"CertificateAlternativeNames,omitempty"`

	// CertificateDomainName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancertlscertificate.html#cfn-lightsail-loadbalancertlscertificate-certificatedomainname
	CertificateDomainName cfz.Expression[string] `json:"CertificateDomainName,omitempty"`

	// CertificateName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancertlscertificate.html#cfn-lightsail-loadbalancertlscertificate-certificatename
	CertificateName cfz.Expression[string] `json:"CertificateName,omitempty"`

	// HttpsRedirectionEnabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancertlscertificate.html#cfn-lightsail-loadbalancertlscertificate-httpsredirectionenabled
	HttpsRedirectionEnabled cfz.Expression[bool] `json:"HttpsRedirectionEnabled,omitempty"`

	// IsAttached is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancertlscertificate.html#cfn-lightsail-loadbalancertlscertificate-isattached
	IsAttached cfz.Expression[bool] `json:"IsAttached,omitempty"`

	// LoadBalancerName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lightsail-loadbalancertlscertificate.html#cfn-lightsail-loadbalancertlscertificate-loadbalancername
	LoadBalancerName cfz.Expression[string] `json:"LoadBalancerName,omitempty"`
}

// New__AWS_Lightsail_LoadBalancerTlsCertificate initializes a new *AWS_Lightsail_LoadBalancerTlsCertificate.
func New__AWS_Lightsail_LoadBalancerTlsCertificate(logicalName string) *AWS_Lightsail_LoadBalancerTlsCertificate {
	return &AWS_Lightsail_LoadBalancerTlsCertificate{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Lightsail_LoadBalancerTlsCertificate) GetType() string {
	return AWS_Lightsail_LoadBalancerTlsCertificate__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) Set__LogicalName(v string) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) Set__RequestedOutputs(v []cfz.Output) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) Add__RequestedOutputs(v ...cfz.Output) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__CertificateAlternativeNames updates property "CertificateAlternativeNames".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) Set__CertificateAlternativeNames(v cfz.ExpressionSlice[string]) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.CertificateAlternativeNames = v
	return t
}

// SetS__CertificateAlternativeNames updates property "CertificateAlternativeNames".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) SetS__CertificateAlternativeNames(v ...cfz.Expression[string]) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.CertificateAlternativeNames = cfz.S(v...)
	return t
}

// SetSV__CertificateAlternativeNames updates property "CertificateAlternativeNames".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) SetSV__CertificateAlternativeNames(v ...string) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.CertificateAlternativeNames = cfz.SV(v...)
	return t
}

// Set__CertificateDomainName updates property "CertificateDomainName".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) Set__CertificateDomainName(v cfz.Expression[string]) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.CertificateDomainName = v
	return t
}

// SetV__CertificateDomainName updates property "CertificateDomainName".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) SetV__CertificateDomainName(v string) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.CertificateDomainName = cfz.V(v)
	return t
}

// Set__CertificateName updates property "CertificateName".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) Set__CertificateName(v cfz.Expression[string]) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.CertificateName = v
	return t
}

// SetV__CertificateName updates property "CertificateName".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) SetV__CertificateName(v string) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.CertificateName = cfz.V(v)
	return t
}

// Set__HttpsRedirectionEnabled updates property "HttpsRedirectionEnabled".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) Set__HttpsRedirectionEnabled(v cfz.Expression[bool]) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.HttpsRedirectionEnabled = v
	return t
}

// SetV__HttpsRedirectionEnabled updates property "HttpsRedirectionEnabled".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) SetV__HttpsRedirectionEnabled(v bool) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.HttpsRedirectionEnabled = cfz.V(v)
	return t
}

// Set__IsAttached updates property "IsAttached".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) Set__IsAttached(v cfz.Expression[bool]) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.IsAttached = v
	return t
}

// SetV__IsAttached updates property "IsAttached".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) SetV__IsAttached(v bool) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.IsAttached = cfz.V(v)
	return t
}

// Set__LoadBalancerName updates property "LoadBalancerName".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) Set__LoadBalancerName(v cfz.Expression[string]) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.LoadBalancerName = v
	return t
}

// SetV__LoadBalancerName updates property "LoadBalancerName".
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) SetV__LoadBalancerName(v string) *AWS_Lightsail_LoadBalancerTlsCertificate {
	t.LoadBalancerName = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__LoadBalancerTlsCertificateArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LoadBalancerTlsCertificateArn
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) GetAtt__LoadBalancerTlsCertificateArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_LoadBalancerTlsCertificate__AttributesMap.LoadBalancerTlsCertificateArn))
}

// GetAtt__Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Status
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) GetAtt__Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lightsail_LoadBalancerTlsCertificate__AttributesMap.Status))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LoadBalancerTlsCertificateArn returns a conventionally configured output for an attribute of this resource.
// Attribute: LoadBalancerTlsCertificateArn
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) GetConventionalOutputAtt__LoadBalancerTlsCertificateArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLoadBalancerTlsCertificateArn", t.GetAtt__LoadBalancerTlsCertificateArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Status returns a conventionally configured output for an attribute of this resource.
// Attribute: Status
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) GetConventionalOutputAtt__Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStatus", t.GetAtt__Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Lightsail_LoadBalancerTlsCertificate) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Lightsail_LoadBalancerTlsCertificate

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Lightsail_LoadBalancerTlsCertificate) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
