// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_licensemanager

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_LicenseManager_License)(nil)
	_ cfz.Resource                   = (*AWS_LicenseManager_License)(nil)
)

const (
	// AWS_LicenseManager_License__Type is the CloudFormation type for AWS::LicenseManager::License.
	AWS_LicenseManager_License__Type = "AWS::LicenseManager::License"
)

var (
	// AWS_LicenseManager_License__AttributesMap reports all the CloudFormation attributes for AWS::LicenseManager::License.
	AWS_LicenseManager_License__AttributesMap = struct {
		LicenseArn string
		Version    string
	}{
		LicenseArn: "LicenseArn",
		Version:    "Version",
	}

	// AWS_LicenseManager_License__AttributesSlice reports all the CloudFormation attributes for AWS::LicenseManager::License.
	AWS_LicenseManager_License__AttributesSlice = []string{
		AWS_LicenseManager_License__AttributesMap.LicenseArn,
		AWS_LicenseManager_License__AttributesMap.Version,
	}
)

var (
	// AWS_LicenseManager_License__PropertiesMap reports all the CloudFormation properties for AWS::LicenseManager::License.
	AWS_LicenseManager_License__PropertiesMap = struct {
		Beneficiary              string
		ConsumptionConfiguration string
		Entitlements             string
		HomeRegion               string
		Issuer                   string
		LicenseMetadata          string
		LicenseName              string
		ProductName              string
		ProductSKU               string
		Status                   string
		Validity                 string
	}{
		Beneficiary:              "Beneficiary",
		ConsumptionConfiguration: "ConsumptionConfiguration",
		Entitlements:             "Entitlements",
		HomeRegion:               "HomeRegion",
		Issuer:                   "Issuer",
		LicenseMetadata:          "LicenseMetadata",
		LicenseName:              "LicenseName",
		ProductName:              "ProductName",
		ProductSKU:               "ProductSKU",
		Status:                   "Status",
		Validity:                 "Validity",
	}

	// AWS_LicenseManager_License__PropertiesSlice reports all the CloudFormation properties for AWS::LicenseManager::License.
	AWS_LicenseManager_License__PropertiesSlice = []string{
		AWS_LicenseManager_License__PropertiesMap.Beneficiary,
		AWS_LicenseManager_License__PropertiesMap.ConsumptionConfiguration,
		AWS_LicenseManager_License__PropertiesMap.Entitlements,
		AWS_LicenseManager_License__PropertiesMap.HomeRegion,
		AWS_LicenseManager_License__PropertiesMap.Issuer,
		AWS_LicenseManager_License__PropertiesMap.LicenseMetadata,
		AWS_LicenseManager_License__PropertiesMap.LicenseName,
		AWS_LicenseManager_License__PropertiesMap.ProductName,
		AWS_LicenseManager_License__PropertiesMap.ProductSKU,
		AWS_LicenseManager_License__PropertiesMap.Status,
		AWS_LicenseManager_License__PropertiesMap.Validity,
	}
)

// AWS_LicenseManager_License is a binding for AWS::LicenseManager::License.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-license.html
type AWS_LicenseManager_License struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Beneficiary is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-license.html#cfn-licensemanager-license-beneficiary
	Beneficiary cfz.Expression[string] `json:"Beneficiary,omitempty"`

	// ConsumptionConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-license.html#cfn-licensemanager-license-consumptionconfiguration
	ConsumptionConfiguration cfz.Expression[AWS_LicenseManager_License_ConsumptionConfiguration] `json:"ConsumptionConfiguration,omitempty"`

	// Entitlements is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-license.html#cfn-licensemanager-license-entitlements
	Entitlements cfz.ExpressionSlice[AWS_LicenseManager_License_Entitlement] `json:"Entitlements,omitempty"`

	// HomeRegion is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-license.html#cfn-licensemanager-license-homeregion
	HomeRegion cfz.Expression[string] `json:"HomeRegion,omitempty"`

	// Issuer is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-license.html#cfn-licensemanager-license-issuer
	Issuer cfz.Expression[AWS_LicenseManager_License_IssuerData] `json:"Issuer,omitempty"`

	// LicenseMetadata is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-license.html#cfn-licensemanager-license-licensemetadata
	LicenseMetadata cfz.ExpressionSlice[AWS_LicenseManager_License_Metadata] `json:"LicenseMetadata,omitempty"`

	// LicenseName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-license.html#cfn-licensemanager-license-licensename
	LicenseName cfz.Expression[string] `json:"LicenseName,omitempty"`

	// ProductName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-license.html#cfn-licensemanager-license-productname
	ProductName cfz.Expression[string] `json:"ProductName,omitempty"`

	// ProductSKU is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-license.html#cfn-licensemanager-license-productsku
	ProductSKU cfz.Expression[string] `json:"ProductSKU,omitempty"`

	// Status is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-license.html#cfn-licensemanager-license-status
	Status cfz.Expression[string] `json:"Status,omitempty"`

	// Validity is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-license.html#cfn-licensemanager-license-validity
	Validity cfz.Expression[AWS_LicenseManager_License_ValidityDateFormat] `json:"Validity,omitempty"`
}

// New__AWS_LicenseManager_License initializes a new *AWS_LicenseManager_License.
func New__AWS_LicenseManager_License(logicalName string) *AWS_LicenseManager_License {
	return &AWS_LicenseManager_License{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_LicenseManager_License) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_LicenseManager_License) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_LicenseManager_License) GetType() string {
	return AWS_LicenseManager_License__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_LicenseManager_License) Set__LogicalName(v string) *AWS_LicenseManager_License {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_LicenseManager_License) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_LicenseManager_License {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_LicenseManager_License) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_LicenseManager_License {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_LicenseManager_License) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_LicenseManager_License {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_LicenseManager_License) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_LicenseManager_License {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_LicenseManager_License) Set__RequestedOutputs(v []cfz.Output) *AWS_LicenseManager_License {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_LicenseManager_License) Add__RequestedOutputs(v ...cfz.Output) *AWS_LicenseManager_License {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Beneficiary updates property "Beneficiary".
func (t *AWS_LicenseManager_License) Set__Beneficiary(v cfz.Expression[string]) *AWS_LicenseManager_License {
	t.Beneficiary = v
	return t
}

// SetV__Beneficiary updates property "Beneficiary".
func (t *AWS_LicenseManager_License) SetV__Beneficiary(v string) *AWS_LicenseManager_License {
	t.Beneficiary = cfz.V(v)
	return t
}

// Set__ConsumptionConfiguration updates property "ConsumptionConfiguration".
func (t *AWS_LicenseManager_License) Set__ConsumptionConfiguration(v cfz.Expression[AWS_LicenseManager_License_ConsumptionConfiguration]) *AWS_LicenseManager_License {
	t.ConsumptionConfiguration = v
	return t
}

// SetV__ConsumptionConfiguration updates property "ConsumptionConfiguration".
func (t *AWS_LicenseManager_License) SetV__ConsumptionConfiguration(v AWS_LicenseManager_License_ConsumptionConfiguration) *AWS_LicenseManager_License {
	t.ConsumptionConfiguration = cfz.V(v)
	return t
}

// Set__Entitlements updates property "Entitlements".
func (t *AWS_LicenseManager_License) Set__Entitlements(v cfz.ExpressionSlice[AWS_LicenseManager_License_Entitlement]) *AWS_LicenseManager_License {
	t.Entitlements = v
	return t
}

// SetS__Entitlements updates property "Entitlements".
func (t *AWS_LicenseManager_License) SetS__Entitlements(v ...cfz.Expression[AWS_LicenseManager_License_Entitlement]) *AWS_LicenseManager_License {
	t.Entitlements = cfz.S(v...)
	return t
}

// SetSV__Entitlements updates property "Entitlements".
func (t *AWS_LicenseManager_License) SetSV__Entitlements(v ...AWS_LicenseManager_License_Entitlement) *AWS_LicenseManager_License {
	t.Entitlements = cfz.SV(v...)
	return t
}

// Set__HomeRegion updates property "HomeRegion".
func (t *AWS_LicenseManager_License) Set__HomeRegion(v cfz.Expression[string]) *AWS_LicenseManager_License {
	t.HomeRegion = v
	return t
}

// SetV__HomeRegion updates property "HomeRegion".
func (t *AWS_LicenseManager_License) SetV__HomeRegion(v string) *AWS_LicenseManager_License {
	t.HomeRegion = cfz.V(v)
	return t
}

// Set__Issuer updates property "Issuer".
func (t *AWS_LicenseManager_License) Set__Issuer(v cfz.Expression[AWS_LicenseManager_License_IssuerData]) *AWS_LicenseManager_License {
	t.Issuer = v
	return t
}

// SetV__Issuer updates property "Issuer".
func (t *AWS_LicenseManager_License) SetV__Issuer(v AWS_LicenseManager_License_IssuerData) *AWS_LicenseManager_License {
	t.Issuer = cfz.V(v)
	return t
}

// Set__LicenseMetadata updates property "LicenseMetadata".
func (t *AWS_LicenseManager_License) Set__LicenseMetadata(v cfz.ExpressionSlice[AWS_LicenseManager_License_Metadata]) *AWS_LicenseManager_License {
	t.LicenseMetadata = v
	return t
}

// SetS__LicenseMetadata updates property "LicenseMetadata".
func (t *AWS_LicenseManager_License) SetS__LicenseMetadata(v ...cfz.Expression[AWS_LicenseManager_License_Metadata]) *AWS_LicenseManager_License {
	t.LicenseMetadata = cfz.S(v...)
	return t
}

// SetSV__LicenseMetadata updates property "LicenseMetadata".
func (t *AWS_LicenseManager_License) SetSV__LicenseMetadata(v ...AWS_LicenseManager_License_Metadata) *AWS_LicenseManager_License {
	t.LicenseMetadata = cfz.SV(v...)
	return t
}

// Set__LicenseName updates property "LicenseName".
func (t *AWS_LicenseManager_License) Set__LicenseName(v cfz.Expression[string]) *AWS_LicenseManager_License {
	t.LicenseName = v
	return t
}

// SetV__LicenseName updates property "LicenseName".
func (t *AWS_LicenseManager_License) SetV__LicenseName(v string) *AWS_LicenseManager_License {
	t.LicenseName = cfz.V(v)
	return t
}

// Set__ProductName updates property "ProductName".
func (t *AWS_LicenseManager_License) Set__ProductName(v cfz.Expression[string]) *AWS_LicenseManager_License {
	t.ProductName = v
	return t
}

// SetV__ProductName updates property "ProductName".
func (t *AWS_LicenseManager_License) SetV__ProductName(v string) *AWS_LicenseManager_License {
	t.ProductName = cfz.V(v)
	return t
}

// Set__ProductSKU updates property "ProductSKU".
func (t *AWS_LicenseManager_License) Set__ProductSKU(v cfz.Expression[string]) *AWS_LicenseManager_License {
	t.ProductSKU = v
	return t
}

// SetV__ProductSKU updates property "ProductSKU".
func (t *AWS_LicenseManager_License) SetV__ProductSKU(v string) *AWS_LicenseManager_License {
	t.ProductSKU = cfz.V(v)
	return t
}

// Set__Status updates property "Status".
func (t *AWS_LicenseManager_License) Set__Status(v cfz.Expression[string]) *AWS_LicenseManager_License {
	t.Status = v
	return t
}

// SetV__Status updates property "Status".
func (t *AWS_LicenseManager_License) SetV__Status(v string) *AWS_LicenseManager_License {
	t.Status = cfz.V(v)
	return t
}

// Set__Validity updates property "Validity".
func (t *AWS_LicenseManager_License) Set__Validity(v cfz.Expression[AWS_LicenseManager_License_ValidityDateFormat]) *AWS_LicenseManager_License {
	t.Validity = v
	return t
}

// SetV__Validity updates property "Validity".
func (t *AWS_LicenseManager_License) SetV__Validity(v AWS_LicenseManager_License_ValidityDateFormat) *AWS_LicenseManager_License {
	t.Validity = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_LicenseManager_License) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__LicenseArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LicenseArn
func (t *AWS_LicenseManager_License) GetAtt__LicenseArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_LicenseManager_License__AttributesMap.LicenseArn))
}

// GetAtt__Version returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version
func (t *AWS_LicenseManager_License) GetAtt__Version() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_LicenseManager_License__AttributesMap.Version))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_LicenseManager_License) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LicenseArn returns a conventionally configured output for an attribute of this resource.
// Attribute: LicenseArn
func (t *AWS_LicenseManager_License) GetConventionalOutputAtt__LicenseArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLicenseArn", t.GetAtt__LicenseArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version returns a conventionally configured output for an attribute of this resource.
// Attribute: Version
func (t *AWS_LicenseManager_License) GetConventionalOutputAtt__Version(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersion", t.GetAtt__Version())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_LicenseManager_License) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_LicenseManager_License

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_LicenseManager_License) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
