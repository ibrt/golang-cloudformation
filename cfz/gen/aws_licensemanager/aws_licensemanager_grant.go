// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_licensemanager

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_LicenseManager_Grant)(nil)
	_ cfz.Resource                   = (*AWS_LicenseManager_Grant)(nil)
)

const (
	// AWS_LicenseManager_Grant__Type is the CloudFormation type for AWS::LicenseManager::Grant.
	AWS_LicenseManager_Grant__Type = "AWS::LicenseManager::Grant"
)

var (
	// AWS_LicenseManager_Grant__AttributesMap reports all the CloudFormation attributes for AWS::LicenseManager::Grant.
	AWS_LicenseManager_Grant__AttributesMap = struct {
		GrantArn string
		Version  string
	}{
		GrantArn: "GrantArn",
		Version:  "Version",
	}

	// AWS_LicenseManager_Grant__AttributesSlice reports all the CloudFormation attributes for AWS::LicenseManager::Grant.
	AWS_LicenseManager_Grant__AttributesSlice = []string{
		AWS_LicenseManager_Grant__AttributesMap.GrantArn,
		AWS_LicenseManager_Grant__AttributesMap.Version,
	}
)

var (
	// AWS_LicenseManager_Grant__PropertiesMap reports all the CloudFormation properties for AWS::LicenseManager::Grant.
	AWS_LicenseManager_Grant__PropertiesMap = struct {
		AllowedOperations string
		GrantName         string
		HomeRegion        string
		LicenseArn        string
		Principals        string
		Status            string
	}{
		AllowedOperations: "AllowedOperations",
		GrantName:         "GrantName",
		HomeRegion:        "HomeRegion",
		LicenseArn:        "LicenseArn",
		Principals:        "Principals",
		Status:            "Status",
	}

	// AWS_LicenseManager_Grant__PropertiesSlice reports all the CloudFormation properties for AWS::LicenseManager::Grant.
	AWS_LicenseManager_Grant__PropertiesSlice = []string{
		AWS_LicenseManager_Grant__PropertiesMap.AllowedOperations,
		AWS_LicenseManager_Grant__PropertiesMap.GrantName,
		AWS_LicenseManager_Grant__PropertiesMap.HomeRegion,
		AWS_LicenseManager_Grant__PropertiesMap.LicenseArn,
		AWS_LicenseManager_Grant__PropertiesMap.Principals,
		AWS_LicenseManager_Grant__PropertiesMap.Status,
	}
)

// AWS_LicenseManager_Grant is a binding for AWS::LicenseManager::Grant.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-grant.html
type AWS_LicenseManager_Grant struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AllowedOperations is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-grant.html#cfn-licensemanager-grant-allowedoperations
	AllowedOperations cfz.ExpressionSlice[string] `json:"AllowedOperations,omitempty"`

	// GrantName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-grant.html#cfn-licensemanager-grant-grantname
	GrantName cfz.Expression[string] `json:"GrantName,omitempty"`

	// HomeRegion is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-grant.html#cfn-licensemanager-grant-homeregion
	HomeRegion cfz.Expression[string] `json:"HomeRegion,omitempty"`

	// LicenseArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-grant.html#cfn-licensemanager-grant-licensearn
	LicenseArn cfz.Expression[string] `json:"LicenseArn,omitempty"`

	// Principals is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-grant.html#cfn-licensemanager-grant-principals
	Principals cfz.ExpressionSlice[string] `json:"Principals,omitempty"`

	// Status is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-grant.html#cfn-licensemanager-grant-status
	Status cfz.Expression[string] `json:"Status,omitempty"`
}

// New__AWS_LicenseManager_Grant initializes a new *AWS_LicenseManager_Grant.
func New__AWS_LicenseManager_Grant(logicalName string) *AWS_LicenseManager_Grant {
	return &AWS_LicenseManager_Grant{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_LicenseManager_Grant) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_LicenseManager_Grant) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_LicenseManager_Grant) GetType() string {
	return AWS_LicenseManager_Grant__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_LicenseManager_Grant) Set__LogicalName(v string) *AWS_LicenseManager_Grant {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_LicenseManager_Grant) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_LicenseManager_Grant {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_LicenseManager_Grant) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_LicenseManager_Grant {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_LicenseManager_Grant) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_LicenseManager_Grant {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_LicenseManager_Grant) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_LicenseManager_Grant {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_LicenseManager_Grant) Set__RequestedOutputs(v []cfz.Output) *AWS_LicenseManager_Grant {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_LicenseManager_Grant) Add__RequestedOutputs(v ...cfz.Output) *AWS_LicenseManager_Grant {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AllowedOperations updates property "AllowedOperations".
func (t *AWS_LicenseManager_Grant) Set__AllowedOperations(v cfz.ExpressionSlice[string]) *AWS_LicenseManager_Grant {
	t.AllowedOperations = v
	return t
}

// SetS__AllowedOperations updates property "AllowedOperations".
func (t *AWS_LicenseManager_Grant) SetS__AllowedOperations(v ...cfz.Expression[string]) *AWS_LicenseManager_Grant {
	t.AllowedOperations = cfz.S(v...)
	return t
}

// SetSV__AllowedOperations updates property "AllowedOperations".
func (t *AWS_LicenseManager_Grant) SetSV__AllowedOperations(v ...string) *AWS_LicenseManager_Grant {
	t.AllowedOperations = cfz.SV(v...)
	return t
}

// Set__GrantName updates property "GrantName".
func (t *AWS_LicenseManager_Grant) Set__GrantName(v cfz.Expression[string]) *AWS_LicenseManager_Grant {
	t.GrantName = v
	return t
}

// SetV__GrantName updates property "GrantName".
func (t *AWS_LicenseManager_Grant) SetV__GrantName(v string) *AWS_LicenseManager_Grant {
	t.GrantName = cfz.V(v)
	return t
}

// Set__HomeRegion updates property "HomeRegion".
func (t *AWS_LicenseManager_Grant) Set__HomeRegion(v cfz.Expression[string]) *AWS_LicenseManager_Grant {
	t.HomeRegion = v
	return t
}

// SetV__HomeRegion updates property "HomeRegion".
func (t *AWS_LicenseManager_Grant) SetV__HomeRegion(v string) *AWS_LicenseManager_Grant {
	t.HomeRegion = cfz.V(v)
	return t
}

// Set__LicenseArn updates property "LicenseArn".
func (t *AWS_LicenseManager_Grant) Set__LicenseArn(v cfz.Expression[string]) *AWS_LicenseManager_Grant {
	t.LicenseArn = v
	return t
}

// SetV__LicenseArn updates property "LicenseArn".
func (t *AWS_LicenseManager_Grant) SetV__LicenseArn(v string) *AWS_LicenseManager_Grant {
	t.LicenseArn = cfz.V(v)
	return t
}

// Set__Principals updates property "Principals".
func (t *AWS_LicenseManager_Grant) Set__Principals(v cfz.ExpressionSlice[string]) *AWS_LicenseManager_Grant {
	t.Principals = v
	return t
}

// SetS__Principals updates property "Principals".
func (t *AWS_LicenseManager_Grant) SetS__Principals(v ...cfz.Expression[string]) *AWS_LicenseManager_Grant {
	t.Principals = cfz.S(v...)
	return t
}

// SetSV__Principals updates property "Principals".
func (t *AWS_LicenseManager_Grant) SetSV__Principals(v ...string) *AWS_LicenseManager_Grant {
	t.Principals = cfz.SV(v...)
	return t
}

// Set__Status updates property "Status".
func (t *AWS_LicenseManager_Grant) Set__Status(v cfz.Expression[string]) *AWS_LicenseManager_Grant {
	t.Status = v
	return t
}

// SetV__Status updates property "Status".
func (t *AWS_LicenseManager_Grant) SetV__Status(v string) *AWS_LicenseManager_Grant {
	t.Status = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_LicenseManager_Grant) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__GrantArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: GrantArn
func (t *AWS_LicenseManager_Grant) GetAtt__GrantArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_LicenseManager_Grant__AttributesMap.GrantArn))
}

// GetAtt__Version returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version
func (t *AWS_LicenseManager_Grant) GetAtt__Version() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_LicenseManager_Grant__AttributesMap.Version))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_LicenseManager_Grant) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__GrantArn returns a conventionally configured output for an attribute of this resource.
// Attribute: GrantArn
func (t *AWS_LicenseManager_Grant) GetConventionalOutputAtt__GrantArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttGrantArn", t.GetAtt__GrantArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version returns a conventionally configured output for an attribute of this resource.
// Attribute: Version
func (t *AWS_LicenseManager_Grant) GetConventionalOutputAtt__Version(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersion", t.GetAtt__Version())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_LicenseManager_Grant) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_LicenseManager_Grant

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_LicenseManager_Grant) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
