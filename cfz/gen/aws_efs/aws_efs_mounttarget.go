// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_efs

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EFS_MountTarget)(nil)
	_ cfz.Resource                   = (*AWS_EFS_MountTarget)(nil)
)

const (
	// AWS_EFS_MountTarget__Type is the CloudFormation type for AWS::EFS::MountTarget.
	AWS_EFS_MountTarget__Type = "AWS::EFS::MountTarget"
)

var (
	// AWS_EFS_MountTarget__AttributesMap reports all the CloudFormation attributes for AWS::EFS::MountTarget.
	AWS_EFS_MountTarget__AttributesMap = struct {
		Id        string
		IpAddress string
	}{
		Id:        "Id",
		IpAddress: "IpAddress",
	}

	// AWS_EFS_MountTarget__AttributesSlice reports all the CloudFormation attributes for AWS::EFS::MountTarget.
	AWS_EFS_MountTarget__AttributesSlice = []string{
		AWS_EFS_MountTarget__AttributesMap.Id,
		AWS_EFS_MountTarget__AttributesMap.IpAddress,
	}
)

var (
	// AWS_EFS_MountTarget__PropertiesMap reports all the CloudFormation properties for AWS::EFS::MountTarget.
	AWS_EFS_MountTarget__PropertiesMap = struct {
		FileSystemId   string
		IpAddress      string
		SecurityGroups string
		SubnetId       string
	}{
		FileSystemId:   "FileSystemId",
		IpAddress:      "IpAddress",
		SecurityGroups: "SecurityGroups",
		SubnetId:       "SubnetId",
	}

	// AWS_EFS_MountTarget__PropertiesSlice reports all the CloudFormation properties for AWS::EFS::MountTarget.
	AWS_EFS_MountTarget__PropertiesSlice = []string{
		AWS_EFS_MountTarget__PropertiesMap.FileSystemId,
		AWS_EFS_MountTarget__PropertiesMap.IpAddress,
		AWS_EFS_MountTarget__PropertiesMap.SecurityGroups,
		AWS_EFS_MountTarget__PropertiesMap.SubnetId,
	}
)

// AWS_EFS_MountTarget is a binding for AWS::EFS::MountTarget.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html
type AWS_EFS_MountTarget struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// FileSystemId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html#cfn-efs-mounttarget-filesystemid
	FileSystemId cfz.Expression[string] `json:"FileSystemId,omitempty"`

	// IpAddress is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html#cfn-efs-mounttarget-ipaddress
	IpAddress cfz.Expression[string] `json:"IpAddress,omitempty"`

	// SecurityGroups is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html#cfn-efs-mounttarget-securitygroups
	SecurityGroups cfz.ExpressionSlice[string] `json:"SecurityGroups,omitempty"`

	// SubnetId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html#cfn-efs-mounttarget-subnetid
	SubnetId cfz.Expression[string] `json:"SubnetId,omitempty"`
}

// New__AWS_EFS_MountTarget initializes a new *AWS_EFS_MountTarget.
func New__AWS_EFS_MountTarget(logicalName string) *AWS_EFS_MountTarget {
	return &AWS_EFS_MountTarget{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EFS_MountTarget) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EFS_MountTarget) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EFS_MountTarget) GetType() string {
	return AWS_EFS_MountTarget__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EFS_MountTarget) Set__LogicalName(v string) *AWS_EFS_MountTarget {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EFS_MountTarget) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EFS_MountTarget {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EFS_MountTarget) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EFS_MountTarget {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EFS_MountTarget) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EFS_MountTarget {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EFS_MountTarget) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EFS_MountTarget {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EFS_MountTarget) Set__RequestedOutputs(v []cfz.Output) *AWS_EFS_MountTarget {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EFS_MountTarget) Add__RequestedOutputs(v ...cfz.Output) *AWS_EFS_MountTarget {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__FileSystemId updates property "FileSystemId".
func (t *AWS_EFS_MountTarget) Set__FileSystemId(v cfz.Expression[string]) *AWS_EFS_MountTarget {
	t.FileSystemId = v
	return t
}

// SetV__FileSystemId updates property "FileSystemId".
func (t *AWS_EFS_MountTarget) SetV__FileSystemId(v string) *AWS_EFS_MountTarget {
	t.FileSystemId = cfz.V(v)
	return t
}

// Set__IpAddress updates property "IpAddress".
func (t *AWS_EFS_MountTarget) Set__IpAddress(v cfz.Expression[string]) *AWS_EFS_MountTarget {
	t.IpAddress = v
	return t
}

// SetV__IpAddress updates property "IpAddress".
func (t *AWS_EFS_MountTarget) SetV__IpAddress(v string) *AWS_EFS_MountTarget {
	t.IpAddress = cfz.V(v)
	return t
}

// Set__SecurityGroups updates property "SecurityGroups".
func (t *AWS_EFS_MountTarget) Set__SecurityGroups(v cfz.ExpressionSlice[string]) *AWS_EFS_MountTarget {
	t.SecurityGroups = v
	return t
}

// SetS__SecurityGroups updates property "SecurityGroups".
func (t *AWS_EFS_MountTarget) SetS__SecurityGroups(v ...cfz.Expression[string]) *AWS_EFS_MountTarget {
	t.SecurityGroups = cfz.S(v...)
	return t
}

// SetSV__SecurityGroups updates property "SecurityGroups".
func (t *AWS_EFS_MountTarget) SetSV__SecurityGroups(v ...string) *AWS_EFS_MountTarget {
	t.SecurityGroups = cfz.SV(v...)
	return t
}

// Set__SubnetId updates property "SubnetId".
func (t *AWS_EFS_MountTarget) Set__SubnetId(v cfz.Expression[string]) *AWS_EFS_MountTarget {
	t.SubnetId = v
	return t
}

// SetV__SubnetId updates property "SubnetId".
func (t *AWS_EFS_MountTarget) SetV__SubnetId(v string) *AWS_EFS_MountTarget {
	t.SubnetId = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EFS_MountTarget) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Id returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Id
func (t *AWS_EFS_MountTarget) GetAtt__Id() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EFS_MountTarget__AttributesMap.Id))
}

// GetAtt__IpAddress returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: IpAddress
func (t *AWS_EFS_MountTarget) GetAtt__IpAddress() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EFS_MountTarget__AttributesMap.IpAddress))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EFS_MountTarget) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Id returns a conventionally configured output for an attribute of this resource.
// Attribute: Id
func (t *AWS_EFS_MountTarget) GetConventionalOutputAtt__Id(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttId", t.GetAtt__Id())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__IpAddress returns a conventionally configured output for an attribute of this resource.
// Attribute: IpAddress
func (t *AWS_EFS_MountTarget) GetConventionalOutputAtt__IpAddress(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIpAddress", t.GetAtt__IpAddress())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EFS_MountTarget) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EFS_MountTarget

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EFS_MountTarget) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
