// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_wisdom

import (
	"github.com/ibrt/golang-cloudformation/cfz"
)

const (
	// AWS_Wisdom_AIAgent_OrCondition__Type is the CloudFormation type for AWS::Wisdom::AIAgent.OrCondition.
	AWS_Wisdom_AIAgent_OrCondition__Type = "AWS::Wisdom::AIAgent.OrCondition"
)

var (
	// AWS_Wisdom_AIAgent_OrCondition__PropertiesMap reports all the CloudFormation properties for AWS::Wisdom::AIAgent.OrCondition.
	AWS_Wisdom_AIAgent_OrCondition__PropertiesMap = struct {
		AndConditions string
		TagCondition  string
	}{
		AndConditions: "AndConditions",
		TagCondition:  "TagCondition",
	}

	// AWS_Wisdom_AIAgent_OrCondition__PropertiesSlice reports all the CloudFormation properties for AWS::Wisdom::AIAgent.OrCondition.
	AWS_Wisdom_AIAgent_OrCondition__PropertiesSlice = []string{
		AWS_Wisdom_AIAgent_OrCondition__PropertiesMap.AndConditions,
		AWS_Wisdom_AIAgent_OrCondition__PropertiesMap.TagCondition,
	}
)

// AWS_Wisdom_AIAgent_OrCondition is a binding for AWS::Wisdom::AIAgent.OrCondition.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-aiagent-orcondition.html
type AWS_Wisdom_AIAgent_OrCondition struct {
	// AndConditions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-aiagent-orcondition.html#cfn-wisdom-aiagent-orcondition-andconditions
	AndConditions cfz.ExpressionSlice[AWS_Wisdom_AIAgent_TagCondition] `json:"AndConditions,omitempty"`

	// TagCondition is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-aiagent-orcondition.html#cfn-wisdom-aiagent-orcondition-tagcondition
	TagCondition cfz.Expression[AWS_Wisdom_AIAgent_TagCondition] `json:"TagCondition,omitempty"`
}

// New__AWS_Wisdom_AIAgent_OrCondition initializes a new AWS_Wisdom_AIAgent_OrCondition.
func New__AWS_Wisdom_AIAgent_OrCondition() AWS_Wisdom_AIAgent_OrCondition {
	return AWS_Wisdom_AIAgent_OrCondition{}
}

// GetType returns the CloudFormation type.
func (AWS_Wisdom_AIAgent_OrCondition) GetType() string {
	return AWS_Wisdom_AIAgent_OrCondition__Type
}

// Set__AndConditions updates property "AndConditions".
func (t AWS_Wisdom_AIAgent_OrCondition) Set__AndConditions(v cfz.ExpressionSlice[AWS_Wisdom_AIAgent_TagCondition]) AWS_Wisdom_AIAgent_OrCondition {
	t.AndConditions = v
	return t
}

// SetS__AndConditions updates property "AndConditions".
func (t AWS_Wisdom_AIAgent_OrCondition) SetS__AndConditions(v ...cfz.Expression[AWS_Wisdom_AIAgent_TagCondition]) AWS_Wisdom_AIAgent_OrCondition {
	t.AndConditions = cfz.S(v...)
	return t
}

// SetSV__AndConditions updates property "AndConditions".
func (t AWS_Wisdom_AIAgent_OrCondition) SetSV__AndConditions(v ...AWS_Wisdom_AIAgent_TagCondition) AWS_Wisdom_AIAgent_OrCondition {
	t.AndConditions = cfz.SV(v...)
	return t
}

// Set__TagCondition updates property "TagCondition".
func (t AWS_Wisdom_AIAgent_OrCondition) Set__TagCondition(v cfz.Expression[AWS_Wisdom_AIAgent_TagCondition]) AWS_Wisdom_AIAgent_OrCondition {
	t.TagCondition = v
	return t
}

// SetV__TagCondition updates property "TagCondition".
func (t AWS_Wisdom_AIAgent_OrCondition) SetV__TagCondition(v AWS_Wisdom_AIAgent_TagCondition) AWS_Wisdom_AIAgent_OrCondition {
	t.TagCondition = cfz.V(v)
	return t
}
