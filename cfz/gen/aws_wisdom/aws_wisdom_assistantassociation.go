// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_wisdom

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Wisdom_AssistantAssociation)(nil)
	_ cfz.Resource                   = (*AWS_Wisdom_AssistantAssociation)(nil)
)

const (
	// AWS_Wisdom_AssistantAssociation__Type is the CloudFormation type for AWS::Wisdom::AssistantAssociation.
	AWS_Wisdom_AssistantAssociation__Type = "AWS::Wisdom::AssistantAssociation"
)

var (
	// AWS_Wisdom_AssistantAssociation__AttributesMap reports all the CloudFormation attributes for AWS::Wisdom::AssistantAssociation.
	AWS_Wisdom_AssistantAssociation__AttributesMap = struct {
		AssistantArn            string
		AssistantAssociationArn string
		AssistantAssociationId  string
	}{
		AssistantArn:            "AssistantArn",
		AssistantAssociationArn: "AssistantAssociationArn",
		AssistantAssociationId:  "AssistantAssociationId",
	}

	// AWS_Wisdom_AssistantAssociation__AttributesSlice reports all the CloudFormation attributes for AWS::Wisdom::AssistantAssociation.
	AWS_Wisdom_AssistantAssociation__AttributesSlice = []string{
		AWS_Wisdom_AssistantAssociation__AttributesMap.AssistantArn,
		AWS_Wisdom_AssistantAssociation__AttributesMap.AssistantAssociationArn,
		AWS_Wisdom_AssistantAssociation__AttributesMap.AssistantAssociationId,
	}
)

var (
	// AWS_Wisdom_AssistantAssociation__PropertiesMap reports all the CloudFormation properties for AWS::Wisdom::AssistantAssociation.
	AWS_Wisdom_AssistantAssociation__PropertiesMap = struct {
		AssistantId     string
		Association     string
		AssociationType string
		Tags            string
	}{
		AssistantId:     "AssistantId",
		Association:     "Association",
		AssociationType: "AssociationType",
		Tags:            "Tags",
	}

	// AWS_Wisdom_AssistantAssociation__PropertiesSlice reports all the CloudFormation properties for AWS::Wisdom::AssistantAssociation.
	AWS_Wisdom_AssistantAssociation__PropertiesSlice = []string{
		AWS_Wisdom_AssistantAssociation__PropertiesMap.AssistantId,
		AWS_Wisdom_AssistantAssociation__PropertiesMap.Association,
		AWS_Wisdom_AssistantAssociation__PropertiesMap.AssociationType,
		AWS_Wisdom_AssistantAssociation__PropertiesMap.Tags,
	}
)

// AWS_Wisdom_AssistantAssociation is a binding for AWS::Wisdom::AssistantAssociation.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html
type AWS_Wisdom_AssistantAssociation struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AssistantId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html#cfn-wisdom-assistantassociation-assistantid
	AssistantId cfz.Expression[string] `json:"AssistantId,omitempty"`

	// Association is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html#cfn-wisdom-assistantassociation-association
	Association cfz.Expression[AWS_Wisdom_AssistantAssociation_AssociationData] `json:"Association,omitempty"`

	// AssociationType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html#cfn-wisdom-assistantassociation-associationtype
	AssociationType cfz.Expression[string] `json:"AssociationType,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html#cfn-wisdom-assistantassociation-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_Wisdom_AssistantAssociation initializes a new *AWS_Wisdom_AssistantAssociation.
func New__AWS_Wisdom_AssistantAssociation(logicalName string) *AWS_Wisdom_AssistantAssociation {
	return &AWS_Wisdom_AssistantAssociation{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Wisdom_AssistantAssociation) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Wisdom_AssistantAssociation) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Wisdom_AssistantAssociation) GetType() string {
	return AWS_Wisdom_AssistantAssociation__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Wisdom_AssistantAssociation) Set__LogicalName(v string) *AWS_Wisdom_AssistantAssociation {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Wisdom_AssistantAssociation) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Wisdom_AssistantAssociation {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Wisdom_AssistantAssociation) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Wisdom_AssistantAssociation {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Wisdom_AssistantAssociation) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Wisdom_AssistantAssociation {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Wisdom_AssistantAssociation) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Wisdom_AssistantAssociation {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Wisdom_AssistantAssociation) Set__RequestedOutputs(v []cfz.Output) *AWS_Wisdom_AssistantAssociation {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Wisdom_AssistantAssociation) Add__RequestedOutputs(v ...cfz.Output) *AWS_Wisdom_AssistantAssociation {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AssistantId updates property "AssistantId".
func (t *AWS_Wisdom_AssistantAssociation) Set__AssistantId(v cfz.Expression[string]) *AWS_Wisdom_AssistantAssociation {
	t.AssistantId = v
	return t
}

// SetV__AssistantId updates property "AssistantId".
func (t *AWS_Wisdom_AssistantAssociation) SetV__AssistantId(v string) *AWS_Wisdom_AssistantAssociation {
	t.AssistantId = cfz.V(v)
	return t
}

// Set__Association updates property "Association".
func (t *AWS_Wisdom_AssistantAssociation) Set__Association(v cfz.Expression[AWS_Wisdom_AssistantAssociation_AssociationData]) *AWS_Wisdom_AssistantAssociation {
	t.Association = v
	return t
}

// SetV__Association updates property "Association".
func (t *AWS_Wisdom_AssistantAssociation) SetV__Association(v AWS_Wisdom_AssistantAssociation_AssociationData) *AWS_Wisdom_AssistantAssociation {
	t.Association = cfz.V(v)
	return t
}

// Set__AssociationType updates property "AssociationType".
func (t *AWS_Wisdom_AssistantAssociation) Set__AssociationType(v cfz.Expression[string]) *AWS_Wisdom_AssistantAssociation {
	t.AssociationType = v
	return t
}

// SetV__AssociationType updates property "AssociationType".
func (t *AWS_Wisdom_AssistantAssociation) SetV__AssociationType(v string) *AWS_Wisdom_AssistantAssociation {
	t.AssociationType = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_Wisdom_AssistantAssociation) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_Wisdom_AssistantAssociation {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_Wisdom_AssistantAssociation) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_Wisdom_AssistantAssociation {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_Wisdom_AssistantAssociation) SetSV__Tags(v ...cfz.Tag) *AWS_Wisdom_AssistantAssociation {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Wisdom_AssistantAssociation) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__AssistantArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AssistantArn
func (t *AWS_Wisdom_AssistantAssociation) GetAtt__AssistantArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Wisdom_AssistantAssociation__AttributesMap.AssistantArn))
}

// GetAtt__AssistantAssociationArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AssistantAssociationArn
func (t *AWS_Wisdom_AssistantAssociation) GetAtt__AssistantAssociationArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Wisdom_AssistantAssociation__AttributesMap.AssistantAssociationArn))
}

// GetAtt__AssistantAssociationId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AssistantAssociationId
func (t *AWS_Wisdom_AssistantAssociation) GetAtt__AssistantAssociationId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Wisdom_AssistantAssociation__AttributesMap.AssistantAssociationId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Wisdom_AssistantAssociation) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AssistantArn returns a conventionally configured output for an attribute of this resource.
// Attribute: AssistantArn
func (t *AWS_Wisdom_AssistantAssociation) GetConventionalOutputAtt__AssistantArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAssistantArn", t.GetAtt__AssistantArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AssistantAssociationArn returns a conventionally configured output for an attribute of this resource.
// Attribute: AssistantAssociationArn
func (t *AWS_Wisdom_AssistantAssociation) GetConventionalOutputAtt__AssistantAssociationArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAssistantAssociationArn", t.GetAtt__AssistantAssociationArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AssistantAssociationId returns a conventionally configured output for an attribute of this resource.
// Attribute: AssistantAssociationId
func (t *AWS_Wisdom_AssistantAssociation) GetConventionalOutputAtt__AssistantAssociationId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAssistantAssociationId", t.GetAtt__AssistantAssociationId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Wisdom_AssistantAssociation) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Wisdom_AssistantAssociation

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Wisdom_AssistantAssociation) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
