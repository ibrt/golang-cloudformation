// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_workspaces

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_WorkSpaces_Workspace)(nil)
	_ cfz.Resource                   = (*AWS_WorkSpaces_Workspace)(nil)
)

const (
	// AWS_WorkSpaces_Workspace__Type is the CloudFormation type for AWS::WorkSpaces::Workspace.
	AWS_WorkSpaces_Workspace__Type = "AWS::WorkSpaces::Workspace"
)

var (
	// AWS_WorkSpaces_Workspace__PropertiesMap reports all the CloudFormation properties for AWS::WorkSpaces::Workspace.
	AWS_WorkSpaces_Workspace__PropertiesMap = struct {
		BundleId                    string
		DirectoryId                 string
		RootVolumeEncryptionEnabled string
		Tags                        string
		UserName                    string
		UserVolumeEncryptionEnabled string
		VolumeEncryptionKey         string
		WorkspaceProperties         string
	}{
		BundleId:                    "BundleId",
		DirectoryId:                 "DirectoryId",
		RootVolumeEncryptionEnabled: "RootVolumeEncryptionEnabled",
		Tags:                        "Tags",
		UserName:                    "UserName",
		UserVolumeEncryptionEnabled: "UserVolumeEncryptionEnabled",
		VolumeEncryptionKey:         "VolumeEncryptionKey",
		WorkspaceProperties:         "WorkspaceProperties",
	}

	// AWS_WorkSpaces_Workspace__PropertiesSlice reports all the CloudFormation properties for AWS::WorkSpaces::Workspace.
	AWS_WorkSpaces_Workspace__PropertiesSlice = []string{
		AWS_WorkSpaces_Workspace__PropertiesMap.BundleId,
		AWS_WorkSpaces_Workspace__PropertiesMap.DirectoryId,
		AWS_WorkSpaces_Workspace__PropertiesMap.RootVolumeEncryptionEnabled,
		AWS_WorkSpaces_Workspace__PropertiesMap.Tags,
		AWS_WorkSpaces_Workspace__PropertiesMap.UserName,
		AWS_WorkSpaces_Workspace__PropertiesMap.UserVolumeEncryptionEnabled,
		AWS_WorkSpaces_Workspace__PropertiesMap.VolumeEncryptionKey,
		AWS_WorkSpaces_Workspace__PropertiesMap.WorkspaceProperties,
	}
)

// AWS_WorkSpaces_Workspace is a binding for AWS::WorkSpaces::Workspace.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html
type AWS_WorkSpaces_Workspace struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// BundleId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-bundleid
	BundleId cfz.Expression[string] `json:"BundleId,omitempty"`

	// DirectoryId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-directoryid
	DirectoryId cfz.Expression[string] `json:"DirectoryId,omitempty"`

	// RootVolumeEncryptionEnabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-rootvolumeencryptionenabled
	RootVolumeEncryptionEnabled cfz.Expression[bool] `json:"RootVolumeEncryptionEnabled,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// UserName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-username
	UserName cfz.Expression[string] `json:"UserName,omitempty"`

	// UserVolumeEncryptionEnabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-uservolumeencryptionenabled
	UserVolumeEncryptionEnabled cfz.Expression[bool] `json:"UserVolumeEncryptionEnabled,omitempty"`

	// VolumeEncryptionKey is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-volumeencryptionkey
	VolumeEncryptionKey cfz.Expression[string] `json:"VolumeEncryptionKey,omitempty"`

	// WorkspaceProperties is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html#cfn-workspaces-workspace-workspaceproperties
	WorkspaceProperties cfz.Expression[AWS_WorkSpaces_Workspace_WorkspaceProperties] `json:"WorkspaceProperties,omitempty"`
}

// New__AWS_WorkSpaces_Workspace initializes a new *AWS_WorkSpaces_Workspace.
func New__AWS_WorkSpaces_Workspace(logicalName string) *AWS_WorkSpaces_Workspace {
	return &AWS_WorkSpaces_Workspace{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_WorkSpaces_Workspace) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_WorkSpaces_Workspace) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_WorkSpaces_Workspace) GetType() string {
	return AWS_WorkSpaces_Workspace__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_WorkSpaces_Workspace) Set__LogicalName(v string) *AWS_WorkSpaces_Workspace {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_WorkSpaces_Workspace) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_WorkSpaces_Workspace {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_WorkSpaces_Workspace) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_WorkSpaces_Workspace {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_WorkSpaces_Workspace) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_WorkSpaces_Workspace {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_WorkSpaces_Workspace) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_WorkSpaces_Workspace {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_WorkSpaces_Workspace) Set__RequestedOutputs(v []cfz.Output) *AWS_WorkSpaces_Workspace {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_WorkSpaces_Workspace) Add__RequestedOutputs(v ...cfz.Output) *AWS_WorkSpaces_Workspace {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__BundleId updates property "BundleId".
func (t *AWS_WorkSpaces_Workspace) Set__BundleId(v cfz.Expression[string]) *AWS_WorkSpaces_Workspace {
	t.BundleId = v
	return t
}

// SetV__BundleId updates property "BundleId".
func (t *AWS_WorkSpaces_Workspace) SetV__BundleId(v string) *AWS_WorkSpaces_Workspace {
	t.BundleId = cfz.V(v)
	return t
}

// Set__DirectoryId updates property "DirectoryId".
func (t *AWS_WorkSpaces_Workspace) Set__DirectoryId(v cfz.Expression[string]) *AWS_WorkSpaces_Workspace {
	t.DirectoryId = v
	return t
}

// SetV__DirectoryId updates property "DirectoryId".
func (t *AWS_WorkSpaces_Workspace) SetV__DirectoryId(v string) *AWS_WorkSpaces_Workspace {
	t.DirectoryId = cfz.V(v)
	return t
}

// Set__RootVolumeEncryptionEnabled updates property "RootVolumeEncryptionEnabled".
func (t *AWS_WorkSpaces_Workspace) Set__RootVolumeEncryptionEnabled(v cfz.Expression[bool]) *AWS_WorkSpaces_Workspace {
	t.RootVolumeEncryptionEnabled = v
	return t
}

// SetV__RootVolumeEncryptionEnabled updates property "RootVolumeEncryptionEnabled".
func (t *AWS_WorkSpaces_Workspace) SetV__RootVolumeEncryptionEnabled(v bool) *AWS_WorkSpaces_Workspace {
	t.RootVolumeEncryptionEnabled = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_WorkSpaces_Workspace) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_WorkSpaces_Workspace {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_WorkSpaces_Workspace) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_WorkSpaces_Workspace {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_WorkSpaces_Workspace) SetSV__Tags(v ...cfz.Tag) *AWS_WorkSpaces_Workspace {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__UserName updates property "UserName".
func (t *AWS_WorkSpaces_Workspace) Set__UserName(v cfz.Expression[string]) *AWS_WorkSpaces_Workspace {
	t.UserName = v
	return t
}

// SetV__UserName updates property "UserName".
func (t *AWS_WorkSpaces_Workspace) SetV__UserName(v string) *AWS_WorkSpaces_Workspace {
	t.UserName = cfz.V(v)
	return t
}

// Set__UserVolumeEncryptionEnabled updates property "UserVolumeEncryptionEnabled".
func (t *AWS_WorkSpaces_Workspace) Set__UserVolumeEncryptionEnabled(v cfz.Expression[bool]) *AWS_WorkSpaces_Workspace {
	t.UserVolumeEncryptionEnabled = v
	return t
}

// SetV__UserVolumeEncryptionEnabled updates property "UserVolumeEncryptionEnabled".
func (t *AWS_WorkSpaces_Workspace) SetV__UserVolumeEncryptionEnabled(v bool) *AWS_WorkSpaces_Workspace {
	t.UserVolumeEncryptionEnabled = cfz.V(v)
	return t
}

// Set__VolumeEncryptionKey updates property "VolumeEncryptionKey".
func (t *AWS_WorkSpaces_Workspace) Set__VolumeEncryptionKey(v cfz.Expression[string]) *AWS_WorkSpaces_Workspace {
	t.VolumeEncryptionKey = v
	return t
}

// SetV__VolumeEncryptionKey updates property "VolumeEncryptionKey".
func (t *AWS_WorkSpaces_Workspace) SetV__VolumeEncryptionKey(v string) *AWS_WorkSpaces_Workspace {
	t.VolumeEncryptionKey = cfz.V(v)
	return t
}

// Set__WorkspaceProperties updates property "WorkspaceProperties".
func (t *AWS_WorkSpaces_Workspace) Set__WorkspaceProperties(v cfz.Expression[AWS_WorkSpaces_Workspace_WorkspaceProperties]) *AWS_WorkSpaces_Workspace {
	t.WorkspaceProperties = v
	return t
}

// SetV__WorkspaceProperties updates property "WorkspaceProperties".
func (t *AWS_WorkSpaces_Workspace) SetV__WorkspaceProperties(v AWS_WorkSpaces_Workspace_WorkspaceProperties) *AWS_WorkSpaces_Workspace {
	t.WorkspaceProperties = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_WorkSpaces_Workspace) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_WorkSpaces_Workspace) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_WorkSpaces_Workspace) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_WorkSpaces_Workspace

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_WorkSpaces_Workspace) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
