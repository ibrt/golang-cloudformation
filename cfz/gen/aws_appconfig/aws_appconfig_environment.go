// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_appconfig

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_AppConfig_Environment)(nil)
	_ cfz.Resource                   = (*AWS_AppConfig_Environment)(nil)
)

const (
	// AWS_AppConfig_Environment__Type is the CloudFormation type for AWS::AppConfig::Environment.
	AWS_AppConfig_Environment__Type = "AWS::AppConfig::Environment"
)

var (
	// AWS_AppConfig_Environment__AttributesMap reports all the CloudFormation attributes for AWS::AppConfig::Environment.
	AWS_AppConfig_Environment__AttributesMap = struct {
		EnvironmentId string
	}{
		EnvironmentId: "EnvironmentId",
	}

	// AWS_AppConfig_Environment__AttributesSlice reports all the CloudFormation attributes for AWS::AppConfig::Environment.
	AWS_AppConfig_Environment__AttributesSlice = []string{
		AWS_AppConfig_Environment__AttributesMap.EnvironmentId,
	}
)

var (
	// AWS_AppConfig_Environment__PropertiesMap reports all the CloudFormation properties for AWS::AppConfig::Environment.
	AWS_AppConfig_Environment__PropertiesMap = struct {
		ApplicationId string
		Description   string
		Monitors      string
		Name          string
		Tags          string
	}{
		ApplicationId: "ApplicationId",
		Description:   "Description",
		Monitors:      "Monitors",
		Name:          "Name",
		Tags:          "Tags",
	}

	// AWS_AppConfig_Environment__PropertiesSlice reports all the CloudFormation properties for AWS::AppConfig::Environment.
	AWS_AppConfig_Environment__PropertiesSlice = []string{
		AWS_AppConfig_Environment__PropertiesMap.ApplicationId,
		AWS_AppConfig_Environment__PropertiesMap.Description,
		AWS_AppConfig_Environment__PropertiesMap.Monitors,
		AWS_AppConfig_Environment__PropertiesMap.Name,
		AWS_AppConfig_Environment__PropertiesMap.Tags,
	}
)

// AWS_AppConfig_Environment is a binding for AWS::AppConfig::Environment.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appconfig-environment.html
type AWS_AppConfig_Environment struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ApplicationId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appconfig-environment.html#cfn-appconfig-environment-applicationid
	ApplicationId cfz.Expression[string] `json:"ApplicationId,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appconfig-environment.html#cfn-appconfig-environment-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// Monitors is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appconfig-environment.html#cfn-appconfig-environment-monitors
	Monitors cfz.ExpressionSlice[AWS_AppConfig_Environment_Monitor] `json:"Monitors,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appconfig-environment.html#cfn-appconfig-environment-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appconfig-environment.html#cfn-appconfig-environment-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_AppConfig_Environment initializes a new *AWS_AppConfig_Environment.
func New__AWS_AppConfig_Environment(logicalName string) *AWS_AppConfig_Environment {
	return &AWS_AppConfig_Environment{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_AppConfig_Environment) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_AppConfig_Environment) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_AppConfig_Environment) GetType() string {
	return AWS_AppConfig_Environment__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_AppConfig_Environment) Set__LogicalName(v string) *AWS_AppConfig_Environment {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_AppConfig_Environment) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_AppConfig_Environment {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_AppConfig_Environment) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_AppConfig_Environment {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_AppConfig_Environment) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_AppConfig_Environment {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_AppConfig_Environment) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_AppConfig_Environment {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_AppConfig_Environment) Set__RequestedOutputs(v []cfz.Output) *AWS_AppConfig_Environment {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_AppConfig_Environment) Add__RequestedOutputs(v ...cfz.Output) *AWS_AppConfig_Environment {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ApplicationId updates property "ApplicationId".
func (t *AWS_AppConfig_Environment) Set__ApplicationId(v cfz.Expression[string]) *AWS_AppConfig_Environment {
	t.ApplicationId = v
	return t
}

// SetV__ApplicationId updates property "ApplicationId".
func (t *AWS_AppConfig_Environment) SetV__ApplicationId(v string) *AWS_AppConfig_Environment {
	t.ApplicationId = cfz.V(v)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_AppConfig_Environment) Set__Description(v cfz.Expression[string]) *AWS_AppConfig_Environment {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_AppConfig_Environment) SetV__Description(v string) *AWS_AppConfig_Environment {
	t.Description = cfz.V(v)
	return t
}

// Set__Monitors updates property "Monitors".
func (t *AWS_AppConfig_Environment) Set__Monitors(v cfz.ExpressionSlice[AWS_AppConfig_Environment_Monitor]) *AWS_AppConfig_Environment {
	t.Monitors = v
	return t
}

// SetS__Monitors updates property "Monitors".
func (t *AWS_AppConfig_Environment) SetS__Monitors(v ...cfz.Expression[AWS_AppConfig_Environment_Monitor]) *AWS_AppConfig_Environment {
	t.Monitors = cfz.S(v...)
	return t
}

// SetSV__Monitors updates property "Monitors".
func (t *AWS_AppConfig_Environment) SetSV__Monitors(v ...AWS_AppConfig_Environment_Monitor) *AWS_AppConfig_Environment {
	t.Monitors = cfz.SV(v...)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_AppConfig_Environment) Set__Name(v cfz.Expression[string]) *AWS_AppConfig_Environment {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_AppConfig_Environment) SetV__Name(v string) *AWS_AppConfig_Environment {
	t.Name = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_AppConfig_Environment) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_AppConfig_Environment {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_AppConfig_Environment) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_AppConfig_Environment {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_AppConfig_Environment) SetSV__Tags(v ...cfz.Tag) *AWS_AppConfig_Environment {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_AppConfig_Environment) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__EnvironmentId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: EnvironmentId
func (t *AWS_AppConfig_Environment) GetAtt__EnvironmentId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_AppConfig_Environment__AttributesMap.EnvironmentId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_AppConfig_Environment) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__EnvironmentId returns a conventionally configured output for an attribute of this resource.
// Attribute: EnvironmentId
func (t *AWS_AppConfig_Environment) GetConventionalOutputAtt__EnvironmentId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttEnvironmentId", t.GetAtt__EnvironmentId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_AppConfig_Environment) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_AppConfig_Environment

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_AppConfig_Environment) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
