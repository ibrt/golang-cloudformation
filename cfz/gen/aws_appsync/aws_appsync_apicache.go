// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_appsync

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_AppSync_ApiCache)(nil)
	_ cfz.Resource                   = (*AWS_AppSync_ApiCache)(nil)
)

const (
	// AWS_AppSync_ApiCache__Type is the CloudFormation type for AWS::AppSync::ApiCache.
	AWS_AppSync_ApiCache__Type = "AWS::AppSync::ApiCache"
)

var (
	// AWS_AppSync_ApiCache__PropertiesMap reports all the CloudFormation properties for AWS::AppSync::ApiCache.
	AWS_AppSync_ApiCache__PropertiesMap = struct {
		ApiCachingBehavior       string
		ApiId                    string
		AtRestEncryptionEnabled  string
		HealthMetricsConfig      string
		TransitEncryptionEnabled string
		Ttl                      string
		Type                     string
	}{
		ApiCachingBehavior:       "ApiCachingBehavior",
		ApiId:                    "ApiId",
		AtRestEncryptionEnabled:  "AtRestEncryptionEnabled",
		HealthMetricsConfig:      "HealthMetricsConfig",
		TransitEncryptionEnabled: "TransitEncryptionEnabled",
		Ttl:                      "Ttl",
		Type:                     "Type",
	}

	// AWS_AppSync_ApiCache__PropertiesSlice reports all the CloudFormation properties for AWS::AppSync::ApiCache.
	AWS_AppSync_ApiCache__PropertiesSlice = []string{
		AWS_AppSync_ApiCache__PropertiesMap.ApiCachingBehavior,
		AWS_AppSync_ApiCache__PropertiesMap.ApiId,
		AWS_AppSync_ApiCache__PropertiesMap.AtRestEncryptionEnabled,
		AWS_AppSync_ApiCache__PropertiesMap.HealthMetricsConfig,
		AWS_AppSync_ApiCache__PropertiesMap.TransitEncryptionEnabled,
		AWS_AppSync_ApiCache__PropertiesMap.Ttl,
		AWS_AppSync_ApiCache__PropertiesMap.Type,
	}
)

// AWS_AppSync_ApiCache is a binding for AWS::AppSync::ApiCache.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html
type AWS_AppSync_ApiCache struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ApiCachingBehavior is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-apicachingbehavior
	ApiCachingBehavior cfz.Expression[string] `json:"ApiCachingBehavior,omitempty"`

	// ApiId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-apiid
	ApiId cfz.Expression[string] `json:"ApiId,omitempty"`

	// AtRestEncryptionEnabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-atrestencryptionenabled
	AtRestEncryptionEnabled cfz.Expression[bool] `json:"AtRestEncryptionEnabled,omitempty"`

	// HealthMetricsConfig is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-healthmetricsconfig
	HealthMetricsConfig cfz.Expression[string] `json:"HealthMetricsConfig,omitempty"`

	// TransitEncryptionEnabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-transitencryptionenabled
	TransitEncryptionEnabled cfz.Expression[bool] `json:"TransitEncryptionEnabled,omitempty"`

	// Ttl is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-ttl
	Ttl cfz.Expression[float64] `json:"Ttl,omitempty"`

	// Type is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-type
	Type cfz.Expression[string] `json:"Type,omitempty"`
}

// New__AWS_AppSync_ApiCache initializes a new *AWS_AppSync_ApiCache.
func New__AWS_AppSync_ApiCache(logicalName string) *AWS_AppSync_ApiCache {
	return &AWS_AppSync_ApiCache{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_AppSync_ApiCache) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_AppSync_ApiCache) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_AppSync_ApiCache) GetType() string {
	return AWS_AppSync_ApiCache__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_AppSync_ApiCache) Set__LogicalName(v string) *AWS_AppSync_ApiCache {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_AppSync_ApiCache) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_AppSync_ApiCache {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_AppSync_ApiCache) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_AppSync_ApiCache {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_AppSync_ApiCache) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_AppSync_ApiCache {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_AppSync_ApiCache) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_AppSync_ApiCache {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_AppSync_ApiCache) Set__RequestedOutputs(v []cfz.Output) *AWS_AppSync_ApiCache {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_AppSync_ApiCache) Add__RequestedOutputs(v ...cfz.Output) *AWS_AppSync_ApiCache {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ApiCachingBehavior updates property "ApiCachingBehavior".
func (t *AWS_AppSync_ApiCache) Set__ApiCachingBehavior(v cfz.Expression[string]) *AWS_AppSync_ApiCache {
	t.ApiCachingBehavior = v
	return t
}

// SetV__ApiCachingBehavior updates property "ApiCachingBehavior".
func (t *AWS_AppSync_ApiCache) SetV__ApiCachingBehavior(v string) *AWS_AppSync_ApiCache {
	t.ApiCachingBehavior = cfz.V(v)
	return t
}

// Set__ApiId updates property "ApiId".
func (t *AWS_AppSync_ApiCache) Set__ApiId(v cfz.Expression[string]) *AWS_AppSync_ApiCache {
	t.ApiId = v
	return t
}

// SetV__ApiId updates property "ApiId".
func (t *AWS_AppSync_ApiCache) SetV__ApiId(v string) *AWS_AppSync_ApiCache {
	t.ApiId = cfz.V(v)
	return t
}

// Set__AtRestEncryptionEnabled updates property "AtRestEncryptionEnabled".
func (t *AWS_AppSync_ApiCache) Set__AtRestEncryptionEnabled(v cfz.Expression[bool]) *AWS_AppSync_ApiCache {
	t.AtRestEncryptionEnabled = v
	return t
}

// SetV__AtRestEncryptionEnabled updates property "AtRestEncryptionEnabled".
func (t *AWS_AppSync_ApiCache) SetV__AtRestEncryptionEnabled(v bool) *AWS_AppSync_ApiCache {
	t.AtRestEncryptionEnabled = cfz.V(v)
	return t
}

// Set__HealthMetricsConfig updates property "HealthMetricsConfig".
func (t *AWS_AppSync_ApiCache) Set__HealthMetricsConfig(v cfz.Expression[string]) *AWS_AppSync_ApiCache {
	t.HealthMetricsConfig = v
	return t
}

// SetV__HealthMetricsConfig updates property "HealthMetricsConfig".
func (t *AWS_AppSync_ApiCache) SetV__HealthMetricsConfig(v string) *AWS_AppSync_ApiCache {
	t.HealthMetricsConfig = cfz.V(v)
	return t
}

// Set__TransitEncryptionEnabled updates property "TransitEncryptionEnabled".
func (t *AWS_AppSync_ApiCache) Set__TransitEncryptionEnabled(v cfz.Expression[bool]) *AWS_AppSync_ApiCache {
	t.TransitEncryptionEnabled = v
	return t
}

// SetV__TransitEncryptionEnabled updates property "TransitEncryptionEnabled".
func (t *AWS_AppSync_ApiCache) SetV__TransitEncryptionEnabled(v bool) *AWS_AppSync_ApiCache {
	t.TransitEncryptionEnabled = cfz.V(v)
	return t
}

// Set__Ttl updates property "Ttl".
func (t *AWS_AppSync_ApiCache) Set__Ttl(v cfz.Expression[float64]) *AWS_AppSync_ApiCache {
	t.Ttl = v
	return t
}

// SetV__Ttl updates property "Ttl".
func (t *AWS_AppSync_ApiCache) SetV__Ttl(v float64) *AWS_AppSync_ApiCache {
	t.Ttl = cfz.V(v)
	return t
}

// Set__Type updates property "Type".
func (t *AWS_AppSync_ApiCache) Set__Type(v cfz.Expression[string]) *AWS_AppSync_ApiCache {
	t.Type = v
	return t
}

// SetV__Type updates property "Type".
func (t *AWS_AppSync_ApiCache) SetV__Type(v string) *AWS_AppSync_ApiCache {
	t.Type = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_AppSync_ApiCache) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_AppSync_ApiCache) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_AppSync_ApiCache) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_AppSync_ApiCache

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_AppSync_ApiCache) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
