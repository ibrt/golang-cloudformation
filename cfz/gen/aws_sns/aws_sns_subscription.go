// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_sns

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_SNS_Subscription)(nil)
	_ cfz.Resource                   = (*AWS_SNS_Subscription)(nil)
)

const (
	// AWS_SNS_Subscription__Type is the CloudFormation type for AWS::SNS::Subscription.
	AWS_SNS_Subscription__Type = "AWS::SNS::Subscription"
)

var (
	// AWS_SNS_Subscription__AttributesMap reports all the CloudFormation attributes for AWS::SNS::Subscription.
	AWS_SNS_Subscription__AttributesMap = struct {
		Arn string
	}{
		Arn: "Arn",
	}

	// AWS_SNS_Subscription__AttributesSlice reports all the CloudFormation attributes for AWS::SNS::Subscription.
	AWS_SNS_Subscription__AttributesSlice = []string{
		AWS_SNS_Subscription__AttributesMap.Arn,
	}
)

var (
	// AWS_SNS_Subscription__PropertiesMap reports all the CloudFormation properties for AWS::SNS::Subscription.
	AWS_SNS_Subscription__PropertiesMap = struct {
		DeliveryPolicy      string
		Endpoint            string
		FilterPolicy        string
		FilterPolicyScope   string
		Protocol            string
		RawMessageDelivery  string
		RedrivePolicy       string
		Region              string
		ReplayPolicy        string
		SubscriptionRoleArn string
		TopicArn            string
	}{
		DeliveryPolicy:      "DeliveryPolicy",
		Endpoint:            "Endpoint",
		FilterPolicy:        "FilterPolicy",
		FilterPolicyScope:   "FilterPolicyScope",
		Protocol:            "Protocol",
		RawMessageDelivery:  "RawMessageDelivery",
		RedrivePolicy:       "RedrivePolicy",
		Region:              "Region",
		ReplayPolicy:        "ReplayPolicy",
		SubscriptionRoleArn: "SubscriptionRoleArn",
		TopicArn:            "TopicArn",
	}

	// AWS_SNS_Subscription__PropertiesSlice reports all the CloudFormation properties for AWS::SNS::Subscription.
	AWS_SNS_Subscription__PropertiesSlice = []string{
		AWS_SNS_Subscription__PropertiesMap.DeliveryPolicy,
		AWS_SNS_Subscription__PropertiesMap.Endpoint,
		AWS_SNS_Subscription__PropertiesMap.FilterPolicy,
		AWS_SNS_Subscription__PropertiesMap.FilterPolicyScope,
		AWS_SNS_Subscription__PropertiesMap.Protocol,
		AWS_SNS_Subscription__PropertiesMap.RawMessageDelivery,
		AWS_SNS_Subscription__PropertiesMap.RedrivePolicy,
		AWS_SNS_Subscription__PropertiesMap.Region,
		AWS_SNS_Subscription__PropertiesMap.ReplayPolicy,
		AWS_SNS_Subscription__PropertiesMap.SubscriptionRoleArn,
		AWS_SNS_Subscription__PropertiesMap.TopicArn,
	}
)

// AWS_SNS_Subscription is a binding for AWS::SNS::Subscription.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html
type AWS_SNS_Subscription struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// DeliveryPolicy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html#cfn-sns-subscription-deliverypolicy
	DeliveryPolicy cfz.Expression[json.RawMessage] `json:"DeliveryPolicy,omitempty"`

	// Endpoint is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html#cfn-sns-subscription-endpoint
	Endpoint cfz.Expression[string] `json:"Endpoint,omitempty"`

	// FilterPolicy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html#cfn-sns-subscription-filterpolicy
	FilterPolicy cfz.Expression[json.RawMessage] `json:"FilterPolicy,omitempty"`

	// FilterPolicyScope is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html#cfn-sns-subscription-filterpolicyscope
	FilterPolicyScope cfz.Expression[string] `json:"FilterPolicyScope,omitempty"`

	// Protocol is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html#cfn-sns-subscription-protocol
	Protocol cfz.Expression[string] `json:"Protocol,omitempty"`

	// RawMessageDelivery is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html#cfn-sns-subscription-rawmessagedelivery
	RawMessageDelivery cfz.Expression[bool] `json:"RawMessageDelivery,omitempty"`

	// RedrivePolicy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html#cfn-sns-subscription-redrivepolicy
	RedrivePolicy cfz.Expression[json.RawMessage] `json:"RedrivePolicy,omitempty"`

	// Region is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html#cfn-sns-subscription-region
	Region cfz.Expression[string] `json:"Region,omitempty"`

	// ReplayPolicy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html#cfn-sns-subscription-replaypolicy
	ReplayPolicy cfz.Expression[json.RawMessage] `json:"ReplayPolicy,omitempty"`

	// SubscriptionRoleArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html#cfn-sns-subscription-subscriptionrolearn
	SubscriptionRoleArn cfz.Expression[string] `json:"SubscriptionRoleArn,omitempty"`

	// TopicArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html#cfn-sns-subscription-topicarn
	TopicArn cfz.Expression[string] `json:"TopicArn,omitempty"`
}

// New__AWS_SNS_Subscription initializes a new *AWS_SNS_Subscription.
func New__AWS_SNS_Subscription(logicalName string) *AWS_SNS_Subscription {
	return &AWS_SNS_Subscription{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_SNS_Subscription) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_SNS_Subscription) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_SNS_Subscription) GetType() string {
	return AWS_SNS_Subscription__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_SNS_Subscription) Set__LogicalName(v string) *AWS_SNS_Subscription {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_SNS_Subscription) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_SNS_Subscription {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_SNS_Subscription) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_SNS_Subscription {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_SNS_Subscription) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_SNS_Subscription {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_SNS_Subscription) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_SNS_Subscription {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_SNS_Subscription) Set__RequestedOutputs(v []cfz.Output) *AWS_SNS_Subscription {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_SNS_Subscription) Add__RequestedOutputs(v ...cfz.Output) *AWS_SNS_Subscription {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__DeliveryPolicy updates property "DeliveryPolicy".
func (t *AWS_SNS_Subscription) Set__DeliveryPolicy(v cfz.Expression[json.RawMessage]) *AWS_SNS_Subscription {
	t.DeliveryPolicy = v
	return t
}

// SetV__DeliveryPolicy updates property "DeliveryPolicy".
func (t *AWS_SNS_Subscription) SetV__DeliveryPolicy(v json.RawMessage) *AWS_SNS_Subscription {
	t.DeliveryPolicy = cfz.V(v)
	return t
}

// Set__Endpoint updates property "Endpoint".
func (t *AWS_SNS_Subscription) Set__Endpoint(v cfz.Expression[string]) *AWS_SNS_Subscription {
	t.Endpoint = v
	return t
}

// SetV__Endpoint updates property "Endpoint".
func (t *AWS_SNS_Subscription) SetV__Endpoint(v string) *AWS_SNS_Subscription {
	t.Endpoint = cfz.V(v)
	return t
}

// Set__FilterPolicy updates property "FilterPolicy".
func (t *AWS_SNS_Subscription) Set__FilterPolicy(v cfz.Expression[json.RawMessage]) *AWS_SNS_Subscription {
	t.FilterPolicy = v
	return t
}

// SetV__FilterPolicy updates property "FilterPolicy".
func (t *AWS_SNS_Subscription) SetV__FilterPolicy(v json.RawMessage) *AWS_SNS_Subscription {
	t.FilterPolicy = cfz.V(v)
	return t
}

// Set__FilterPolicyScope updates property "FilterPolicyScope".
func (t *AWS_SNS_Subscription) Set__FilterPolicyScope(v cfz.Expression[string]) *AWS_SNS_Subscription {
	t.FilterPolicyScope = v
	return t
}

// SetV__FilterPolicyScope updates property "FilterPolicyScope".
func (t *AWS_SNS_Subscription) SetV__FilterPolicyScope(v string) *AWS_SNS_Subscription {
	t.FilterPolicyScope = cfz.V(v)
	return t
}

// Set__Protocol updates property "Protocol".
func (t *AWS_SNS_Subscription) Set__Protocol(v cfz.Expression[string]) *AWS_SNS_Subscription {
	t.Protocol = v
	return t
}

// SetV__Protocol updates property "Protocol".
func (t *AWS_SNS_Subscription) SetV__Protocol(v string) *AWS_SNS_Subscription {
	t.Protocol = cfz.V(v)
	return t
}

// Set__RawMessageDelivery updates property "RawMessageDelivery".
func (t *AWS_SNS_Subscription) Set__RawMessageDelivery(v cfz.Expression[bool]) *AWS_SNS_Subscription {
	t.RawMessageDelivery = v
	return t
}

// SetV__RawMessageDelivery updates property "RawMessageDelivery".
func (t *AWS_SNS_Subscription) SetV__RawMessageDelivery(v bool) *AWS_SNS_Subscription {
	t.RawMessageDelivery = cfz.V(v)
	return t
}

// Set__RedrivePolicy updates property "RedrivePolicy".
func (t *AWS_SNS_Subscription) Set__RedrivePolicy(v cfz.Expression[json.RawMessage]) *AWS_SNS_Subscription {
	t.RedrivePolicy = v
	return t
}

// SetV__RedrivePolicy updates property "RedrivePolicy".
func (t *AWS_SNS_Subscription) SetV__RedrivePolicy(v json.RawMessage) *AWS_SNS_Subscription {
	t.RedrivePolicy = cfz.V(v)
	return t
}

// Set__Region updates property "Region".
func (t *AWS_SNS_Subscription) Set__Region(v cfz.Expression[string]) *AWS_SNS_Subscription {
	t.Region = v
	return t
}

// SetV__Region updates property "Region".
func (t *AWS_SNS_Subscription) SetV__Region(v string) *AWS_SNS_Subscription {
	t.Region = cfz.V(v)
	return t
}

// Set__ReplayPolicy updates property "ReplayPolicy".
func (t *AWS_SNS_Subscription) Set__ReplayPolicy(v cfz.Expression[json.RawMessage]) *AWS_SNS_Subscription {
	t.ReplayPolicy = v
	return t
}

// SetV__ReplayPolicy updates property "ReplayPolicy".
func (t *AWS_SNS_Subscription) SetV__ReplayPolicy(v json.RawMessage) *AWS_SNS_Subscription {
	t.ReplayPolicy = cfz.V(v)
	return t
}

// Set__SubscriptionRoleArn updates property "SubscriptionRoleArn".
func (t *AWS_SNS_Subscription) Set__SubscriptionRoleArn(v cfz.Expression[string]) *AWS_SNS_Subscription {
	t.SubscriptionRoleArn = v
	return t
}

// SetV__SubscriptionRoleArn updates property "SubscriptionRoleArn".
func (t *AWS_SNS_Subscription) SetV__SubscriptionRoleArn(v string) *AWS_SNS_Subscription {
	t.SubscriptionRoleArn = cfz.V(v)
	return t
}

// Set__TopicArn updates property "TopicArn".
func (t *AWS_SNS_Subscription) Set__TopicArn(v cfz.Expression[string]) *AWS_SNS_Subscription {
	t.TopicArn = v
	return t
}

// SetV__TopicArn updates property "TopicArn".
func (t *AWS_SNS_Subscription) SetV__TopicArn(v string) *AWS_SNS_Subscription {
	t.TopicArn = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_SNS_Subscription) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_SNS_Subscription) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_SNS_Subscription__AttributesMap.Arn))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_SNS_Subscription) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_SNS_Subscription) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_SNS_Subscription) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_SNS_Subscription

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_SNS_Subscription) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
