// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_sns

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_SNS_Topic)(nil)
	_ cfz.Resource                   = (*AWS_SNS_Topic)(nil)
)

const (
	// AWS_SNS_Topic__Type is the CloudFormation type for AWS::SNS::Topic.
	AWS_SNS_Topic__Type = "AWS::SNS::Topic"
)

var (
	// AWS_SNS_Topic__AttributesMap reports all the CloudFormation attributes for AWS::SNS::Topic.
	AWS_SNS_Topic__AttributesMap = struct {
		TopicArn  string
		TopicName string
	}{
		TopicArn:  "TopicArn",
		TopicName: "TopicName",
	}

	// AWS_SNS_Topic__AttributesSlice reports all the CloudFormation attributes for AWS::SNS::Topic.
	AWS_SNS_Topic__AttributesSlice = []string{
		AWS_SNS_Topic__AttributesMap.TopicArn,
		AWS_SNS_Topic__AttributesMap.TopicName,
	}
)

var (
	// AWS_SNS_Topic__PropertiesMap reports all the CloudFormation properties for AWS::SNS::Topic.
	AWS_SNS_Topic__PropertiesMap = struct {
		ArchivePolicy             string
		ContentBasedDeduplication string
		DataProtectionPolicy      string
		DeliveryStatusLogging     string
		DisplayName               string
		FifoTopic                 string
		KmsMasterKeyId            string
		SignatureVersion          string
		Subscription              string
		Tags                      string
		TopicName                 string
		TracingConfig             string
	}{
		ArchivePolicy:             "ArchivePolicy",
		ContentBasedDeduplication: "ContentBasedDeduplication",
		DataProtectionPolicy:      "DataProtectionPolicy",
		DeliveryStatusLogging:     "DeliveryStatusLogging",
		DisplayName:               "DisplayName",
		FifoTopic:                 "FifoTopic",
		KmsMasterKeyId:            "KmsMasterKeyId",
		SignatureVersion:          "SignatureVersion",
		Subscription:              "Subscription",
		Tags:                      "Tags",
		TopicName:                 "TopicName",
		TracingConfig:             "TracingConfig",
	}

	// AWS_SNS_Topic__PropertiesSlice reports all the CloudFormation properties for AWS::SNS::Topic.
	AWS_SNS_Topic__PropertiesSlice = []string{
		AWS_SNS_Topic__PropertiesMap.ArchivePolicy,
		AWS_SNS_Topic__PropertiesMap.ContentBasedDeduplication,
		AWS_SNS_Topic__PropertiesMap.DataProtectionPolicy,
		AWS_SNS_Topic__PropertiesMap.DeliveryStatusLogging,
		AWS_SNS_Topic__PropertiesMap.DisplayName,
		AWS_SNS_Topic__PropertiesMap.FifoTopic,
		AWS_SNS_Topic__PropertiesMap.KmsMasterKeyId,
		AWS_SNS_Topic__PropertiesMap.SignatureVersion,
		AWS_SNS_Topic__PropertiesMap.Subscription,
		AWS_SNS_Topic__PropertiesMap.Tags,
		AWS_SNS_Topic__PropertiesMap.TopicName,
		AWS_SNS_Topic__PropertiesMap.TracingConfig,
	}
)

// AWS_SNS_Topic is a binding for AWS::SNS::Topic.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topic.html
type AWS_SNS_Topic struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ArchivePolicy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topic.html#cfn-sns-topic-archivepolicy
	ArchivePolicy cfz.Expression[json.RawMessage] `json:"ArchivePolicy,omitempty"`

	// ContentBasedDeduplication is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topic.html#cfn-sns-topic-contentbaseddeduplication
	ContentBasedDeduplication cfz.Expression[bool] `json:"ContentBasedDeduplication,omitempty"`

	// DataProtectionPolicy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topic.html#cfn-sns-topic-dataprotectionpolicy
	DataProtectionPolicy cfz.Expression[json.RawMessage] `json:"DataProtectionPolicy,omitempty"`

	// DeliveryStatusLogging is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topic.html#cfn-sns-topic-deliverystatuslogging
	DeliveryStatusLogging cfz.ExpressionSlice[AWS_SNS_Topic_LoggingConfig] `json:"DeliveryStatusLogging,omitempty"`

	// DisplayName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topic.html#cfn-sns-topic-displayname
	DisplayName cfz.Expression[string] `json:"DisplayName,omitempty"`

	// FifoTopic is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topic.html#cfn-sns-topic-fifotopic
	FifoTopic cfz.Expression[bool] `json:"FifoTopic,omitempty"`

	// KmsMasterKeyId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topic.html#cfn-sns-topic-kmsmasterkeyid
	KmsMasterKeyId cfz.Expression[string] `json:"KmsMasterKeyId,omitempty"`

	// SignatureVersion is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topic.html#cfn-sns-topic-signatureversion
	SignatureVersion cfz.Expression[string] `json:"SignatureVersion,omitempty"`

	// Subscription is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topic.html#cfn-sns-topic-subscription
	Subscription cfz.ExpressionSlice[AWS_SNS_Topic_Subscription] `json:"Subscription,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topic.html#cfn-sns-topic-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// TopicName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topic.html#cfn-sns-topic-topicname
	TopicName cfz.Expression[string] `json:"TopicName,omitempty"`

	// TracingConfig is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topic.html#cfn-sns-topic-tracingconfig
	TracingConfig cfz.Expression[string] `json:"TracingConfig,omitempty"`
}

// New__AWS_SNS_Topic initializes a new *AWS_SNS_Topic.
func New__AWS_SNS_Topic(logicalName string) *AWS_SNS_Topic {
	return &AWS_SNS_Topic{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_SNS_Topic) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_SNS_Topic) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_SNS_Topic) GetType() string {
	return AWS_SNS_Topic__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_SNS_Topic) Set__LogicalName(v string) *AWS_SNS_Topic {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_SNS_Topic) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_SNS_Topic {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_SNS_Topic) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_SNS_Topic {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_SNS_Topic) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_SNS_Topic {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_SNS_Topic) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_SNS_Topic {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_SNS_Topic) Set__RequestedOutputs(v []cfz.Output) *AWS_SNS_Topic {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_SNS_Topic) Add__RequestedOutputs(v ...cfz.Output) *AWS_SNS_Topic {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ArchivePolicy updates property "ArchivePolicy".
func (t *AWS_SNS_Topic) Set__ArchivePolicy(v cfz.Expression[json.RawMessage]) *AWS_SNS_Topic {
	t.ArchivePolicy = v
	return t
}

// SetV__ArchivePolicy updates property "ArchivePolicy".
func (t *AWS_SNS_Topic) SetV__ArchivePolicy(v json.RawMessage) *AWS_SNS_Topic {
	t.ArchivePolicy = cfz.V(v)
	return t
}

// Set__ContentBasedDeduplication updates property "ContentBasedDeduplication".
func (t *AWS_SNS_Topic) Set__ContentBasedDeduplication(v cfz.Expression[bool]) *AWS_SNS_Topic {
	t.ContentBasedDeduplication = v
	return t
}

// SetV__ContentBasedDeduplication updates property "ContentBasedDeduplication".
func (t *AWS_SNS_Topic) SetV__ContentBasedDeduplication(v bool) *AWS_SNS_Topic {
	t.ContentBasedDeduplication = cfz.V(v)
	return t
}

// Set__DataProtectionPolicy updates property "DataProtectionPolicy".
func (t *AWS_SNS_Topic) Set__DataProtectionPolicy(v cfz.Expression[json.RawMessage]) *AWS_SNS_Topic {
	t.DataProtectionPolicy = v
	return t
}

// SetV__DataProtectionPolicy updates property "DataProtectionPolicy".
func (t *AWS_SNS_Topic) SetV__DataProtectionPolicy(v json.RawMessage) *AWS_SNS_Topic {
	t.DataProtectionPolicy = cfz.V(v)
	return t
}

// Set__DeliveryStatusLogging updates property "DeliveryStatusLogging".
func (t *AWS_SNS_Topic) Set__DeliveryStatusLogging(v cfz.ExpressionSlice[AWS_SNS_Topic_LoggingConfig]) *AWS_SNS_Topic {
	t.DeliveryStatusLogging = v
	return t
}

// SetS__DeliveryStatusLogging updates property "DeliveryStatusLogging".
func (t *AWS_SNS_Topic) SetS__DeliveryStatusLogging(v ...cfz.Expression[AWS_SNS_Topic_LoggingConfig]) *AWS_SNS_Topic {
	t.DeliveryStatusLogging = cfz.S(v...)
	return t
}

// SetSV__DeliveryStatusLogging updates property "DeliveryStatusLogging".
func (t *AWS_SNS_Topic) SetSV__DeliveryStatusLogging(v ...AWS_SNS_Topic_LoggingConfig) *AWS_SNS_Topic {
	t.DeliveryStatusLogging = cfz.SV(v...)
	return t
}

// Set__DisplayName updates property "DisplayName".
func (t *AWS_SNS_Topic) Set__DisplayName(v cfz.Expression[string]) *AWS_SNS_Topic {
	t.DisplayName = v
	return t
}

// SetV__DisplayName updates property "DisplayName".
func (t *AWS_SNS_Topic) SetV__DisplayName(v string) *AWS_SNS_Topic {
	t.DisplayName = cfz.V(v)
	return t
}

// Set__FifoTopic updates property "FifoTopic".
func (t *AWS_SNS_Topic) Set__FifoTopic(v cfz.Expression[bool]) *AWS_SNS_Topic {
	t.FifoTopic = v
	return t
}

// SetV__FifoTopic updates property "FifoTopic".
func (t *AWS_SNS_Topic) SetV__FifoTopic(v bool) *AWS_SNS_Topic {
	t.FifoTopic = cfz.V(v)
	return t
}

// Set__KmsMasterKeyId updates property "KmsMasterKeyId".
func (t *AWS_SNS_Topic) Set__KmsMasterKeyId(v cfz.Expression[string]) *AWS_SNS_Topic {
	t.KmsMasterKeyId = v
	return t
}

// SetV__KmsMasterKeyId updates property "KmsMasterKeyId".
func (t *AWS_SNS_Topic) SetV__KmsMasterKeyId(v string) *AWS_SNS_Topic {
	t.KmsMasterKeyId = cfz.V(v)
	return t
}

// Set__SignatureVersion updates property "SignatureVersion".
func (t *AWS_SNS_Topic) Set__SignatureVersion(v cfz.Expression[string]) *AWS_SNS_Topic {
	t.SignatureVersion = v
	return t
}

// SetV__SignatureVersion updates property "SignatureVersion".
func (t *AWS_SNS_Topic) SetV__SignatureVersion(v string) *AWS_SNS_Topic {
	t.SignatureVersion = cfz.V(v)
	return t
}

// Set__Subscription updates property "Subscription".
func (t *AWS_SNS_Topic) Set__Subscription(v cfz.ExpressionSlice[AWS_SNS_Topic_Subscription]) *AWS_SNS_Topic {
	t.Subscription = v
	return t
}

// SetS__Subscription updates property "Subscription".
func (t *AWS_SNS_Topic) SetS__Subscription(v ...cfz.Expression[AWS_SNS_Topic_Subscription]) *AWS_SNS_Topic {
	t.Subscription = cfz.S(v...)
	return t
}

// SetSV__Subscription updates property "Subscription".
func (t *AWS_SNS_Topic) SetSV__Subscription(v ...AWS_SNS_Topic_Subscription) *AWS_SNS_Topic {
	t.Subscription = cfz.SV(v...)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_SNS_Topic) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_SNS_Topic {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_SNS_Topic) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_SNS_Topic {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_SNS_Topic) SetSV__Tags(v ...cfz.Tag) *AWS_SNS_Topic {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__TopicName updates property "TopicName".
func (t *AWS_SNS_Topic) Set__TopicName(v cfz.Expression[string]) *AWS_SNS_Topic {
	t.TopicName = v
	return t
}

// SetV__TopicName updates property "TopicName".
func (t *AWS_SNS_Topic) SetV__TopicName(v string) *AWS_SNS_Topic {
	t.TopicName = cfz.V(v)
	return t
}

// Set__TracingConfig updates property "TracingConfig".
func (t *AWS_SNS_Topic) Set__TracingConfig(v cfz.Expression[string]) *AWS_SNS_Topic {
	t.TracingConfig = v
	return t
}

// SetV__TracingConfig updates property "TracingConfig".
func (t *AWS_SNS_Topic) SetV__TracingConfig(v string) *AWS_SNS_Topic {
	t.TracingConfig = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_SNS_Topic) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__TopicArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: TopicArn
func (t *AWS_SNS_Topic) GetAtt__TopicArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_SNS_Topic__AttributesMap.TopicArn))
}

// GetAtt__TopicName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: TopicName
func (t *AWS_SNS_Topic) GetAtt__TopicName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_SNS_Topic__AttributesMap.TopicName))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_SNS_Topic) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__TopicArn returns a conventionally configured output for an attribute of this resource.
// Attribute: TopicArn
func (t *AWS_SNS_Topic) GetConventionalOutputAtt__TopicArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttTopicArn", t.GetAtt__TopicArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__TopicName returns a conventionally configured output for an attribute of this resource.
// Attribute: TopicName
func (t *AWS_SNS_Topic) GetConventionalOutputAtt__TopicName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttTopicName", t.GetAtt__TopicName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_SNS_Topic) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_SNS_Topic

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_SNS_Topic) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
