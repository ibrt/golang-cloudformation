// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_managedblockchain

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_ManagedBlockchain_Node)(nil)
	_ cfz.Resource                   = (*AWS_ManagedBlockchain_Node)(nil)
)

const (
	// AWS_ManagedBlockchain_Node__Type is the CloudFormation type for AWS::ManagedBlockchain::Node.
	AWS_ManagedBlockchain_Node__Type = "AWS::ManagedBlockchain::Node"
)

var (
	// AWS_ManagedBlockchain_Node__AttributesMap reports all the CloudFormation attributes for AWS::ManagedBlockchain::Node.
	AWS_ManagedBlockchain_Node__AttributesMap = struct {
		Arn       string
		MemberId  string
		NetworkId string
		NodeId    string
	}{
		Arn:       "Arn",
		MemberId:  "MemberId",
		NetworkId: "NetworkId",
		NodeId:    "NodeId",
	}

	// AWS_ManagedBlockchain_Node__AttributesSlice reports all the CloudFormation attributes for AWS::ManagedBlockchain::Node.
	AWS_ManagedBlockchain_Node__AttributesSlice = []string{
		AWS_ManagedBlockchain_Node__AttributesMap.Arn,
		AWS_ManagedBlockchain_Node__AttributesMap.MemberId,
		AWS_ManagedBlockchain_Node__AttributesMap.NetworkId,
		AWS_ManagedBlockchain_Node__AttributesMap.NodeId,
	}
)

var (
	// AWS_ManagedBlockchain_Node__PropertiesMap reports all the CloudFormation properties for AWS::ManagedBlockchain::Node.
	AWS_ManagedBlockchain_Node__PropertiesMap = struct {
		MemberId          string
		NetworkId         string
		NodeConfiguration string
	}{
		MemberId:          "MemberId",
		NetworkId:         "NetworkId",
		NodeConfiguration: "NodeConfiguration",
	}

	// AWS_ManagedBlockchain_Node__PropertiesSlice reports all the CloudFormation properties for AWS::ManagedBlockchain::Node.
	AWS_ManagedBlockchain_Node__PropertiesSlice = []string{
		AWS_ManagedBlockchain_Node__PropertiesMap.MemberId,
		AWS_ManagedBlockchain_Node__PropertiesMap.NetworkId,
		AWS_ManagedBlockchain_Node__PropertiesMap.NodeConfiguration,
	}
)

// AWS_ManagedBlockchain_Node is a binding for AWS::ManagedBlockchain::Node.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-managedblockchain-node.html
type AWS_ManagedBlockchain_Node struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// MemberId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-managedblockchain-node.html#cfn-managedblockchain-node-memberid
	MemberId cfz.Expression[string] `json:"MemberId,omitempty"`

	// NetworkId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-managedblockchain-node.html#cfn-managedblockchain-node-networkid
	NetworkId cfz.Expression[string] `json:"NetworkId,omitempty"`

	// NodeConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-managedblockchain-node.html#cfn-managedblockchain-node-nodeconfiguration
	NodeConfiguration cfz.Expression[AWS_ManagedBlockchain_Node_NodeConfiguration] `json:"NodeConfiguration,omitempty"`
}

// New__AWS_ManagedBlockchain_Node initializes a new *AWS_ManagedBlockchain_Node.
func New__AWS_ManagedBlockchain_Node(logicalName string) *AWS_ManagedBlockchain_Node {
	return &AWS_ManagedBlockchain_Node{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_ManagedBlockchain_Node) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_ManagedBlockchain_Node) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_ManagedBlockchain_Node) GetType() string {
	return AWS_ManagedBlockchain_Node__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_ManagedBlockchain_Node) Set__LogicalName(v string) *AWS_ManagedBlockchain_Node {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_ManagedBlockchain_Node) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_ManagedBlockchain_Node {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_ManagedBlockchain_Node) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_ManagedBlockchain_Node {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_ManagedBlockchain_Node) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_ManagedBlockchain_Node {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_ManagedBlockchain_Node) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_ManagedBlockchain_Node {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_ManagedBlockchain_Node) Set__RequestedOutputs(v []cfz.Output) *AWS_ManagedBlockchain_Node {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_ManagedBlockchain_Node) Add__RequestedOutputs(v ...cfz.Output) *AWS_ManagedBlockchain_Node {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__MemberId updates property "MemberId".
func (t *AWS_ManagedBlockchain_Node) Set__MemberId(v cfz.Expression[string]) *AWS_ManagedBlockchain_Node {
	t.MemberId = v
	return t
}

// SetV__MemberId updates property "MemberId".
func (t *AWS_ManagedBlockchain_Node) SetV__MemberId(v string) *AWS_ManagedBlockchain_Node {
	t.MemberId = cfz.V(v)
	return t
}

// Set__NetworkId updates property "NetworkId".
func (t *AWS_ManagedBlockchain_Node) Set__NetworkId(v cfz.Expression[string]) *AWS_ManagedBlockchain_Node {
	t.NetworkId = v
	return t
}

// SetV__NetworkId updates property "NetworkId".
func (t *AWS_ManagedBlockchain_Node) SetV__NetworkId(v string) *AWS_ManagedBlockchain_Node {
	t.NetworkId = cfz.V(v)
	return t
}

// Set__NodeConfiguration updates property "NodeConfiguration".
func (t *AWS_ManagedBlockchain_Node) Set__NodeConfiguration(v cfz.Expression[AWS_ManagedBlockchain_Node_NodeConfiguration]) *AWS_ManagedBlockchain_Node {
	t.NodeConfiguration = v
	return t
}

// SetV__NodeConfiguration updates property "NodeConfiguration".
func (t *AWS_ManagedBlockchain_Node) SetV__NodeConfiguration(v AWS_ManagedBlockchain_Node_NodeConfiguration) *AWS_ManagedBlockchain_Node {
	t.NodeConfiguration = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_ManagedBlockchain_Node) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_ManagedBlockchain_Node) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ManagedBlockchain_Node__AttributesMap.Arn))
}

// GetAtt__MemberId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: MemberId
func (t *AWS_ManagedBlockchain_Node) GetAtt__MemberId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ManagedBlockchain_Node__AttributesMap.MemberId))
}

// GetAtt__NetworkId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: NetworkId
func (t *AWS_ManagedBlockchain_Node) GetAtt__NetworkId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ManagedBlockchain_Node__AttributesMap.NetworkId))
}

// GetAtt__NodeId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: NodeId
func (t *AWS_ManagedBlockchain_Node) GetAtt__NodeId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ManagedBlockchain_Node__AttributesMap.NodeId))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_ManagedBlockchain_Node) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_ManagedBlockchain_Node) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__MemberId returns a conventionally configured output for an attribute of this resource.
// Attribute: MemberId
func (t *AWS_ManagedBlockchain_Node) GetConventionalOutputAtt__MemberId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttMemberId", t.GetAtt__MemberId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__NetworkId returns a conventionally configured output for an attribute of this resource.
// Attribute: NetworkId
func (t *AWS_ManagedBlockchain_Node) GetConventionalOutputAtt__NetworkId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNetworkId", t.GetAtt__NetworkId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__NodeId returns a conventionally configured output for an attribute of this resource.
// Attribute: NodeId
func (t *AWS_ManagedBlockchain_Node) GetConventionalOutputAtt__NodeId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNodeId", t.GetAtt__NodeId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_ManagedBlockchain_Node) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_ManagedBlockchain_Node

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_ManagedBlockchain_Node) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
