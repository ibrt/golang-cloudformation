// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_managedblockchain

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_ManagedBlockchain_Accessor)(nil)
	_ cfz.Resource                   = (*AWS_ManagedBlockchain_Accessor)(nil)
)

const (
	// AWS_ManagedBlockchain_Accessor__Type is the CloudFormation type for AWS::ManagedBlockchain::Accessor.
	AWS_ManagedBlockchain_Accessor__Type = "AWS::ManagedBlockchain::Accessor"
)

var (
	// AWS_ManagedBlockchain_Accessor__AttributesMap reports all the CloudFormation attributes for AWS::ManagedBlockchain::Accessor.
	AWS_ManagedBlockchain_Accessor__AttributesMap = struct {
		Arn          string
		BillingToken string
		CreationDate string
		Id           string
		Status       string
	}{
		Arn:          "Arn",
		BillingToken: "BillingToken",
		CreationDate: "CreationDate",
		Id:           "Id",
		Status:       "Status",
	}

	// AWS_ManagedBlockchain_Accessor__AttributesSlice reports all the CloudFormation attributes for AWS::ManagedBlockchain::Accessor.
	AWS_ManagedBlockchain_Accessor__AttributesSlice = []string{
		AWS_ManagedBlockchain_Accessor__AttributesMap.Arn,
		AWS_ManagedBlockchain_Accessor__AttributesMap.BillingToken,
		AWS_ManagedBlockchain_Accessor__AttributesMap.CreationDate,
		AWS_ManagedBlockchain_Accessor__AttributesMap.Id,
		AWS_ManagedBlockchain_Accessor__AttributesMap.Status,
	}
)

var (
	// AWS_ManagedBlockchain_Accessor__PropertiesMap reports all the CloudFormation properties for AWS::ManagedBlockchain::Accessor.
	AWS_ManagedBlockchain_Accessor__PropertiesMap = struct {
		AccessorType string
		NetworkType  string
		Tags         string
	}{
		AccessorType: "AccessorType",
		NetworkType:  "NetworkType",
		Tags:         "Tags",
	}

	// AWS_ManagedBlockchain_Accessor__PropertiesSlice reports all the CloudFormation properties for AWS::ManagedBlockchain::Accessor.
	AWS_ManagedBlockchain_Accessor__PropertiesSlice = []string{
		AWS_ManagedBlockchain_Accessor__PropertiesMap.AccessorType,
		AWS_ManagedBlockchain_Accessor__PropertiesMap.NetworkType,
		AWS_ManagedBlockchain_Accessor__PropertiesMap.Tags,
	}
)

// AWS_ManagedBlockchain_Accessor is a binding for AWS::ManagedBlockchain::Accessor.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-managedblockchain-accessor.html
type AWS_ManagedBlockchain_Accessor struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AccessorType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-managedblockchain-accessor.html#cfn-managedblockchain-accessor-accessortype
	AccessorType cfz.Expression[string] `json:"AccessorType,omitempty"`

	// NetworkType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-managedblockchain-accessor.html#cfn-managedblockchain-accessor-networktype
	NetworkType cfz.Expression[string] `json:"NetworkType,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-managedblockchain-accessor.html#cfn-managedblockchain-accessor-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_ManagedBlockchain_Accessor initializes a new *AWS_ManagedBlockchain_Accessor.
func New__AWS_ManagedBlockchain_Accessor(logicalName string) *AWS_ManagedBlockchain_Accessor {
	return &AWS_ManagedBlockchain_Accessor{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_ManagedBlockchain_Accessor) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_ManagedBlockchain_Accessor) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_ManagedBlockchain_Accessor) GetType() string {
	return AWS_ManagedBlockchain_Accessor__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_ManagedBlockchain_Accessor) Set__LogicalName(v string) *AWS_ManagedBlockchain_Accessor {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_ManagedBlockchain_Accessor) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_ManagedBlockchain_Accessor {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_ManagedBlockchain_Accessor) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_ManagedBlockchain_Accessor {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_ManagedBlockchain_Accessor) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_ManagedBlockchain_Accessor {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_ManagedBlockchain_Accessor) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_ManagedBlockchain_Accessor {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_ManagedBlockchain_Accessor) Set__RequestedOutputs(v []cfz.Output) *AWS_ManagedBlockchain_Accessor {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_ManagedBlockchain_Accessor) Add__RequestedOutputs(v ...cfz.Output) *AWS_ManagedBlockchain_Accessor {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AccessorType updates property "AccessorType".
func (t *AWS_ManagedBlockchain_Accessor) Set__AccessorType(v cfz.Expression[string]) *AWS_ManagedBlockchain_Accessor {
	t.AccessorType = v
	return t
}

// SetV__AccessorType updates property "AccessorType".
func (t *AWS_ManagedBlockchain_Accessor) SetV__AccessorType(v string) *AWS_ManagedBlockchain_Accessor {
	t.AccessorType = cfz.V(v)
	return t
}

// Set__NetworkType updates property "NetworkType".
func (t *AWS_ManagedBlockchain_Accessor) Set__NetworkType(v cfz.Expression[string]) *AWS_ManagedBlockchain_Accessor {
	t.NetworkType = v
	return t
}

// SetV__NetworkType updates property "NetworkType".
func (t *AWS_ManagedBlockchain_Accessor) SetV__NetworkType(v string) *AWS_ManagedBlockchain_Accessor {
	t.NetworkType = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_ManagedBlockchain_Accessor) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_ManagedBlockchain_Accessor {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_ManagedBlockchain_Accessor) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_ManagedBlockchain_Accessor {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_ManagedBlockchain_Accessor) SetSV__Tags(v ...cfz.Tag) *AWS_ManagedBlockchain_Accessor {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_ManagedBlockchain_Accessor) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_ManagedBlockchain_Accessor) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ManagedBlockchain_Accessor__AttributesMap.Arn))
}

// GetAtt__BillingToken returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: BillingToken
func (t *AWS_ManagedBlockchain_Accessor) GetAtt__BillingToken() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ManagedBlockchain_Accessor__AttributesMap.BillingToken))
}

// GetAtt__CreationDate returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreationDate
func (t *AWS_ManagedBlockchain_Accessor) GetAtt__CreationDate() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ManagedBlockchain_Accessor__AttributesMap.CreationDate))
}

// GetAtt__Id returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Id
func (t *AWS_ManagedBlockchain_Accessor) GetAtt__Id() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ManagedBlockchain_Accessor__AttributesMap.Id))
}

// GetAtt__Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Status
func (t *AWS_ManagedBlockchain_Accessor) GetAtt__Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ManagedBlockchain_Accessor__AttributesMap.Status))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_ManagedBlockchain_Accessor) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_ManagedBlockchain_Accessor) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__BillingToken returns a conventionally configured output for an attribute of this resource.
// Attribute: BillingToken
func (t *AWS_ManagedBlockchain_Accessor) GetConventionalOutputAtt__BillingToken(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttBillingToken", t.GetAtt__BillingToken())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreationDate returns a conventionally configured output for an attribute of this resource.
// Attribute: CreationDate
func (t *AWS_ManagedBlockchain_Accessor) GetConventionalOutputAtt__CreationDate(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreationDate", t.GetAtt__CreationDate())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Id returns a conventionally configured output for an attribute of this resource.
// Attribute: Id
func (t *AWS_ManagedBlockchain_Accessor) GetConventionalOutputAtt__Id(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttId", t.GetAtt__Id())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Status returns a conventionally configured output for an attribute of this resource.
// Attribute: Status
func (t *AWS_ManagedBlockchain_Accessor) GetConventionalOutputAtt__Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStatus", t.GetAtt__Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_ManagedBlockchain_Accessor) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_ManagedBlockchain_Accessor

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_ManagedBlockchain_Accessor) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
