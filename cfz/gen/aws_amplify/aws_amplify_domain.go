// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_amplify

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Amplify_Domain)(nil)
	_ cfz.Resource                   = (*AWS_Amplify_Domain)(nil)
)

const (
	// AWS_Amplify_Domain__Type is the CloudFormation type for AWS::Amplify::Domain.
	AWS_Amplify_Domain__Type = "AWS::Amplify::Domain"
)

var (
	// AWS_Amplify_Domain__AttributesMap reports all the CloudFormation attributes for AWS::Amplify::Domain.
	AWS_Amplify_Domain__AttributesMap = struct {
		Arn                                          string
		AutoSubDomainCreationPatterns                string
		AutoSubDomainIAMRole                         string
		Certificate                                  string
		Certificate_CertificateArn                   string
		Certificate_CertificateType                  string
		Certificate_CertificateVerificationDNSRecord string
		CertificateRecord                            string
		DomainName                                   string
		DomainStatus                                 string
		EnableAutoSubDomain                          string
		StatusReason                                 string
		UpdateStatus                                 string
	}{
		Arn:                           "Arn",
		AutoSubDomainCreationPatterns: "AutoSubDomainCreationPatterns",
		AutoSubDomainIAMRole:          "AutoSubDomainIAMRole",
		Certificate:                   "Certificate",
		Certificate_CertificateArn:    "Certificate.CertificateArn",
		Certificate_CertificateType:   "Certificate.CertificateType",
		Certificate_CertificateVerificationDNSRecord: "Certificate.CertificateVerificationDNSRecord",
		CertificateRecord:   "CertificateRecord",
		DomainName:          "DomainName",
		DomainStatus:        "DomainStatus",
		EnableAutoSubDomain: "EnableAutoSubDomain",
		StatusReason:        "StatusReason",
		UpdateStatus:        "UpdateStatus",
	}

	// AWS_Amplify_Domain__AttributesSlice reports all the CloudFormation attributes for AWS::Amplify::Domain.
	AWS_Amplify_Domain__AttributesSlice = []string{
		AWS_Amplify_Domain__AttributesMap.Arn,
		AWS_Amplify_Domain__AttributesMap.AutoSubDomainCreationPatterns,
		AWS_Amplify_Domain__AttributesMap.AutoSubDomainIAMRole,
		AWS_Amplify_Domain__AttributesMap.Certificate,
		AWS_Amplify_Domain__AttributesMap.Certificate_CertificateArn,
		AWS_Amplify_Domain__AttributesMap.Certificate_CertificateType,
		AWS_Amplify_Domain__AttributesMap.Certificate_CertificateVerificationDNSRecord,
		AWS_Amplify_Domain__AttributesMap.CertificateRecord,
		AWS_Amplify_Domain__AttributesMap.DomainName,
		AWS_Amplify_Domain__AttributesMap.DomainStatus,
		AWS_Amplify_Domain__AttributesMap.EnableAutoSubDomain,
		AWS_Amplify_Domain__AttributesMap.StatusReason,
		AWS_Amplify_Domain__AttributesMap.UpdateStatus,
	}
)

var (
	// AWS_Amplify_Domain__PropertiesMap reports all the CloudFormation properties for AWS::Amplify::Domain.
	AWS_Amplify_Domain__PropertiesMap = struct {
		AppId                         string
		AutoSubDomainCreationPatterns string
		AutoSubDomainIAMRole          string
		CertificateSettings           string
		DomainName                    string
		EnableAutoSubDomain           string
		SubDomainSettings             string
	}{
		AppId:                         "AppId",
		AutoSubDomainCreationPatterns: "AutoSubDomainCreationPatterns",
		AutoSubDomainIAMRole:          "AutoSubDomainIAMRole",
		CertificateSettings:           "CertificateSettings",
		DomainName:                    "DomainName",
		EnableAutoSubDomain:           "EnableAutoSubDomain",
		SubDomainSettings:             "SubDomainSettings",
	}

	// AWS_Amplify_Domain__PropertiesSlice reports all the CloudFormation properties for AWS::Amplify::Domain.
	AWS_Amplify_Domain__PropertiesSlice = []string{
		AWS_Amplify_Domain__PropertiesMap.AppId,
		AWS_Amplify_Domain__PropertiesMap.AutoSubDomainCreationPatterns,
		AWS_Amplify_Domain__PropertiesMap.AutoSubDomainIAMRole,
		AWS_Amplify_Domain__PropertiesMap.CertificateSettings,
		AWS_Amplify_Domain__PropertiesMap.DomainName,
		AWS_Amplify_Domain__PropertiesMap.EnableAutoSubDomain,
		AWS_Amplify_Domain__PropertiesMap.SubDomainSettings,
	}
)

// AWS_Amplify_Domain is a binding for AWS::Amplify::Domain.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amplify-domain.html
type AWS_Amplify_Domain struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AppId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amplify-domain.html#cfn-amplify-domain-appid
	AppId cfz.Expression[string] `json:"AppId,omitempty"`

	// AutoSubDomainCreationPatterns is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amplify-domain.html#cfn-amplify-domain-autosubdomaincreationpatterns
	AutoSubDomainCreationPatterns cfz.ExpressionSlice[string] `json:"AutoSubDomainCreationPatterns,omitempty"`

	// AutoSubDomainIAMRole is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amplify-domain.html#cfn-amplify-domain-autosubdomainiamrole
	AutoSubDomainIAMRole cfz.Expression[string] `json:"AutoSubDomainIAMRole,omitempty"`

	// CertificateSettings is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amplify-domain.html#cfn-amplify-domain-certificatesettings
	CertificateSettings cfz.Expression[AWS_Amplify_Domain_CertificateSettings] `json:"CertificateSettings,omitempty"`

	// DomainName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amplify-domain.html#cfn-amplify-domain-domainname
	DomainName cfz.Expression[string] `json:"DomainName,omitempty"`

	// EnableAutoSubDomain is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amplify-domain.html#cfn-amplify-domain-enableautosubdomain
	EnableAutoSubDomain cfz.Expression[bool] `json:"EnableAutoSubDomain,omitempty"`

	// SubDomainSettings is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amplify-domain.html#cfn-amplify-domain-subdomainsettings
	SubDomainSettings cfz.ExpressionSlice[AWS_Amplify_Domain_SubDomainSetting] `json:"SubDomainSettings,omitempty"`
}

// New__AWS_Amplify_Domain initializes a new *AWS_Amplify_Domain.
func New__AWS_Amplify_Domain(logicalName string) *AWS_Amplify_Domain {
	return &AWS_Amplify_Domain{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Amplify_Domain) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Amplify_Domain) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Amplify_Domain) GetType() string {
	return AWS_Amplify_Domain__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Amplify_Domain) Set__LogicalName(v string) *AWS_Amplify_Domain {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Amplify_Domain) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Amplify_Domain {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Amplify_Domain) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Amplify_Domain {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Amplify_Domain) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Amplify_Domain {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Amplify_Domain) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Amplify_Domain {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Amplify_Domain) Set__RequestedOutputs(v []cfz.Output) *AWS_Amplify_Domain {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Amplify_Domain) Add__RequestedOutputs(v ...cfz.Output) *AWS_Amplify_Domain {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AppId updates property "AppId".
func (t *AWS_Amplify_Domain) Set__AppId(v cfz.Expression[string]) *AWS_Amplify_Domain {
	t.AppId = v
	return t
}

// SetV__AppId updates property "AppId".
func (t *AWS_Amplify_Domain) SetV__AppId(v string) *AWS_Amplify_Domain {
	t.AppId = cfz.V(v)
	return t
}

// Set__AutoSubDomainCreationPatterns updates property "AutoSubDomainCreationPatterns".
func (t *AWS_Amplify_Domain) Set__AutoSubDomainCreationPatterns(v cfz.ExpressionSlice[string]) *AWS_Amplify_Domain {
	t.AutoSubDomainCreationPatterns = v
	return t
}

// SetS__AutoSubDomainCreationPatterns updates property "AutoSubDomainCreationPatterns".
func (t *AWS_Amplify_Domain) SetS__AutoSubDomainCreationPatterns(v ...cfz.Expression[string]) *AWS_Amplify_Domain {
	t.AutoSubDomainCreationPatterns = cfz.S(v...)
	return t
}

// SetSV__AutoSubDomainCreationPatterns updates property "AutoSubDomainCreationPatterns".
func (t *AWS_Amplify_Domain) SetSV__AutoSubDomainCreationPatterns(v ...string) *AWS_Amplify_Domain {
	t.AutoSubDomainCreationPatterns = cfz.SV(v...)
	return t
}

// Set__AutoSubDomainIAMRole updates property "AutoSubDomainIAMRole".
func (t *AWS_Amplify_Domain) Set__AutoSubDomainIAMRole(v cfz.Expression[string]) *AWS_Amplify_Domain {
	t.AutoSubDomainIAMRole = v
	return t
}

// SetV__AutoSubDomainIAMRole updates property "AutoSubDomainIAMRole".
func (t *AWS_Amplify_Domain) SetV__AutoSubDomainIAMRole(v string) *AWS_Amplify_Domain {
	t.AutoSubDomainIAMRole = cfz.V(v)
	return t
}

// Set__CertificateSettings updates property "CertificateSettings".
func (t *AWS_Amplify_Domain) Set__CertificateSettings(v cfz.Expression[AWS_Amplify_Domain_CertificateSettings]) *AWS_Amplify_Domain {
	t.CertificateSettings = v
	return t
}

// SetV__CertificateSettings updates property "CertificateSettings".
func (t *AWS_Amplify_Domain) SetV__CertificateSettings(v AWS_Amplify_Domain_CertificateSettings) *AWS_Amplify_Domain {
	t.CertificateSettings = cfz.V(v)
	return t
}

// Set__DomainName updates property "DomainName".
func (t *AWS_Amplify_Domain) Set__DomainName(v cfz.Expression[string]) *AWS_Amplify_Domain {
	t.DomainName = v
	return t
}

// SetV__DomainName updates property "DomainName".
func (t *AWS_Amplify_Domain) SetV__DomainName(v string) *AWS_Amplify_Domain {
	t.DomainName = cfz.V(v)
	return t
}

// Set__EnableAutoSubDomain updates property "EnableAutoSubDomain".
func (t *AWS_Amplify_Domain) Set__EnableAutoSubDomain(v cfz.Expression[bool]) *AWS_Amplify_Domain {
	t.EnableAutoSubDomain = v
	return t
}

// SetV__EnableAutoSubDomain updates property "EnableAutoSubDomain".
func (t *AWS_Amplify_Domain) SetV__EnableAutoSubDomain(v bool) *AWS_Amplify_Domain {
	t.EnableAutoSubDomain = cfz.V(v)
	return t
}

// Set__SubDomainSettings updates property "SubDomainSettings".
func (t *AWS_Amplify_Domain) Set__SubDomainSettings(v cfz.ExpressionSlice[AWS_Amplify_Domain_SubDomainSetting]) *AWS_Amplify_Domain {
	t.SubDomainSettings = v
	return t
}

// SetS__SubDomainSettings updates property "SubDomainSettings".
func (t *AWS_Amplify_Domain) SetS__SubDomainSettings(v ...cfz.Expression[AWS_Amplify_Domain_SubDomainSetting]) *AWS_Amplify_Domain {
	t.SubDomainSettings = cfz.S(v...)
	return t
}

// SetSV__SubDomainSettings updates property "SubDomainSettings".
func (t *AWS_Amplify_Domain) SetSV__SubDomainSettings(v ...AWS_Amplify_Domain_SubDomainSetting) *AWS_Amplify_Domain {
	t.SubDomainSettings = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Amplify_Domain) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_Amplify_Domain) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Amplify_Domain__AttributesMap.Arn))
}

// GetAttSlice__AutoSubDomainCreationPatterns returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AutoSubDomainCreationPatterns
func (t *AWS_Amplify_Domain) GetAttSlice__AutoSubDomainCreationPatterns() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Amplify_Domain__AttributesMap.AutoSubDomainCreationPatterns))
}

// GetAtt__AutoSubDomainIAMRole returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AutoSubDomainIAMRole
func (t *AWS_Amplify_Domain) GetAtt__AutoSubDomainIAMRole() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Amplify_Domain__AttributesMap.AutoSubDomainIAMRole))
}

// GetAtt__Certificate returns a $cfz.Expression[AWS_Amplify_Domain_Certificate] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Certificate
func (t *AWS_Amplify_Domain) GetAtt__Certificate() cfz.Expression[AWS_Amplify_Domain_Certificate] {
	return cfz.GetAtt[AWS_Amplify_Domain_Certificate](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Amplify_Domain__AttributesMap.Certificate))
}

// GetAtt__Certificate_CertificateArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Certificate.CertificateArn
func (t *AWS_Amplify_Domain) GetAtt__Certificate_CertificateArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Amplify_Domain__AttributesMap.Certificate_CertificateArn))
}

// GetAtt__Certificate_CertificateType returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Certificate.CertificateType
func (t *AWS_Amplify_Domain) GetAtt__Certificate_CertificateType() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Amplify_Domain__AttributesMap.Certificate_CertificateType))
}

// GetAtt__Certificate_CertificateVerificationDNSRecord returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Certificate.CertificateVerificationDNSRecord
func (t *AWS_Amplify_Domain) GetAtt__Certificate_CertificateVerificationDNSRecord() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Amplify_Domain__AttributesMap.Certificate_CertificateVerificationDNSRecord))
}

// GetAtt__CertificateRecord returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CertificateRecord
func (t *AWS_Amplify_Domain) GetAtt__CertificateRecord() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Amplify_Domain__AttributesMap.CertificateRecord))
}

// GetAtt__DomainName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DomainName
func (t *AWS_Amplify_Domain) GetAtt__DomainName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Amplify_Domain__AttributesMap.DomainName))
}

// GetAtt__DomainStatus returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DomainStatus
func (t *AWS_Amplify_Domain) GetAtt__DomainStatus() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Amplify_Domain__AttributesMap.DomainStatus))
}

// GetAtt__EnableAutoSubDomain returns a $cfz.Expression[bool] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: EnableAutoSubDomain
func (t *AWS_Amplify_Domain) GetAtt__EnableAutoSubDomain() cfz.Expression[bool] {
	return cfz.GetAtt[bool](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Amplify_Domain__AttributesMap.EnableAutoSubDomain))
}

// GetAtt__StatusReason returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: StatusReason
func (t *AWS_Amplify_Domain) GetAtt__StatusReason() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Amplify_Domain__AttributesMap.StatusReason))
}

// GetAtt__UpdateStatus returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: UpdateStatus
func (t *AWS_Amplify_Domain) GetAtt__UpdateStatus() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Amplify_Domain__AttributesMap.UpdateStatus))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Amplify_Domain) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_Amplify_Domain) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AutoSubDomainCreationPatterns returns a conventionally configured output for an attribute of this resource.
// Attribute: AutoSubDomainCreationPatterns
func (t *AWS_Amplify_Domain) GetConventionalOutputAtt__AutoSubDomainCreationPatterns(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAutoSubDomainCreationPatterns", t.GetAttSlice__AutoSubDomainCreationPatterns())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AutoSubDomainIAMRole returns a conventionally configured output for an attribute of this resource.
// Attribute: AutoSubDomainIAMRole
func (t *AWS_Amplify_Domain) GetConventionalOutputAtt__AutoSubDomainIAMRole(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAutoSubDomainIAMRole", t.GetAtt__AutoSubDomainIAMRole())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Certificate returns a conventionally configured output for an attribute of this resource.
// Attribute: Certificate
func (t *AWS_Amplify_Domain) GetConventionalOutputAtt__Certificate(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCertificate", t.GetAtt__Certificate())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Certificate_CertificateArn returns a conventionally configured output for an attribute of this resource.
// Attribute: Certificate.CertificateArn
func (t *AWS_Amplify_Domain) GetConventionalOutputAtt__Certificate_CertificateArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCertificateCertificateArn", t.GetAtt__Certificate_CertificateArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Certificate_CertificateType returns a conventionally configured output for an attribute of this resource.
// Attribute: Certificate.CertificateType
func (t *AWS_Amplify_Domain) GetConventionalOutputAtt__Certificate_CertificateType(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCertificateCertificateType", t.GetAtt__Certificate_CertificateType())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Certificate_CertificateVerificationDNSRecord returns a conventionally configured output for an attribute of this resource.
// Attribute: Certificate.CertificateVerificationDNSRecord
func (t *AWS_Amplify_Domain) GetConventionalOutputAtt__Certificate_CertificateVerificationDNSRecord(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCertificateCertificateVerificationDNSRecord", t.GetAtt__Certificate_CertificateVerificationDNSRecord())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CertificateRecord returns a conventionally configured output for an attribute of this resource.
// Attribute: CertificateRecord
func (t *AWS_Amplify_Domain) GetConventionalOutputAtt__CertificateRecord(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCertificateRecord", t.GetAtt__CertificateRecord())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DomainName returns a conventionally configured output for an attribute of this resource.
// Attribute: DomainName
func (t *AWS_Amplify_Domain) GetConventionalOutputAtt__DomainName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDomainName", t.GetAtt__DomainName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DomainStatus returns a conventionally configured output for an attribute of this resource.
// Attribute: DomainStatus
func (t *AWS_Amplify_Domain) GetConventionalOutputAtt__DomainStatus(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDomainStatus", t.GetAtt__DomainStatus())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__EnableAutoSubDomain returns a conventionally configured output for an attribute of this resource.
// Attribute: EnableAutoSubDomain
func (t *AWS_Amplify_Domain) GetConventionalOutputAtt__EnableAutoSubDomain(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttEnableAutoSubDomain", t.GetAtt__EnableAutoSubDomain())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__StatusReason returns a conventionally configured output for an attribute of this resource.
// Attribute: StatusReason
func (t *AWS_Amplify_Domain) GetConventionalOutputAtt__StatusReason(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStatusReason", t.GetAtt__StatusReason())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__UpdateStatus returns a conventionally configured output for an attribute of this resource.
// Attribute: UpdateStatus
func (t *AWS_Amplify_Domain) GetConventionalOutputAtt__UpdateStatus(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttUpdateStatus", t.GetAtt__UpdateStatus())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Amplify_Domain) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Amplify_Domain

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Amplify_Domain) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
