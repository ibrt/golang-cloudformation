// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_certificatemanager

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_CertificateManager_Certificate)(nil)
	_ cfz.Resource                   = (*AWS_CertificateManager_Certificate)(nil)
)

const (
	// AWS_CertificateManager_Certificate__Type is the CloudFormation type for AWS::CertificateManager::Certificate.
	AWS_CertificateManager_Certificate__Type = "AWS::CertificateManager::Certificate"
)

var (
	// AWS_CertificateManager_Certificate__PropertiesMap reports all the CloudFormation properties for AWS::CertificateManager::Certificate.
	AWS_CertificateManager_Certificate__PropertiesMap = struct {
		CertificateAuthorityArn                  string
		CertificateTransparencyLoggingPreference string
		DomainName                               string
		DomainValidationOptions                  string
		KeyAlgorithm                             string
		SubjectAlternativeNames                  string
		Tags                                     string
		ValidationMethod                         string
	}{
		CertificateAuthorityArn:                  "CertificateAuthorityArn",
		CertificateTransparencyLoggingPreference: "CertificateTransparencyLoggingPreference",
		DomainName:                               "DomainName",
		DomainValidationOptions:                  "DomainValidationOptions",
		KeyAlgorithm:                             "KeyAlgorithm",
		SubjectAlternativeNames:                  "SubjectAlternativeNames",
		Tags:                                     "Tags",
		ValidationMethod:                         "ValidationMethod",
	}

	// AWS_CertificateManager_Certificate__PropertiesSlice reports all the CloudFormation properties for AWS::CertificateManager::Certificate.
	AWS_CertificateManager_Certificate__PropertiesSlice = []string{
		AWS_CertificateManager_Certificate__PropertiesMap.CertificateAuthorityArn,
		AWS_CertificateManager_Certificate__PropertiesMap.CertificateTransparencyLoggingPreference,
		AWS_CertificateManager_Certificate__PropertiesMap.DomainName,
		AWS_CertificateManager_Certificate__PropertiesMap.DomainValidationOptions,
		AWS_CertificateManager_Certificate__PropertiesMap.KeyAlgorithm,
		AWS_CertificateManager_Certificate__PropertiesMap.SubjectAlternativeNames,
		AWS_CertificateManager_Certificate__PropertiesMap.Tags,
		AWS_CertificateManager_Certificate__PropertiesMap.ValidationMethod,
	}
)

// AWS_CertificateManager_Certificate is a binding for AWS::CertificateManager::Certificate.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html
type AWS_CertificateManager_Certificate struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// CertificateAuthorityArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html#cfn-certificatemanager-certificate-certificateauthorityarn
	CertificateAuthorityArn cfz.Expression[string] `json:"CertificateAuthorityArn,omitempty"`

	// CertificateTransparencyLoggingPreference is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html#cfn-certificatemanager-certificate-certificatetransparencyloggingpreference
	CertificateTransparencyLoggingPreference cfz.Expression[string] `json:"CertificateTransparencyLoggingPreference,omitempty"`

	// DomainName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html#cfn-certificatemanager-certificate-domainname
	DomainName cfz.Expression[string] `json:"DomainName,omitempty"`

	// DomainValidationOptions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html#cfn-certificatemanager-certificate-domainvalidationoptions
	DomainValidationOptions cfz.ExpressionSlice[AWS_CertificateManager_Certificate_DomainValidationOption] `json:"DomainValidationOptions,omitempty"`

	// KeyAlgorithm is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html#cfn-certificatemanager-certificate-keyalgorithm
	KeyAlgorithm cfz.Expression[string] `json:"KeyAlgorithm,omitempty"`

	// SubjectAlternativeNames is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html#cfn-certificatemanager-certificate-subjectalternativenames
	SubjectAlternativeNames cfz.ExpressionSlice[string] `json:"SubjectAlternativeNames,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html#cfn-certificatemanager-certificate-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// ValidationMethod is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html#cfn-certificatemanager-certificate-validationmethod
	ValidationMethod cfz.Expression[string] `json:"ValidationMethod,omitempty"`
}

// New__AWS_CertificateManager_Certificate initializes a new *AWS_CertificateManager_Certificate.
func New__AWS_CertificateManager_Certificate(logicalName string) *AWS_CertificateManager_Certificate {
	return &AWS_CertificateManager_Certificate{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_CertificateManager_Certificate) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_CertificateManager_Certificate) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_CertificateManager_Certificate) GetType() string {
	return AWS_CertificateManager_Certificate__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_CertificateManager_Certificate) Set__LogicalName(v string) *AWS_CertificateManager_Certificate {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_CertificateManager_Certificate) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_CertificateManager_Certificate {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_CertificateManager_Certificate) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_CertificateManager_Certificate {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_CertificateManager_Certificate) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_CertificateManager_Certificate {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_CertificateManager_Certificate) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_CertificateManager_Certificate {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_CertificateManager_Certificate) Set__RequestedOutputs(v []cfz.Output) *AWS_CertificateManager_Certificate {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_CertificateManager_Certificate) Add__RequestedOutputs(v ...cfz.Output) *AWS_CertificateManager_Certificate {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__CertificateAuthorityArn updates property "CertificateAuthorityArn".
func (t *AWS_CertificateManager_Certificate) Set__CertificateAuthorityArn(v cfz.Expression[string]) *AWS_CertificateManager_Certificate {
	t.CertificateAuthorityArn = v
	return t
}

// SetV__CertificateAuthorityArn updates property "CertificateAuthorityArn".
func (t *AWS_CertificateManager_Certificate) SetV__CertificateAuthorityArn(v string) *AWS_CertificateManager_Certificate {
	t.CertificateAuthorityArn = cfz.V(v)
	return t
}

// Set__CertificateTransparencyLoggingPreference updates property "CertificateTransparencyLoggingPreference".
func (t *AWS_CertificateManager_Certificate) Set__CertificateTransparencyLoggingPreference(v cfz.Expression[string]) *AWS_CertificateManager_Certificate {
	t.CertificateTransparencyLoggingPreference = v
	return t
}

// SetV__CertificateTransparencyLoggingPreference updates property "CertificateTransparencyLoggingPreference".
func (t *AWS_CertificateManager_Certificate) SetV__CertificateTransparencyLoggingPreference(v string) *AWS_CertificateManager_Certificate {
	t.CertificateTransparencyLoggingPreference = cfz.V(v)
	return t
}

// Set__DomainName updates property "DomainName".
func (t *AWS_CertificateManager_Certificate) Set__DomainName(v cfz.Expression[string]) *AWS_CertificateManager_Certificate {
	t.DomainName = v
	return t
}

// SetV__DomainName updates property "DomainName".
func (t *AWS_CertificateManager_Certificate) SetV__DomainName(v string) *AWS_CertificateManager_Certificate {
	t.DomainName = cfz.V(v)
	return t
}

// Set__DomainValidationOptions updates property "DomainValidationOptions".
func (t *AWS_CertificateManager_Certificate) Set__DomainValidationOptions(v cfz.ExpressionSlice[AWS_CertificateManager_Certificate_DomainValidationOption]) *AWS_CertificateManager_Certificate {
	t.DomainValidationOptions = v
	return t
}

// SetS__DomainValidationOptions updates property "DomainValidationOptions".
func (t *AWS_CertificateManager_Certificate) SetS__DomainValidationOptions(v ...cfz.Expression[AWS_CertificateManager_Certificate_DomainValidationOption]) *AWS_CertificateManager_Certificate {
	t.DomainValidationOptions = cfz.S(v...)
	return t
}

// SetSV__DomainValidationOptions updates property "DomainValidationOptions".
func (t *AWS_CertificateManager_Certificate) SetSV__DomainValidationOptions(v ...AWS_CertificateManager_Certificate_DomainValidationOption) *AWS_CertificateManager_Certificate {
	t.DomainValidationOptions = cfz.SV(v...)
	return t
}

// Set__KeyAlgorithm updates property "KeyAlgorithm".
func (t *AWS_CertificateManager_Certificate) Set__KeyAlgorithm(v cfz.Expression[string]) *AWS_CertificateManager_Certificate {
	t.KeyAlgorithm = v
	return t
}

// SetV__KeyAlgorithm updates property "KeyAlgorithm".
func (t *AWS_CertificateManager_Certificate) SetV__KeyAlgorithm(v string) *AWS_CertificateManager_Certificate {
	t.KeyAlgorithm = cfz.V(v)
	return t
}

// Set__SubjectAlternativeNames updates property "SubjectAlternativeNames".
func (t *AWS_CertificateManager_Certificate) Set__SubjectAlternativeNames(v cfz.ExpressionSlice[string]) *AWS_CertificateManager_Certificate {
	t.SubjectAlternativeNames = v
	return t
}

// SetS__SubjectAlternativeNames updates property "SubjectAlternativeNames".
func (t *AWS_CertificateManager_Certificate) SetS__SubjectAlternativeNames(v ...cfz.Expression[string]) *AWS_CertificateManager_Certificate {
	t.SubjectAlternativeNames = cfz.S(v...)
	return t
}

// SetSV__SubjectAlternativeNames updates property "SubjectAlternativeNames".
func (t *AWS_CertificateManager_Certificate) SetSV__SubjectAlternativeNames(v ...string) *AWS_CertificateManager_Certificate {
	t.SubjectAlternativeNames = cfz.SV(v...)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_CertificateManager_Certificate) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_CertificateManager_Certificate {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_CertificateManager_Certificate) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_CertificateManager_Certificate {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_CertificateManager_Certificate) SetSV__Tags(v ...cfz.Tag) *AWS_CertificateManager_Certificate {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__ValidationMethod updates property "ValidationMethod".
func (t *AWS_CertificateManager_Certificate) Set__ValidationMethod(v cfz.Expression[string]) *AWS_CertificateManager_Certificate {
	t.ValidationMethod = v
	return t
}

// SetV__ValidationMethod updates property "ValidationMethod".
func (t *AWS_CertificateManager_Certificate) SetV__ValidationMethod(v string) *AWS_CertificateManager_Certificate {
	t.ValidationMethod = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_CertificateManager_Certificate) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_CertificateManager_Certificate) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_CertificateManager_Certificate) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_CertificateManager_Certificate

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_CertificateManager_Certificate) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
