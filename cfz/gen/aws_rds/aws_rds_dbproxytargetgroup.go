// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_rds

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_RDS_DBProxyTargetGroup)(nil)
	_ cfz.Resource                   = (*AWS_RDS_DBProxyTargetGroup)(nil)
)

const (
	// AWS_RDS_DBProxyTargetGroup__Type is the CloudFormation type for AWS::RDS::DBProxyTargetGroup.
	AWS_RDS_DBProxyTargetGroup__Type = "AWS::RDS::DBProxyTargetGroup"
)

var (
	// AWS_RDS_DBProxyTargetGroup__AttributesMap reports all the CloudFormation attributes for AWS::RDS::DBProxyTargetGroup.
	AWS_RDS_DBProxyTargetGroup__AttributesMap = struct {
		TargetGroupArn string
	}{
		TargetGroupArn: "TargetGroupArn",
	}

	// AWS_RDS_DBProxyTargetGroup__AttributesSlice reports all the CloudFormation attributes for AWS::RDS::DBProxyTargetGroup.
	AWS_RDS_DBProxyTargetGroup__AttributesSlice = []string{
		AWS_RDS_DBProxyTargetGroup__AttributesMap.TargetGroupArn,
	}
)

var (
	// AWS_RDS_DBProxyTargetGroup__PropertiesMap reports all the CloudFormation properties for AWS::RDS::DBProxyTargetGroup.
	AWS_RDS_DBProxyTargetGroup__PropertiesMap = struct {
		ConnectionPoolConfigurationInfo string
		DBClusterIdentifiers            string
		DBInstanceIdentifiers           string
		DBProxyName                     string
		TargetGroupName                 string
	}{
		ConnectionPoolConfigurationInfo: "ConnectionPoolConfigurationInfo",
		DBClusterIdentifiers:            "DBClusterIdentifiers",
		DBInstanceIdentifiers:           "DBInstanceIdentifiers",
		DBProxyName:                     "DBProxyName",
		TargetGroupName:                 "TargetGroupName",
	}

	// AWS_RDS_DBProxyTargetGroup__PropertiesSlice reports all the CloudFormation properties for AWS::RDS::DBProxyTargetGroup.
	AWS_RDS_DBProxyTargetGroup__PropertiesSlice = []string{
		AWS_RDS_DBProxyTargetGroup__PropertiesMap.ConnectionPoolConfigurationInfo,
		AWS_RDS_DBProxyTargetGroup__PropertiesMap.DBClusterIdentifiers,
		AWS_RDS_DBProxyTargetGroup__PropertiesMap.DBInstanceIdentifiers,
		AWS_RDS_DBProxyTargetGroup__PropertiesMap.DBProxyName,
		AWS_RDS_DBProxyTargetGroup__PropertiesMap.TargetGroupName,
	}
)

// AWS_RDS_DBProxyTargetGroup is a binding for AWS::RDS::DBProxyTargetGroup.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbproxytargetgroup.html
type AWS_RDS_DBProxyTargetGroup struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ConnectionPoolConfigurationInfo is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbproxytargetgroup.html#cfn-rds-dbproxytargetgroup-connectionpoolconfigurationinfo
	ConnectionPoolConfigurationInfo cfz.Expression[AWS_RDS_DBProxyTargetGroup_ConnectionPoolConfigurationInfoFormat] `json:"ConnectionPoolConfigurationInfo,omitempty"`

	// DBClusterIdentifiers is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbproxytargetgroup.html#cfn-rds-dbproxytargetgroup-dbclusteridentifiers
	DBClusterIdentifiers cfz.ExpressionSlice[string] `json:"DBClusterIdentifiers,omitempty"`

	// DBInstanceIdentifiers is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbproxytargetgroup.html#cfn-rds-dbproxytargetgroup-dbinstanceidentifiers
	DBInstanceIdentifiers cfz.ExpressionSlice[string] `json:"DBInstanceIdentifiers,omitempty"`

	// DBProxyName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbproxytargetgroup.html#cfn-rds-dbproxytargetgroup-dbproxyname
	DBProxyName cfz.Expression[string] `json:"DBProxyName,omitempty"`

	// TargetGroupName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbproxytargetgroup.html#cfn-rds-dbproxytargetgroup-targetgroupname
	TargetGroupName cfz.Expression[string] `json:"TargetGroupName,omitempty"`
}

// New__AWS_RDS_DBProxyTargetGroup initializes a new *AWS_RDS_DBProxyTargetGroup.
func New__AWS_RDS_DBProxyTargetGroup(logicalName string) *AWS_RDS_DBProxyTargetGroup {
	return &AWS_RDS_DBProxyTargetGroup{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_RDS_DBProxyTargetGroup) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_RDS_DBProxyTargetGroup) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_RDS_DBProxyTargetGroup) GetType() string {
	return AWS_RDS_DBProxyTargetGroup__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_RDS_DBProxyTargetGroup) Set__LogicalName(v string) *AWS_RDS_DBProxyTargetGroup {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_RDS_DBProxyTargetGroup) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_RDS_DBProxyTargetGroup {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_RDS_DBProxyTargetGroup) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_RDS_DBProxyTargetGroup {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_RDS_DBProxyTargetGroup) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_RDS_DBProxyTargetGroup {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_RDS_DBProxyTargetGroup) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_RDS_DBProxyTargetGroup {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_RDS_DBProxyTargetGroup) Set__RequestedOutputs(v []cfz.Output) *AWS_RDS_DBProxyTargetGroup {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_RDS_DBProxyTargetGroup) Add__RequestedOutputs(v ...cfz.Output) *AWS_RDS_DBProxyTargetGroup {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ConnectionPoolConfigurationInfo updates property "ConnectionPoolConfigurationInfo".
func (t *AWS_RDS_DBProxyTargetGroup) Set__ConnectionPoolConfigurationInfo(v cfz.Expression[AWS_RDS_DBProxyTargetGroup_ConnectionPoolConfigurationInfoFormat]) *AWS_RDS_DBProxyTargetGroup {
	t.ConnectionPoolConfigurationInfo = v
	return t
}

// SetV__ConnectionPoolConfigurationInfo updates property "ConnectionPoolConfigurationInfo".
func (t *AWS_RDS_DBProxyTargetGroup) SetV__ConnectionPoolConfigurationInfo(v AWS_RDS_DBProxyTargetGroup_ConnectionPoolConfigurationInfoFormat) *AWS_RDS_DBProxyTargetGroup {
	t.ConnectionPoolConfigurationInfo = cfz.V(v)
	return t
}

// Set__DBClusterIdentifiers updates property "DBClusterIdentifiers".
func (t *AWS_RDS_DBProxyTargetGroup) Set__DBClusterIdentifiers(v cfz.ExpressionSlice[string]) *AWS_RDS_DBProxyTargetGroup {
	t.DBClusterIdentifiers = v
	return t
}

// SetS__DBClusterIdentifiers updates property "DBClusterIdentifiers".
func (t *AWS_RDS_DBProxyTargetGroup) SetS__DBClusterIdentifiers(v ...cfz.Expression[string]) *AWS_RDS_DBProxyTargetGroup {
	t.DBClusterIdentifiers = cfz.S(v...)
	return t
}

// SetSV__DBClusterIdentifiers updates property "DBClusterIdentifiers".
func (t *AWS_RDS_DBProxyTargetGroup) SetSV__DBClusterIdentifiers(v ...string) *AWS_RDS_DBProxyTargetGroup {
	t.DBClusterIdentifiers = cfz.SV(v...)
	return t
}

// Set__DBInstanceIdentifiers updates property "DBInstanceIdentifiers".
func (t *AWS_RDS_DBProxyTargetGroup) Set__DBInstanceIdentifiers(v cfz.ExpressionSlice[string]) *AWS_RDS_DBProxyTargetGroup {
	t.DBInstanceIdentifiers = v
	return t
}

// SetS__DBInstanceIdentifiers updates property "DBInstanceIdentifiers".
func (t *AWS_RDS_DBProxyTargetGroup) SetS__DBInstanceIdentifiers(v ...cfz.Expression[string]) *AWS_RDS_DBProxyTargetGroup {
	t.DBInstanceIdentifiers = cfz.S(v...)
	return t
}

// SetSV__DBInstanceIdentifiers updates property "DBInstanceIdentifiers".
func (t *AWS_RDS_DBProxyTargetGroup) SetSV__DBInstanceIdentifiers(v ...string) *AWS_RDS_DBProxyTargetGroup {
	t.DBInstanceIdentifiers = cfz.SV(v...)
	return t
}

// Set__DBProxyName updates property "DBProxyName".
func (t *AWS_RDS_DBProxyTargetGroup) Set__DBProxyName(v cfz.Expression[string]) *AWS_RDS_DBProxyTargetGroup {
	t.DBProxyName = v
	return t
}

// SetV__DBProxyName updates property "DBProxyName".
func (t *AWS_RDS_DBProxyTargetGroup) SetV__DBProxyName(v string) *AWS_RDS_DBProxyTargetGroup {
	t.DBProxyName = cfz.V(v)
	return t
}

// Set__TargetGroupName updates property "TargetGroupName".
func (t *AWS_RDS_DBProxyTargetGroup) Set__TargetGroupName(v cfz.Expression[string]) *AWS_RDS_DBProxyTargetGroup {
	t.TargetGroupName = v
	return t
}

// SetV__TargetGroupName updates property "TargetGroupName".
func (t *AWS_RDS_DBProxyTargetGroup) SetV__TargetGroupName(v string) *AWS_RDS_DBProxyTargetGroup {
	t.TargetGroupName = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_RDS_DBProxyTargetGroup) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__TargetGroupArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: TargetGroupArn
func (t *AWS_RDS_DBProxyTargetGroup) GetAtt__TargetGroupArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RDS_DBProxyTargetGroup__AttributesMap.TargetGroupArn))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_RDS_DBProxyTargetGroup) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__TargetGroupArn returns a conventionally configured output for an attribute of this resource.
// Attribute: TargetGroupArn
func (t *AWS_RDS_DBProxyTargetGroup) GetConventionalOutputAtt__TargetGroupArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttTargetGroupArn", t.GetAtt__TargetGroupArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_RDS_DBProxyTargetGroup) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_RDS_DBProxyTargetGroup

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_RDS_DBProxyTargetGroup) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
