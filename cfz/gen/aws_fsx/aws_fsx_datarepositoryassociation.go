// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_fsx

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_FSx_DataRepositoryAssociation)(nil)
	_ cfz.Resource                   = (*AWS_FSx_DataRepositoryAssociation)(nil)
)

const (
	// AWS_FSx_DataRepositoryAssociation__Type is the CloudFormation type for AWS::FSx::DataRepositoryAssociation.
	AWS_FSx_DataRepositoryAssociation__Type = "AWS::FSx::DataRepositoryAssociation"
)

var (
	// AWS_FSx_DataRepositoryAssociation__AttributesMap reports all the CloudFormation attributes for AWS::FSx::DataRepositoryAssociation.
	AWS_FSx_DataRepositoryAssociation__AttributesMap = struct {
		AssociationId string
		ResourceARN   string
	}{
		AssociationId: "AssociationId",
		ResourceARN:   "ResourceARN",
	}

	// AWS_FSx_DataRepositoryAssociation__AttributesSlice reports all the CloudFormation attributes for AWS::FSx::DataRepositoryAssociation.
	AWS_FSx_DataRepositoryAssociation__AttributesSlice = []string{
		AWS_FSx_DataRepositoryAssociation__AttributesMap.AssociationId,
		AWS_FSx_DataRepositoryAssociation__AttributesMap.ResourceARN,
	}
)

var (
	// AWS_FSx_DataRepositoryAssociation__PropertiesMap reports all the CloudFormation properties for AWS::FSx::DataRepositoryAssociation.
	AWS_FSx_DataRepositoryAssociation__PropertiesMap = struct {
		BatchImportMetaDataOnCreate string
		DataRepositoryPath          string
		FileSystemId                string
		FileSystemPath              string
		ImportedFileChunkSize       string
		S3                          string
		Tags                        string
	}{
		BatchImportMetaDataOnCreate: "BatchImportMetaDataOnCreate",
		DataRepositoryPath:          "DataRepositoryPath",
		FileSystemId:                "FileSystemId",
		FileSystemPath:              "FileSystemPath",
		ImportedFileChunkSize:       "ImportedFileChunkSize",
		S3:                          "S3",
		Tags:                        "Tags",
	}

	// AWS_FSx_DataRepositoryAssociation__PropertiesSlice reports all the CloudFormation properties for AWS::FSx::DataRepositoryAssociation.
	AWS_FSx_DataRepositoryAssociation__PropertiesSlice = []string{
		AWS_FSx_DataRepositoryAssociation__PropertiesMap.BatchImportMetaDataOnCreate,
		AWS_FSx_DataRepositoryAssociation__PropertiesMap.DataRepositoryPath,
		AWS_FSx_DataRepositoryAssociation__PropertiesMap.FileSystemId,
		AWS_FSx_DataRepositoryAssociation__PropertiesMap.FileSystemPath,
		AWS_FSx_DataRepositoryAssociation__PropertiesMap.ImportedFileChunkSize,
		AWS_FSx_DataRepositoryAssociation__PropertiesMap.S3,
		AWS_FSx_DataRepositoryAssociation__PropertiesMap.Tags,
	}
)

// AWS_FSx_DataRepositoryAssociation is a binding for AWS::FSx::DataRepositoryAssociation.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-fsx-datarepositoryassociation.html
type AWS_FSx_DataRepositoryAssociation struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// BatchImportMetaDataOnCreate is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-fsx-datarepositoryassociation.html#cfn-fsx-datarepositoryassociation-batchimportmetadataoncreate
	BatchImportMetaDataOnCreate cfz.Expression[bool] `json:"BatchImportMetaDataOnCreate,omitempty"`

	// DataRepositoryPath is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-fsx-datarepositoryassociation.html#cfn-fsx-datarepositoryassociation-datarepositorypath
	DataRepositoryPath cfz.Expression[string] `json:"DataRepositoryPath,omitempty"`

	// FileSystemId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-fsx-datarepositoryassociation.html#cfn-fsx-datarepositoryassociation-filesystemid
	FileSystemId cfz.Expression[string] `json:"FileSystemId,omitempty"`

	// FileSystemPath is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-fsx-datarepositoryassociation.html#cfn-fsx-datarepositoryassociation-filesystempath
	FileSystemPath cfz.Expression[string] `json:"FileSystemPath,omitempty"`

	// ImportedFileChunkSize is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-fsx-datarepositoryassociation.html#cfn-fsx-datarepositoryassociation-importedfilechunksize
	ImportedFileChunkSize cfz.Expression[int32] `json:"ImportedFileChunkSize,omitempty"`

	// S3 is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-fsx-datarepositoryassociation.html#cfn-fsx-datarepositoryassociation-s3
	S3 cfz.Expression[AWS_FSx_DataRepositoryAssociation_S3] `json:"S3,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-fsx-datarepositoryassociation.html#cfn-fsx-datarepositoryassociation-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_FSx_DataRepositoryAssociation initializes a new *AWS_FSx_DataRepositoryAssociation.
func New__AWS_FSx_DataRepositoryAssociation(logicalName string) *AWS_FSx_DataRepositoryAssociation {
	return &AWS_FSx_DataRepositoryAssociation{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_FSx_DataRepositoryAssociation) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_FSx_DataRepositoryAssociation) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_FSx_DataRepositoryAssociation) GetType() string {
	return AWS_FSx_DataRepositoryAssociation__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_FSx_DataRepositoryAssociation) Set__LogicalName(v string) *AWS_FSx_DataRepositoryAssociation {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_FSx_DataRepositoryAssociation) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_FSx_DataRepositoryAssociation {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_FSx_DataRepositoryAssociation) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_FSx_DataRepositoryAssociation {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_FSx_DataRepositoryAssociation) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_FSx_DataRepositoryAssociation {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_FSx_DataRepositoryAssociation) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_FSx_DataRepositoryAssociation {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_FSx_DataRepositoryAssociation) Set__RequestedOutputs(v []cfz.Output) *AWS_FSx_DataRepositoryAssociation {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_FSx_DataRepositoryAssociation) Add__RequestedOutputs(v ...cfz.Output) *AWS_FSx_DataRepositoryAssociation {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__BatchImportMetaDataOnCreate updates property "BatchImportMetaDataOnCreate".
func (t *AWS_FSx_DataRepositoryAssociation) Set__BatchImportMetaDataOnCreate(v cfz.Expression[bool]) *AWS_FSx_DataRepositoryAssociation {
	t.BatchImportMetaDataOnCreate = v
	return t
}

// SetV__BatchImportMetaDataOnCreate updates property "BatchImportMetaDataOnCreate".
func (t *AWS_FSx_DataRepositoryAssociation) SetV__BatchImportMetaDataOnCreate(v bool) *AWS_FSx_DataRepositoryAssociation {
	t.BatchImportMetaDataOnCreate = cfz.V(v)
	return t
}

// Set__DataRepositoryPath updates property "DataRepositoryPath".
func (t *AWS_FSx_DataRepositoryAssociation) Set__DataRepositoryPath(v cfz.Expression[string]) *AWS_FSx_DataRepositoryAssociation {
	t.DataRepositoryPath = v
	return t
}

// SetV__DataRepositoryPath updates property "DataRepositoryPath".
func (t *AWS_FSx_DataRepositoryAssociation) SetV__DataRepositoryPath(v string) *AWS_FSx_DataRepositoryAssociation {
	t.DataRepositoryPath = cfz.V(v)
	return t
}

// Set__FileSystemId updates property "FileSystemId".
func (t *AWS_FSx_DataRepositoryAssociation) Set__FileSystemId(v cfz.Expression[string]) *AWS_FSx_DataRepositoryAssociation {
	t.FileSystemId = v
	return t
}

// SetV__FileSystemId updates property "FileSystemId".
func (t *AWS_FSx_DataRepositoryAssociation) SetV__FileSystemId(v string) *AWS_FSx_DataRepositoryAssociation {
	t.FileSystemId = cfz.V(v)
	return t
}

// Set__FileSystemPath updates property "FileSystemPath".
func (t *AWS_FSx_DataRepositoryAssociation) Set__FileSystemPath(v cfz.Expression[string]) *AWS_FSx_DataRepositoryAssociation {
	t.FileSystemPath = v
	return t
}

// SetV__FileSystemPath updates property "FileSystemPath".
func (t *AWS_FSx_DataRepositoryAssociation) SetV__FileSystemPath(v string) *AWS_FSx_DataRepositoryAssociation {
	t.FileSystemPath = cfz.V(v)
	return t
}

// Set__ImportedFileChunkSize updates property "ImportedFileChunkSize".
func (t *AWS_FSx_DataRepositoryAssociation) Set__ImportedFileChunkSize(v cfz.Expression[int32]) *AWS_FSx_DataRepositoryAssociation {
	t.ImportedFileChunkSize = v
	return t
}

// SetV__ImportedFileChunkSize updates property "ImportedFileChunkSize".
func (t *AWS_FSx_DataRepositoryAssociation) SetV__ImportedFileChunkSize(v int32) *AWS_FSx_DataRepositoryAssociation {
	t.ImportedFileChunkSize = cfz.V(v)
	return t
}

// Set__S3 updates property "S3".
func (t *AWS_FSx_DataRepositoryAssociation) Set__S3(v cfz.Expression[AWS_FSx_DataRepositoryAssociation_S3]) *AWS_FSx_DataRepositoryAssociation {
	t.S3 = v
	return t
}

// SetV__S3 updates property "S3".
func (t *AWS_FSx_DataRepositoryAssociation) SetV__S3(v AWS_FSx_DataRepositoryAssociation_S3) *AWS_FSx_DataRepositoryAssociation {
	t.S3 = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_FSx_DataRepositoryAssociation) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_FSx_DataRepositoryAssociation {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_FSx_DataRepositoryAssociation) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_FSx_DataRepositoryAssociation {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_FSx_DataRepositoryAssociation) SetSV__Tags(v ...cfz.Tag) *AWS_FSx_DataRepositoryAssociation {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_FSx_DataRepositoryAssociation) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__AssociationId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AssociationId
func (t *AWS_FSx_DataRepositoryAssociation) GetAtt__AssociationId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_FSx_DataRepositoryAssociation__AttributesMap.AssociationId))
}

// GetAtt__ResourceARN returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ResourceARN
func (t *AWS_FSx_DataRepositoryAssociation) GetAtt__ResourceARN() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_FSx_DataRepositoryAssociation__AttributesMap.ResourceARN))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_FSx_DataRepositoryAssociation) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AssociationId returns a conventionally configured output for an attribute of this resource.
// Attribute: AssociationId
func (t *AWS_FSx_DataRepositoryAssociation) GetConventionalOutputAtt__AssociationId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAssociationId", t.GetAtt__AssociationId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ResourceARN returns a conventionally configured output for an attribute of this resource.
// Attribute: ResourceARN
func (t *AWS_FSx_DataRepositoryAssociation) GetConventionalOutputAtt__ResourceARN(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttResourceARN", t.GetAtt__ResourceARN())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_FSx_DataRepositoryAssociation) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_FSx_DataRepositoryAssociation

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_FSx_DataRepositoryAssociation) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
