// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_iot

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_IoT_SoftwarePackageVersion)(nil)
	_ cfz.Resource                   = (*AWS_IoT_SoftwarePackageVersion)(nil)
)

const (
	// AWS_IoT_SoftwarePackageVersion__Type is the CloudFormation type for AWS::IoT::SoftwarePackageVersion.
	AWS_IoT_SoftwarePackageVersion__Type = "AWS::IoT::SoftwarePackageVersion"
)

var (
	// AWS_IoT_SoftwarePackageVersion__AttributesMap reports all the CloudFormation attributes for AWS::IoT::SoftwarePackageVersion.
	AWS_IoT_SoftwarePackageVersion__AttributesMap = struct {
		ErrorReason       string
		PackageVersionArn string
		Status            string
	}{
		ErrorReason:       "ErrorReason",
		PackageVersionArn: "PackageVersionArn",
		Status:            "Status",
	}

	// AWS_IoT_SoftwarePackageVersion__AttributesSlice reports all the CloudFormation attributes for AWS::IoT::SoftwarePackageVersion.
	AWS_IoT_SoftwarePackageVersion__AttributesSlice = []string{
		AWS_IoT_SoftwarePackageVersion__AttributesMap.ErrorReason,
		AWS_IoT_SoftwarePackageVersion__AttributesMap.PackageVersionArn,
		AWS_IoT_SoftwarePackageVersion__AttributesMap.Status,
	}
)

var (
	// AWS_IoT_SoftwarePackageVersion__PropertiesMap reports all the CloudFormation properties for AWS::IoT::SoftwarePackageVersion.
	AWS_IoT_SoftwarePackageVersion__PropertiesMap = struct {
		Attributes  string
		Description string
		PackageName string
		Tags        string
		VersionName string
	}{
		Attributes:  "Attributes",
		Description: "Description",
		PackageName: "PackageName",
		Tags:        "Tags",
		VersionName: "VersionName",
	}

	// AWS_IoT_SoftwarePackageVersion__PropertiesSlice reports all the CloudFormation properties for AWS::IoT::SoftwarePackageVersion.
	AWS_IoT_SoftwarePackageVersion__PropertiesSlice = []string{
		AWS_IoT_SoftwarePackageVersion__PropertiesMap.Attributes,
		AWS_IoT_SoftwarePackageVersion__PropertiesMap.Description,
		AWS_IoT_SoftwarePackageVersion__PropertiesMap.PackageName,
		AWS_IoT_SoftwarePackageVersion__PropertiesMap.Tags,
		AWS_IoT_SoftwarePackageVersion__PropertiesMap.VersionName,
	}
)

// AWS_IoT_SoftwarePackageVersion is a binding for AWS::IoT::SoftwarePackageVersion.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-softwarepackageversion.html
type AWS_IoT_SoftwarePackageVersion struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Attributes is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-softwarepackageversion.html#cfn-iot-softwarepackageversion-attributes
	Attributes cfz.ExpressionMap[string] `json:"Attributes,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-softwarepackageversion.html#cfn-iot-softwarepackageversion-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// PackageName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-softwarepackageversion.html#cfn-iot-softwarepackageversion-packagename
	PackageName cfz.Expression[string] `json:"PackageName,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-softwarepackageversion.html#cfn-iot-softwarepackageversion-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// VersionName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-softwarepackageversion.html#cfn-iot-softwarepackageversion-versionname
	VersionName cfz.Expression[string] `json:"VersionName,omitempty"`
}

// New__AWS_IoT_SoftwarePackageVersion initializes a new *AWS_IoT_SoftwarePackageVersion.
func New__AWS_IoT_SoftwarePackageVersion(logicalName string) *AWS_IoT_SoftwarePackageVersion {
	return &AWS_IoT_SoftwarePackageVersion{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_IoT_SoftwarePackageVersion) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_IoT_SoftwarePackageVersion) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_IoT_SoftwarePackageVersion) GetType() string {
	return AWS_IoT_SoftwarePackageVersion__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_IoT_SoftwarePackageVersion) Set__LogicalName(v string) *AWS_IoT_SoftwarePackageVersion {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_IoT_SoftwarePackageVersion) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_IoT_SoftwarePackageVersion {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_IoT_SoftwarePackageVersion) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_IoT_SoftwarePackageVersion {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_IoT_SoftwarePackageVersion) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_IoT_SoftwarePackageVersion {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_IoT_SoftwarePackageVersion) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_IoT_SoftwarePackageVersion {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_IoT_SoftwarePackageVersion) Set__RequestedOutputs(v []cfz.Output) *AWS_IoT_SoftwarePackageVersion {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_IoT_SoftwarePackageVersion) Add__RequestedOutputs(v ...cfz.Output) *AWS_IoT_SoftwarePackageVersion {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Attributes updates property "Attributes".
func (t *AWS_IoT_SoftwarePackageVersion) Set__Attributes(v cfz.ExpressionMap[string]) *AWS_IoT_SoftwarePackageVersion {
	t.Attributes = v
	return t
}

// SetM__Attributes updates property "Attributes".
func (t *AWS_IoT_SoftwarePackageVersion) SetM__Attributes(v ...map[string]cfz.Expression[string]) *AWS_IoT_SoftwarePackageVersion {
	t.Attributes = cfz.M(v...)
	return t
}

// SetMV__Attributes updates property "Attributes".
func (t *AWS_IoT_SoftwarePackageVersion) SetMV__Attributes(v ...map[string]string) *AWS_IoT_SoftwarePackageVersion {
	t.Attributes = cfz.MV(v...)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_IoT_SoftwarePackageVersion) Set__Description(v cfz.Expression[string]) *AWS_IoT_SoftwarePackageVersion {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_IoT_SoftwarePackageVersion) SetV__Description(v string) *AWS_IoT_SoftwarePackageVersion {
	t.Description = cfz.V(v)
	return t
}

// Set__PackageName updates property "PackageName".
func (t *AWS_IoT_SoftwarePackageVersion) Set__PackageName(v cfz.Expression[string]) *AWS_IoT_SoftwarePackageVersion {
	t.PackageName = v
	return t
}

// SetV__PackageName updates property "PackageName".
func (t *AWS_IoT_SoftwarePackageVersion) SetV__PackageName(v string) *AWS_IoT_SoftwarePackageVersion {
	t.PackageName = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_IoT_SoftwarePackageVersion) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_IoT_SoftwarePackageVersion {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_IoT_SoftwarePackageVersion) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_IoT_SoftwarePackageVersion {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_IoT_SoftwarePackageVersion) SetSV__Tags(v ...cfz.Tag) *AWS_IoT_SoftwarePackageVersion {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__VersionName updates property "VersionName".
func (t *AWS_IoT_SoftwarePackageVersion) Set__VersionName(v cfz.Expression[string]) *AWS_IoT_SoftwarePackageVersion {
	t.VersionName = v
	return t
}

// SetV__VersionName updates property "VersionName".
func (t *AWS_IoT_SoftwarePackageVersion) SetV__VersionName(v string) *AWS_IoT_SoftwarePackageVersion {
	t.VersionName = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_IoT_SoftwarePackageVersion) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__ErrorReason returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ErrorReason
func (t *AWS_IoT_SoftwarePackageVersion) GetAtt__ErrorReason() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_IoT_SoftwarePackageVersion__AttributesMap.ErrorReason))
}

// GetAtt__PackageVersionArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: PackageVersionArn
func (t *AWS_IoT_SoftwarePackageVersion) GetAtt__PackageVersionArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_IoT_SoftwarePackageVersion__AttributesMap.PackageVersionArn))
}

// GetAtt__Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Status
func (t *AWS_IoT_SoftwarePackageVersion) GetAtt__Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_IoT_SoftwarePackageVersion__AttributesMap.Status))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_IoT_SoftwarePackageVersion) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ErrorReason returns a conventionally configured output for an attribute of this resource.
// Attribute: ErrorReason
func (t *AWS_IoT_SoftwarePackageVersion) GetConventionalOutputAtt__ErrorReason(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttErrorReason", t.GetAtt__ErrorReason())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__PackageVersionArn returns a conventionally configured output for an attribute of this resource.
// Attribute: PackageVersionArn
func (t *AWS_IoT_SoftwarePackageVersion) GetConventionalOutputAtt__PackageVersionArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttPackageVersionArn", t.GetAtt__PackageVersionArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Status returns a conventionally configured output for an attribute of this resource.
// Attribute: Status
func (t *AWS_IoT_SoftwarePackageVersion) GetConventionalOutputAtt__Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStatus", t.GetAtt__Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_IoT_SoftwarePackageVersion) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_IoT_SoftwarePackageVersion

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_IoT_SoftwarePackageVersion) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
