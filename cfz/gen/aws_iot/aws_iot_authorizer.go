// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_iot

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_IoT_Authorizer)(nil)
	_ cfz.Resource                   = (*AWS_IoT_Authorizer)(nil)
)

const (
	// AWS_IoT_Authorizer__Type is the CloudFormation type for AWS::IoT::Authorizer.
	AWS_IoT_Authorizer__Type = "AWS::IoT::Authorizer"
)

var (
	// AWS_IoT_Authorizer__AttributesMap reports all the CloudFormation attributes for AWS::IoT::Authorizer.
	AWS_IoT_Authorizer__AttributesMap = struct {
		Arn string
	}{
		Arn: "Arn",
	}

	// AWS_IoT_Authorizer__AttributesSlice reports all the CloudFormation attributes for AWS::IoT::Authorizer.
	AWS_IoT_Authorizer__AttributesSlice = []string{
		AWS_IoT_Authorizer__AttributesMap.Arn,
	}
)

var (
	// AWS_IoT_Authorizer__PropertiesMap reports all the CloudFormation properties for AWS::IoT::Authorizer.
	AWS_IoT_Authorizer__PropertiesMap = struct {
		AuthorizerFunctionArn  string
		AuthorizerName         string
		EnableCachingForHttp   string
		SigningDisabled        string
		Status                 string
		Tags                   string
		TokenKeyName           string
		TokenSigningPublicKeys string
	}{
		AuthorizerFunctionArn:  "AuthorizerFunctionArn",
		AuthorizerName:         "AuthorizerName",
		EnableCachingForHttp:   "EnableCachingForHttp",
		SigningDisabled:        "SigningDisabled",
		Status:                 "Status",
		Tags:                   "Tags",
		TokenKeyName:           "TokenKeyName",
		TokenSigningPublicKeys: "TokenSigningPublicKeys",
	}

	// AWS_IoT_Authorizer__PropertiesSlice reports all the CloudFormation properties for AWS::IoT::Authorizer.
	AWS_IoT_Authorizer__PropertiesSlice = []string{
		AWS_IoT_Authorizer__PropertiesMap.AuthorizerFunctionArn,
		AWS_IoT_Authorizer__PropertiesMap.AuthorizerName,
		AWS_IoT_Authorizer__PropertiesMap.EnableCachingForHttp,
		AWS_IoT_Authorizer__PropertiesMap.SigningDisabled,
		AWS_IoT_Authorizer__PropertiesMap.Status,
		AWS_IoT_Authorizer__PropertiesMap.Tags,
		AWS_IoT_Authorizer__PropertiesMap.TokenKeyName,
		AWS_IoT_Authorizer__PropertiesMap.TokenSigningPublicKeys,
	}
)

// AWS_IoT_Authorizer is a binding for AWS::IoT::Authorizer.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-authorizer.html
type AWS_IoT_Authorizer struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AuthorizerFunctionArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-authorizer.html#cfn-iot-authorizer-authorizerfunctionarn
	AuthorizerFunctionArn cfz.Expression[string] `json:"AuthorizerFunctionArn,omitempty"`

	// AuthorizerName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-authorizer.html#cfn-iot-authorizer-authorizername
	AuthorizerName cfz.Expression[string] `json:"AuthorizerName,omitempty"`

	// EnableCachingForHttp is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-authorizer.html#cfn-iot-authorizer-enablecachingforhttp
	EnableCachingForHttp cfz.Expression[bool] `json:"EnableCachingForHttp,omitempty"`

	// SigningDisabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-authorizer.html#cfn-iot-authorizer-signingdisabled
	SigningDisabled cfz.Expression[bool] `json:"SigningDisabled,omitempty"`

	// Status is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-authorizer.html#cfn-iot-authorizer-status
	Status cfz.Expression[string] `json:"Status,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-authorizer.html#cfn-iot-authorizer-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// TokenKeyName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-authorizer.html#cfn-iot-authorizer-tokenkeyname
	TokenKeyName cfz.Expression[string] `json:"TokenKeyName,omitempty"`

	// TokenSigningPublicKeys is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-authorizer.html#cfn-iot-authorizer-tokensigningpublickeys
	TokenSigningPublicKeys cfz.ExpressionMap[string] `json:"TokenSigningPublicKeys,omitempty"`
}

// New__AWS_IoT_Authorizer initializes a new *AWS_IoT_Authorizer.
func New__AWS_IoT_Authorizer(logicalName string) *AWS_IoT_Authorizer {
	return &AWS_IoT_Authorizer{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_IoT_Authorizer) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_IoT_Authorizer) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_IoT_Authorizer) GetType() string {
	return AWS_IoT_Authorizer__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_IoT_Authorizer) Set__LogicalName(v string) *AWS_IoT_Authorizer {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_IoT_Authorizer) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_IoT_Authorizer {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_IoT_Authorizer) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_IoT_Authorizer {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_IoT_Authorizer) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_IoT_Authorizer {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_IoT_Authorizer) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_IoT_Authorizer {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_IoT_Authorizer) Set__RequestedOutputs(v []cfz.Output) *AWS_IoT_Authorizer {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_IoT_Authorizer) Add__RequestedOutputs(v ...cfz.Output) *AWS_IoT_Authorizer {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AuthorizerFunctionArn updates property "AuthorizerFunctionArn".
func (t *AWS_IoT_Authorizer) Set__AuthorizerFunctionArn(v cfz.Expression[string]) *AWS_IoT_Authorizer {
	t.AuthorizerFunctionArn = v
	return t
}

// SetV__AuthorizerFunctionArn updates property "AuthorizerFunctionArn".
func (t *AWS_IoT_Authorizer) SetV__AuthorizerFunctionArn(v string) *AWS_IoT_Authorizer {
	t.AuthorizerFunctionArn = cfz.V(v)
	return t
}

// Set__AuthorizerName updates property "AuthorizerName".
func (t *AWS_IoT_Authorizer) Set__AuthorizerName(v cfz.Expression[string]) *AWS_IoT_Authorizer {
	t.AuthorizerName = v
	return t
}

// SetV__AuthorizerName updates property "AuthorizerName".
func (t *AWS_IoT_Authorizer) SetV__AuthorizerName(v string) *AWS_IoT_Authorizer {
	t.AuthorizerName = cfz.V(v)
	return t
}

// Set__EnableCachingForHttp updates property "EnableCachingForHttp".
func (t *AWS_IoT_Authorizer) Set__EnableCachingForHttp(v cfz.Expression[bool]) *AWS_IoT_Authorizer {
	t.EnableCachingForHttp = v
	return t
}

// SetV__EnableCachingForHttp updates property "EnableCachingForHttp".
func (t *AWS_IoT_Authorizer) SetV__EnableCachingForHttp(v bool) *AWS_IoT_Authorizer {
	t.EnableCachingForHttp = cfz.V(v)
	return t
}

// Set__SigningDisabled updates property "SigningDisabled".
func (t *AWS_IoT_Authorizer) Set__SigningDisabled(v cfz.Expression[bool]) *AWS_IoT_Authorizer {
	t.SigningDisabled = v
	return t
}

// SetV__SigningDisabled updates property "SigningDisabled".
func (t *AWS_IoT_Authorizer) SetV__SigningDisabled(v bool) *AWS_IoT_Authorizer {
	t.SigningDisabled = cfz.V(v)
	return t
}

// Set__Status updates property "Status".
func (t *AWS_IoT_Authorizer) Set__Status(v cfz.Expression[string]) *AWS_IoT_Authorizer {
	t.Status = v
	return t
}

// SetV__Status updates property "Status".
func (t *AWS_IoT_Authorizer) SetV__Status(v string) *AWS_IoT_Authorizer {
	t.Status = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_IoT_Authorizer) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_IoT_Authorizer {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_IoT_Authorizer) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_IoT_Authorizer {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_IoT_Authorizer) SetSV__Tags(v ...cfz.Tag) *AWS_IoT_Authorizer {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__TokenKeyName updates property "TokenKeyName".
func (t *AWS_IoT_Authorizer) Set__TokenKeyName(v cfz.Expression[string]) *AWS_IoT_Authorizer {
	t.TokenKeyName = v
	return t
}

// SetV__TokenKeyName updates property "TokenKeyName".
func (t *AWS_IoT_Authorizer) SetV__TokenKeyName(v string) *AWS_IoT_Authorizer {
	t.TokenKeyName = cfz.V(v)
	return t
}

// Set__TokenSigningPublicKeys updates property "TokenSigningPublicKeys".
func (t *AWS_IoT_Authorizer) Set__TokenSigningPublicKeys(v cfz.ExpressionMap[string]) *AWS_IoT_Authorizer {
	t.TokenSigningPublicKeys = v
	return t
}

// SetM__TokenSigningPublicKeys updates property "TokenSigningPublicKeys".
func (t *AWS_IoT_Authorizer) SetM__TokenSigningPublicKeys(v ...map[string]cfz.Expression[string]) *AWS_IoT_Authorizer {
	t.TokenSigningPublicKeys = cfz.M(v...)
	return t
}

// SetMV__TokenSigningPublicKeys updates property "TokenSigningPublicKeys".
func (t *AWS_IoT_Authorizer) SetMV__TokenSigningPublicKeys(v ...map[string]string) *AWS_IoT_Authorizer {
	t.TokenSigningPublicKeys = cfz.MV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_IoT_Authorizer) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_IoT_Authorizer) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_IoT_Authorizer__AttributesMap.Arn))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_IoT_Authorizer) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_IoT_Authorizer) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_IoT_Authorizer) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_IoT_Authorizer

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_IoT_Authorizer) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
