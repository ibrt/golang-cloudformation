// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_iotanalytics

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_IoTAnalytics_Datastore)(nil)
	_ cfz.Resource                   = (*AWS_IoTAnalytics_Datastore)(nil)
)

const (
	// AWS_IoTAnalytics_Datastore__Type is the CloudFormation type for AWS::IoTAnalytics::Datastore.
	AWS_IoTAnalytics_Datastore__Type = "AWS::IoTAnalytics::Datastore"
)

var (
	// AWS_IoTAnalytics_Datastore__AttributesMap reports all the CloudFormation attributes for AWS::IoTAnalytics::Datastore.
	AWS_IoTAnalytics_Datastore__AttributesMap = struct {
		Id string
	}{
		Id: "Id",
	}

	// AWS_IoTAnalytics_Datastore__AttributesSlice reports all the CloudFormation attributes for AWS::IoTAnalytics::Datastore.
	AWS_IoTAnalytics_Datastore__AttributesSlice = []string{
		AWS_IoTAnalytics_Datastore__AttributesMap.Id,
	}
)

var (
	// AWS_IoTAnalytics_Datastore__PropertiesMap reports all the CloudFormation properties for AWS::IoTAnalytics::Datastore.
	AWS_IoTAnalytics_Datastore__PropertiesMap = struct {
		DatastoreName           string
		DatastorePartitions     string
		DatastoreStorage        string
		FileFormatConfiguration string
		RetentionPeriod         string
		Tags                    string
	}{
		DatastoreName:           "DatastoreName",
		DatastorePartitions:     "DatastorePartitions",
		DatastoreStorage:        "DatastoreStorage",
		FileFormatConfiguration: "FileFormatConfiguration",
		RetentionPeriod:         "RetentionPeriod",
		Tags:                    "Tags",
	}

	// AWS_IoTAnalytics_Datastore__PropertiesSlice reports all the CloudFormation properties for AWS::IoTAnalytics::Datastore.
	AWS_IoTAnalytics_Datastore__PropertiesSlice = []string{
		AWS_IoTAnalytics_Datastore__PropertiesMap.DatastoreName,
		AWS_IoTAnalytics_Datastore__PropertiesMap.DatastorePartitions,
		AWS_IoTAnalytics_Datastore__PropertiesMap.DatastoreStorage,
		AWS_IoTAnalytics_Datastore__PropertiesMap.FileFormatConfiguration,
		AWS_IoTAnalytics_Datastore__PropertiesMap.RetentionPeriod,
		AWS_IoTAnalytics_Datastore__PropertiesMap.Tags,
	}
)

// AWS_IoTAnalytics_Datastore is a binding for AWS::IoTAnalytics::Datastore.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotanalytics-datastore.html
type AWS_IoTAnalytics_Datastore struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// DatastoreName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotanalytics-datastore.html#cfn-iotanalytics-datastore-datastorename
	DatastoreName cfz.Expression[string] `json:"DatastoreName,omitempty"`

	// DatastorePartitions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotanalytics-datastore.html#cfn-iotanalytics-datastore-datastorepartitions
	DatastorePartitions cfz.Expression[AWS_IoTAnalytics_Datastore_DatastorePartitions] `json:"DatastorePartitions,omitempty"`

	// DatastoreStorage is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotanalytics-datastore.html#cfn-iotanalytics-datastore-datastorestorage
	DatastoreStorage cfz.Expression[AWS_IoTAnalytics_Datastore_DatastoreStorage] `json:"DatastoreStorage,omitempty"`

	// FileFormatConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotanalytics-datastore.html#cfn-iotanalytics-datastore-fileformatconfiguration
	FileFormatConfiguration cfz.Expression[AWS_IoTAnalytics_Datastore_FileFormatConfiguration] `json:"FileFormatConfiguration,omitempty"`

	// RetentionPeriod is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotanalytics-datastore.html#cfn-iotanalytics-datastore-retentionperiod
	RetentionPeriod cfz.Expression[AWS_IoTAnalytics_Datastore_RetentionPeriod] `json:"RetentionPeriod,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotanalytics-datastore.html#cfn-iotanalytics-datastore-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_IoTAnalytics_Datastore initializes a new *AWS_IoTAnalytics_Datastore.
func New__AWS_IoTAnalytics_Datastore(logicalName string) *AWS_IoTAnalytics_Datastore {
	return &AWS_IoTAnalytics_Datastore{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_IoTAnalytics_Datastore) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_IoTAnalytics_Datastore) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_IoTAnalytics_Datastore) GetType() string {
	return AWS_IoTAnalytics_Datastore__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_IoTAnalytics_Datastore) Set__LogicalName(v string) *AWS_IoTAnalytics_Datastore {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_IoTAnalytics_Datastore) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_IoTAnalytics_Datastore {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_IoTAnalytics_Datastore) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_IoTAnalytics_Datastore {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_IoTAnalytics_Datastore) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_IoTAnalytics_Datastore {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_IoTAnalytics_Datastore) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_IoTAnalytics_Datastore {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_IoTAnalytics_Datastore) Set__RequestedOutputs(v []cfz.Output) *AWS_IoTAnalytics_Datastore {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_IoTAnalytics_Datastore) Add__RequestedOutputs(v ...cfz.Output) *AWS_IoTAnalytics_Datastore {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__DatastoreName updates property "DatastoreName".
func (t *AWS_IoTAnalytics_Datastore) Set__DatastoreName(v cfz.Expression[string]) *AWS_IoTAnalytics_Datastore {
	t.DatastoreName = v
	return t
}

// SetV__DatastoreName updates property "DatastoreName".
func (t *AWS_IoTAnalytics_Datastore) SetV__DatastoreName(v string) *AWS_IoTAnalytics_Datastore {
	t.DatastoreName = cfz.V(v)
	return t
}

// Set__DatastorePartitions updates property "DatastorePartitions".
func (t *AWS_IoTAnalytics_Datastore) Set__DatastorePartitions(v cfz.Expression[AWS_IoTAnalytics_Datastore_DatastorePartitions]) *AWS_IoTAnalytics_Datastore {
	t.DatastorePartitions = v
	return t
}

// SetV__DatastorePartitions updates property "DatastorePartitions".
func (t *AWS_IoTAnalytics_Datastore) SetV__DatastorePartitions(v AWS_IoTAnalytics_Datastore_DatastorePartitions) *AWS_IoTAnalytics_Datastore {
	t.DatastorePartitions = cfz.V(v)
	return t
}

// Set__DatastoreStorage updates property "DatastoreStorage".
func (t *AWS_IoTAnalytics_Datastore) Set__DatastoreStorage(v cfz.Expression[AWS_IoTAnalytics_Datastore_DatastoreStorage]) *AWS_IoTAnalytics_Datastore {
	t.DatastoreStorage = v
	return t
}

// SetV__DatastoreStorage updates property "DatastoreStorage".
func (t *AWS_IoTAnalytics_Datastore) SetV__DatastoreStorage(v AWS_IoTAnalytics_Datastore_DatastoreStorage) *AWS_IoTAnalytics_Datastore {
	t.DatastoreStorage = cfz.V(v)
	return t
}

// Set__FileFormatConfiguration updates property "FileFormatConfiguration".
func (t *AWS_IoTAnalytics_Datastore) Set__FileFormatConfiguration(v cfz.Expression[AWS_IoTAnalytics_Datastore_FileFormatConfiguration]) *AWS_IoTAnalytics_Datastore {
	t.FileFormatConfiguration = v
	return t
}

// SetV__FileFormatConfiguration updates property "FileFormatConfiguration".
func (t *AWS_IoTAnalytics_Datastore) SetV__FileFormatConfiguration(v AWS_IoTAnalytics_Datastore_FileFormatConfiguration) *AWS_IoTAnalytics_Datastore {
	t.FileFormatConfiguration = cfz.V(v)
	return t
}

// Set__RetentionPeriod updates property "RetentionPeriod".
func (t *AWS_IoTAnalytics_Datastore) Set__RetentionPeriod(v cfz.Expression[AWS_IoTAnalytics_Datastore_RetentionPeriod]) *AWS_IoTAnalytics_Datastore {
	t.RetentionPeriod = v
	return t
}

// SetV__RetentionPeriod updates property "RetentionPeriod".
func (t *AWS_IoTAnalytics_Datastore) SetV__RetentionPeriod(v AWS_IoTAnalytics_Datastore_RetentionPeriod) *AWS_IoTAnalytics_Datastore {
	t.RetentionPeriod = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_IoTAnalytics_Datastore) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_IoTAnalytics_Datastore {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_IoTAnalytics_Datastore) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_IoTAnalytics_Datastore {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_IoTAnalytics_Datastore) SetSV__Tags(v ...cfz.Tag) *AWS_IoTAnalytics_Datastore {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_IoTAnalytics_Datastore) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Id returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Id
func (t *AWS_IoTAnalytics_Datastore) GetAtt__Id() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_IoTAnalytics_Datastore__AttributesMap.Id))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_IoTAnalytics_Datastore) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Id returns a conventionally configured output for an attribute of this resource.
// Attribute: Id
func (t *AWS_IoTAnalytics_Datastore) GetConventionalOutputAtt__Id(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttId", t.GetAtt__Id())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_IoTAnalytics_Datastore) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_IoTAnalytics_Datastore

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_IoTAnalytics_Datastore) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
