// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_transfer

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Transfer_User)(nil)
	_ cfz.Resource                   = (*AWS_Transfer_User)(nil)
)

const (
	// AWS_Transfer_User__Type is the CloudFormation type for AWS::Transfer::User.
	AWS_Transfer_User__Type = "AWS::Transfer::User"
)

var (
	// AWS_Transfer_User__AttributesMap reports all the CloudFormation attributes for AWS::Transfer::User.
	AWS_Transfer_User__AttributesMap = struct {
		Arn      string
		ServerId string
		UserName string
	}{
		Arn:      "Arn",
		ServerId: "ServerId",
		UserName: "UserName",
	}

	// AWS_Transfer_User__AttributesSlice reports all the CloudFormation attributes for AWS::Transfer::User.
	AWS_Transfer_User__AttributesSlice = []string{
		AWS_Transfer_User__AttributesMap.Arn,
		AWS_Transfer_User__AttributesMap.ServerId,
		AWS_Transfer_User__AttributesMap.UserName,
	}
)

var (
	// AWS_Transfer_User__PropertiesMap reports all the CloudFormation properties for AWS::Transfer::User.
	AWS_Transfer_User__PropertiesMap = struct {
		HomeDirectory         string
		HomeDirectoryMappings string
		HomeDirectoryType     string
		Policy                string
		PosixProfile          string
		Role                  string
		ServerId              string
		SshPublicKeys         string
		Tags                  string
		UserName              string
	}{
		HomeDirectory:         "HomeDirectory",
		HomeDirectoryMappings: "HomeDirectoryMappings",
		HomeDirectoryType:     "HomeDirectoryType",
		Policy:                "Policy",
		PosixProfile:          "PosixProfile",
		Role:                  "Role",
		ServerId:              "ServerId",
		SshPublicKeys:         "SshPublicKeys",
		Tags:                  "Tags",
		UserName:              "UserName",
	}

	// AWS_Transfer_User__PropertiesSlice reports all the CloudFormation properties for AWS::Transfer::User.
	AWS_Transfer_User__PropertiesSlice = []string{
		AWS_Transfer_User__PropertiesMap.HomeDirectory,
		AWS_Transfer_User__PropertiesMap.HomeDirectoryMappings,
		AWS_Transfer_User__PropertiesMap.HomeDirectoryType,
		AWS_Transfer_User__PropertiesMap.Policy,
		AWS_Transfer_User__PropertiesMap.PosixProfile,
		AWS_Transfer_User__PropertiesMap.Role,
		AWS_Transfer_User__PropertiesMap.ServerId,
		AWS_Transfer_User__PropertiesMap.SshPublicKeys,
		AWS_Transfer_User__PropertiesMap.Tags,
		AWS_Transfer_User__PropertiesMap.UserName,
	}
)

// AWS_Transfer_User is a binding for AWS::Transfer::User.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-user.html
type AWS_Transfer_User struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// HomeDirectory is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-user.html#cfn-transfer-user-homedirectory
	HomeDirectory cfz.Expression[string] `json:"HomeDirectory,omitempty"`

	// HomeDirectoryMappings is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-user.html#cfn-transfer-user-homedirectorymappings
	HomeDirectoryMappings cfz.ExpressionSlice[AWS_Transfer_User_HomeDirectoryMapEntry] `json:"HomeDirectoryMappings,omitempty"`

	// HomeDirectoryType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-user.html#cfn-transfer-user-homedirectorytype
	HomeDirectoryType cfz.Expression[string] `json:"HomeDirectoryType,omitempty"`

	// Policy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-user.html#cfn-transfer-user-policy
	Policy cfz.Expression[string] `json:"Policy,omitempty"`

	// PosixProfile is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-user.html#cfn-transfer-user-posixprofile
	PosixProfile cfz.Expression[AWS_Transfer_User_PosixProfile] `json:"PosixProfile,omitempty"`

	// Role is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-user.html#cfn-transfer-user-role
	Role cfz.Expression[string] `json:"Role,omitempty"`

	// ServerId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-user.html#cfn-transfer-user-serverid
	ServerId cfz.Expression[string] `json:"ServerId,omitempty"`

	// SshPublicKeys is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-user.html#cfn-transfer-user-sshpublickeys
	SshPublicKeys cfz.ExpressionSlice[string] `json:"SshPublicKeys,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-user.html#cfn-transfer-user-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// UserName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-user.html#cfn-transfer-user-username
	UserName cfz.Expression[string] `json:"UserName,omitempty"`
}

// New__AWS_Transfer_User initializes a new *AWS_Transfer_User.
func New__AWS_Transfer_User(logicalName string) *AWS_Transfer_User {
	return &AWS_Transfer_User{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Transfer_User) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Transfer_User) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Transfer_User) GetType() string {
	return AWS_Transfer_User__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Transfer_User) Set__LogicalName(v string) *AWS_Transfer_User {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Transfer_User) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Transfer_User {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Transfer_User) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Transfer_User {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Transfer_User) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Transfer_User {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Transfer_User) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Transfer_User {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Transfer_User) Set__RequestedOutputs(v []cfz.Output) *AWS_Transfer_User {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Transfer_User) Add__RequestedOutputs(v ...cfz.Output) *AWS_Transfer_User {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__HomeDirectory updates property "HomeDirectory".
func (t *AWS_Transfer_User) Set__HomeDirectory(v cfz.Expression[string]) *AWS_Transfer_User {
	t.HomeDirectory = v
	return t
}

// SetV__HomeDirectory updates property "HomeDirectory".
func (t *AWS_Transfer_User) SetV__HomeDirectory(v string) *AWS_Transfer_User {
	t.HomeDirectory = cfz.V(v)
	return t
}

// Set__HomeDirectoryMappings updates property "HomeDirectoryMappings".
func (t *AWS_Transfer_User) Set__HomeDirectoryMappings(v cfz.ExpressionSlice[AWS_Transfer_User_HomeDirectoryMapEntry]) *AWS_Transfer_User {
	t.HomeDirectoryMappings = v
	return t
}

// SetS__HomeDirectoryMappings updates property "HomeDirectoryMappings".
func (t *AWS_Transfer_User) SetS__HomeDirectoryMappings(v ...cfz.Expression[AWS_Transfer_User_HomeDirectoryMapEntry]) *AWS_Transfer_User {
	t.HomeDirectoryMappings = cfz.S(v...)
	return t
}

// SetSV__HomeDirectoryMappings updates property "HomeDirectoryMappings".
func (t *AWS_Transfer_User) SetSV__HomeDirectoryMappings(v ...AWS_Transfer_User_HomeDirectoryMapEntry) *AWS_Transfer_User {
	t.HomeDirectoryMappings = cfz.SV(v...)
	return t
}

// Set__HomeDirectoryType updates property "HomeDirectoryType".
func (t *AWS_Transfer_User) Set__HomeDirectoryType(v cfz.Expression[string]) *AWS_Transfer_User {
	t.HomeDirectoryType = v
	return t
}

// SetV__HomeDirectoryType updates property "HomeDirectoryType".
func (t *AWS_Transfer_User) SetV__HomeDirectoryType(v string) *AWS_Transfer_User {
	t.HomeDirectoryType = cfz.V(v)
	return t
}

// Set__Policy updates property "Policy".
func (t *AWS_Transfer_User) Set__Policy(v cfz.Expression[string]) *AWS_Transfer_User {
	t.Policy = v
	return t
}

// SetV__Policy updates property "Policy".
func (t *AWS_Transfer_User) SetV__Policy(v string) *AWS_Transfer_User {
	t.Policy = cfz.V(v)
	return t
}

// Set__PosixProfile updates property "PosixProfile".
func (t *AWS_Transfer_User) Set__PosixProfile(v cfz.Expression[AWS_Transfer_User_PosixProfile]) *AWS_Transfer_User {
	t.PosixProfile = v
	return t
}

// SetV__PosixProfile updates property "PosixProfile".
func (t *AWS_Transfer_User) SetV__PosixProfile(v AWS_Transfer_User_PosixProfile) *AWS_Transfer_User {
	t.PosixProfile = cfz.V(v)
	return t
}

// Set__Role updates property "Role".
func (t *AWS_Transfer_User) Set__Role(v cfz.Expression[string]) *AWS_Transfer_User {
	t.Role = v
	return t
}

// SetV__Role updates property "Role".
func (t *AWS_Transfer_User) SetV__Role(v string) *AWS_Transfer_User {
	t.Role = cfz.V(v)
	return t
}

// Set__ServerId updates property "ServerId".
func (t *AWS_Transfer_User) Set__ServerId(v cfz.Expression[string]) *AWS_Transfer_User {
	t.ServerId = v
	return t
}

// SetV__ServerId updates property "ServerId".
func (t *AWS_Transfer_User) SetV__ServerId(v string) *AWS_Transfer_User {
	t.ServerId = cfz.V(v)
	return t
}

// Set__SshPublicKeys updates property "SshPublicKeys".
func (t *AWS_Transfer_User) Set__SshPublicKeys(v cfz.ExpressionSlice[string]) *AWS_Transfer_User {
	t.SshPublicKeys = v
	return t
}

// SetS__SshPublicKeys updates property "SshPublicKeys".
func (t *AWS_Transfer_User) SetS__SshPublicKeys(v ...cfz.Expression[string]) *AWS_Transfer_User {
	t.SshPublicKeys = cfz.S(v...)
	return t
}

// SetSV__SshPublicKeys updates property "SshPublicKeys".
func (t *AWS_Transfer_User) SetSV__SshPublicKeys(v ...string) *AWS_Transfer_User {
	t.SshPublicKeys = cfz.SV(v...)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_Transfer_User) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_Transfer_User {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_Transfer_User) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_Transfer_User {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_Transfer_User) SetSV__Tags(v ...cfz.Tag) *AWS_Transfer_User {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__UserName updates property "UserName".
func (t *AWS_Transfer_User) Set__UserName(v cfz.Expression[string]) *AWS_Transfer_User {
	t.UserName = v
	return t
}

// SetV__UserName updates property "UserName".
func (t *AWS_Transfer_User) SetV__UserName(v string) *AWS_Transfer_User {
	t.UserName = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Transfer_User) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_Transfer_User) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Transfer_User__AttributesMap.Arn))
}

// GetAtt__ServerId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ServerId
func (t *AWS_Transfer_User) GetAtt__ServerId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Transfer_User__AttributesMap.ServerId))
}

// GetAtt__UserName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: UserName
func (t *AWS_Transfer_User) GetAtt__UserName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Transfer_User__AttributesMap.UserName))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Transfer_User) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_Transfer_User) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ServerId returns a conventionally configured output for an attribute of this resource.
// Attribute: ServerId
func (t *AWS_Transfer_User) GetConventionalOutputAtt__ServerId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttServerId", t.GetAtt__ServerId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__UserName returns a conventionally configured output for an attribute of this resource.
// Attribute: UserName
func (t *AWS_Transfer_User) GetConventionalOutputAtt__UserName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttUserName", t.GetAtt__UserName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Transfer_User) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Transfer_User

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Transfer_User) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
