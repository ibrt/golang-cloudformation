// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_transfer

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Transfer_Certificate)(nil)
	_ cfz.Resource                   = (*AWS_Transfer_Certificate)(nil)
)

const (
	// AWS_Transfer_Certificate__Type is the CloudFormation type for AWS::Transfer::Certificate.
	AWS_Transfer_Certificate__Type = "AWS::Transfer::Certificate"
)

var (
	// AWS_Transfer_Certificate__AttributesMap reports all the CloudFormation attributes for AWS::Transfer::Certificate.
	AWS_Transfer_Certificate__AttributesMap = struct {
		Arn           string
		CertificateId string
		NotAfterDate  string
		NotBeforeDate string
		Serial        string
		Status        string
		Type          string
	}{
		Arn:           "Arn",
		CertificateId: "CertificateId",
		NotAfterDate:  "NotAfterDate",
		NotBeforeDate: "NotBeforeDate",
		Serial:        "Serial",
		Status:        "Status",
		Type:          "Type",
	}

	// AWS_Transfer_Certificate__AttributesSlice reports all the CloudFormation attributes for AWS::Transfer::Certificate.
	AWS_Transfer_Certificate__AttributesSlice = []string{
		AWS_Transfer_Certificate__AttributesMap.Arn,
		AWS_Transfer_Certificate__AttributesMap.CertificateId,
		AWS_Transfer_Certificate__AttributesMap.NotAfterDate,
		AWS_Transfer_Certificate__AttributesMap.NotBeforeDate,
		AWS_Transfer_Certificate__AttributesMap.Serial,
		AWS_Transfer_Certificate__AttributesMap.Status,
		AWS_Transfer_Certificate__AttributesMap.Type,
	}
)

var (
	// AWS_Transfer_Certificate__PropertiesMap reports all the CloudFormation properties for AWS::Transfer::Certificate.
	AWS_Transfer_Certificate__PropertiesMap = struct {
		ActiveDate       string
		Certificate      string
		CertificateChain string
		Description      string
		InactiveDate     string
		PrivateKey       string
		Tags             string
		Usage            string
	}{
		ActiveDate:       "ActiveDate",
		Certificate:      "Certificate",
		CertificateChain: "CertificateChain",
		Description:      "Description",
		InactiveDate:     "InactiveDate",
		PrivateKey:       "PrivateKey",
		Tags:             "Tags",
		Usage:            "Usage",
	}

	// AWS_Transfer_Certificate__PropertiesSlice reports all the CloudFormation properties for AWS::Transfer::Certificate.
	AWS_Transfer_Certificate__PropertiesSlice = []string{
		AWS_Transfer_Certificate__PropertiesMap.ActiveDate,
		AWS_Transfer_Certificate__PropertiesMap.Certificate,
		AWS_Transfer_Certificate__PropertiesMap.CertificateChain,
		AWS_Transfer_Certificate__PropertiesMap.Description,
		AWS_Transfer_Certificate__PropertiesMap.InactiveDate,
		AWS_Transfer_Certificate__PropertiesMap.PrivateKey,
		AWS_Transfer_Certificate__PropertiesMap.Tags,
		AWS_Transfer_Certificate__PropertiesMap.Usage,
	}
)

// AWS_Transfer_Certificate is a binding for AWS::Transfer::Certificate.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-certificate.html
type AWS_Transfer_Certificate struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ActiveDate is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-certificate.html#cfn-transfer-certificate-activedate
	ActiveDate cfz.Expression[string] `json:"ActiveDate,omitempty"`

	// Certificate is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-certificate.html#cfn-transfer-certificate-certificate
	Certificate cfz.Expression[string] `json:"Certificate,omitempty"`

	// CertificateChain is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-certificate.html#cfn-transfer-certificate-certificatechain
	CertificateChain cfz.Expression[string] `json:"CertificateChain,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-certificate.html#cfn-transfer-certificate-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// InactiveDate is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-certificate.html#cfn-transfer-certificate-inactivedate
	InactiveDate cfz.Expression[string] `json:"InactiveDate,omitempty"`

	// PrivateKey is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-certificate.html#cfn-transfer-certificate-privatekey
	PrivateKey cfz.Expression[string] `json:"PrivateKey,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-certificate.html#cfn-transfer-certificate-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// Usage is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-certificate.html#cfn-transfer-certificate-usage
	Usage cfz.Expression[string] `json:"Usage,omitempty"`
}

// New__AWS_Transfer_Certificate initializes a new *AWS_Transfer_Certificate.
func New__AWS_Transfer_Certificate(logicalName string) *AWS_Transfer_Certificate {
	return &AWS_Transfer_Certificate{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Transfer_Certificate) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Transfer_Certificate) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Transfer_Certificate) GetType() string {
	return AWS_Transfer_Certificate__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Transfer_Certificate) Set__LogicalName(v string) *AWS_Transfer_Certificate {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Transfer_Certificate) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Transfer_Certificate {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Transfer_Certificate) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Transfer_Certificate {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Transfer_Certificate) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Transfer_Certificate {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Transfer_Certificate) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Transfer_Certificate {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Transfer_Certificate) Set__RequestedOutputs(v []cfz.Output) *AWS_Transfer_Certificate {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Transfer_Certificate) Add__RequestedOutputs(v ...cfz.Output) *AWS_Transfer_Certificate {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ActiveDate updates property "ActiveDate".
func (t *AWS_Transfer_Certificate) Set__ActiveDate(v cfz.Expression[string]) *AWS_Transfer_Certificate {
	t.ActiveDate = v
	return t
}

// SetV__ActiveDate updates property "ActiveDate".
func (t *AWS_Transfer_Certificate) SetV__ActiveDate(v string) *AWS_Transfer_Certificate {
	t.ActiveDate = cfz.V(v)
	return t
}

// Set__Certificate updates property "Certificate".
func (t *AWS_Transfer_Certificate) Set__Certificate(v cfz.Expression[string]) *AWS_Transfer_Certificate {
	t.Certificate = v
	return t
}

// SetV__Certificate updates property "Certificate".
func (t *AWS_Transfer_Certificate) SetV__Certificate(v string) *AWS_Transfer_Certificate {
	t.Certificate = cfz.V(v)
	return t
}

// Set__CertificateChain updates property "CertificateChain".
func (t *AWS_Transfer_Certificate) Set__CertificateChain(v cfz.Expression[string]) *AWS_Transfer_Certificate {
	t.CertificateChain = v
	return t
}

// SetV__CertificateChain updates property "CertificateChain".
func (t *AWS_Transfer_Certificate) SetV__CertificateChain(v string) *AWS_Transfer_Certificate {
	t.CertificateChain = cfz.V(v)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_Transfer_Certificate) Set__Description(v cfz.Expression[string]) *AWS_Transfer_Certificate {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_Transfer_Certificate) SetV__Description(v string) *AWS_Transfer_Certificate {
	t.Description = cfz.V(v)
	return t
}

// Set__InactiveDate updates property "InactiveDate".
func (t *AWS_Transfer_Certificate) Set__InactiveDate(v cfz.Expression[string]) *AWS_Transfer_Certificate {
	t.InactiveDate = v
	return t
}

// SetV__InactiveDate updates property "InactiveDate".
func (t *AWS_Transfer_Certificate) SetV__InactiveDate(v string) *AWS_Transfer_Certificate {
	t.InactiveDate = cfz.V(v)
	return t
}

// Set__PrivateKey updates property "PrivateKey".
func (t *AWS_Transfer_Certificate) Set__PrivateKey(v cfz.Expression[string]) *AWS_Transfer_Certificate {
	t.PrivateKey = v
	return t
}

// SetV__PrivateKey updates property "PrivateKey".
func (t *AWS_Transfer_Certificate) SetV__PrivateKey(v string) *AWS_Transfer_Certificate {
	t.PrivateKey = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_Transfer_Certificate) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_Transfer_Certificate {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_Transfer_Certificate) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_Transfer_Certificate {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_Transfer_Certificate) SetSV__Tags(v ...cfz.Tag) *AWS_Transfer_Certificate {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__Usage updates property "Usage".
func (t *AWS_Transfer_Certificate) Set__Usage(v cfz.Expression[string]) *AWS_Transfer_Certificate {
	t.Usage = v
	return t
}

// SetV__Usage updates property "Usage".
func (t *AWS_Transfer_Certificate) SetV__Usage(v string) *AWS_Transfer_Certificate {
	t.Usage = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Transfer_Certificate) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_Transfer_Certificate) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Transfer_Certificate__AttributesMap.Arn))
}

// GetAtt__CertificateId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CertificateId
func (t *AWS_Transfer_Certificate) GetAtt__CertificateId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Transfer_Certificate__AttributesMap.CertificateId))
}

// GetAtt__NotAfterDate returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: NotAfterDate
func (t *AWS_Transfer_Certificate) GetAtt__NotAfterDate() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Transfer_Certificate__AttributesMap.NotAfterDate))
}

// GetAtt__NotBeforeDate returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: NotBeforeDate
func (t *AWS_Transfer_Certificate) GetAtt__NotBeforeDate() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Transfer_Certificate__AttributesMap.NotBeforeDate))
}

// GetAtt__Serial returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Serial
func (t *AWS_Transfer_Certificate) GetAtt__Serial() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Transfer_Certificate__AttributesMap.Serial))
}

// GetAtt__Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Status
func (t *AWS_Transfer_Certificate) GetAtt__Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Transfer_Certificate__AttributesMap.Status))
}

// GetAtt__Type returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Type
func (t *AWS_Transfer_Certificate) GetAtt__Type() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Transfer_Certificate__AttributesMap.Type))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Transfer_Certificate) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_Transfer_Certificate) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CertificateId returns a conventionally configured output for an attribute of this resource.
// Attribute: CertificateId
func (t *AWS_Transfer_Certificate) GetConventionalOutputAtt__CertificateId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCertificateId", t.GetAtt__CertificateId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__NotAfterDate returns a conventionally configured output for an attribute of this resource.
// Attribute: NotAfterDate
func (t *AWS_Transfer_Certificate) GetConventionalOutputAtt__NotAfterDate(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNotAfterDate", t.GetAtt__NotAfterDate())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__NotBeforeDate returns a conventionally configured output for an attribute of this resource.
// Attribute: NotBeforeDate
func (t *AWS_Transfer_Certificate) GetConventionalOutputAtt__NotBeforeDate(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNotBeforeDate", t.GetAtt__NotBeforeDate())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Serial returns a conventionally configured output for an attribute of this resource.
// Attribute: Serial
func (t *AWS_Transfer_Certificate) GetConventionalOutputAtt__Serial(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSerial", t.GetAtt__Serial())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Status returns a conventionally configured output for an attribute of this resource.
// Attribute: Status
func (t *AWS_Transfer_Certificate) GetConventionalOutputAtt__Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStatus", t.GetAtt__Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Type returns a conventionally configured output for an attribute of this resource.
// Attribute: Type
func (t *AWS_Transfer_Certificate) GetConventionalOutputAtt__Type(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttType", t.GetAtt__Type())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Transfer_Certificate) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Transfer_Certificate

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Transfer_Certificate) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
