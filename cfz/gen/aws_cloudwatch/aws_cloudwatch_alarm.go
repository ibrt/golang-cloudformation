// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_cloudwatch

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_CloudWatch_Alarm)(nil)
	_ cfz.Resource                   = (*AWS_CloudWatch_Alarm)(nil)
)

const (
	// AWS_CloudWatch_Alarm__Type is the CloudFormation type for AWS::CloudWatch::Alarm.
	AWS_CloudWatch_Alarm__Type = "AWS::CloudWatch::Alarm"
)

var (
	// AWS_CloudWatch_Alarm__AttributesMap reports all the CloudFormation attributes for AWS::CloudWatch::Alarm.
	AWS_CloudWatch_Alarm__AttributesMap = struct {
		Arn string
	}{
		Arn: "Arn",
	}

	// AWS_CloudWatch_Alarm__AttributesSlice reports all the CloudFormation attributes for AWS::CloudWatch::Alarm.
	AWS_CloudWatch_Alarm__AttributesSlice = []string{
		AWS_CloudWatch_Alarm__AttributesMap.Arn,
	}
)

var (
	// AWS_CloudWatch_Alarm__PropertiesMap reports all the CloudFormation properties for AWS::CloudWatch::Alarm.
	AWS_CloudWatch_Alarm__PropertiesMap = struct {
		ActionsEnabled                   string
		AlarmActions                     string
		AlarmDescription                 string
		AlarmName                        string
		ComparisonOperator               string
		DatapointsToAlarm                string
		Dimensions                       string
		EvaluateLowSampleCountPercentile string
		EvaluationPeriods                string
		ExtendedStatistic                string
		InsufficientDataActions          string
		MetricName                       string
		Metrics                          string
		Namespace                        string
		OKActions                        string
		Period                           string
		Statistic                        string
		Tags                             string
		Threshold                        string
		ThresholdMetricId                string
		TreatMissingData                 string
		Unit                             string
	}{
		ActionsEnabled:                   "ActionsEnabled",
		AlarmActions:                     "AlarmActions",
		AlarmDescription:                 "AlarmDescription",
		AlarmName:                        "AlarmName",
		ComparisonOperator:               "ComparisonOperator",
		DatapointsToAlarm:                "DatapointsToAlarm",
		Dimensions:                       "Dimensions",
		EvaluateLowSampleCountPercentile: "EvaluateLowSampleCountPercentile",
		EvaluationPeriods:                "EvaluationPeriods",
		ExtendedStatistic:                "ExtendedStatistic",
		InsufficientDataActions:          "InsufficientDataActions",
		MetricName:                       "MetricName",
		Metrics:                          "Metrics",
		Namespace:                        "Namespace",
		OKActions:                        "OKActions",
		Period:                           "Period",
		Statistic:                        "Statistic",
		Tags:                             "Tags",
		Threshold:                        "Threshold",
		ThresholdMetricId:                "ThresholdMetricId",
		TreatMissingData:                 "TreatMissingData",
		Unit:                             "Unit",
	}

	// AWS_CloudWatch_Alarm__PropertiesSlice reports all the CloudFormation properties for AWS::CloudWatch::Alarm.
	AWS_CloudWatch_Alarm__PropertiesSlice = []string{
		AWS_CloudWatch_Alarm__PropertiesMap.ActionsEnabled,
		AWS_CloudWatch_Alarm__PropertiesMap.AlarmActions,
		AWS_CloudWatch_Alarm__PropertiesMap.AlarmDescription,
		AWS_CloudWatch_Alarm__PropertiesMap.AlarmName,
		AWS_CloudWatch_Alarm__PropertiesMap.ComparisonOperator,
		AWS_CloudWatch_Alarm__PropertiesMap.DatapointsToAlarm,
		AWS_CloudWatch_Alarm__PropertiesMap.Dimensions,
		AWS_CloudWatch_Alarm__PropertiesMap.EvaluateLowSampleCountPercentile,
		AWS_CloudWatch_Alarm__PropertiesMap.EvaluationPeriods,
		AWS_CloudWatch_Alarm__PropertiesMap.ExtendedStatistic,
		AWS_CloudWatch_Alarm__PropertiesMap.InsufficientDataActions,
		AWS_CloudWatch_Alarm__PropertiesMap.MetricName,
		AWS_CloudWatch_Alarm__PropertiesMap.Metrics,
		AWS_CloudWatch_Alarm__PropertiesMap.Namespace,
		AWS_CloudWatch_Alarm__PropertiesMap.OKActions,
		AWS_CloudWatch_Alarm__PropertiesMap.Period,
		AWS_CloudWatch_Alarm__PropertiesMap.Statistic,
		AWS_CloudWatch_Alarm__PropertiesMap.Tags,
		AWS_CloudWatch_Alarm__PropertiesMap.Threshold,
		AWS_CloudWatch_Alarm__PropertiesMap.ThresholdMetricId,
		AWS_CloudWatch_Alarm__PropertiesMap.TreatMissingData,
		AWS_CloudWatch_Alarm__PropertiesMap.Unit,
	}
)

// AWS_CloudWatch_Alarm is a binding for AWS::CloudWatch::Alarm.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html
type AWS_CloudWatch_Alarm struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ActionsEnabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-actionsenabled
	ActionsEnabled cfz.Expression[bool] `json:"ActionsEnabled,omitempty"`

	// AlarmActions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-alarmactions
	AlarmActions cfz.ExpressionSlice[string] `json:"AlarmActions,omitempty"`

	// AlarmDescription is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-alarmdescription
	AlarmDescription cfz.Expression[string] `json:"AlarmDescription,omitempty"`

	// AlarmName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-alarmname
	AlarmName cfz.Expression[string] `json:"AlarmName,omitempty"`

	// ComparisonOperator is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-comparisonoperator
	ComparisonOperator cfz.Expression[string] `json:"ComparisonOperator,omitempty"`

	// DatapointsToAlarm is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-datapointstoalarm
	DatapointsToAlarm cfz.Expression[int32] `json:"DatapointsToAlarm,omitempty"`

	// Dimensions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-dimensions
	Dimensions cfz.ExpressionSlice[AWS_CloudWatch_Alarm_Dimension] `json:"Dimensions,omitempty"`

	// EvaluateLowSampleCountPercentile is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-evaluatelowsamplecountpercentile
	EvaluateLowSampleCountPercentile cfz.Expression[string] `json:"EvaluateLowSampleCountPercentile,omitempty"`

	// EvaluationPeriods is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-evaluationperiods
	EvaluationPeriods cfz.Expression[int32] `json:"EvaluationPeriods,omitempty"`

	// ExtendedStatistic is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-extendedstatistic
	ExtendedStatistic cfz.Expression[string] `json:"ExtendedStatistic,omitempty"`

	// InsufficientDataActions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-insufficientdataactions
	InsufficientDataActions cfz.ExpressionSlice[string] `json:"InsufficientDataActions,omitempty"`

	// MetricName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-metricname
	MetricName cfz.Expression[string] `json:"MetricName,omitempty"`

	// Metrics is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-metrics
	Metrics cfz.ExpressionSlice[AWS_CloudWatch_Alarm_MetricDataQuery] `json:"Metrics,omitempty"`

	// Namespace is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-namespace
	Namespace cfz.Expression[string] `json:"Namespace,omitempty"`

	// OKActions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-okactions
	OKActions cfz.ExpressionSlice[string] `json:"OKActions,omitempty"`

	// Period is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-period
	Period cfz.Expression[int32] `json:"Period,omitempty"`

	// Statistic is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-statistic
	Statistic cfz.Expression[string] `json:"Statistic,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// Threshold is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-threshold
	Threshold cfz.Expression[float64] `json:"Threshold,omitempty"`

	// ThresholdMetricId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-thresholdmetricid
	ThresholdMetricId cfz.Expression[string] `json:"ThresholdMetricId,omitempty"`

	// TreatMissingData is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-treatmissingdata
	TreatMissingData cfz.Expression[string] `json:"TreatMissingData,omitempty"`

	// Unit is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-unit
	Unit cfz.Expression[string] `json:"Unit,omitempty"`
}

// New__AWS_CloudWatch_Alarm initializes a new *AWS_CloudWatch_Alarm.
func New__AWS_CloudWatch_Alarm(logicalName string) *AWS_CloudWatch_Alarm {
	return &AWS_CloudWatch_Alarm{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_CloudWatch_Alarm) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_CloudWatch_Alarm) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_CloudWatch_Alarm) GetType() string {
	return AWS_CloudWatch_Alarm__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_CloudWatch_Alarm) Set__LogicalName(v string) *AWS_CloudWatch_Alarm {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_CloudWatch_Alarm) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_CloudWatch_Alarm {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_CloudWatch_Alarm) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_CloudWatch_Alarm {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_CloudWatch_Alarm) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_CloudWatch_Alarm {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_CloudWatch_Alarm) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_CloudWatch_Alarm {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_CloudWatch_Alarm) Set__RequestedOutputs(v []cfz.Output) *AWS_CloudWatch_Alarm {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_CloudWatch_Alarm) Add__RequestedOutputs(v ...cfz.Output) *AWS_CloudWatch_Alarm {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ActionsEnabled updates property "ActionsEnabled".
func (t *AWS_CloudWatch_Alarm) Set__ActionsEnabled(v cfz.Expression[bool]) *AWS_CloudWatch_Alarm {
	t.ActionsEnabled = v
	return t
}

// SetV__ActionsEnabled updates property "ActionsEnabled".
func (t *AWS_CloudWatch_Alarm) SetV__ActionsEnabled(v bool) *AWS_CloudWatch_Alarm {
	t.ActionsEnabled = cfz.V(v)
	return t
}

// Set__AlarmActions updates property "AlarmActions".
func (t *AWS_CloudWatch_Alarm) Set__AlarmActions(v cfz.ExpressionSlice[string]) *AWS_CloudWatch_Alarm {
	t.AlarmActions = v
	return t
}

// SetS__AlarmActions updates property "AlarmActions".
func (t *AWS_CloudWatch_Alarm) SetS__AlarmActions(v ...cfz.Expression[string]) *AWS_CloudWatch_Alarm {
	t.AlarmActions = cfz.S(v...)
	return t
}

// SetSV__AlarmActions updates property "AlarmActions".
func (t *AWS_CloudWatch_Alarm) SetSV__AlarmActions(v ...string) *AWS_CloudWatch_Alarm {
	t.AlarmActions = cfz.SV(v...)
	return t
}

// Set__AlarmDescription updates property "AlarmDescription".
func (t *AWS_CloudWatch_Alarm) Set__AlarmDescription(v cfz.Expression[string]) *AWS_CloudWatch_Alarm {
	t.AlarmDescription = v
	return t
}

// SetV__AlarmDescription updates property "AlarmDescription".
func (t *AWS_CloudWatch_Alarm) SetV__AlarmDescription(v string) *AWS_CloudWatch_Alarm {
	t.AlarmDescription = cfz.V(v)
	return t
}

// Set__AlarmName updates property "AlarmName".
func (t *AWS_CloudWatch_Alarm) Set__AlarmName(v cfz.Expression[string]) *AWS_CloudWatch_Alarm {
	t.AlarmName = v
	return t
}

// SetV__AlarmName updates property "AlarmName".
func (t *AWS_CloudWatch_Alarm) SetV__AlarmName(v string) *AWS_CloudWatch_Alarm {
	t.AlarmName = cfz.V(v)
	return t
}

// Set__ComparisonOperator updates property "ComparisonOperator".
func (t *AWS_CloudWatch_Alarm) Set__ComparisonOperator(v cfz.Expression[string]) *AWS_CloudWatch_Alarm {
	t.ComparisonOperator = v
	return t
}

// SetV__ComparisonOperator updates property "ComparisonOperator".
func (t *AWS_CloudWatch_Alarm) SetV__ComparisonOperator(v string) *AWS_CloudWatch_Alarm {
	t.ComparisonOperator = cfz.V(v)
	return t
}

// Set__DatapointsToAlarm updates property "DatapointsToAlarm".
func (t *AWS_CloudWatch_Alarm) Set__DatapointsToAlarm(v cfz.Expression[int32]) *AWS_CloudWatch_Alarm {
	t.DatapointsToAlarm = v
	return t
}

// SetV__DatapointsToAlarm updates property "DatapointsToAlarm".
func (t *AWS_CloudWatch_Alarm) SetV__DatapointsToAlarm(v int32) *AWS_CloudWatch_Alarm {
	t.DatapointsToAlarm = cfz.V(v)
	return t
}

// Set__Dimensions updates property "Dimensions".
func (t *AWS_CloudWatch_Alarm) Set__Dimensions(v cfz.ExpressionSlice[AWS_CloudWatch_Alarm_Dimension]) *AWS_CloudWatch_Alarm {
	t.Dimensions = v
	return t
}

// SetS__Dimensions updates property "Dimensions".
func (t *AWS_CloudWatch_Alarm) SetS__Dimensions(v ...cfz.Expression[AWS_CloudWatch_Alarm_Dimension]) *AWS_CloudWatch_Alarm {
	t.Dimensions = cfz.S(v...)
	return t
}

// SetSV__Dimensions updates property "Dimensions".
func (t *AWS_CloudWatch_Alarm) SetSV__Dimensions(v ...AWS_CloudWatch_Alarm_Dimension) *AWS_CloudWatch_Alarm {
	t.Dimensions = cfz.SV(v...)
	return t
}

// Set__EvaluateLowSampleCountPercentile updates property "EvaluateLowSampleCountPercentile".
func (t *AWS_CloudWatch_Alarm) Set__EvaluateLowSampleCountPercentile(v cfz.Expression[string]) *AWS_CloudWatch_Alarm {
	t.EvaluateLowSampleCountPercentile = v
	return t
}

// SetV__EvaluateLowSampleCountPercentile updates property "EvaluateLowSampleCountPercentile".
func (t *AWS_CloudWatch_Alarm) SetV__EvaluateLowSampleCountPercentile(v string) *AWS_CloudWatch_Alarm {
	t.EvaluateLowSampleCountPercentile = cfz.V(v)
	return t
}

// Set__EvaluationPeriods updates property "EvaluationPeriods".
func (t *AWS_CloudWatch_Alarm) Set__EvaluationPeriods(v cfz.Expression[int32]) *AWS_CloudWatch_Alarm {
	t.EvaluationPeriods = v
	return t
}

// SetV__EvaluationPeriods updates property "EvaluationPeriods".
func (t *AWS_CloudWatch_Alarm) SetV__EvaluationPeriods(v int32) *AWS_CloudWatch_Alarm {
	t.EvaluationPeriods = cfz.V(v)
	return t
}

// Set__ExtendedStatistic updates property "ExtendedStatistic".
func (t *AWS_CloudWatch_Alarm) Set__ExtendedStatistic(v cfz.Expression[string]) *AWS_CloudWatch_Alarm {
	t.ExtendedStatistic = v
	return t
}

// SetV__ExtendedStatistic updates property "ExtendedStatistic".
func (t *AWS_CloudWatch_Alarm) SetV__ExtendedStatistic(v string) *AWS_CloudWatch_Alarm {
	t.ExtendedStatistic = cfz.V(v)
	return t
}

// Set__InsufficientDataActions updates property "InsufficientDataActions".
func (t *AWS_CloudWatch_Alarm) Set__InsufficientDataActions(v cfz.ExpressionSlice[string]) *AWS_CloudWatch_Alarm {
	t.InsufficientDataActions = v
	return t
}

// SetS__InsufficientDataActions updates property "InsufficientDataActions".
func (t *AWS_CloudWatch_Alarm) SetS__InsufficientDataActions(v ...cfz.Expression[string]) *AWS_CloudWatch_Alarm {
	t.InsufficientDataActions = cfz.S(v...)
	return t
}

// SetSV__InsufficientDataActions updates property "InsufficientDataActions".
func (t *AWS_CloudWatch_Alarm) SetSV__InsufficientDataActions(v ...string) *AWS_CloudWatch_Alarm {
	t.InsufficientDataActions = cfz.SV(v...)
	return t
}

// Set__MetricName updates property "MetricName".
func (t *AWS_CloudWatch_Alarm) Set__MetricName(v cfz.Expression[string]) *AWS_CloudWatch_Alarm {
	t.MetricName = v
	return t
}

// SetV__MetricName updates property "MetricName".
func (t *AWS_CloudWatch_Alarm) SetV__MetricName(v string) *AWS_CloudWatch_Alarm {
	t.MetricName = cfz.V(v)
	return t
}

// Set__Metrics updates property "Metrics".
func (t *AWS_CloudWatch_Alarm) Set__Metrics(v cfz.ExpressionSlice[AWS_CloudWatch_Alarm_MetricDataQuery]) *AWS_CloudWatch_Alarm {
	t.Metrics = v
	return t
}

// SetS__Metrics updates property "Metrics".
func (t *AWS_CloudWatch_Alarm) SetS__Metrics(v ...cfz.Expression[AWS_CloudWatch_Alarm_MetricDataQuery]) *AWS_CloudWatch_Alarm {
	t.Metrics = cfz.S(v...)
	return t
}

// SetSV__Metrics updates property "Metrics".
func (t *AWS_CloudWatch_Alarm) SetSV__Metrics(v ...AWS_CloudWatch_Alarm_MetricDataQuery) *AWS_CloudWatch_Alarm {
	t.Metrics = cfz.SV(v...)
	return t
}

// Set__Namespace updates property "Namespace".
func (t *AWS_CloudWatch_Alarm) Set__Namespace(v cfz.Expression[string]) *AWS_CloudWatch_Alarm {
	t.Namespace = v
	return t
}

// SetV__Namespace updates property "Namespace".
func (t *AWS_CloudWatch_Alarm) SetV__Namespace(v string) *AWS_CloudWatch_Alarm {
	t.Namespace = cfz.V(v)
	return t
}

// Set__OKActions updates property "OKActions".
func (t *AWS_CloudWatch_Alarm) Set__OKActions(v cfz.ExpressionSlice[string]) *AWS_CloudWatch_Alarm {
	t.OKActions = v
	return t
}

// SetS__OKActions updates property "OKActions".
func (t *AWS_CloudWatch_Alarm) SetS__OKActions(v ...cfz.Expression[string]) *AWS_CloudWatch_Alarm {
	t.OKActions = cfz.S(v...)
	return t
}

// SetSV__OKActions updates property "OKActions".
func (t *AWS_CloudWatch_Alarm) SetSV__OKActions(v ...string) *AWS_CloudWatch_Alarm {
	t.OKActions = cfz.SV(v...)
	return t
}

// Set__Period updates property "Period".
func (t *AWS_CloudWatch_Alarm) Set__Period(v cfz.Expression[int32]) *AWS_CloudWatch_Alarm {
	t.Period = v
	return t
}

// SetV__Period updates property "Period".
func (t *AWS_CloudWatch_Alarm) SetV__Period(v int32) *AWS_CloudWatch_Alarm {
	t.Period = cfz.V(v)
	return t
}

// Set__Statistic updates property "Statistic".
func (t *AWS_CloudWatch_Alarm) Set__Statistic(v cfz.Expression[string]) *AWS_CloudWatch_Alarm {
	t.Statistic = v
	return t
}

// SetV__Statistic updates property "Statistic".
func (t *AWS_CloudWatch_Alarm) SetV__Statistic(v string) *AWS_CloudWatch_Alarm {
	t.Statistic = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_CloudWatch_Alarm) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_CloudWatch_Alarm {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_CloudWatch_Alarm) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_CloudWatch_Alarm {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_CloudWatch_Alarm) SetSV__Tags(v ...cfz.Tag) *AWS_CloudWatch_Alarm {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__Threshold updates property "Threshold".
func (t *AWS_CloudWatch_Alarm) Set__Threshold(v cfz.Expression[float64]) *AWS_CloudWatch_Alarm {
	t.Threshold = v
	return t
}

// SetV__Threshold updates property "Threshold".
func (t *AWS_CloudWatch_Alarm) SetV__Threshold(v float64) *AWS_CloudWatch_Alarm {
	t.Threshold = cfz.V(v)
	return t
}

// Set__ThresholdMetricId updates property "ThresholdMetricId".
func (t *AWS_CloudWatch_Alarm) Set__ThresholdMetricId(v cfz.Expression[string]) *AWS_CloudWatch_Alarm {
	t.ThresholdMetricId = v
	return t
}

// SetV__ThresholdMetricId updates property "ThresholdMetricId".
func (t *AWS_CloudWatch_Alarm) SetV__ThresholdMetricId(v string) *AWS_CloudWatch_Alarm {
	t.ThresholdMetricId = cfz.V(v)
	return t
}

// Set__TreatMissingData updates property "TreatMissingData".
func (t *AWS_CloudWatch_Alarm) Set__TreatMissingData(v cfz.Expression[string]) *AWS_CloudWatch_Alarm {
	t.TreatMissingData = v
	return t
}

// SetV__TreatMissingData updates property "TreatMissingData".
func (t *AWS_CloudWatch_Alarm) SetV__TreatMissingData(v string) *AWS_CloudWatch_Alarm {
	t.TreatMissingData = cfz.V(v)
	return t
}

// Set__Unit updates property "Unit".
func (t *AWS_CloudWatch_Alarm) Set__Unit(v cfz.Expression[string]) *AWS_CloudWatch_Alarm {
	t.Unit = v
	return t
}

// SetV__Unit updates property "Unit".
func (t *AWS_CloudWatch_Alarm) SetV__Unit(v string) *AWS_CloudWatch_Alarm {
	t.Unit = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_CloudWatch_Alarm) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_CloudWatch_Alarm) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_CloudWatch_Alarm__AttributesMap.Arn))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_CloudWatch_Alarm) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_CloudWatch_Alarm) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_CloudWatch_Alarm) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_CloudWatch_Alarm

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_CloudWatch_Alarm) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
