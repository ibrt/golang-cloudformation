// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_networkmanager

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_NetworkManager_ConnectPeer)(nil)
	_ cfz.Resource                   = (*AWS_NetworkManager_ConnectPeer)(nil)
)

const (
	// AWS_NetworkManager_ConnectPeer__Type is the CloudFormation type for AWS::NetworkManager::ConnectPeer.
	AWS_NetworkManager_ConnectPeer__Type = "AWS::NetworkManager::ConnectPeer"
)

var (
	// AWS_NetworkManager_ConnectPeer__AttributesMap reports all the CloudFormation attributes for AWS::NetworkManager::ConnectPeer.
	AWS_NetworkManager_ConnectPeer__AttributesMap = struct {
		Configuration                    string
		Configuration_BgpConfigurations  string
		Configuration_CoreNetworkAddress string
		Configuration_InsideCidrBlocks   string
		Configuration_PeerAddress        string
		Configuration_Protocol           string
		ConnectPeerId                    string
		CoreNetworkId                    string
		CreatedAt                        string
		EdgeLocation                     string
		State                            string
	}{
		Configuration:                    "Configuration",
		Configuration_BgpConfigurations:  "Configuration.BgpConfigurations",
		Configuration_CoreNetworkAddress: "Configuration.CoreNetworkAddress",
		Configuration_InsideCidrBlocks:   "Configuration.InsideCidrBlocks",
		Configuration_PeerAddress:        "Configuration.PeerAddress",
		Configuration_Protocol:           "Configuration.Protocol",
		ConnectPeerId:                    "ConnectPeerId",
		CoreNetworkId:                    "CoreNetworkId",
		CreatedAt:                        "CreatedAt",
		EdgeLocation:                     "EdgeLocation",
		State:                            "State",
	}

	// AWS_NetworkManager_ConnectPeer__AttributesSlice reports all the CloudFormation attributes for AWS::NetworkManager::ConnectPeer.
	AWS_NetworkManager_ConnectPeer__AttributesSlice = []string{
		AWS_NetworkManager_ConnectPeer__AttributesMap.Configuration,
		AWS_NetworkManager_ConnectPeer__AttributesMap.Configuration_BgpConfigurations,
		AWS_NetworkManager_ConnectPeer__AttributesMap.Configuration_CoreNetworkAddress,
		AWS_NetworkManager_ConnectPeer__AttributesMap.Configuration_InsideCidrBlocks,
		AWS_NetworkManager_ConnectPeer__AttributesMap.Configuration_PeerAddress,
		AWS_NetworkManager_ConnectPeer__AttributesMap.Configuration_Protocol,
		AWS_NetworkManager_ConnectPeer__AttributesMap.ConnectPeerId,
		AWS_NetworkManager_ConnectPeer__AttributesMap.CoreNetworkId,
		AWS_NetworkManager_ConnectPeer__AttributesMap.CreatedAt,
		AWS_NetworkManager_ConnectPeer__AttributesMap.EdgeLocation,
		AWS_NetworkManager_ConnectPeer__AttributesMap.State,
	}
)

var (
	// AWS_NetworkManager_ConnectPeer__PropertiesMap reports all the CloudFormation properties for AWS::NetworkManager::ConnectPeer.
	AWS_NetworkManager_ConnectPeer__PropertiesMap = struct {
		BgpOptions          string
		ConnectAttachmentId string
		CoreNetworkAddress  string
		InsideCidrBlocks    string
		PeerAddress         string
		SubnetArn           string
		Tags                string
	}{
		BgpOptions:          "BgpOptions",
		ConnectAttachmentId: "ConnectAttachmentId",
		CoreNetworkAddress:  "CoreNetworkAddress",
		InsideCidrBlocks:    "InsideCidrBlocks",
		PeerAddress:         "PeerAddress",
		SubnetArn:           "SubnetArn",
		Tags:                "Tags",
	}

	// AWS_NetworkManager_ConnectPeer__PropertiesSlice reports all the CloudFormation properties for AWS::NetworkManager::ConnectPeer.
	AWS_NetworkManager_ConnectPeer__PropertiesSlice = []string{
		AWS_NetworkManager_ConnectPeer__PropertiesMap.BgpOptions,
		AWS_NetworkManager_ConnectPeer__PropertiesMap.ConnectAttachmentId,
		AWS_NetworkManager_ConnectPeer__PropertiesMap.CoreNetworkAddress,
		AWS_NetworkManager_ConnectPeer__PropertiesMap.InsideCidrBlocks,
		AWS_NetworkManager_ConnectPeer__PropertiesMap.PeerAddress,
		AWS_NetworkManager_ConnectPeer__PropertiesMap.SubnetArn,
		AWS_NetworkManager_ConnectPeer__PropertiesMap.Tags,
	}
)

// AWS_NetworkManager_ConnectPeer is a binding for AWS::NetworkManager::ConnectPeer.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-connectpeer.html
type AWS_NetworkManager_ConnectPeer struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// BgpOptions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-connectpeer.html#cfn-networkmanager-connectpeer-bgpoptions
	BgpOptions cfz.Expression[AWS_NetworkManager_ConnectPeer_BgpOptions] `json:"BgpOptions,omitempty"`

	// ConnectAttachmentId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-connectpeer.html#cfn-networkmanager-connectpeer-connectattachmentid
	ConnectAttachmentId cfz.Expression[string] `json:"ConnectAttachmentId,omitempty"`

	// CoreNetworkAddress is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-connectpeer.html#cfn-networkmanager-connectpeer-corenetworkaddress
	CoreNetworkAddress cfz.Expression[string] `json:"CoreNetworkAddress,omitempty"`

	// InsideCidrBlocks is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-connectpeer.html#cfn-networkmanager-connectpeer-insidecidrblocks
	InsideCidrBlocks cfz.ExpressionSlice[string] `json:"InsideCidrBlocks,omitempty"`

	// PeerAddress is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-connectpeer.html#cfn-networkmanager-connectpeer-peeraddress
	PeerAddress cfz.Expression[string] `json:"PeerAddress,omitempty"`

	// SubnetArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-connectpeer.html#cfn-networkmanager-connectpeer-subnetarn
	SubnetArn cfz.Expression[string] `json:"SubnetArn,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-connectpeer.html#cfn-networkmanager-connectpeer-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_NetworkManager_ConnectPeer initializes a new *AWS_NetworkManager_ConnectPeer.
func New__AWS_NetworkManager_ConnectPeer(logicalName string) *AWS_NetworkManager_ConnectPeer {
	return &AWS_NetworkManager_ConnectPeer{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_NetworkManager_ConnectPeer) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_NetworkManager_ConnectPeer) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_NetworkManager_ConnectPeer) GetType() string {
	return AWS_NetworkManager_ConnectPeer__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_NetworkManager_ConnectPeer) Set__LogicalName(v string) *AWS_NetworkManager_ConnectPeer {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_NetworkManager_ConnectPeer) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_NetworkManager_ConnectPeer {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_NetworkManager_ConnectPeer) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_NetworkManager_ConnectPeer {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_NetworkManager_ConnectPeer) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_NetworkManager_ConnectPeer {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_NetworkManager_ConnectPeer) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_NetworkManager_ConnectPeer {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_NetworkManager_ConnectPeer) Set__RequestedOutputs(v []cfz.Output) *AWS_NetworkManager_ConnectPeer {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_NetworkManager_ConnectPeer) Add__RequestedOutputs(v ...cfz.Output) *AWS_NetworkManager_ConnectPeer {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__BgpOptions updates property "BgpOptions".
func (t *AWS_NetworkManager_ConnectPeer) Set__BgpOptions(v cfz.Expression[AWS_NetworkManager_ConnectPeer_BgpOptions]) *AWS_NetworkManager_ConnectPeer {
	t.BgpOptions = v
	return t
}

// SetV__BgpOptions updates property "BgpOptions".
func (t *AWS_NetworkManager_ConnectPeer) SetV__BgpOptions(v AWS_NetworkManager_ConnectPeer_BgpOptions) *AWS_NetworkManager_ConnectPeer {
	t.BgpOptions = cfz.V(v)
	return t
}

// Set__ConnectAttachmentId updates property "ConnectAttachmentId".
func (t *AWS_NetworkManager_ConnectPeer) Set__ConnectAttachmentId(v cfz.Expression[string]) *AWS_NetworkManager_ConnectPeer {
	t.ConnectAttachmentId = v
	return t
}

// SetV__ConnectAttachmentId updates property "ConnectAttachmentId".
func (t *AWS_NetworkManager_ConnectPeer) SetV__ConnectAttachmentId(v string) *AWS_NetworkManager_ConnectPeer {
	t.ConnectAttachmentId = cfz.V(v)
	return t
}

// Set__CoreNetworkAddress updates property "CoreNetworkAddress".
func (t *AWS_NetworkManager_ConnectPeer) Set__CoreNetworkAddress(v cfz.Expression[string]) *AWS_NetworkManager_ConnectPeer {
	t.CoreNetworkAddress = v
	return t
}

// SetV__CoreNetworkAddress updates property "CoreNetworkAddress".
func (t *AWS_NetworkManager_ConnectPeer) SetV__CoreNetworkAddress(v string) *AWS_NetworkManager_ConnectPeer {
	t.CoreNetworkAddress = cfz.V(v)
	return t
}

// Set__InsideCidrBlocks updates property "InsideCidrBlocks".
func (t *AWS_NetworkManager_ConnectPeer) Set__InsideCidrBlocks(v cfz.ExpressionSlice[string]) *AWS_NetworkManager_ConnectPeer {
	t.InsideCidrBlocks = v
	return t
}

// SetS__InsideCidrBlocks updates property "InsideCidrBlocks".
func (t *AWS_NetworkManager_ConnectPeer) SetS__InsideCidrBlocks(v ...cfz.Expression[string]) *AWS_NetworkManager_ConnectPeer {
	t.InsideCidrBlocks = cfz.S(v...)
	return t
}

// SetSV__InsideCidrBlocks updates property "InsideCidrBlocks".
func (t *AWS_NetworkManager_ConnectPeer) SetSV__InsideCidrBlocks(v ...string) *AWS_NetworkManager_ConnectPeer {
	t.InsideCidrBlocks = cfz.SV(v...)
	return t
}

// Set__PeerAddress updates property "PeerAddress".
func (t *AWS_NetworkManager_ConnectPeer) Set__PeerAddress(v cfz.Expression[string]) *AWS_NetworkManager_ConnectPeer {
	t.PeerAddress = v
	return t
}

// SetV__PeerAddress updates property "PeerAddress".
func (t *AWS_NetworkManager_ConnectPeer) SetV__PeerAddress(v string) *AWS_NetworkManager_ConnectPeer {
	t.PeerAddress = cfz.V(v)
	return t
}

// Set__SubnetArn updates property "SubnetArn".
func (t *AWS_NetworkManager_ConnectPeer) Set__SubnetArn(v cfz.Expression[string]) *AWS_NetworkManager_ConnectPeer {
	t.SubnetArn = v
	return t
}

// SetV__SubnetArn updates property "SubnetArn".
func (t *AWS_NetworkManager_ConnectPeer) SetV__SubnetArn(v string) *AWS_NetworkManager_ConnectPeer {
	t.SubnetArn = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_NetworkManager_ConnectPeer) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_NetworkManager_ConnectPeer {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_NetworkManager_ConnectPeer) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_NetworkManager_ConnectPeer {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_NetworkManager_ConnectPeer) SetSV__Tags(v ...cfz.Tag) *AWS_NetworkManager_ConnectPeer {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_NetworkManager_ConnectPeer) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Configuration returns a $cfz.Expression[AWS_NetworkManager_ConnectPeer_ConnectPeerConfiguration] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Configuration
func (t *AWS_NetworkManager_ConnectPeer) GetAtt__Configuration() cfz.Expression[AWS_NetworkManager_ConnectPeer_ConnectPeerConfiguration] {
	return cfz.GetAtt[AWS_NetworkManager_ConnectPeer_ConnectPeerConfiguration](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_ConnectPeer__AttributesMap.Configuration))
}

// GetAttSlice__Configuration_BgpConfigurations returns a $cfz.ExpressionSlice[AWS_NetworkManager_ConnectPeer_ConnectPeerBgpConfiguration] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Configuration.BgpConfigurations
func (t *AWS_NetworkManager_ConnectPeer) GetAttSlice__Configuration_BgpConfigurations() cfz.ExpressionSlice[AWS_NetworkManager_ConnectPeer_ConnectPeerBgpConfiguration] {
	return cfz.GetAttSlice[AWS_NetworkManager_ConnectPeer_ConnectPeerBgpConfiguration](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_ConnectPeer__AttributesMap.Configuration_BgpConfigurations))
}

// GetAtt__Configuration_CoreNetworkAddress returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Configuration.CoreNetworkAddress
func (t *AWS_NetworkManager_ConnectPeer) GetAtt__Configuration_CoreNetworkAddress() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_ConnectPeer__AttributesMap.Configuration_CoreNetworkAddress))
}

// GetAttSlice__Configuration_InsideCidrBlocks returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Configuration.InsideCidrBlocks
func (t *AWS_NetworkManager_ConnectPeer) GetAttSlice__Configuration_InsideCidrBlocks() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_ConnectPeer__AttributesMap.Configuration_InsideCidrBlocks))
}

// GetAtt__Configuration_PeerAddress returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Configuration.PeerAddress
func (t *AWS_NetworkManager_ConnectPeer) GetAtt__Configuration_PeerAddress() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_ConnectPeer__AttributesMap.Configuration_PeerAddress))
}

// GetAtt__Configuration_Protocol returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Configuration.Protocol
func (t *AWS_NetworkManager_ConnectPeer) GetAtt__Configuration_Protocol() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_ConnectPeer__AttributesMap.Configuration_Protocol))
}

// GetAtt__ConnectPeerId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ConnectPeerId
func (t *AWS_NetworkManager_ConnectPeer) GetAtt__ConnectPeerId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_ConnectPeer__AttributesMap.ConnectPeerId))
}

// GetAtt__CoreNetworkId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CoreNetworkId
func (t *AWS_NetworkManager_ConnectPeer) GetAtt__CoreNetworkId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_ConnectPeer__AttributesMap.CoreNetworkId))
}

// GetAtt__CreatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedAt
func (t *AWS_NetworkManager_ConnectPeer) GetAtt__CreatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_ConnectPeer__AttributesMap.CreatedAt))
}

// GetAtt__EdgeLocation returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: EdgeLocation
func (t *AWS_NetworkManager_ConnectPeer) GetAtt__EdgeLocation() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_ConnectPeer__AttributesMap.EdgeLocation))
}

// GetAtt__State returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: State
func (t *AWS_NetworkManager_ConnectPeer) GetAtt__State() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_ConnectPeer__AttributesMap.State))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_NetworkManager_ConnectPeer) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Configuration returns a conventionally configured output for an attribute of this resource.
// Attribute: Configuration
func (t *AWS_NetworkManager_ConnectPeer) GetConventionalOutputAtt__Configuration(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttConfiguration", t.GetAtt__Configuration())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Configuration_BgpConfigurations returns a conventionally configured output for an attribute of this resource.
// Attribute: Configuration.BgpConfigurations
func (t *AWS_NetworkManager_ConnectPeer) GetConventionalOutputAtt__Configuration_BgpConfigurations(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttConfigurationBgpConfigurations", t.GetAttSlice__Configuration_BgpConfigurations())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Configuration_CoreNetworkAddress returns a conventionally configured output for an attribute of this resource.
// Attribute: Configuration.CoreNetworkAddress
func (t *AWS_NetworkManager_ConnectPeer) GetConventionalOutputAtt__Configuration_CoreNetworkAddress(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttConfigurationCoreNetworkAddress", t.GetAtt__Configuration_CoreNetworkAddress())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Configuration_InsideCidrBlocks returns a conventionally configured output for an attribute of this resource.
// Attribute: Configuration.InsideCidrBlocks
func (t *AWS_NetworkManager_ConnectPeer) GetConventionalOutputAtt__Configuration_InsideCidrBlocks(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttConfigurationInsideCidrBlocks", t.GetAttSlice__Configuration_InsideCidrBlocks())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Configuration_PeerAddress returns a conventionally configured output for an attribute of this resource.
// Attribute: Configuration.PeerAddress
func (t *AWS_NetworkManager_ConnectPeer) GetConventionalOutputAtt__Configuration_PeerAddress(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttConfigurationPeerAddress", t.GetAtt__Configuration_PeerAddress())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Configuration_Protocol returns a conventionally configured output for an attribute of this resource.
// Attribute: Configuration.Protocol
func (t *AWS_NetworkManager_ConnectPeer) GetConventionalOutputAtt__Configuration_Protocol(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttConfigurationProtocol", t.GetAtt__Configuration_Protocol())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ConnectPeerId returns a conventionally configured output for an attribute of this resource.
// Attribute: ConnectPeerId
func (t *AWS_NetworkManager_ConnectPeer) GetConventionalOutputAtt__ConnectPeerId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttConnectPeerId", t.GetAtt__ConnectPeerId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CoreNetworkId returns a conventionally configured output for an attribute of this resource.
// Attribute: CoreNetworkId
func (t *AWS_NetworkManager_ConnectPeer) GetConventionalOutputAtt__CoreNetworkId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCoreNetworkId", t.GetAtt__CoreNetworkId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedAt
func (t *AWS_NetworkManager_ConnectPeer) GetConventionalOutputAtt__CreatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedAt", t.GetAtt__CreatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__EdgeLocation returns a conventionally configured output for an attribute of this resource.
// Attribute: EdgeLocation
func (t *AWS_NetworkManager_ConnectPeer) GetConventionalOutputAtt__EdgeLocation(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttEdgeLocation", t.GetAtt__EdgeLocation())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__State returns a conventionally configured output for an attribute of this resource.
// Attribute: State
func (t *AWS_NetworkManager_ConnectPeer) GetConventionalOutputAtt__State(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttState", t.GetAtt__State())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_NetworkManager_ConnectPeer) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_NetworkManager_ConnectPeer

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_NetworkManager_ConnectPeer) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
