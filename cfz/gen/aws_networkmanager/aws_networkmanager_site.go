// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_networkmanager

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_NetworkManager_Site)(nil)
	_ cfz.Resource                   = (*AWS_NetworkManager_Site)(nil)
)

const (
	// AWS_NetworkManager_Site__Type is the CloudFormation type for AWS::NetworkManager::Site.
	AWS_NetworkManager_Site__Type = "AWS::NetworkManager::Site"
)

var (
	// AWS_NetworkManager_Site__AttributesMap reports all the CloudFormation attributes for AWS::NetworkManager::Site.
	AWS_NetworkManager_Site__AttributesMap = struct {
		CreatedAt string
		SiteArn   string
		SiteId    string
		State     string
	}{
		CreatedAt: "CreatedAt",
		SiteArn:   "SiteArn",
		SiteId:    "SiteId",
		State:     "State",
	}

	// AWS_NetworkManager_Site__AttributesSlice reports all the CloudFormation attributes for AWS::NetworkManager::Site.
	AWS_NetworkManager_Site__AttributesSlice = []string{
		AWS_NetworkManager_Site__AttributesMap.CreatedAt,
		AWS_NetworkManager_Site__AttributesMap.SiteArn,
		AWS_NetworkManager_Site__AttributesMap.SiteId,
		AWS_NetworkManager_Site__AttributesMap.State,
	}
)

var (
	// AWS_NetworkManager_Site__PropertiesMap reports all the CloudFormation properties for AWS::NetworkManager::Site.
	AWS_NetworkManager_Site__PropertiesMap = struct {
		Description     string
		GlobalNetworkId string
		Location        string
		Tags            string
	}{
		Description:     "Description",
		GlobalNetworkId: "GlobalNetworkId",
		Location:        "Location",
		Tags:            "Tags",
	}

	// AWS_NetworkManager_Site__PropertiesSlice reports all the CloudFormation properties for AWS::NetworkManager::Site.
	AWS_NetworkManager_Site__PropertiesSlice = []string{
		AWS_NetworkManager_Site__PropertiesMap.Description,
		AWS_NetworkManager_Site__PropertiesMap.GlobalNetworkId,
		AWS_NetworkManager_Site__PropertiesMap.Location,
		AWS_NetworkManager_Site__PropertiesMap.Tags,
	}
)

// AWS_NetworkManager_Site is a binding for AWS::NetworkManager::Site.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-site.html
type AWS_NetworkManager_Site struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-site.html#cfn-networkmanager-site-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// GlobalNetworkId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-site.html#cfn-networkmanager-site-globalnetworkid
	GlobalNetworkId cfz.Expression[string] `json:"GlobalNetworkId,omitempty"`

	// Location is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-site.html#cfn-networkmanager-site-location
	Location cfz.Expression[AWS_NetworkManager_Site_Location] `json:"Location,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-site.html#cfn-networkmanager-site-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_NetworkManager_Site initializes a new *AWS_NetworkManager_Site.
func New__AWS_NetworkManager_Site(logicalName string) *AWS_NetworkManager_Site {
	return &AWS_NetworkManager_Site{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_NetworkManager_Site) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_NetworkManager_Site) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_NetworkManager_Site) GetType() string {
	return AWS_NetworkManager_Site__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_NetworkManager_Site) Set__LogicalName(v string) *AWS_NetworkManager_Site {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_NetworkManager_Site) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_NetworkManager_Site {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_NetworkManager_Site) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_NetworkManager_Site {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_NetworkManager_Site) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_NetworkManager_Site {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_NetworkManager_Site) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_NetworkManager_Site {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_NetworkManager_Site) Set__RequestedOutputs(v []cfz.Output) *AWS_NetworkManager_Site {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_NetworkManager_Site) Add__RequestedOutputs(v ...cfz.Output) *AWS_NetworkManager_Site {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_NetworkManager_Site) Set__Description(v cfz.Expression[string]) *AWS_NetworkManager_Site {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_NetworkManager_Site) SetV__Description(v string) *AWS_NetworkManager_Site {
	t.Description = cfz.V(v)
	return t
}

// Set__GlobalNetworkId updates property "GlobalNetworkId".
func (t *AWS_NetworkManager_Site) Set__GlobalNetworkId(v cfz.Expression[string]) *AWS_NetworkManager_Site {
	t.GlobalNetworkId = v
	return t
}

// SetV__GlobalNetworkId updates property "GlobalNetworkId".
func (t *AWS_NetworkManager_Site) SetV__GlobalNetworkId(v string) *AWS_NetworkManager_Site {
	t.GlobalNetworkId = cfz.V(v)
	return t
}

// Set__Location updates property "Location".
func (t *AWS_NetworkManager_Site) Set__Location(v cfz.Expression[AWS_NetworkManager_Site_Location]) *AWS_NetworkManager_Site {
	t.Location = v
	return t
}

// SetV__Location updates property "Location".
func (t *AWS_NetworkManager_Site) SetV__Location(v AWS_NetworkManager_Site_Location) *AWS_NetworkManager_Site {
	t.Location = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_NetworkManager_Site) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_NetworkManager_Site {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_NetworkManager_Site) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_NetworkManager_Site {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_NetworkManager_Site) SetSV__Tags(v ...cfz.Tag) *AWS_NetworkManager_Site {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_NetworkManager_Site) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__CreatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedAt
func (t *AWS_NetworkManager_Site) GetAtt__CreatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_Site__AttributesMap.CreatedAt))
}

// GetAtt__SiteArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: SiteArn
func (t *AWS_NetworkManager_Site) GetAtt__SiteArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_Site__AttributesMap.SiteArn))
}

// GetAtt__SiteId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: SiteId
func (t *AWS_NetworkManager_Site) GetAtt__SiteId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_Site__AttributesMap.SiteId))
}

// GetAtt__State returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: State
func (t *AWS_NetworkManager_Site) GetAtt__State() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_Site__AttributesMap.State))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_NetworkManager_Site) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedAt
func (t *AWS_NetworkManager_Site) GetConventionalOutputAtt__CreatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedAt", t.GetAtt__CreatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__SiteArn returns a conventionally configured output for an attribute of this resource.
// Attribute: SiteArn
func (t *AWS_NetworkManager_Site) GetConventionalOutputAtt__SiteArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSiteArn", t.GetAtt__SiteArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__SiteId returns a conventionally configured output for an attribute of this resource.
// Attribute: SiteId
func (t *AWS_NetworkManager_Site) GetConventionalOutputAtt__SiteId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSiteId", t.GetAtt__SiteId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__State returns a conventionally configured output for an attribute of this resource.
// Attribute: State
func (t *AWS_NetworkManager_Site) GetConventionalOutputAtt__State(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttState", t.GetAtt__State())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_NetworkManager_Site) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_NetworkManager_Site

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_NetworkManager_Site) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
