// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_networkmanager

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_NetworkManager_Device)(nil)
	_ cfz.Resource                   = (*AWS_NetworkManager_Device)(nil)
)

const (
	// AWS_NetworkManager_Device__Type is the CloudFormation type for AWS::NetworkManager::Device.
	AWS_NetworkManager_Device__Type = "AWS::NetworkManager::Device"
)

var (
	// AWS_NetworkManager_Device__AttributesMap reports all the CloudFormation attributes for AWS::NetworkManager::Device.
	AWS_NetworkManager_Device__AttributesMap = struct {
		CreatedAt string
		DeviceArn string
		DeviceId  string
		State     string
	}{
		CreatedAt: "CreatedAt",
		DeviceArn: "DeviceArn",
		DeviceId:  "DeviceId",
		State:     "State",
	}

	// AWS_NetworkManager_Device__AttributesSlice reports all the CloudFormation attributes for AWS::NetworkManager::Device.
	AWS_NetworkManager_Device__AttributesSlice = []string{
		AWS_NetworkManager_Device__AttributesMap.CreatedAt,
		AWS_NetworkManager_Device__AttributesMap.DeviceArn,
		AWS_NetworkManager_Device__AttributesMap.DeviceId,
		AWS_NetworkManager_Device__AttributesMap.State,
	}
)

var (
	// AWS_NetworkManager_Device__PropertiesMap reports all the CloudFormation properties for AWS::NetworkManager::Device.
	AWS_NetworkManager_Device__PropertiesMap = struct {
		AWSLocation     string
		Description     string
		GlobalNetworkId string
		Location        string
		Model           string
		SerialNumber    string
		SiteId          string
		Tags            string
		Type            string
		Vendor          string
	}{
		AWSLocation:     "AWSLocation",
		Description:     "Description",
		GlobalNetworkId: "GlobalNetworkId",
		Location:        "Location",
		Model:           "Model",
		SerialNumber:    "SerialNumber",
		SiteId:          "SiteId",
		Tags:            "Tags",
		Type:            "Type",
		Vendor:          "Vendor",
	}

	// AWS_NetworkManager_Device__PropertiesSlice reports all the CloudFormation properties for AWS::NetworkManager::Device.
	AWS_NetworkManager_Device__PropertiesSlice = []string{
		AWS_NetworkManager_Device__PropertiesMap.AWSLocation,
		AWS_NetworkManager_Device__PropertiesMap.Description,
		AWS_NetworkManager_Device__PropertiesMap.GlobalNetworkId,
		AWS_NetworkManager_Device__PropertiesMap.Location,
		AWS_NetworkManager_Device__PropertiesMap.Model,
		AWS_NetworkManager_Device__PropertiesMap.SerialNumber,
		AWS_NetworkManager_Device__PropertiesMap.SiteId,
		AWS_NetworkManager_Device__PropertiesMap.Tags,
		AWS_NetworkManager_Device__PropertiesMap.Type,
		AWS_NetworkManager_Device__PropertiesMap.Vendor,
	}
)

// AWS_NetworkManager_Device is a binding for AWS::NetworkManager::Device.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-device.html
type AWS_NetworkManager_Device struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AWSLocation is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-device.html#cfn-networkmanager-device-awslocation
	AWSLocation cfz.Expression[AWS_NetworkManager_Device_AWSLocation] `json:"AWSLocation,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-device.html#cfn-networkmanager-device-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// GlobalNetworkId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-device.html#cfn-networkmanager-device-globalnetworkid
	GlobalNetworkId cfz.Expression[string] `json:"GlobalNetworkId,omitempty"`

	// Location is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-device.html#cfn-networkmanager-device-location
	Location cfz.Expression[AWS_NetworkManager_Device_Location] `json:"Location,omitempty"`

	// Model is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-device.html#cfn-networkmanager-device-model
	Model cfz.Expression[string] `json:"Model,omitempty"`

	// SerialNumber is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-device.html#cfn-networkmanager-device-serialnumber
	SerialNumber cfz.Expression[string] `json:"SerialNumber,omitempty"`

	// SiteId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-device.html#cfn-networkmanager-device-siteid
	SiteId cfz.Expression[string] `json:"SiteId,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-device.html#cfn-networkmanager-device-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// Type is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-device.html#cfn-networkmanager-device-type
	Type cfz.Expression[string] `json:"Type,omitempty"`

	// Vendor is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-device.html#cfn-networkmanager-device-vendor
	Vendor cfz.Expression[string] `json:"Vendor,omitempty"`
}

// New__AWS_NetworkManager_Device initializes a new *AWS_NetworkManager_Device.
func New__AWS_NetworkManager_Device(logicalName string) *AWS_NetworkManager_Device {
	return &AWS_NetworkManager_Device{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_NetworkManager_Device) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_NetworkManager_Device) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_NetworkManager_Device) GetType() string {
	return AWS_NetworkManager_Device__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_NetworkManager_Device) Set__LogicalName(v string) *AWS_NetworkManager_Device {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_NetworkManager_Device) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_NetworkManager_Device {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_NetworkManager_Device) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_NetworkManager_Device {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_NetworkManager_Device) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_NetworkManager_Device {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_NetworkManager_Device) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_NetworkManager_Device {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_NetworkManager_Device) Set__RequestedOutputs(v []cfz.Output) *AWS_NetworkManager_Device {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_NetworkManager_Device) Add__RequestedOutputs(v ...cfz.Output) *AWS_NetworkManager_Device {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AWSLocation updates property "AWSLocation".
func (t *AWS_NetworkManager_Device) Set__AWSLocation(v cfz.Expression[AWS_NetworkManager_Device_AWSLocation]) *AWS_NetworkManager_Device {
	t.AWSLocation = v
	return t
}

// SetV__AWSLocation updates property "AWSLocation".
func (t *AWS_NetworkManager_Device) SetV__AWSLocation(v AWS_NetworkManager_Device_AWSLocation) *AWS_NetworkManager_Device {
	t.AWSLocation = cfz.V(v)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_NetworkManager_Device) Set__Description(v cfz.Expression[string]) *AWS_NetworkManager_Device {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_NetworkManager_Device) SetV__Description(v string) *AWS_NetworkManager_Device {
	t.Description = cfz.V(v)
	return t
}

// Set__GlobalNetworkId updates property "GlobalNetworkId".
func (t *AWS_NetworkManager_Device) Set__GlobalNetworkId(v cfz.Expression[string]) *AWS_NetworkManager_Device {
	t.GlobalNetworkId = v
	return t
}

// SetV__GlobalNetworkId updates property "GlobalNetworkId".
func (t *AWS_NetworkManager_Device) SetV__GlobalNetworkId(v string) *AWS_NetworkManager_Device {
	t.GlobalNetworkId = cfz.V(v)
	return t
}

// Set__Location updates property "Location".
func (t *AWS_NetworkManager_Device) Set__Location(v cfz.Expression[AWS_NetworkManager_Device_Location]) *AWS_NetworkManager_Device {
	t.Location = v
	return t
}

// SetV__Location updates property "Location".
func (t *AWS_NetworkManager_Device) SetV__Location(v AWS_NetworkManager_Device_Location) *AWS_NetworkManager_Device {
	t.Location = cfz.V(v)
	return t
}

// Set__Model updates property "Model".
func (t *AWS_NetworkManager_Device) Set__Model(v cfz.Expression[string]) *AWS_NetworkManager_Device {
	t.Model = v
	return t
}

// SetV__Model updates property "Model".
func (t *AWS_NetworkManager_Device) SetV__Model(v string) *AWS_NetworkManager_Device {
	t.Model = cfz.V(v)
	return t
}

// Set__SerialNumber updates property "SerialNumber".
func (t *AWS_NetworkManager_Device) Set__SerialNumber(v cfz.Expression[string]) *AWS_NetworkManager_Device {
	t.SerialNumber = v
	return t
}

// SetV__SerialNumber updates property "SerialNumber".
func (t *AWS_NetworkManager_Device) SetV__SerialNumber(v string) *AWS_NetworkManager_Device {
	t.SerialNumber = cfz.V(v)
	return t
}

// Set__SiteId updates property "SiteId".
func (t *AWS_NetworkManager_Device) Set__SiteId(v cfz.Expression[string]) *AWS_NetworkManager_Device {
	t.SiteId = v
	return t
}

// SetV__SiteId updates property "SiteId".
func (t *AWS_NetworkManager_Device) SetV__SiteId(v string) *AWS_NetworkManager_Device {
	t.SiteId = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_NetworkManager_Device) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_NetworkManager_Device {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_NetworkManager_Device) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_NetworkManager_Device {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_NetworkManager_Device) SetSV__Tags(v ...cfz.Tag) *AWS_NetworkManager_Device {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__Type updates property "Type".
func (t *AWS_NetworkManager_Device) Set__Type(v cfz.Expression[string]) *AWS_NetworkManager_Device {
	t.Type = v
	return t
}

// SetV__Type updates property "Type".
func (t *AWS_NetworkManager_Device) SetV__Type(v string) *AWS_NetworkManager_Device {
	t.Type = cfz.V(v)
	return t
}

// Set__Vendor updates property "Vendor".
func (t *AWS_NetworkManager_Device) Set__Vendor(v cfz.Expression[string]) *AWS_NetworkManager_Device {
	t.Vendor = v
	return t
}

// SetV__Vendor updates property "Vendor".
func (t *AWS_NetworkManager_Device) SetV__Vendor(v string) *AWS_NetworkManager_Device {
	t.Vendor = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_NetworkManager_Device) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__CreatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedAt
func (t *AWS_NetworkManager_Device) GetAtt__CreatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_Device__AttributesMap.CreatedAt))
}

// GetAtt__DeviceArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DeviceArn
func (t *AWS_NetworkManager_Device) GetAtt__DeviceArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_Device__AttributesMap.DeviceArn))
}

// GetAtt__DeviceId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DeviceId
func (t *AWS_NetworkManager_Device) GetAtt__DeviceId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_Device__AttributesMap.DeviceId))
}

// GetAtt__State returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: State
func (t *AWS_NetworkManager_Device) GetAtt__State() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_Device__AttributesMap.State))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_NetworkManager_Device) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedAt
func (t *AWS_NetworkManager_Device) GetConventionalOutputAtt__CreatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedAt", t.GetAtt__CreatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DeviceArn returns a conventionally configured output for an attribute of this resource.
// Attribute: DeviceArn
func (t *AWS_NetworkManager_Device) GetConventionalOutputAtt__DeviceArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDeviceArn", t.GetAtt__DeviceArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DeviceId returns a conventionally configured output for an attribute of this resource.
// Attribute: DeviceId
func (t *AWS_NetworkManager_Device) GetConventionalOutputAtt__DeviceId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDeviceId", t.GetAtt__DeviceId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__State returns a conventionally configured output for an attribute of this resource.
// Attribute: State
func (t *AWS_NetworkManager_Device) GetConventionalOutputAtt__State(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttState", t.GetAtt__State())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_NetworkManager_Device) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_NetworkManager_Device

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_NetworkManager_Device) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
