// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_networkmanager

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_NetworkManager_Link)(nil)
	_ cfz.Resource                   = (*AWS_NetworkManager_Link)(nil)
)

const (
	// AWS_NetworkManager_Link__Type is the CloudFormation type for AWS::NetworkManager::Link.
	AWS_NetworkManager_Link__Type = "AWS::NetworkManager::Link"
)

var (
	// AWS_NetworkManager_Link__AttributesMap reports all the CloudFormation attributes for AWS::NetworkManager::Link.
	AWS_NetworkManager_Link__AttributesMap = struct {
		CreatedAt string
		LinkArn   string
		LinkId    string
		State     string
	}{
		CreatedAt: "CreatedAt",
		LinkArn:   "LinkArn",
		LinkId:    "LinkId",
		State:     "State",
	}

	// AWS_NetworkManager_Link__AttributesSlice reports all the CloudFormation attributes for AWS::NetworkManager::Link.
	AWS_NetworkManager_Link__AttributesSlice = []string{
		AWS_NetworkManager_Link__AttributesMap.CreatedAt,
		AWS_NetworkManager_Link__AttributesMap.LinkArn,
		AWS_NetworkManager_Link__AttributesMap.LinkId,
		AWS_NetworkManager_Link__AttributesMap.State,
	}
)

var (
	// AWS_NetworkManager_Link__PropertiesMap reports all the CloudFormation properties for AWS::NetworkManager::Link.
	AWS_NetworkManager_Link__PropertiesMap = struct {
		Bandwidth       string
		Description     string
		GlobalNetworkId string
		Provider        string
		SiteId          string
		Tags            string
		Type            string
	}{
		Bandwidth:       "Bandwidth",
		Description:     "Description",
		GlobalNetworkId: "GlobalNetworkId",
		Provider:        "Provider",
		SiteId:          "SiteId",
		Tags:            "Tags",
		Type:            "Type",
	}

	// AWS_NetworkManager_Link__PropertiesSlice reports all the CloudFormation properties for AWS::NetworkManager::Link.
	AWS_NetworkManager_Link__PropertiesSlice = []string{
		AWS_NetworkManager_Link__PropertiesMap.Bandwidth,
		AWS_NetworkManager_Link__PropertiesMap.Description,
		AWS_NetworkManager_Link__PropertiesMap.GlobalNetworkId,
		AWS_NetworkManager_Link__PropertiesMap.Provider,
		AWS_NetworkManager_Link__PropertiesMap.SiteId,
		AWS_NetworkManager_Link__PropertiesMap.Tags,
		AWS_NetworkManager_Link__PropertiesMap.Type,
	}
)

// AWS_NetworkManager_Link is a binding for AWS::NetworkManager::Link.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-link.html
type AWS_NetworkManager_Link struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Bandwidth is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-link.html#cfn-networkmanager-link-bandwidth
	Bandwidth cfz.Expression[AWS_NetworkManager_Link_Bandwidth] `json:"Bandwidth,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-link.html#cfn-networkmanager-link-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// GlobalNetworkId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-link.html#cfn-networkmanager-link-globalnetworkid
	GlobalNetworkId cfz.Expression[string] `json:"GlobalNetworkId,omitempty"`

	// Provider is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-link.html#cfn-networkmanager-link-provider
	Provider cfz.Expression[string] `json:"Provider,omitempty"`

	// SiteId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-link.html#cfn-networkmanager-link-siteid
	SiteId cfz.Expression[string] `json:"SiteId,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-link.html#cfn-networkmanager-link-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// Type is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-link.html#cfn-networkmanager-link-type
	Type cfz.Expression[string] `json:"Type,omitempty"`
}

// New__AWS_NetworkManager_Link initializes a new *AWS_NetworkManager_Link.
func New__AWS_NetworkManager_Link(logicalName string) *AWS_NetworkManager_Link {
	return &AWS_NetworkManager_Link{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_NetworkManager_Link) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_NetworkManager_Link) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_NetworkManager_Link) GetType() string {
	return AWS_NetworkManager_Link__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_NetworkManager_Link) Set__LogicalName(v string) *AWS_NetworkManager_Link {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_NetworkManager_Link) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_NetworkManager_Link {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_NetworkManager_Link) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_NetworkManager_Link {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_NetworkManager_Link) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_NetworkManager_Link {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_NetworkManager_Link) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_NetworkManager_Link {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_NetworkManager_Link) Set__RequestedOutputs(v []cfz.Output) *AWS_NetworkManager_Link {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_NetworkManager_Link) Add__RequestedOutputs(v ...cfz.Output) *AWS_NetworkManager_Link {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Bandwidth updates property "Bandwidth".
func (t *AWS_NetworkManager_Link) Set__Bandwidth(v cfz.Expression[AWS_NetworkManager_Link_Bandwidth]) *AWS_NetworkManager_Link {
	t.Bandwidth = v
	return t
}

// SetV__Bandwidth updates property "Bandwidth".
func (t *AWS_NetworkManager_Link) SetV__Bandwidth(v AWS_NetworkManager_Link_Bandwidth) *AWS_NetworkManager_Link {
	t.Bandwidth = cfz.V(v)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_NetworkManager_Link) Set__Description(v cfz.Expression[string]) *AWS_NetworkManager_Link {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_NetworkManager_Link) SetV__Description(v string) *AWS_NetworkManager_Link {
	t.Description = cfz.V(v)
	return t
}

// Set__GlobalNetworkId updates property "GlobalNetworkId".
func (t *AWS_NetworkManager_Link) Set__GlobalNetworkId(v cfz.Expression[string]) *AWS_NetworkManager_Link {
	t.GlobalNetworkId = v
	return t
}

// SetV__GlobalNetworkId updates property "GlobalNetworkId".
func (t *AWS_NetworkManager_Link) SetV__GlobalNetworkId(v string) *AWS_NetworkManager_Link {
	t.GlobalNetworkId = cfz.V(v)
	return t
}

// Set__Provider updates property "Provider".
func (t *AWS_NetworkManager_Link) Set__Provider(v cfz.Expression[string]) *AWS_NetworkManager_Link {
	t.Provider = v
	return t
}

// SetV__Provider updates property "Provider".
func (t *AWS_NetworkManager_Link) SetV__Provider(v string) *AWS_NetworkManager_Link {
	t.Provider = cfz.V(v)
	return t
}

// Set__SiteId updates property "SiteId".
func (t *AWS_NetworkManager_Link) Set__SiteId(v cfz.Expression[string]) *AWS_NetworkManager_Link {
	t.SiteId = v
	return t
}

// SetV__SiteId updates property "SiteId".
func (t *AWS_NetworkManager_Link) SetV__SiteId(v string) *AWS_NetworkManager_Link {
	t.SiteId = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_NetworkManager_Link) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_NetworkManager_Link {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_NetworkManager_Link) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_NetworkManager_Link {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_NetworkManager_Link) SetSV__Tags(v ...cfz.Tag) *AWS_NetworkManager_Link {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__Type updates property "Type".
func (t *AWS_NetworkManager_Link) Set__Type(v cfz.Expression[string]) *AWS_NetworkManager_Link {
	t.Type = v
	return t
}

// SetV__Type updates property "Type".
func (t *AWS_NetworkManager_Link) SetV__Type(v string) *AWS_NetworkManager_Link {
	t.Type = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_NetworkManager_Link) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__CreatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedAt
func (t *AWS_NetworkManager_Link) GetAtt__CreatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_Link__AttributesMap.CreatedAt))
}

// GetAtt__LinkArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LinkArn
func (t *AWS_NetworkManager_Link) GetAtt__LinkArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_Link__AttributesMap.LinkArn))
}

// GetAtt__LinkId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LinkId
func (t *AWS_NetworkManager_Link) GetAtt__LinkId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_Link__AttributesMap.LinkId))
}

// GetAtt__State returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: State
func (t *AWS_NetworkManager_Link) GetAtt__State() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_NetworkManager_Link__AttributesMap.State))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_NetworkManager_Link) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedAt
func (t *AWS_NetworkManager_Link) GetConventionalOutputAtt__CreatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedAt", t.GetAtt__CreatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LinkArn returns a conventionally configured output for an attribute of this resource.
// Attribute: LinkArn
func (t *AWS_NetworkManager_Link) GetConventionalOutputAtt__LinkArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLinkArn", t.GetAtt__LinkArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LinkId returns a conventionally configured output for an attribute of this resource.
// Attribute: LinkId
func (t *AWS_NetworkManager_Link) GetConventionalOutputAtt__LinkId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLinkId", t.GetAtt__LinkId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__State returns a conventionally configured output for an attribute of this resource.
// Attribute: State
func (t *AWS_NetworkManager_Link) GetConventionalOutputAtt__State(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttState", t.GetAtt__State())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_NetworkManager_Link) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_NetworkManager_Link

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_NetworkManager_Link) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
