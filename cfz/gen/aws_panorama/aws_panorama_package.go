// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_panorama

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Panorama_Package)(nil)
	_ cfz.Resource                   = (*AWS_Panorama_Package)(nil)
)

const (
	// AWS_Panorama_Package__Type is the CloudFormation type for AWS::Panorama::Package.
	AWS_Panorama_Package__Type = "AWS::Panorama::Package"
)

var (
	// AWS_Panorama_Package__AttributesMap reports all the CloudFormation attributes for AWS::Panorama::Package.
	AWS_Panorama_Package__AttributesMap = struct {
		Arn                                     string
		CreatedTime                             string
		PackageId                               string
		StorageLocation_BinaryPrefixLocation    string
		StorageLocation_Bucket                  string
		StorageLocation_GeneratedPrefixLocation string
		StorageLocation_ManifestPrefixLocation  string
		StorageLocation_RepoPrefixLocation      string
	}{
		Arn:                                     "Arn",
		CreatedTime:                             "CreatedTime",
		PackageId:                               "PackageId",
		StorageLocation_BinaryPrefixLocation:    "StorageLocation.BinaryPrefixLocation",
		StorageLocation_Bucket:                  "StorageLocation.Bucket",
		StorageLocation_GeneratedPrefixLocation: "StorageLocation.GeneratedPrefixLocation",
		StorageLocation_ManifestPrefixLocation:  "StorageLocation.ManifestPrefixLocation",
		StorageLocation_RepoPrefixLocation:      "StorageLocation.RepoPrefixLocation",
	}

	// AWS_Panorama_Package__AttributesSlice reports all the CloudFormation attributes for AWS::Panorama::Package.
	AWS_Panorama_Package__AttributesSlice = []string{
		AWS_Panorama_Package__AttributesMap.Arn,
		AWS_Panorama_Package__AttributesMap.CreatedTime,
		AWS_Panorama_Package__AttributesMap.PackageId,
		AWS_Panorama_Package__AttributesMap.StorageLocation_BinaryPrefixLocation,
		AWS_Panorama_Package__AttributesMap.StorageLocation_Bucket,
		AWS_Panorama_Package__AttributesMap.StorageLocation_GeneratedPrefixLocation,
		AWS_Panorama_Package__AttributesMap.StorageLocation_ManifestPrefixLocation,
		AWS_Panorama_Package__AttributesMap.StorageLocation_RepoPrefixLocation,
	}
)

var (
	// AWS_Panorama_Package__PropertiesMap reports all the CloudFormation properties for AWS::Panorama::Package.
	AWS_Panorama_Package__PropertiesMap = struct {
		PackageName     string
		StorageLocation string
		Tags            string
	}{
		PackageName:     "PackageName",
		StorageLocation: "StorageLocation",
		Tags:            "Tags",
	}

	// AWS_Panorama_Package__PropertiesSlice reports all the CloudFormation properties for AWS::Panorama::Package.
	AWS_Panorama_Package__PropertiesSlice = []string{
		AWS_Panorama_Package__PropertiesMap.PackageName,
		AWS_Panorama_Package__PropertiesMap.StorageLocation,
		AWS_Panorama_Package__PropertiesMap.Tags,
	}
)

// AWS_Panorama_Package is a binding for AWS::Panorama::Package.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-panorama-package.html
type AWS_Panorama_Package struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// PackageName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-panorama-package.html#cfn-panorama-package-packagename
	PackageName cfz.Expression[string] `json:"PackageName,omitempty"`

	// StorageLocation is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-panorama-package.html#cfn-panorama-package-storagelocation
	StorageLocation cfz.Expression[AWS_Panorama_Package_StorageLocation] `json:"StorageLocation,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-panorama-package.html#cfn-panorama-package-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_Panorama_Package initializes a new *AWS_Panorama_Package.
func New__AWS_Panorama_Package(logicalName string) *AWS_Panorama_Package {
	return &AWS_Panorama_Package{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Panorama_Package) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Panorama_Package) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Panorama_Package) GetType() string {
	return AWS_Panorama_Package__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Panorama_Package) Set__LogicalName(v string) *AWS_Panorama_Package {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Panorama_Package) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Panorama_Package {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Panorama_Package) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Panorama_Package {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Panorama_Package) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Panorama_Package {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Panorama_Package) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Panorama_Package {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Panorama_Package) Set__RequestedOutputs(v []cfz.Output) *AWS_Panorama_Package {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Panorama_Package) Add__RequestedOutputs(v ...cfz.Output) *AWS_Panorama_Package {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__PackageName updates property "PackageName".
func (t *AWS_Panorama_Package) Set__PackageName(v cfz.Expression[string]) *AWS_Panorama_Package {
	t.PackageName = v
	return t
}

// SetV__PackageName updates property "PackageName".
func (t *AWS_Panorama_Package) SetV__PackageName(v string) *AWS_Panorama_Package {
	t.PackageName = cfz.V(v)
	return t
}

// Set__StorageLocation updates property "StorageLocation".
func (t *AWS_Panorama_Package) Set__StorageLocation(v cfz.Expression[AWS_Panorama_Package_StorageLocation]) *AWS_Panorama_Package {
	t.StorageLocation = v
	return t
}

// SetV__StorageLocation updates property "StorageLocation".
func (t *AWS_Panorama_Package) SetV__StorageLocation(v AWS_Panorama_Package_StorageLocation) *AWS_Panorama_Package {
	t.StorageLocation = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_Panorama_Package) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_Panorama_Package {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_Panorama_Package) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_Panorama_Package {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_Panorama_Package) SetSV__Tags(v ...cfz.Tag) *AWS_Panorama_Package {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Panorama_Package) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_Panorama_Package) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Panorama_Package__AttributesMap.Arn))
}

// GetAtt__CreatedTime returns a $cfz.Expression[int32] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedTime
func (t *AWS_Panorama_Package) GetAtt__CreatedTime() cfz.Expression[int32] {
	return cfz.GetAtt[int32](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Panorama_Package__AttributesMap.CreatedTime))
}

// GetAtt__PackageId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: PackageId
func (t *AWS_Panorama_Package) GetAtt__PackageId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Panorama_Package__AttributesMap.PackageId))
}

// GetAtt__StorageLocation_BinaryPrefixLocation returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: StorageLocation.BinaryPrefixLocation
func (t *AWS_Panorama_Package) GetAtt__StorageLocation_BinaryPrefixLocation() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Panorama_Package__AttributesMap.StorageLocation_BinaryPrefixLocation))
}

// GetAtt__StorageLocation_Bucket returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: StorageLocation.Bucket
func (t *AWS_Panorama_Package) GetAtt__StorageLocation_Bucket() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Panorama_Package__AttributesMap.StorageLocation_Bucket))
}

// GetAtt__StorageLocation_GeneratedPrefixLocation returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: StorageLocation.GeneratedPrefixLocation
func (t *AWS_Panorama_Package) GetAtt__StorageLocation_GeneratedPrefixLocation() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Panorama_Package__AttributesMap.StorageLocation_GeneratedPrefixLocation))
}

// GetAtt__StorageLocation_ManifestPrefixLocation returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: StorageLocation.ManifestPrefixLocation
func (t *AWS_Panorama_Package) GetAtt__StorageLocation_ManifestPrefixLocation() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Panorama_Package__AttributesMap.StorageLocation_ManifestPrefixLocation))
}

// GetAtt__StorageLocation_RepoPrefixLocation returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: StorageLocation.RepoPrefixLocation
func (t *AWS_Panorama_Package) GetAtt__StorageLocation_RepoPrefixLocation() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Panorama_Package__AttributesMap.StorageLocation_RepoPrefixLocation))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Panorama_Package) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_Panorama_Package) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedTime returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedTime
func (t *AWS_Panorama_Package) GetConventionalOutputAtt__CreatedTime(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedTime", t.GetAtt__CreatedTime())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__PackageId returns a conventionally configured output for an attribute of this resource.
// Attribute: PackageId
func (t *AWS_Panorama_Package) GetConventionalOutputAtt__PackageId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttPackageId", t.GetAtt__PackageId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__StorageLocation_BinaryPrefixLocation returns a conventionally configured output for an attribute of this resource.
// Attribute: StorageLocation.BinaryPrefixLocation
func (t *AWS_Panorama_Package) GetConventionalOutputAtt__StorageLocation_BinaryPrefixLocation(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStorageLocationBinaryPrefixLocation", t.GetAtt__StorageLocation_BinaryPrefixLocation())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__StorageLocation_Bucket returns a conventionally configured output for an attribute of this resource.
// Attribute: StorageLocation.Bucket
func (t *AWS_Panorama_Package) GetConventionalOutputAtt__StorageLocation_Bucket(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStorageLocationBucket", t.GetAtt__StorageLocation_Bucket())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__StorageLocation_GeneratedPrefixLocation returns a conventionally configured output for an attribute of this resource.
// Attribute: StorageLocation.GeneratedPrefixLocation
func (t *AWS_Panorama_Package) GetConventionalOutputAtt__StorageLocation_GeneratedPrefixLocation(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStorageLocationGeneratedPrefixLocation", t.GetAtt__StorageLocation_GeneratedPrefixLocation())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__StorageLocation_ManifestPrefixLocation returns a conventionally configured output for an attribute of this resource.
// Attribute: StorageLocation.ManifestPrefixLocation
func (t *AWS_Panorama_Package) GetConventionalOutputAtt__StorageLocation_ManifestPrefixLocation(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStorageLocationManifestPrefixLocation", t.GetAtt__StorageLocation_ManifestPrefixLocation())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__StorageLocation_RepoPrefixLocation returns a conventionally configured output for an attribute of this resource.
// Attribute: StorageLocation.RepoPrefixLocation
func (t *AWS_Panorama_Package) GetConventionalOutputAtt__StorageLocation_RepoPrefixLocation(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStorageLocationRepoPrefixLocation", t.GetAtt__StorageLocation_RepoPrefixLocation())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Panorama_Package) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Panorama_Package

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Panorama_Package) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
