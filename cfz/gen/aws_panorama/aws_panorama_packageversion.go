// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_panorama

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Panorama_PackageVersion)(nil)
	_ cfz.Resource                   = (*AWS_Panorama_PackageVersion)(nil)
)

const (
	// AWS_Panorama_PackageVersion__Type is the CloudFormation type for AWS::Panorama::PackageVersion.
	AWS_Panorama_PackageVersion__Type = "AWS::Panorama::PackageVersion"
)

var (
	// AWS_Panorama_PackageVersion__AttributesMap reports all the CloudFormation attributes for AWS::Panorama::PackageVersion.
	AWS_Panorama_PackageVersion__AttributesMap = struct {
		IsLatestPatch     string
		PackageArn        string
		PackageName       string
		RegisteredTime    string
		Status            string
		StatusDescription string
	}{
		IsLatestPatch:     "IsLatestPatch",
		PackageArn:        "PackageArn",
		PackageName:       "PackageName",
		RegisteredTime:    "RegisteredTime",
		Status:            "Status",
		StatusDescription: "StatusDescription",
	}

	// AWS_Panorama_PackageVersion__AttributesSlice reports all the CloudFormation attributes for AWS::Panorama::PackageVersion.
	AWS_Panorama_PackageVersion__AttributesSlice = []string{
		AWS_Panorama_PackageVersion__AttributesMap.IsLatestPatch,
		AWS_Panorama_PackageVersion__AttributesMap.PackageArn,
		AWS_Panorama_PackageVersion__AttributesMap.PackageName,
		AWS_Panorama_PackageVersion__AttributesMap.RegisteredTime,
		AWS_Panorama_PackageVersion__AttributesMap.Status,
		AWS_Panorama_PackageVersion__AttributesMap.StatusDescription,
	}
)

var (
	// AWS_Panorama_PackageVersion__PropertiesMap reports all the CloudFormation properties for AWS::Panorama::PackageVersion.
	AWS_Panorama_PackageVersion__PropertiesMap = struct {
		MarkLatest                string
		OwnerAccount              string
		PackageId                 string
		PackageVersion            string
		PatchVersion              string
		UpdatedLatestPatchVersion string
	}{
		MarkLatest:                "MarkLatest",
		OwnerAccount:              "OwnerAccount",
		PackageId:                 "PackageId",
		PackageVersion:            "PackageVersion",
		PatchVersion:              "PatchVersion",
		UpdatedLatestPatchVersion: "UpdatedLatestPatchVersion",
	}

	// AWS_Panorama_PackageVersion__PropertiesSlice reports all the CloudFormation properties for AWS::Panorama::PackageVersion.
	AWS_Panorama_PackageVersion__PropertiesSlice = []string{
		AWS_Panorama_PackageVersion__PropertiesMap.MarkLatest,
		AWS_Panorama_PackageVersion__PropertiesMap.OwnerAccount,
		AWS_Panorama_PackageVersion__PropertiesMap.PackageId,
		AWS_Panorama_PackageVersion__PropertiesMap.PackageVersion,
		AWS_Panorama_PackageVersion__PropertiesMap.PatchVersion,
		AWS_Panorama_PackageVersion__PropertiesMap.UpdatedLatestPatchVersion,
	}
)

// AWS_Panorama_PackageVersion is a binding for AWS::Panorama::PackageVersion.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-panorama-packageversion.html
type AWS_Panorama_PackageVersion struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// MarkLatest is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-panorama-packageversion.html#cfn-panorama-packageversion-marklatest
	MarkLatest cfz.Expression[bool] `json:"MarkLatest,omitempty"`

	// OwnerAccount is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-panorama-packageversion.html#cfn-panorama-packageversion-owneraccount
	OwnerAccount cfz.Expression[string] `json:"OwnerAccount,omitempty"`

	// PackageId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-panorama-packageversion.html#cfn-panorama-packageversion-packageid
	PackageId cfz.Expression[string] `json:"PackageId,omitempty"`

	// PackageVersion is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-panorama-packageversion.html#cfn-panorama-packageversion-packageversion
	PackageVersion cfz.Expression[string] `json:"PackageVersion,omitempty"`

	// PatchVersion is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-panorama-packageversion.html#cfn-panorama-packageversion-patchversion
	PatchVersion cfz.Expression[string] `json:"PatchVersion,omitempty"`

	// UpdatedLatestPatchVersion is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-panorama-packageversion.html#cfn-panorama-packageversion-updatedlatestpatchversion
	UpdatedLatestPatchVersion cfz.Expression[string] `json:"UpdatedLatestPatchVersion,omitempty"`
}

// New__AWS_Panorama_PackageVersion initializes a new *AWS_Panorama_PackageVersion.
func New__AWS_Panorama_PackageVersion(logicalName string) *AWS_Panorama_PackageVersion {
	return &AWS_Panorama_PackageVersion{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Panorama_PackageVersion) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Panorama_PackageVersion) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Panorama_PackageVersion) GetType() string {
	return AWS_Panorama_PackageVersion__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Panorama_PackageVersion) Set__LogicalName(v string) *AWS_Panorama_PackageVersion {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Panorama_PackageVersion) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Panorama_PackageVersion {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Panorama_PackageVersion) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Panorama_PackageVersion {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Panorama_PackageVersion) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Panorama_PackageVersion {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Panorama_PackageVersion) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Panorama_PackageVersion {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Panorama_PackageVersion) Set__RequestedOutputs(v []cfz.Output) *AWS_Panorama_PackageVersion {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Panorama_PackageVersion) Add__RequestedOutputs(v ...cfz.Output) *AWS_Panorama_PackageVersion {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__MarkLatest updates property "MarkLatest".
func (t *AWS_Panorama_PackageVersion) Set__MarkLatest(v cfz.Expression[bool]) *AWS_Panorama_PackageVersion {
	t.MarkLatest = v
	return t
}

// SetV__MarkLatest updates property "MarkLatest".
func (t *AWS_Panorama_PackageVersion) SetV__MarkLatest(v bool) *AWS_Panorama_PackageVersion {
	t.MarkLatest = cfz.V(v)
	return t
}

// Set__OwnerAccount updates property "OwnerAccount".
func (t *AWS_Panorama_PackageVersion) Set__OwnerAccount(v cfz.Expression[string]) *AWS_Panorama_PackageVersion {
	t.OwnerAccount = v
	return t
}

// SetV__OwnerAccount updates property "OwnerAccount".
func (t *AWS_Panorama_PackageVersion) SetV__OwnerAccount(v string) *AWS_Panorama_PackageVersion {
	t.OwnerAccount = cfz.V(v)
	return t
}

// Set__PackageId updates property "PackageId".
func (t *AWS_Panorama_PackageVersion) Set__PackageId(v cfz.Expression[string]) *AWS_Panorama_PackageVersion {
	t.PackageId = v
	return t
}

// SetV__PackageId updates property "PackageId".
func (t *AWS_Panorama_PackageVersion) SetV__PackageId(v string) *AWS_Panorama_PackageVersion {
	t.PackageId = cfz.V(v)
	return t
}

// Set__PackageVersion updates property "PackageVersion".
func (t *AWS_Panorama_PackageVersion) Set__PackageVersion(v cfz.Expression[string]) *AWS_Panorama_PackageVersion {
	t.PackageVersion = v
	return t
}

// SetV__PackageVersion updates property "PackageVersion".
func (t *AWS_Panorama_PackageVersion) SetV__PackageVersion(v string) *AWS_Panorama_PackageVersion {
	t.PackageVersion = cfz.V(v)
	return t
}

// Set__PatchVersion updates property "PatchVersion".
func (t *AWS_Panorama_PackageVersion) Set__PatchVersion(v cfz.Expression[string]) *AWS_Panorama_PackageVersion {
	t.PatchVersion = v
	return t
}

// SetV__PatchVersion updates property "PatchVersion".
func (t *AWS_Panorama_PackageVersion) SetV__PatchVersion(v string) *AWS_Panorama_PackageVersion {
	t.PatchVersion = cfz.V(v)
	return t
}

// Set__UpdatedLatestPatchVersion updates property "UpdatedLatestPatchVersion".
func (t *AWS_Panorama_PackageVersion) Set__UpdatedLatestPatchVersion(v cfz.Expression[string]) *AWS_Panorama_PackageVersion {
	t.UpdatedLatestPatchVersion = v
	return t
}

// SetV__UpdatedLatestPatchVersion updates property "UpdatedLatestPatchVersion".
func (t *AWS_Panorama_PackageVersion) SetV__UpdatedLatestPatchVersion(v string) *AWS_Panorama_PackageVersion {
	t.UpdatedLatestPatchVersion = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Panorama_PackageVersion) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__IsLatestPatch returns a $cfz.Expression[bool] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: IsLatestPatch
func (t *AWS_Panorama_PackageVersion) GetAtt__IsLatestPatch() cfz.Expression[bool] {
	return cfz.GetAtt[bool](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Panorama_PackageVersion__AttributesMap.IsLatestPatch))
}

// GetAtt__PackageArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: PackageArn
func (t *AWS_Panorama_PackageVersion) GetAtt__PackageArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Panorama_PackageVersion__AttributesMap.PackageArn))
}

// GetAtt__PackageName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: PackageName
func (t *AWS_Panorama_PackageVersion) GetAtt__PackageName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Panorama_PackageVersion__AttributesMap.PackageName))
}

// GetAtt__RegisteredTime returns a $cfz.Expression[int32] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: RegisteredTime
func (t *AWS_Panorama_PackageVersion) GetAtt__RegisteredTime() cfz.Expression[int32] {
	return cfz.GetAtt[int32](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Panorama_PackageVersion__AttributesMap.RegisteredTime))
}

// GetAtt__Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Status
func (t *AWS_Panorama_PackageVersion) GetAtt__Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Panorama_PackageVersion__AttributesMap.Status))
}

// GetAtt__StatusDescription returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: StatusDescription
func (t *AWS_Panorama_PackageVersion) GetAtt__StatusDescription() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Panorama_PackageVersion__AttributesMap.StatusDescription))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Panorama_PackageVersion) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__IsLatestPatch returns a conventionally configured output for an attribute of this resource.
// Attribute: IsLatestPatch
func (t *AWS_Panorama_PackageVersion) GetConventionalOutputAtt__IsLatestPatch(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIsLatestPatch", t.GetAtt__IsLatestPatch())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__PackageArn returns a conventionally configured output for an attribute of this resource.
// Attribute: PackageArn
func (t *AWS_Panorama_PackageVersion) GetConventionalOutputAtt__PackageArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttPackageArn", t.GetAtt__PackageArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__PackageName returns a conventionally configured output for an attribute of this resource.
// Attribute: PackageName
func (t *AWS_Panorama_PackageVersion) GetConventionalOutputAtt__PackageName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttPackageName", t.GetAtt__PackageName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__RegisteredTime returns a conventionally configured output for an attribute of this resource.
// Attribute: RegisteredTime
func (t *AWS_Panorama_PackageVersion) GetConventionalOutputAtt__RegisteredTime(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttRegisteredTime", t.GetAtt__RegisteredTime())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Status returns a conventionally configured output for an attribute of this resource.
// Attribute: Status
func (t *AWS_Panorama_PackageVersion) GetConventionalOutputAtt__Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStatus", t.GetAtt__Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__StatusDescription returns a conventionally configured output for an attribute of this resource.
// Attribute: StatusDescription
func (t *AWS_Panorama_PackageVersion) GetConventionalOutputAtt__StatusDescription(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStatusDescription", t.GetAtt__StatusDescription())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Panorama_PackageVersion) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Panorama_PackageVersion

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Panorama_PackageVersion) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
