// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ecs

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_ECS_TaskDefinition)(nil)
	_ cfz.Resource                   = (*AWS_ECS_TaskDefinition)(nil)
)

const (
	// AWS_ECS_TaskDefinition__Type is the CloudFormation type for AWS::ECS::TaskDefinition.
	AWS_ECS_TaskDefinition__Type = "AWS::ECS::TaskDefinition"
)

var (
	// AWS_ECS_TaskDefinition__AttributesMap reports all the CloudFormation attributes for AWS::ECS::TaskDefinition.
	AWS_ECS_TaskDefinition__AttributesMap = struct {
		TaskDefinitionArn string
	}{
		TaskDefinitionArn: "TaskDefinitionArn",
	}

	// AWS_ECS_TaskDefinition__AttributesSlice reports all the CloudFormation attributes for AWS::ECS::TaskDefinition.
	AWS_ECS_TaskDefinition__AttributesSlice = []string{
		AWS_ECS_TaskDefinition__AttributesMap.TaskDefinitionArn,
	}
)

var (
	// AWS_ECS_TaskDefinition__PropertiesMap reports all the CloudFormation properties for AWS::ECS::TaskDefinition.
	AWS_ECS_TaskDefinition__PropertiesMap = struct {
		ContainerDefinitions    string
		Cpu                     string
		EphemeralStorage        string
		ExecutionRoleArn        string
		Family                  string
		InferenceAccelerators   string
		IpcMode                 string
		Memory                  string
		NetworkMode             string
		PidMode                 string
		PlacementConstraints    string
		ProxyConfiguration      string
		RequiresCompatibilities string
		RuntimePlatform         string
		Tags                    string
		TaskRoleArn             string
		Volumes                 string
	}{
		ContainerDefinitions:    "ContainerDefinitions",
		Cpu:                     "Cpu",
		EphemeralStorage:        "EphemeralStorage",
		ExecutionRoleArn:        "ExecutionRoleArn",
		Family:                  "Family",
		InferenceAccelerators:   "InferenceAccelerators",
		IpcMode:                 "IpcMode",
		Memory:                  "Memory",
		NetworkMode:             "NetworkMode",
		PidMode:                 "PidMode",
		PlacementConstraints:    "PlacementConstraints",
		ProxyConfiguration:      "ProxyConfiguration",
		RequiresCompatibilities: "RequiresCompatibilities",
		RuntimePlatform:         "RuntimePlatform",
		Tags:                    "Tags",
		TaskRoleArn:             "TaskRoleArn",
		Volumes:                 "Volumes",
	}

	// AWS_ECS_TaskDefinition__PropertiesSlice reports all the CloudFormation properties for AWS::ECS::TaskDefinition.
	AWS_ECS_TaskDefinition__PropertiesSlice = []string{
		AWS_ECS_TaskDefinition__PropertiesMap.ContainerDefinitions,
		AWS_ECS_TaskDefinition__PropertiesMap.Cpu,
		AWS_ECS_TaskDefinition__PropertiesMap.EphemeralStorage,
		AWS_ECS_TaskDefinition__PropertiesMap.ExecutionRoleArn,
		AWS_ECS_TaskDefinition__PropertiesMap.Family,
		AWS_ECS_TaskDefinition__PropertiesMap.InferenceAccelerators,
		AWS_ECS_TaskDefinition__PropertiesMap.IpcMode,
		AWS_ECS_TaskDefinition__PropertiesMap.Memory,
		AWS_ECS_TaskDefinition__PropertiesMap.NetworkMode,
		AWS_ECS_TaskDefinition__PropertiesMap.PidMode,
		AWS_ECS_TaskDefinition__PropertiesMap.PlacementConstraints,
		AWS_ECS_TaskDefinition__PropertiesMap.ProxyConfiguration,
		AWS_ECS_TaskDefinition__PropertiesMap.RequiresCompatibilities,
		AWS_ECS_TaskDefinition__PropertiesMap.RuntimePlatform,
		AWS_ECS_TaskDefinition__PropertiesMap.Tags,
		AWS_ECS_TaskDefinition__PropertiesMap.TaskRoleArn,
		AWS_ECS_TaskDefinition__PropertiesMap.Volumes,
	}
)

// AWS_ECS_TaskDefinition is a binding for AWS::ECS::TaskDefinition.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html
type AWS_ECS_TaskDefinition struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ContainerDefinitions is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-containerdefinitions
	ContainerDefinitions cfz.ExpressionSlice[AWS_ECS_TaskDefinition_ContainerDefinition] `json:"ContainerDefinitions,omitempty"`

	// Cpu is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-cpu
	Cpu cfz.Expression[string] `json:"Cpu,omitempty"`

	// EphemeralStorage is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-ephemeralstorage
	EphemeralStorage cfz.Expression[AWS_ECS_TaskDefinition_EphemeralStorage] `json:"EphemeralStorage,omitempty"`

	// ExecutionRoleArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-executionrolearn
	ExecutionRoleArn cfz.Expression[string] `json:"ExecutionRoleArn,omitempty"`

	// Family is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-family
	Family cfz.Expression[string] `json:"Family,omitempty"`

	// InferenceAccelerators is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-inferenceaccelerators
	InferenceAccelerators cfz.ExpressionSlice[AWS_ECS_TaskDefinition_InferenceAccelerator] `json:"InferenceAccelerators,omitempty"`

	// IpcMode is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-ipcmode
	IpcMode cfz.Expression[string] `json:"IpcMode,omitempty"`

	// Memory is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-memory
	Memory cfz.Expression[string] `json:"Memory,omitempty"`

	// NetworkMode is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-networkmode
	NetworkMode cfz.Expression[string] `json:"NetworkMode,omitempty"`

	// PidMode is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-pidmode
	PidMode cfz.Expression[string] `json:"PidMode,omitempty"`

	// PlacementConstraints is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-placementconstraints
	PlacementConstraints cfz.ExpressionSlice[AWS_ECS_TaskDefinition_TaskDefinitionPlacementConstraint] `json:"PlacementConstraints,omitempty"`

	// ProxyConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-proxyconfiguration
	ProxyConfiguration cfz.Expression[AWS_ECS_TaskDefinition_ProxyConfiguration] `json:"ProxyConfiguration,omitempty"`

	// RequiresCompatibilities is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-requirescompatibilities
	RequiresCompatibilities cfz.ExpressionSlice[string] `json:"RequiresCompatibilities,omitempty"`

	// RuntimePlatform is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-runtimeplatform
	RuntimePlatform cfz.Expression[AWS_ECS_TaskDefinition_RuntimePlatform] `json:"RuntimePlatform,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// TaskRoleArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-taskrolearn
	TaskRoleArn cfz.Expression[string] `json:"TaskRoleArn,omitempty"`

	// Volumes is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-volumes
	Volumes cfz.ExpressionSlice[AWS_ECS_TaskDefinition_Volume] `json:"Volumes,omitempty"`
}

// New__AWS_ECS_TaskDefinition initializes a new *AWS_ECS_TaskDefinition.
func New__AWS_ECS_TaskDefinition(logicalName string) *AWS_ECS_TaskDefinition {
	return &AWS_ECS_TaskDefinition{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_ECS_TaskDefinition) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_ECS_TaskDefinition) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_ECS_TaskDefinition) GetType() string {
	return AWS_ECS_TaskDefinition__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_ECS_TaskDefinition) Set__LogicalName(v string) *AWS_ECS_TaskDefinition {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_ECS_TaskDefinition) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_ECS_TaskDefinition {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_ECS_TaskDefinition) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_ECS_TaskDefinition {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_ECS_TaskDefinition) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_ECS_TaskDefinition {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_ECS_TaskDefinition) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_ECS_TaskDefinition {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_ECS_TaskDefinition) Set__RequestedOutputs(v []cfz.Output) *AWS_ECS_TaskDefinition {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_ECS_TaskDefinition) Add__RequestedOutputs(v ...cfz.Output) *AWS_ECS_TaskDefinition {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ContainerDefinitions updates property "ContainerDefinitions".
func (t *AWS_ECS_TaskDefinition) Set__ContainerDefinitions(v cfz.ExpressionSlice[AWS_ECS_TaskDefinition_ContainerDefinition]) *AWS_ECS_TaskDefinition {
	t.ContainerDefinitions = v
	return t
}

// SetS__ContainerDefinitions updates property "ContainerDefinitions".
func (t *AWS_ECS_TaskDefinition) SetS__ContainerDefinitions(v ...cfz.Expression[AWS_ECS_TaskDefinition_ContainerDefinition]) *AWS_ECS_TaskDefinition {
	t.ContainerDefinitions = cfz.S(v...)
	return t
}

// SetSV__ContainerDefinitions updates property "ContainerDefinitions".
func (t *AWS_ECS_TaskDefinition) SetSV__ContainerDefinitions(v ...AWS_ECS_TaskDefinition_ContainerDefinition) *AWS_ECS_TaskDefinition {
	t.ContainerDefinitions = cfz.SV(v...)
	return t
}

// Set__Cpu updates property "Cpu".
func (t *AWS_ECS_TaskDefinition) Set__Cpu(v cfz.Expression[string]) *AWS_ECS_TaskDefinition {
	t.Cpu = v
	return t
}

// SetV__Cpu updates property "Cpu".
func (t *AWS_ECS_TaskDefinition) SetV__Cpu(v string) *AWS_ECS_TaskDefinition {
	t.Cpu = cfz.V(v)
	return t
}

// Set__EphemeralStorage updates property "EphemeralStorage".
func (t *AWS_ECS_TaskDefinition) Set__EphemeralStorage(v cfz.Expression[AWS_ECS_TaskDefinition_EphemeralStorage]) *AWS_ECS_TaskDefinition {
	t.EphemeralStorage = v
	return t
}

// SetV__EphemeralStorage updates property "EphemeralStorage".
func (t *AWS_ECS_TaskDefinition) SetV__EphemeralStorage(v AWS_ECS_TaskDefinition_EphemeralStorage) *AWS_ECS_TaskDefinition {
	t.EphemeralStorage = cfz.V(v)
	return t
}

// Set__ExecutionRoleArn updates property "ExecutionRoleArn".
func (t *AWS_ECS_TaskDefinition) Set__ExecutionRoleArn(v cfz.Expression[string]) *AWS_ECS_TaskDefinition {
	t.ExecutionRoleArn = v
	return t
}

// SetV__ExecutionRoleArn updates property "ExecutionRoleArn".
func (t *AWS_ECS_TaskDefinition) SetV__ExecutionRoleArn(v string) *AWS_ECS_TaskDefinition {
	t.ExecutionRoleArn = cfz.V(v)
	return t
}

// Set__Family updates property "Family".
func (t *AWS_ECS_TaskDefinition) Set__Family(v cfz.Expression[string]) *AWS_ECS_TaskDefinition {
	t.Family = v
	return t
}

// SetV__Family updates property "Family".
func (t *AWS_ECS_TaskDefinition) SetV__Family(v string) *AWS_ECS_TaskDefinition {
	t.Family = cfz.V(v)
	return t
}

// Set__InferenceAccelerators updates property "InferenceAccelerators".
func (t *AWS_ECS_TaskDefinition) Set__InferenceAccelerators(v cfz.ExpressionSlice[AWS_ECS_TaskDefinition_InferenceAccelerator]) *AWS_ECS_TaskDefinition {
	t.InferenceAccelerators = v
	return t
}

// SetS__InferenceAccelerators updates property "InferenceAccelerators".
func (t *AWS_ECS_TaskDefinition) SetS__InferenceAccelerators(v ...cfz.Expression[AWS_ECS_TaskDefinition_InferenceAccelerator]) *AWS_ECS_TaskDefinition {
	t.InferenceAccelerators = cfz.S(v...)
	return t
}

// SetSV__InferenceAccelerators updates property "InferenceAccelerators".
func (t *AWS_ECS_TaskDefinition) SetSV__InferenceAccelerators(v ...AWS_ECS_TaskDefinition_InferenceAccelerator) *AWS_ECS_TaskDefinition {
	t.InferenceAccelerators = cfz.SV(v...)
	return t
}

// Set__IpcMode updates property "IpcMode".
func (t *AWS_ECS_TaskDefinition) Set__IpcMode(v cfz.Expression[string]) *AWS_ECS_TaskDefinition {
	t.IpcMode = v
	return t
}

// SetV__IpcMode updates property "IpcMode".
func (t *AWS_ECS_TaskDefinition) SetV__IpcMode(v string) *AWS_ECS_TaskDefinition {
	t.IpcMode = cfz.V(v)
	return t
}

// Set__Memory updates property "Memory".
func (t *AWS_ECS_TaskDefinition) Set__Memory(v cfz.Expression[string]) *AWS_ECS_TaskDefinition {
	t.Memory = v
	return t
}

// SetV__Memory updates property "Memory".
func (t *AWS_ECS_TaskDefinition) SetV__Memory(v string) *AWS_ECS_TaskDefinition {
	t.Memory = cfz.V(v)
	return t
}

// Set__NetworkMode updates property "NetworkMode".
func (t *AWS_ECS_TaskDefinition) Set__NetworkMode(v cfz.Expression[string]) *AWS_ECS_TaskDefinition {
	t.NetworkMode = v
	return t
}

// SetV__NetworkMode updates property "NetworkMode".
func (t *AWS_ECS_TaskDefinition) SetV__NetworkMode(v string) *AWS_ECS_TaskDefinition {
	t.NetworkMode = cfz.V(v)
	return t
}

// Set__PidMode updates property "PidMode".
func (t *AWS_ECS_TaskDefinition) Set__PidMode(v cfz.Expression[string]) *AWS_ECS_TaskDefinition {
	t.PidMode = v
	return t
}

// SetV__PidMode updates property "PidMode".
func (t *AWS_ECS_TaskDefinition) SetV__PidMode(v string) *AWS_ECS_TaskDefinition {
	t.PidMode = cfz.V(v)
	return t
}

// Set__PlacementConstraints updates property "PlacementConstraints".
func (t *AWS_ECS_TaskDefinition) Set__PlacementConstraints(v cfz.ExpressionSlice[AWS_ECS_TaskDefinition_TaskDefinitionPlacementConstraint]) *AWS_ECS_TaskDefinition {
	t.PlacementConstraints = v
	return t
}

// SetS__PlacementConstraints updates property "PlacementConstraints".
func (t *AWS_ECS_TaskDefinition) SetS__PlacementConstraints(v ...cfz.Expression[AWS_ECS_TaskDefinition_TaskDefinitionPlacementConstraint]) *AWS_ECS_TaskDefinition {
	t.PlacementConstraints = cfz.S(v...)
	return t
}

// SetSV__PlacementConstraints updates property "PlacementConstraints".
func (t *AWS_ECS_TaskDefinition) SetSV__PlacementConstraints(v ...AWS_ECS_TaskDefinition_TaskDefinitionPlacementConstraint) *AWS_ECS_TaskDefinition {
	t.PlacementConstraints = cfz.SV(v...)
	return t
}

// Set__ProxyConfiguration updates property "ProxyConfiguration".
func (t *AWS_ECS_TaskDefinition) Set__ProxyConfiguration(v cfz.Expression[AWS_ECS_TaskDefinition_ProxyConfiguration]) *AWS_ECS_TaskDefinition {
	t.ProxyConfiguration = v
	return t
}

// SetV__ProxyConfiguration updates property "ProxyConfiguration".
func (t *AWS_ECS_TaskDefinition) SetV__ProxyConfiguration(v AWS_ECS_TaskDefinition_ProxyConfiguration) *AWS_ECS_TaskDefinition {
	t.ProxyConfiguration = cfz.V(v)
	return t
}

// Set__RequiresCompatibilities updates property "RequiresCompatibilities".
func (t *AWS_ECS_TaskDefinition) Set__RequiresCompatibilities(v cfz.ExpressionSlice[string]) *AWS_ECS_TaskDefinition {
	t.RequiresCompatibilities = v
	return t
}

// SetS__RequiresCompatibilities updates property "RequiresCompatibilities".
func (t *AWS_ECS_TaskDefinition) SetS__RequiresCompatibilities(v ...cfz.Expression[string]) *AWS_ECS_TaskDefinition {
	t.RequiresCompatibilities = cfz.S(v...)
	return t
}

// SetSV__RequiresCompatibilities updates property "RequiresCompatibilities".
func (t *AWS_ECS_TaskDefinition) SetSV__RequiresCompatibilities(v ...string) *AWS_ECS_TaskDefinition {
	t.RequiresCompatibilities = cfz.SV(v...)
	return t
}

// Set__RuntimePlatform updates property "RuntimePlatform".
func (t *AWS_ECS_TaskDefinition) Set__RuntimePlatform(v cfz.Expression[AWS_ECS_TaskDefinition_RuntimePlatform]) *AWS_ECS_TaskDefinition {
	t.RuntimePlatform = v
	return t
}

// SetV__RuntimePlatform updates property "RuntimePlatform".
func (t *AWS_ECS_TaskDefinition) SetV__RuntimePlatform(v AWS_ECS_TaskDefinition_RuntimePlatform) *AWS_ECS_TaskDefinition {
	t.RuntimePlatform = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_ECS_TaskDefinition) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_ECS_TaskDefinition {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_ECS_TaskDefinition) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_ECS_TaskDefinition {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_ECS_TaskDefinition) SetSV__Tags(v ...cfz.Tag) *AWS_ECS_TaskDefinition {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__TaskRoleArn updates property "TaskRoleArn".
func (t *AWS_ECS_TaskDefinition) Set__TaskRoleArn(v cfz.Expression[string]) *AWS_ECS_TaskDefinition {
	t.TaskRoleArn = v
	return t
}

// SetV__TaskRoleArn updates property "TaskRoleArn".
func (t *AWS_ECS_TaskDefinition) SetV__TaskRoleArn(v string) *AWS_ECS_TaskDefinition {
	t.TaskRoleArn = cfz.V(v)
	return t
}

// Set__Volumes updates property "Volumes".
func (t *AWS_ECS_TaskDefinition) Set__Volumes(v cfz.ExpressionSlice[AWS_ECS_TaskDefinition_Volume]) *AWS_ECS_TaskDefinition {
	t.Volumes = v
	return t
}

// SetS__Volumes updates property "Volumes".
func (t *AWS_ECS_TaskDefinition) SetS__Volumes(v ...cfz.Expression[AWS_ECS_TaskDefinition_Volume]) *AWS_ECS_TaskDefinition {
	t.Volumes = cfz.S(v...)
	return t
}

// SetSV__Volumes updates property "Volumes".
func (t *AWS_ECS_TaskDefinition) SetSV__Volumes(v ...AWS_ECS_TaskDefinition_Volume) *AWS_ECS_TaskDefinition {
	t.Volumes = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_ECS_TaskDefinition) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__TaskDefinitionArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: TaskDefinitionArn
func (t *AWS_ECS_TaskDefinition) GetAtt__TaskDefinitionArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ECS_TaskDefinition__AttributesMap.TaskDefinitionArn))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_ECS_TaskDefinition) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__TaskDefinitionArn returns a conventionally configured output for an attribute of this resource.
// Attribute: TaskDefinitionArn
func (t *AWS_ECS_TaskDefinition) GetConventionalOutputAtt__TaskDefinitionArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttTaskDefinitionArn", t.GetAtt__TaskDefinitionArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_ECS_TaskDefinition) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_ECS_TaskDefinition

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_ECS_TaskDefinition) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
