// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ecs

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_ECS_Service)(nil)
	_ cfz.Resource                   = (*AWS_ECS_Service)(nil)
)

const (
	// AWS_ECS_Service__Type is the CloudFormation type for AWS::ECS::Service.
	AWS_ECS_Service__Type = "AWS::ECS::Service"
)

var (
	// AWS_ECS_Service__AttributesMap reports all the CloudFormation attributes for AWS::ECS::Service.
	AWS_ECS_Service__AttributesMap = struct {
		Name       string
		ServiceArn string
	}{
		Name:       "Name",
		ServiceArn: "ServiceArn",
	}

	// AWS_ECS_Service__AttributesSlice reports all the CloudFormation attributes for AWS::ECS::Service.
	AWS_ECS_Service__AttributesSlice = []string{
		AWS_ECS_Service__AttributesMap.Name,
		AWS_ECS_Service__AttributesMap.ServiceArn,
	}
)

var (
	// AWS_ECS_Service__PropertiesMap reports all the CloudFormation properties for AWS::ECS::Service.
	AWS_ECS_Service__PropertiesMap = struct {
		AvailabilityZoneRebalancing   string
		CapacityProviderStrategy      string
		Cluster                       string
		DeploymentConfiguration       string
		DeploymentController          string
		DesiredCount                  string
		EnableECSManagedTags          string
		EnableExecuteCommand          string
		HealthCheckGracePeriodSeconds string
		LaunchType                    string
		LoadBalancers                 string
		NetworkConfiguration          string
		PlacementConstraints          string
		PlacementStrategies           string
		PlatformVersion               string
		PropagateTags                 string
		Role                          string
		SchedulingStrategy            string
		ServiceConnectConfiguration   string
		ServiceName                   string
		ServiceRegistries             string
		Tags                          string
		TaskDefinition                string
		VolumeConfigurations          string
		VpcLatticeConfigurations      string
	}{
		AvailabilityZoneRebalancing:   "AvailabilityZoneRebalancing",
		CapacityProviderStrategy:      "CapacityProviderStrategy",
		Cluster:                       "Cluster",
		DeploymentConfiguration:       "DeploymentConfiguration",
		DeploymentController:          "DeploymentController",
		DesiredCount:                  "DesiredCount",
		EnableECSManagedTags:          "EnableECSManagedTags",
		EnableExecuteCommand:          "EnableExecuteCommand",
		HealthCheckGracePeriodSeconds: "HealthCheckGracePeriodSeconds",
		LaunchType:                    "LaunchType",
		LoadBalancers:                 "LoadBalancers",
		NetworkConfiguration:          "NetworkConfiguration",
		PlacementConstraints:          "PlacementConstraints",
		PlacementStrategies:           "PlacementStrategies",
		PlatformVersion:               "PlatformVersion",
		PropagateTags:                 "PropagateTags",
		Role:                          "Role",
		SchedulingStrategy:            "SchedulingStrategy",
		ServiceConnectConfiguration:   "ServiceConnectConfiguration",
		ServiceName:                   "ServiceName",
		ServiceRegistries:             "ServiceRegistries",
		Tags:                          "Tags",
		TaskDefinition:                "TaskDefinition",
		VolumeConfigurations:          "VolumeConfigurations",
		VpcLatticeConfigurations:      "VpcLatticeConfigurations",
	}

	// AWS_ECS_Service__PropertiesSlice reports all the CloudFormation properties for AWS::ECS::Service.
	AWS_ECS_Service__PropertiesSlice = []string{
		AWS_ECS_Service__PropertiesMap.AvailabilityZoneRebalancing,
		AWS_ECS_Service__PropertiesMap.CapacityProviderStrategy,
		AWS_ECS_Service__PropertiesMap.Cluster,
		AWS_ECS_Service__PropertiesMap.DeploymentConfiguration,
		AWS_ECS_Service__PropertiesMap.DeploymentController,
		AWS_ECS_Service__PropertiesMap.DesiredCount,
		AWS_ECS_Service__PropertiesMap.EnableECSManagedTags,
		AWS_ECS_Service__PropertiesMap.EnableExecuteCommand,
		AWS_ECS_Service__PropertiesMap.HealthCheckGracePeriodSeconds,
		AWS_ECS_Service__PropertiesMap.LaunchType,
		AWS_ECS_Service__PropertiesMap.LoadBalancers,
		AWS_ECS_Service__PropertiesMap.NetworkConfiguration,
		AWS_ECS_Service__PropertiesMap.PlacementConstraints,
		AWS_ECS_Service__PropertiesMap.PlacementStrategies,
		AWS_ECS_Service__PropertiesMap.PlatformVersion,
		AWS_ECS_Service__PropertiesMap.PropagateTags,
		AWS_ECS_Service__PropertiesMap.Role,
		AWS_ECS_Service__PropertiesMap.SchedulingStrategy,
		AWS_ECS_Service__PropertiesMap.ServiceConnectConfiguration,
		AWS_ECS_Service__PropertiesMap.ServiceName,
		AWS_ECS_Service__PropertiesMap.ServiceRegistries,
		AWS_ECS_Service__PropertiesMap.Tags,
		AWS_ECS_Service__PropertiesMap.TaskDefinition,
		AWS_ECS_Service__PropertiesMap.VolumeConfigurations,
		AWS_ECS_Service__PropertiesMap.VpcLatticeConfigurations,
	}
)

// AWS_ECS_Service is a binding for AWS::ECS::Service.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html
type AWS_ECS_Service struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AvailabilityZoneRebalancing is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-availabilityzonerebalancing
	AvailabilityZoneRebalancing cfz.Expression[string] `json:"AvailabilityZoneRebalancing,omitempty"`

	// CapacityProviderStrategy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-capacityproviderstrategy
	CapacityProviderStrategy cfz.ExpressionSlice[AWS_ECS_Service_CapacityProviderStrategyItem] `json:"CapacityProviderStrategy,omitempty"`

	// Cluster is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-cluster
	Cluster cfz.Expression[string] `json:"Cluster,omitempty"`

	// DeploymentConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-deploymentconfiguration
	DeploymentConfiguration cfz.Expression[AWS_ECS_Service_DeploymentConfiguration] `json:"DeploymentConfiguration,omitempty"`

	// DeploymentController is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-deploymentcontroller
	DeploymentController cfz.Expression[AWS_ECS_Service_DeploymentController] `json:"DeploymentController,omitempty"`

	// DesiredCount is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-desiredcount
	DesiredCount cfz.Expression[int32] `json:"DesiredCount,omitempty"`

	// EnableECSManagedTags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-enableecsmanagedtags
	EnableECSManagedTags cfz.Expression[bool] `json:"EnableECSManagedTags,omitempty"`

	// EnableExecuteCommand is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-enableexecutecommand
	EnableExecuteCommand cfz.Expression[bool] `json:"EnableExecuteCommand,omitempty"`

	// HealthCheckGracePeriodSeconds is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-healthcheckgraceperiodseconds
	HealthCheckGracePeriodSeconds cfz.Expression[int32] `json:"HealthCheckGracePeriodSeconds,omitempty"`

	// LaunchType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-launchtype
	LaunchType cfz.Expression[string] `json:"LaunchType,omitempty"`

	// LoadBalancers is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-loadbalancers
	LoadBalancers cfz.ExpressionSlice[AWS_ECS_Service_LoadBalancer] `json:"LoadBalancers,omitempty"`

	// NetworkConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-networkconfiguration
	NetworkConfiguration cfz.Expression[AWS_ECS_Service_NetworkConfiguration] `json:"NetworkConfiguration,omitempty"`

	// PlacementConstraints is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-placementconstraints
	PlacementConstraints cfz.ExpressionSlice[AWS_ECS_Service_PlacementConstraint] `json:"PlacementConstraints,omitempty"`

	// PlacementStrategies is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-placementstrategies
	PlacementStrategies cfz.ExpressionSlice[AWS_ECS_Service_PlacementStrategy] `json:"PlacementStrategies,omitempty"`

	// PlatformVersion is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-platformversion
	PlatformVersion cfz.Expression[string] `json:"PlatformVersion,omitempty"`

	// PropagateTags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-propagatetags
	PropagateTags cfz.Expression[string] `json:"PropagateTags,omitempty"`

	// Role is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-role
	Role cfz.Expression[string] `json:"Role,omitempty"`

	// SchedulingStrategy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-schedulingstrategy
	SchedulingStrategy cfz.Expression[string] `json:"SchedulingStrategy,omitempty"`

	// ServiceConnectConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-serviceconnectconfiguration
	ServiceConnectConfiguration cfz.Expression[AWS_ECS_Service_ServiceConnectConfiguration] `json:"ServiceConnectConfiguration,omitempty"`

	// ServiceName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-servicename
	ServiceName cfz.Expression[string] `json:"ServiceName,omitempty"`

	// ServiceRegistries is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-serviceregistries
	ServiceRegistries cfz.ExpressionSlice[AWS_ECS_Service_ServiceRegistry] `json:"ServiceRegistries,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// TaskDefinition is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-taskdefinition
	TaskDefinition cfz.Expression[string] `json:"TaskDefinition,omitempty"`

	// VolumeConfigurations is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-volumeconfigurations
	VolumeConfigurations cfz.ExpressionSlice[AWS_ECS_Service_ServiceVolumeConfiguration] `json:"VolumeConfigurations,omitempty"`

	// VpcLatticeConfigurations is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-vpclatticeconfigurations
	VpcLatticeConfigurations cfz.ExpressionSlice[AWS_ECS_Service_VpcLatticeConfiguration] `json:"VpcLatticeConfigurations,omitempty"`
}

// New__AWS_ECS_Service initializes a new *AWS_ECS_Service.
func New__AWS_ECS_Service(logicalName string) *AWS_ECS_Service {
	return &AWS_ECS_Service{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_ECS_Service) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_ECS_Service) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_ECS_Service) GetType() string {
	return AWS_ECS_Service__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_ECS_Service) Set__LogicalName(v string) *AWS_ECS_Service {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_ECS_Service) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_ECS_Service {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_ECS_Service) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_ECS_Service {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_ECS_Service) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_ECS_Service {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_ECS_Service) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_ECS_Service {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_ECS_Service) Set__RequestedOutputs(v []cfz.Output) *AWS_ECS_Service {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_ECS_Service) Add__RequestedOutputs(v ...cfz.Output) *AWS_ECS_Service {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AvailabilityZoneRebalancing updates property "AvailabilityZoneRebalancing".
func (t *AWS_ECS_Service) Set__AvailabilityZoneRebalancing(v cfz.Expression[string]) *AWS_ECS_Service {
	t.AvailabilityZoneRebalancing = v
	return t
}

// SetV__AvailabilityZoneRebalancing updates property "AvailabilityZoneRebalancing".
func (t *AWS_ECS_Service) SetV__AvailabilityZoneRebalancing(v string) *AWS_ECS_Service {
	t.AvailabilityZoneRebalancing = cfz.V(v)
	return t
}

// Set__CapacityProviderStrategy updates property "CapacityProviderStrategy".
func (t *AWS_ECS_Service) Set__CapacityProviderStrategy(v cfz.ExpressionSlice[AWS_ECS_Service_CapacityProviderStrategyItem]) *AWS_ECS_Service {
	t.CapacityProviderStrategy = v
	return t
}

// SetS__CapacityProviderStrategy updates property "CapacityProviderStrategy".
func (t *AWS_ECS_Service) SetS__CapacityProviderStrategy(v ...cfz.Expression[AWS_ECS_Service_CapacityProviderStrategyItem]) *AWS_ECS_Service {
	t.CapacityProviderStrategy = cfz.S(v...)
	return t
}

// SetSV__CapacityProviderStrategy updates property "CapacityProviderStrategy".
func (t *AWS_ECS_Service) SetSV__CapacityProviderStrategy(v ...AWS_ECS_Service_CapacityProviderStrategyItem) *AWS_ECS_Service {
	t.CapacityProviderStrategy = cfz.SV(v...)
	return t
}

// Set__Cluster updates property "Cluster".
func (t *AWS_ECS_Service) Set__Cluster(v cfz.Expression[string]) *AWS_ECS_Service {
	t.Cluster = v
	return t
}

// SetV__Cluster updates property "Cluster".
func (t *AWS_ECS_Service) SetV__Cluster(v string) *AWS_ECS_Service {
	t.Cluster = cfz.V(v)
	return t
}

// Set__DeploymentConfiguration updates property "DeploymentConfiguration".
func (t *AWS_ECS_Service) Set__DeploymentConfiguration(v cfz.Expression[AWS_ECS_Service_DeploymentConfiguration]) *AWS_ECS_Service {
	t.DeploymentConfiguration = v
	return t
}

// SetV__DeploymentConfiguration updates property "DeploymentConfiguration".
func (t *AWS_ECS_Service) SetV__DeploymentConfiguration(v AWS_ECS_Service_DeploymentConfiguration) *AWS_ECS_Service {
	t.DeploymentConfiguration = cfz.V(v)
	return t
}

// Set__DeploymentController updates property "DeploymentController".
func (t *AWS_ECS_Service) Set__DeploymentController(v cfz.Expression[AWS_ECS_Service_DeploymentController]) *AWS_ECS_Service {
	t.DeploymentController = v
	return t
}

// SetV__DeploymentController updates property "DeploymentController".
func (t *AWS_ECS_Service) SetV__DeploymentController(v AWS_ECS_Service_DeploymentController) *AWS_ECS_Service {
	t.DeploymentController = cfz.V(v)
	return t
}

// Set__DesiredCount updates property "DesiredCount".
func (t *AWS_ECS_Service) Set__DesiredCount(v cfz.Expression[int32]) *AWS_ECS_Service {
	t.DesiredCount = v
	return t
}

// SetV__DesiredCount updates property "DesiredCount".
func (t *AWS_ECS_Service) SetV__DesiredCount(v int32) *AWS_ECS_Service {
	t.DesiredCount = cfz.V(v)
	return t
}

// Set__EnableECSManagedTags updates property "EnableECSManagedTags".
func (t *AWS_ECS_Service) Set__EnableECSManagedTags(v cfz.Expression[bool]) *AWS_ECS_Service {
	t.EnableECSManagedTags = v
	return t
}

// SetV__EnableECSManagedTags updates property "EnableECSManagedTags".
func (t *AWS_ECS_Service) SetV__EnableECSManagedTags(v bool) *AWS_ECS_Service {
	t.EnableECSManagedTags = cfz.V(v)
	return t
}

// Set__EnableExecuteCommand updates property "EnableExecuteCommand".
func (t *AWS_ECS_Service) Set__EnableExecuteCommand(v cfz.Expression[bool]) *AWS_ECS_Service {
	t.EnableExecuteCommand = v
	return t
}

// SetV__EnableExecuteCommand updates property "EnableExecuteCommand".
func (t *AWS_ECS_Service) SetV__EnableExecuteCommand(v bool) *AWS_ECS_Service {
	t.EnableExecuteCommand = cfz.V(v)
	return t
}

// Set__HealthCheckGracePeriodSeconds updates property "HealthCheckGracePeriodSeconds".
func (t *AWS_ECS_Service) Set__HealthCheckGracePeriodSeconds(v cfz.Expression[int32]) *AWS_ECS_Service {
	t.HealthCheckGracePeriodSeconds = v
	return t
}

// SetV__HealthCheckGracePeriodSeconds updates property "HealthCheckGracePeriodSeconds".
func (t *AWS_ECS_Service) SetV__HealthCheckGracePeriodSeconds(v int32) *AWS_ECS_Service {
	t.HealthCheckGracePeriodSeconds = cfz.V(v)
	return t
}

// Set__LaunchType updates property "LaunchType".
func (t *AWS_ECS_Service) Set__LaunchType(v cfz.Expression[string]) *AWS_ECS_Service {
	t.LaunchType = v
	return t
}

// SetV__LaunchType updates property "LaunchType".
func (t *AWS_ECS_Service) SetV__LaunchType(v string) *AWS_ECS_Service {
	t.LaunchType = cfz.V(v)
	return t
}

// Set__LoadBalancers updates property "LoadBalancers".
func (t *AWS_ECS_Service) Set__LoadBalancers(v cfz.ExpressionSlice[AWS_ECS_Service_LoadBalancer]) *AWS_ECS_Service {
	t.LoadBalancers = v
	return t
}

// SetS__LoadBalancers updates property "LoadBalancers".
func (t *AWS_ECS_Service) SetS__LoadBalancers(v ...cfz.Expression[AWS_ECS_Service_LoadBalancer]) *AWS_ECS_Service {
	t.LoadBalancers = cfz.S(v...)
	return t
}

// SetSV__LoadBalancers updates property "LoadBalancers".
func (t *AWS_ECS_Service) SetSV__LoadBalancers(v ...AWS_ECS_Service_LoadBalancer) *AWS_ECS_Service {
	t.LoadBalancers = cfz.SV(v...)
	return t
}

// Set__NetworkConfiguration updates property "NetworkConfiguration".
func (t *AWS_ECS_Service) Set__NetworkConfiguration(v cfz.Expression[AWS_ECS_Service_NetworkConfiguration]) *AWS_ECS_Service {
	t.NetworkConfiguration = v
	return t
}

// SetV__NetworkConfiguration updates property "NetworkConfiguration".
func (t *AWS_ECS_Service) SetV__NetworkConfiguration(v AWS_ECS_Service_NetworkConfiguration) *AWS_ECS_Service {
	t.NetworkConfiguration = cfz.V(v)
	return t
}

// Set__PlacementConstraints updates property "PlacementConstraints".
func (t *AWS_ECS_Service) Set__PlacementConstraints(v cfz.ExpressionSlice[AWS_ECS_Service_PlacementConstraint]) *AWS_ECS_Service {
	t.PlacementConstraints = v
	return t
}

// SetS__PlacementConstraints updates property "PlacementConstraints".
func (t *AWS_ECS_Service) SetS__PlacementConstraints(v ...cfz.Expression[AWS_ECS_Service_PlacementConstraint]) *AWS_ECS_Service {
	t.PlacementConstraints = cfz.S(v...)
	return t
}

// SetSV__PlacementConstraints updates property "PlacementConstraints".
func (t *AWS_ECS_Service) SetSV__PlacementConstraints(v ...AWS_ECS_Service_PlacementConstraint) *AWS_ECS_Service {
	t.PlacementConstraints = cfz.SV(v...)
	return t
}

// Set__PlacementStrategies updates property "PlacementStrategies".
func (t *AWS_ECS_Service) Set__PlacementStrategies(v cfz.ExpressionSlice[AWS_ECS_Service_PlacementStrategy]) *AWS_ECS_Service {
	t.PlacementStrategies = v
	return t
}

// SetS__PlacementStrategies updates property "PlacementStrategies".
func (t *AWS_ECS_Service) SetS__PlacementStrategies(v ...cfz.Expression[AWS_ECS_Service_PlacementStrategy]) *AWS_ECS_Service {
	t.PlacementStrategies = cfz.S(v...)
	return t
}

// SetSV__PlacementStrategies updates property "PlacementStrategies".
func (t *AWS_ECS_Service) SetSV__PlacementStrategies(v ...AWS_ECS_Service_PlacementStrategy) *AWS_ECS_Service {
	t.PlacementStrategies = cfz.SV(v...)
	return t
}

// Set__PlatformVersion updates property "PlatformVersion".
func (t *AWS_ECS_Service) Set__PlatformVersion(v cfz.Expression[string]) *AWS_ECS_Service {
	t.PlatformVersion = v
	return t
}

// SetV__PlatformVersion updates property "PlatformVersion".
func (t *AWS_ECS_Service) SetV__PlatformVersion(v string) *AWS_ECS_Service {
	t.PlatformVersion = cfz.V(v)
	return t
}

// Set__PropagateTags updates property "PropagateTags".
func (t *AWS_ECS_Service) Set__PropagateTags(v cfz.Expression[string]) *AWS_ECS_Service {
	t.PropagateTags = v
	return t
}

// SetV__PropagateTags updates property "PropagateTags".
func (t *AWS_ECS_Service) SetV__PropagateTags(v string) *AWS_ECS_Service {
	t.PropagateTags = cfz.V(v)
	return t
}

// Set__Role updates property "Role".
func (t *AWS_ECS_Service) Set__Role(v cfz.Expression[string]) *AWS_ECS_Service {
	t.Role = v
	return t
}

// SetV__Role updates property "Role".
func (t *AWS_ECS_Service) SetV__Role(v string) *AWS_ECS_Service {
	t.Role = cfz.V(v)
	return t
}

// Set__SchedulingStrategy updates property "SchedulingStrategy".
func (t *AWS_ECS_Service) Set__SchedulingStrategy(v cfz.Expression[string]) *AWS_ECS_Service {
	t.SchedulingStrategy = v
	return t
}

// SetV__SchedulingStrategy updates property "SchedulingStrategy".
func (t *AWS_ECS_Service) SetV__SchedulingStrategy(v string) *AWS_ECS_Service {
	t.SchedulingStrategy = cfz.V(v)
	return t
}

// Set__ServiceConnectConfiguration updates property "ServiceConnectConfiguration".
func (t *AWS_ECS_Service) Set__ServiceConnectConfiguration(v cfz.Expression[AWS_ECS_Service_ServiceConnectConfiguration]) *AWS_ECS_Service {
	t.ServiceConnectConfiguration = v
	return t
}

// SetV__ServiceConnectConfiguration updates property "ServiceConnectConfiguration".
func (t *AWS_ECS_Service) SetV__ServiceConnectConfiguration(v AWS_ECS_Service_ServiceConnectConfiguration) *AWS_ECS_Service {
	t.ServiceConnectConfiguration = cfz.V(v)
	return t
}

// Set__ServiceName updates property "ServiceName".
func (t *AWS_ECS_Service) Set__ServiceName(v cfz.Expression[string]) *AWS_ECS_Service {
	t.ServiceName = v
	return t
}

// SetV__ServiceName updates property "ServiceName".
func (t *AWS_ECS_Service) SetV__ServiceName(v string) *AWS_ECS_Service {
	t.ServiceName = cfz.V(v)
	return t
}

// Set__ServiceRegistries updates property "ServiceRegistries".
func (t *AWS_ECS_Service) Set__ServiceRegistries(v cfz.ExpressionSlice[AWS_ECS_Service_ServiceRegistry]) *AWS_ECS_Service {
	t.ServiceRegistries = v
	return t
}

// SetS__ServiceRegistries updates property "ServiceRegistries".
func (t *AWS_ECS_Service) SetS__ServiceRegistries(v ...cfz.Expression[AWS_ECS_Service_ServiceRegistry]) *AWS_ECS_Service {
	t.ServiceRegistries = cfz.S(v...)
	return t
}

// SetSV__ServiceRegistries updates property "ServiceRegistries".
func (t *AWS_ECS_Service) SetSV__ServiceRegistries(v ...AWS_ECS_Service_ServiceRegistry) *AWS_ECS_Service {
	t.ServiceRegistries = cfz.SV(v...)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_ECS_Service) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_ECS_Service {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_ECS_Service) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_ECS_Service {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_ECS_Service) SetSV__Tags(v ...cfz.Tag) *AWS_ECS_Service {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__TaskDefinition updates property "TaskDefinition".
func (t *AWS_ECS_Service) Set__TaskDefinition(v cfz.Expression[string]) *AWS_ECS_Service {
	t.TaskDefinition = v
	return t
}

// SetV__TaskDefinition updates property "TaskDefinition".
func (t *AWS_ECS_Service) SetV__TaskDefinition(v string) *AWS_ECS_Service {
	t.TaskDefinition = cfz.V(v)
	return t
}

// Set__VolumeConfigurations updates property "VolumeConfigurations".
func (t *AWS_ECS_Service) Set__VolumeConfigurations(v cfz.ExpressionSlice[AWS_ECS_Service_ServiceVolumeConfiguration]) *AWS_ECS_Service {
	t.VolumeConfigurations = v
	return t
}

// SetS__VolumeConfigurations updates property "VolumeConfigurations".
func (t *AWS_ECS_Service) SetS__VolumeConfigurations(v ...cfz.Expression[AWS_ECS_Service_ServiceVolumeConfiguration]) *AWS_ECS_Service {
	t.VolumeConfigurations = cfz.S(v...)
	return t
}

// SetSV__VolumeConfigurations updates property "VolumeConfigurations".
func (t *AWS_ECS_Service) SetSV__VolumeConfigurations(v ...AWS_ECS_Service_ServiceVolumeConfiguration) *AWS_ECS_Service {
	t.VolumeConfigurations = cfz.SV(v...)
	return t
}

// Set__VpcLatticeConfigurations updates property "VpcLatticeConfigurations".
func (t *AWS_ECS_Service) Set__VpcLatticeConfigurations(v cfz.ExpressionSlice[AWS_ECS_Service_VpcLatticeConfiguration]) *AWS_ECS_Service {
	t.VpcLatticeConfigurations = v
	return t
}

// SetS__VpcLatticeConfigurations updates property "VpcLatticeConfigurations".
func (t *AWS_ECS_Service) SetS__VpcLatticeConfigurations(v ...cfz.Expression[AWS_ECS_Service_VpcLatticeConfiguration]) *AWS_ECS_Service {
	t.VpcLatticeConfigurations = cfz.S(v...)
	return t
}

// SetSV__VpcLatticeConfigurations updates property "VpcLatticeConfigurations".
func (t *AWS_ECS_Service) SetSV__VpcLatticeConfigurations(v ...AWS_ECS_Service_VpcLatticeConfiguration) *AWS_ECS_Service {
	t.VpcLatticeConfigurations = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_ECS_Service) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Name returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Name
func (t *AWS_ECS_Service) GetAtt__Name() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ECS_Service__AttributesMap.Name))
}

// GetAtt__ServiceArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ServiceArn
func (t *AWS_ECS_Service) GetAtt__ServiceArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ECS_Service__AttributesMap.ServiceArn))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_ECS_Service) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Name returns a conventionally configured output for an attribute of this resource.
// Attribute: Name
func (t *AWS_ECS_Service) GetConventionalOutputAtt__Name(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttName", t.GetAtt__Name())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ServiceArn returns a conventionally configured output for an attribute of this resource.
// Attribute: ServiceArn
func (t *AWS_ECS_Service) GetConventionalOutputAtt__ServiceArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttServiceArn", t.GetAtt__ServiceArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_ECS_Service) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_ECS_Service

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_ECS_Service) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
