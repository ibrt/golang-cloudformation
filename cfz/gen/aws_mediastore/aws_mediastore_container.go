// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_mediastore

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_MediaStore_Container)(nil)
	_ cfz.Resource                   = (*AWS_MediaStore_Container)(nil)
)

const (
	// AWS_MediaStore_Container__Type is the CloudFormation type for AWS::MediaStore::Container.
	AWS_MediaStore_Container__Type = "AWS::MediaStore::Container"
)

var (
	// AWS_MediaStore_Container__AttributesMap reports all the CloudFormation attributes for AWS::MediaStore::Container.
	AWS_MediaStore_Container__AttributesMap = struct {
		Endpoint string
	}{
		Endpoint: "Endpoint",
	}

	// AWS_MediaStore_Container__AttributesSlice reports all the CloudFormation attributes for AWS::MediaStore::Container.
	AWS_MediaStore_Container__AttributesSlice = []string{
		AWS_MediaStore_Container__AttributesMap.Endpoint,
	}
)

var (
	// AWS_MediaStore_Container__PropertiesMap reports all the CloudFormation properties for AWS::MediaStore::Container.
	AWS_MediaStore_Container__PropertiesMap = struct {
		AccessLoggingEnabled string
		ContainerName        string
		CorsPolicy           string
		LifecyclePolicy      string
		MetricPolicy         string
		Policy               string
		Tags                 string
	}{
		AccessLoggingEnabled: "AccessLoggingEnabled",
		ContainerName:        "ContainerName",
		CorsPolicy:           "CorsPolicy",
		LifecyclePolicy:      "LifecyclePolicy",
		MetricPolicy:         "MetricPolicy",
		Policy:               "Policy",
		Tags:                 "Tags",
	}

	// AWS_MediaStore_Container__PropertiesSlice reports all the CloudFormation properties for AWS::MediaStore::Container.
	AWS_MediaStore_Container__PropertiesSlice = []string{
		AWS_MediaStore_Container__PropertiesMap.AccessLoggingEnabled,
		AWS_MediaStore_Container__PropertiesMap.ContainerName,
		AWS_MediaStore_Container__PropertiesMap.CorsPolicy,
		AWS_MediaStore_Container__PropertiesMap.LifecyclePolicy,
		AWS_MediaStore_Container__PropertiesMap.MetricPolicy,
		AWS_MediaStore_Container__PropertiesMap.Policy,
		AWS_MediaStore_Container__PropertiesMap.Tags,
	}
)

// AWS_MediaStore_Container is a binding for AWS::MediaStore::Container.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html
type AWS_MediaStore_Container struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AccessLoggingEnabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-accessloggingenabled
	AccessLoggingEnabled cfz.Expression[bool] `json:"AccessLoggingEnabled,omitempty"`

	// ContainerName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-containername
	ContainerName cfz.Expression[string] `json:"ContainerName,omitempty"`

	// CorsPolicy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-corspolicy
	CorsPolicy cfz.ExpressionSlice[AWS_MediaStore_Container_CorsRule] `json:"CorsPolicy,omitempty"`

	// LifecyclePolicy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-lifecyclepolicy
	LifecyclePolicy cfz.Expression[string] `json:"LifecyclePolicy,omitempty"`

	// MetricPolicy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-metricpolicy
	MetricPolicy cfz.Expression[AWS_MediaStore_Container_MetricPolicy] `json:"MetricPolicy,omitempty"`

	// Policy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-policy
	Policy cfz.Expression[string] `json:"Policy,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html#cfn-mediastore-container-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_MediaStore_Container initializes a new *AWS_MediaStore_Container.
func New__AWS_MediaStore_Container(logicalName string) *AWS_MediaStore_Container {
	return &AWS_MediaStore_Container{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_MediaStore_Container) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_MediaStore_Container) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_MediaStore_Container) GetType() string {
	return AWS_MediaStore_Container__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_MediaStore_Container) Set__LogicalName(v string) *AWS_MediaStore_Container {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_MediaStore_Container) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_MediaStore_Container {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_MediaStore_Container) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_MediaStore_Container {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_MediaStore_Container) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_MediaStore_Container {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_MediaStore_Container) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_MediaStore_Container {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_MediaStore_Container) Set__RequestedOutputs(v []cfz.Output) *AWS_MediaStore_Container {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_MediaStore_Container) Add__RequestedOutputs(v ...cfz.Output) *AWS_MediaStore_Container {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AccessLoggingEnabled updates property "AccessLoggingEnabled".
func (t *AWS_MediaStore_Container) Set__AccessLoggingEnabled(v cfz.Expression[bool]) *AWS_MediaStore_Container {
	t.AccessLoggingEnabled = v
	return t
}

// SetV__AccessLoggingEnabled updates property "AccessLoggingEnabled".
func (t *AWS_MediaStore_Container) SetV__AccessLoggingEnabled(v bool) *AWS_MediaStore_Container {
	t.AccessLoggingEnabled = cfz.V(v)
	return t
}

// Set__ContainerName updates property "ContainerName".
func (t *AWS_MediaStore_Container) Set__ContainerName(v cfz.Expression[string]) *AWS_MediaStore_Container {
	t.ContainerName = v
	return t
}

// SetV__ContainerName updates property "ContainerName".
func (t *AWS_MediaStore_Container) SetV__ContainerName(v string) *AWS_MediaStore_Container {
	t.ContainerName = cfz.V(v)
	return t
}

// Set__CorsPolicy updates property "CorsPolicy".
func (t *AWS_MediaStore_Container) Set__CorsPolicy(v cfz.ExpressionSlice[AWS_MediaStore_Container_CorsRule]) *AWS_MediaStore_Container {
	t.CorsPolicy = v
	return t
}

// SetS__CorsPolicy updates property "CorsPolicy".
func (t *AWS_MediaStore_Container) SetS__CorsPolicy(v ...cfz.Expression[AWS_MediaStore_Container_CorsRule]) *AWS_MediaStore_Container {
	t.CorsPolicy = cfz.S(v...)
	return t
}

// SetSV__CorsPolicy updates property "CorsPolicy".
func (t *AWS_MediaStore_Container) SetSV__CorsPolicy(v ...AWS_MediaStore_Container_CorsRule) *AWS_MediaStore_Container {
	t.CorsPolicy = cfz.SV(v...)
	return t
}

// Set__LifecyclePolicy updates property "LifecyclePolicy".
func (t *AWS_MediaStore_Container) Set__LifecyclePolicy(v cfz.Expression[string]) *AWS_MediaStore_Container {
	t.LifecyclePolicy = v
	return t
}

// SetV__LifecyclePolicy updates property "LifecyclePolicy".
func (t *AWS_MediaStore_Container) SetV__LifecyclePolicy(v string) *AWS_MediaStore_Container {
	t.LifecyclePolicy = cfz.V(v)
	return t
}

// Set__MetricPolicy updates property "MetricPolicy".
func (t *AWS_MediaStore_Container) Set__MetricPolicy(v cfz.Expression[AWS_MediaStore_Container_MetricPolicy]) *AWS_MediaStore_Container {
	t.MetricPolicy = v
	return t
}

// SetV__MetricPolicy updates property "MetricPolicy".
func (t *AWS_MediaStore_Container) SetV__MetricPolicy(v AWS_MediaStore_Container_MetricPolicy) *AWS_MediaStore_Container {
	t.MetricPolicy = cfz.V(v)
	return t
}

// Set__Policy updates property "Policy".
func (t *AWS_MediaStore_Container) Set__Policy(v cfz.Expression[string]) *AWS_MediaStore_Container {
	t.Policy = v
	return t
}

// SetV__Policy updates property "Policy".
func (t *AWS_MediaStore_Container) SetV__Policy(v string) *AWS_MediaStore_Container {
	t.Policy = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_MediaStore_Container) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_MediaStore_Container {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_MediaStore_Container) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_MediaStore_Container {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_MediaStore_Container) SetSV__Tags(v ...cfz.Tag) *AWS_MediaStore_Container {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_MediaStore_Container) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Endpoint returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Endpoint
func (t *AWS_MediaStore_Container) GetAtt__Endpoint() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_MediaStore_Container__AttributesMap.Endpoint))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_MediaStore_Container) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Endpoint returns a conventionally configured output for an attribute of this resource.
// Attribute: Endpoint
func (t *AWS_MediaStore_Container) GetConventionalOutputAtt__Endpoint(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttEndpoint", t.GetAtt__Endpoint())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_MediaStore_Container) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_MediaStore_Container

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_MediaStore_Container) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
