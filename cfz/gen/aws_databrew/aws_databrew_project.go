// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_databrew

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_DataBrew_Project)(nil)
	_ cfz.Resource                   = (*AWS_DataBrew_Project)(nil)
)

const (
	// AWS_DataBrew_Project__Type is the CloudFormation type for AWS::DataBrew::Project.
	AWS_DataBrew_Project__Type = "AWS::DataBrew::Project"
)

var (
	// AWS_DataBrew_Project__PropertiesMap reports all the CloudFormation properties for AWS::DataBrew::Project.
	AWS_DataBrew_Project__PropertiesMap = struct {
		DatasetName string
		Name        string
		RecipeName  string
		RoleArn     string
		Sample      string
		Tags        string
	}{
		DatasetName: "DatasetName",
		Name:        "Name",
		RecipeName:  "RecipeName",
		RoleArn:     "RoleArn",
		Sample:      "Sample",
		Tags:        "Tags",
	}

	// AWS_DataBrew_Project__PropertiesSlice reports all the CloudFormation properties for AWS::DataBrew::Project.
	AWS_DataBrew_Project__PropertiesSlice = []string{
		AWS_DataBrew_Project__PropertiesMap.DatasetName,
		AWS_DataBrew_Project__PropertiesMap.Name,
		AWS_DataBrew_Project__PropertiesMap.RecipeName,
		AWS_DataBrew_Project__PropertiesMap.RoleArn,
		AWS_DataBrew_Project__PropertiesMap.Sample,
		AWS_DataBrew_Project__PropertiesMap.Tags,
	}
)

// AWS_DataBrew_Project is a binding for AWS::DataBrew::Project.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-databrew-project.html
type AWS_DataBrew_Project struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// DatasetName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-databrew-project.html#cfn-databrew-project-datasetname
	DatasetName cfz.Expression[string] `json:"DatasetName,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-databrew-project.html#cfn-databrew-project-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// RecipeName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-databrew-project.html#cfn-databrew-project-recipename
	RecipeName cfz.Expression[string] `json:"RecipeName,omitempty"`

	// RoleArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-databrew-project.html#cfn-databrew-project-rolearn
	RoleArn cfz.Expression[string] `json:"RoleArn,omitempty"`

	// Sample is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-databrew-project.html#cfn-databrew-project-sample
	Sample cfz.Expression[AWS_DataBrew_Project_Sample] `json:"Sample,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-databrew-project.html#cfn-databrew-project-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_DataBrew_Project initializes a new *AWS_DataBrew_Project.
func New__AWS_DataBrew_Project(logicalName string) *AWS_DataBrew_Project {
	return &AWS_DataBrew_Project{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_DataBrew_Project) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_DataBrew_Project) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_DataBrew_Project) GetType() string {
	return AWS_DataBrew_Project__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_DataBrew_Project) Set__LogicalName(v string) *AWS_DataBrew_Project {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_DataBrew_Project) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_DataBrew_Project {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_DataBrew_Project) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_DataBrew_Project {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_DataBrew_Project) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_DataBrew_Project {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_DataBrew_Project) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_DataBrew_Project {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_DataBrew_Project) Set__RequestedOutputs(v []cfz.Output) *AWS_DataBrew_Project {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_DataBrew_Project) Add__RequestedOutputs(v ...cfz.Output) *AWS_DataBrew_Project {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__DatasetName updates property "DatasetName".
func (t *AWS_DataBrew_Project) Set__DatasetName(v cfz.Expression[string]) *AWS_DataBrew_Project {
	t.DatasetName = v
	return t
}

// SetV__DatasetName updates property "DatasetName".
func (t *AWS_DataBrew_Project) SetV__DatasetName(v string) *AWS_DataBrew_Project {
	t.DatasetName = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_DataBrew_Project) Set__Name(v cfz.Expression[string]) *AWS_DataBrew_Project {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_DataBrew_Project) SetV__Name(v string) *AWS_DataBrew_Project {
	t.Name = cfz.V(v)
	return t
}

// Set__RecipeName updates property "RecipeName".
func (t *AWS_DataBrew_Project) Set__RecipeName(v cfz.Expression[string]) *AWS_DataBrew_Project {
	t.RecipeName = v
	return t
}

// SetV__RecipeName updates property "RecipeName".
func (t *AWS_DataBrew_Project) SetV__RecipeName(v string) *AWS_DataBrew_Project {
	t.RecipeName = cfz.V(v)
	return t
}

// Set__RoleArn updates property "RoleArn".
func (t *AWS_DataBrew_Project) Set__RoleArn(v cfz.Expression[string]) *AWS_DataBrew_Project {
	t.RoleArn = v
	return t
}

// SetV__RoleArn updates property "RoleArn".
func (t *AWS_DataBrew_Project) SetV__RoleArn(v string) *AWS_DataBrew_Project {
	t.RoleArn = cfz.V(v)
	return t
}

// Set__Sample updates property "Sample".
func (t *AWS_DataBrew_Project) Set__Sample(v cfz.Expression[AWS_DataBrew_Project_Sample]) *AWS_DataBrew_Project {
	t.Sample = v
	return t
}

// SetV__Sample updates property "Sample".
func (t *AWS_DataBrew_Project) SetV__Sample(v AWS_DataBrew_Project_Sample) *AWS_DataBrew_Project {
	t.Sample = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_DataBrew_Project) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_DataBrew_Project {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_DataBrew_Project) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_DataBrew_Project {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_DataBrew_Project) SetSV__Tags(v ...cfz.Tag) *AWS_DataBrew_Project {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_DataBrew_Project) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_DataBrew_Project) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_DataBrew_Project) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_DataBrew_Project

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_DataBrew_Project) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
