// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_kinesis

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Kinesis_StreamConsumer)(nil)
	_ cfz.Resource                   = (*AWS_Kinesis_StreamConsumer)(nil)
)

const (
	// AWS_Kinesis_StreamConsumer__Type is the CloudFormation type for AWS::Kinesis::StreamConsumer.
	AWS_Kinesis_StreamConsumer__Type = "AWS::Kinesis::StreamConsumer"
)

var (
	// AWS_Kinesis_StreamConsumer__AttributesMap reports all the CloudFormation attributes for AWS::Kinesis::StreamConsumer.
	AWS_Kinesis_StreamConsumer__AttributesMap = struct {
		ConsumerARN               string
		ConsumerCreationTimestamp string
		ConsumerName              string
		ConsumerStatus            string
		StreamARN                 string
	}{
		ConsumerARN:               "ConsumerARN",
		ConsumerCreationTimestamp: "ConsumerCreationTimestamp",
		ConsumerName:              "ConsumerName",
		ConsumerStatus:            "ConsumerStatus",
		StreamARN:                 "StreamARN",
	}

	// AWS_Kinesis_StreamConsumer__AttributesSlice reports all the CloudFormation attributes for AWS::Kinesis::StreamConsumer.
	AWS_Kinesis_StreamConsumer__AttributesSlice = []string{
		AWS_Kinesis_StreamConsumer__AttributesMap.ConsumerARN,
		AWS_Kinesis_StreamConsumer__AttributesMap.ConsumerCreationTimestamp,
		AWS_Kinesis_StreamConsumer__AttributesMap.ConsumerName,
		AWS_Kinesis_StreamConsumer__AttributesMap.ConsumerStatus,
		AWS_Kinesis_StreamConsumer__AttributesMap.StreamARN,
	}
)

var (
	// AWS_Kinesis_StreamConsumer__PropertiesMap reports all the CloudFormation properties for AWS::Kinesis::StreamConsumer.
	AWS_Kinesis_StreamConsumer__PropertiesMap = struct {
		ConsumerName string
		StreamARN    string
	}{
		ConsumerName: "ConsumerName",
		StreamARN:    "StreamARN",
	}

	// AWS_Kinesis_StreamConsumer__PropertiesSlice reports all the CloudFormation properties for AWS::Kinesis::StreamConsumer.
	AWS_Kinesis_StreamConsumer__PropertiesSlice = []string{
		AWS_Kinesis_StreamConsumer__PropertiesMap.ConsumerName,
		AWS_Kinesis_StreamConsumer__PropertiesMap.StreamARN,
	}
)

// AWS_Kinesis_StreamConsumer is a binding for AWS::Kinesis::StreamConsumer.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesis-streamconsumer.html
type AWS_Kinesis_StreamConsumer struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ConsumerName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesis-streamconsumer.html#cfn-kinesis-streamconsumer-consumername
	ConsumerName cfz.Expression[string] `json:"ConsumerName,omitempty"`

	// StreamARN is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesis-streamconsumer.html#cfn-kinesis-streamconsumer-streamarn
	StreamARN cfz.Expression[string] `json:"StreamARN,omitempty"`
}

// New__AWS_Kinesis_StreamConsumer initializes a new *AWS_Kinesis_StreamConsumer.
func New__AWS_Kinesis_StreamConsumer(logicalName string) *AWS_Kinesis_StreamConsumer {
	return &AWS_Kinesis_StreamConsumer{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Kinesis_StreamConsumer) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Kinesis_StreamConsumer) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Kinesis_StreamConsumer) GetType() string {
	return AWS_Kinesis_StreamConsumer__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Kinesis_StreamConsumer) Set__LogicalName(v string) *AWS_Kinesis_StreamConsumer {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Kinesis_StreamConsumer) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Kinesis_StreamConsumer {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Kinesis_StreamConsumer) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Kinesis_StreamConsumer {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Kinesis_StreamConsumer) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Kinesis_StreamConsumer {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Kinesis_StreamConsumer) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Kinesis_StreamConsumer {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Kinesis_StreamConsumer) Set__RequestedOutputs(v []cfz.Output) *AWS_Kinesis_StreamConsumer {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Kinesis_StreamConsumer) Add__RequestedOutputs(v ...cfz.Output) *AWS_Kinesis_StreamConsumer {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ConsumerName updates property "ConsumerName".
func (t *AWS_Kinesis_StreamConsumer) Set__ConsumerName(v cfz.Expression[string]) *AWS_Kinesis_StreamConsumer {
	t.ConsumerName = v
	return t
}

// SetV__ConsumerName updates property "ConsumerName".
func (t *AWS_Kinesis_StreamConsumer) SetV__ConsumerName(v string) *AWS_Kinesis_StreamConsumer {
	t.ConsumerName = cfz.V(v)
	return t
}

// Set__StreamARN updates property "StreamARN".
func (t *AWS_Kinesis_StreamConsumer) Set__StreamARN(v cfz.Expression[string]) *AWS_Kinesis_StreamConsumer {
	t.StreamARN = v
	return t
}

// SetV__StreamARN updates property "StreamARN".
func (t *AWS_Kinesis_StreamConsumer) SetV__StreamARN(v string) *AWS_Kinesis_StreamConsumer {
	t.StreamARN = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Kinesis_StreamConsumer) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__ConsumerARN returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ConsumerARN
func (t *AWS_Kinesis_StreamConsumer) GetAtt__ConsumerARN() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Kinesis_StreamConsumer__AttributesMap.ConsumerARN))
}

// GetAtt__ConsumerCreationTimestamp returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ConsumerCreationTimestamp
func (t *AWS_Kinesis_StreamConsumer) GetAtt__ConsumerCreationTimestamp() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Kinesis_StreamConsumer__AttributesMap.ConsumerCreationTimestamp))
}

// GetAtt__ConsumerName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ConsumerName
func (t *AWS_Kinesis_StreamConsumer) GetAtt__ConsumerName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Kinesis_StreamConsumer__AttributesMap.ConsumerName))
}

// GetAtt__ConsumerStatus returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: ConsumerStatus
func (t *AWS_Kinesis_StreamConsumer) GetAtt__ConsumerStatus() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Kinesis_StreamConsumer__AttributesMap.ConsumerStatus))
}

// GetAtt__StreamARN returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: StreamARN
func (t *AWS_Kinesis_StreamConsumer) GetAtt__StreamARN() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Kinesis_StreamConsumer__AttributesMap.StreamARN))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Kinesis_StreamConsumer) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ConsumerARN returns a conventionally configured output for an attribute of this resource.
// Attribute: ConsumerARN
func (t *AWS_Kinesis_StreamConsumer) GetConventionalOutputAtt__ConsumerARN(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttConsumerARN", t.GetAtt__ConsumerARN())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ConsumerCreationTimestamp returns a conventionally configured output for an attribute of this resource.
// Attribute: ConsumerCreationTimestamp
func (t *AWS_Kinesis_StreamConsumer) GetConventionalOutputAtt__ConsumerCreationTimestamp(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttConsumerCreationTimestamp", t.GetAtt__ConsumerCreationTimestamp())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ConsumerName returns a conventionally configured output for an attribute of this resource.
// Attribute: ConsumerName
func (t *AWS_Kinesis_StreamConsumer) GetConventionalOutputAtt__ConsumerName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttConsumerName", t.GetAtt__ConsumerName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__ConsumerStatus returns a conventionally configured output for an attribute of this resource.
// Attribute: ConsumerStatus
func (t *AWS_Kinesis_StreamConsumer) GetConventionalOutputAtt__ConsumerStatus(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttConsumerStatus", t.GetAtt__ConsumerStatus())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__StreamARN returns a conventionally configured output for an attribute of this resource.
// Attribute: StreamARN
func (t *AWS_Kinesis_StreamConsumer) GetConventionalOutputAtt__StreamARN(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStreamARN", t.GetAtt__StreamARN())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Kinesis_StreamConsumer) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Kinesis_StreamConsumer

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Kinesis_StreamConsumer) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
