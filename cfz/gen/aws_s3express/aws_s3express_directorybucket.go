// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_s3express

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_S3Express_DirectoryBucket)(nil)
	_ cfz.Resource                   = (*AWS_S3Express_DirectoryBucket)(nil)
)

const (
	// AWS_S3Express_DirectoryBucket__Type is the CloudFormation type for AWS::S3Express::DirectoryBucket.
	AWS_S3Express_DirectoryBucket__Type = "AWS::S3Express::DirectoryBucket"
)

var (
	// AWS_S3Express_DirectoryBucket__AttributesMap reports all the CloudFormation attributes for AWS::S3Express::DirectoryBucket.
	AWS_S3Express_DirectoryBucket__AttributesMap = struct {
		Arn                  string
		AvailabilityZoneName string
	}{
		Arn:                  "Arn",
		AvailabilityZoneName: "AvailabilityZoneName",
	}

	// AWS_S3Express_DirectoryBucket__AttributesSlice reports all the CloudFormation attributes for AWS::S3Express::DirectoryBucket.
	AWS_S3Express_DirectoryBucket__AttributesSlice = []string{
		AWS_S3Express_DirectoryBucket__AttributesMap.Arn,
		AWS_S3Express_DirectoryBucket__AttributesMap.AvailabilityZoneName,
	}
)

var (
	// AWS_S3Express_DirectoryBucket__PropertiesMap reports all the CloudFormation properties for AWS::S3Express::DirectoryBucket.
	AWS_S3Express_DirectoryBucket__PropertiesMap = struct {
		BucketEncryption       string
		BucketName             string
		DataRedundancy         string
		LifecycleConfiguration string
		LocationName           string
	}{
		BucketEncryption:       "BucketEncryption",
		BucketName:             "BucketName",
		DataRedundancy:         "DataRedundancy",
		LifecycleConfiguration: "LifecycleConfiguration",
		LocationName:           "LocationName",
	}

	// AWS_S3Express_DirectoryBucket__PropertiesSlice reports all the CloudFormation properties for AWS::S3Express::DirectoryBucket.
	AWS_S3Express_DirectoryBucket__PropertiesSlice = []string{
		AWS_S3Express_DirectoryBucket__PropertiesMap.BucketEncryption,
		AWS_S3Express_DirectoryBucket__PropertiesMap.BucketName,
		AWS_S3Express_DirectoryBucket__PropertiesMap.DataRedundancy,
		AWS_S3Express_DirectoryBucket__PropertiesMap.LifecycleConfiguration,
		AWS_S3Express_DirectoryBucket__PropertiesMap.LocationName,
	}
)

// AWS_S3Express_DirectoryBucket is a binding for AWS::S3Express::DirectoryBucket.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3express-directorybucket.html
type AWS_S3Express_DirectoryBucket struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// BucketEncryption is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3express-directorybucket.html#cfn-s3express-directorybucket-bucketencryption
	BucketEncryption cfz.Expression[AWS_S3Express_DirectoryBucket_BucketEncryption] `json:"BucketEncryption,omitempty"`

	// BucketName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3express-directorybucket.html#cfn-s3express-directorybucket-bucketname
	BucketName cfz.Expression[string] `json:"BucketName,omitempty"`

	// DataRedundancy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3express-directorybucket.html#cfn-s3express-directorybucket-dataredundancy
	DataRedundancy cfz.Expression[string] `json:"DataRedundancy,omitempty"`

	// LifecycleConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3express-directorybucket.html#cfn-s3express-directorybucket-lifecycleconfiguration
	LifecycleConfiguration cfz.Expression[AWS_S3Express_DirectoryBucket_LifecycleConfiguration] `json:"LifecycleConfiguration,omitempty"`

	// LocationName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3express-directorybucket.html#cfn-s3express-directorybucket-locationname
	LocationName cfz.Expression[string] `json:"LocationName,omitempty"`
}

// New__AWS_S3Express_DirectoryBucket initializes a new *AWS_S3Express_DirectoryBucket.
func New__AWS_S3Express_DirectoryBucket(logicalName string) *AWS_S3Express_DirectoryBucket {
	return &AWS_S3Express_DirectoryBucket{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_S3Express_DirectoryBucket) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_S3Express_DirectoryBucket) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_S3Express_DirectoryBucket) GetType() string {
	return AWS_S3Express_DirectoryBucket__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_S3Express_DirectoryBucket) Set__LogicalName(v string) *AWS_S3Express_DirectoryBucket {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_S3Express_DirectoryBucket) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_S3Express_DirectoryBucket {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_S3Express_DirectoryBucket) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_S3Express_DirectoryBucket {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_S3Express_DirectoryBucket) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_S3Express_DirectoryBucket {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_S3Express_DirectoryBucket) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_S3Express_DirectoryBucket {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_S3Express_DirectoryBucket) Set__RequestedOutputs(v []cfz.Output) *AWS_S3Express_DirectoryBucket {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_S3Express_DirectoryBucket) Add__RequestedOutputs(v ...cfz.Output) *AWS_S3Express_DirectoryBucket {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__BucketEncryption updates property "BucketEncryption".
func (t *AWS_S3Express_DirectoryBucket) Set__BucketEncryption(v cfz.Expression[AWS_S3Express_DirectoryBucket_BucketEncryption]) *AWS_S3Express_DirectoryBucket {
	t.BucketEncryption = v
	return t
}

// SetV__BucketEncryption updates property "BucketEncryption".
func (t *AWS_S3Express_DirectoryBucket) SetV__BucketEncryption(v AWS_S3Express_DirectoryBucket_BucketEncryption) *AWS_S3Express_DirectoryBucket {
	t.BucketEncryption = cfz.V(v)
	return t
}

// Set__BucketName updates property "BucketName".
func (t *AWS_S3Express_DirectoryBucket) Set__BucketName(v cfz.Expression[string]) *AWS_S3Express_DirectoryBucket {
	t.BucketName = v
	return t
}

// SetV__BucketName updates property "BucketName".
func (t *AWS_S3Express_DirectoryBucket) SetV__BucketName(v string) *AWS_S3Express_DirectoryBucket {
	t.BucketName = cfz.V(v)
	return t
}

// Set__DataRedundancy updates property "DataRedundancy".
func (t *AWS_S3Express_DirectoryBucket) Set__DataRedundancy(v cfz.Expression[string]) *AWS_S3Express_DirectoryBucket {
	t.DataRedundancy = v
	return t
}

// SetV__DataRedundancy updates property "DataRedundancy".
func (t *AWS_S3Express_DirectoryBucket) SetV__DataRedundancy(v string) *AWS_S3Express_DirectoryBucket {
	t.DataRedundancy = cfz.V(v)
	return t
}

// Set__LifecycleConfiguration updates property "LifecycleConfiguration".
func (t *AWS_S3Express_DirectoryBucket) Set__LifecycleConfiguration(v cfz.Expression[AWS_S3Express_DirectoryBucket_LifecycleConfiguration]) *AWS_S3Express_DirectoryBucket {
	t.LifecycleConfiguration = v
	return t
}

// SetV__LifecycleConfiguration updates property "LifecycleConfiguration".
func (t *AWS_S3Express_DirectoryBucket) SetV__LifecycleConfiguration(v AWS_S3Express_DirectoryBucket_LifecycleConfiguration) *AWS_S3Express_DirectoryBucket {
	t.LifecycleConfiguration = cfz.V(v)
	return t
}

// Set__LocationName updates property "LocationName".
func (t *AWS_S3Express_DirectoryBucket) Set__LocationName(v cfz.Expression[string]) *AWS_S3Express_DirectoryBucket {
	t.LocationName = v
	return t
}

// SetV__LocationName updates property "LocationName".
func (t *AWS_S3Express_DirectoryBucket) SetV__LocationName(v string) *AWS_S3Express_DirectoryBucket {
	t.LocationName = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_S3Express_DirectoryBucket) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_S3Express_DirectoryBucket) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_S3Express_DirectoryBucket__AttributesMap.Arn))
}

// GetAtt__AvailabilityZoneName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: AvailabilityZoneName
func (t *AWS_S3Express_DirectoryBucket) GetAtt__AvailabilityZoneName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_S3Express_DirectoryBucket__AttributesMap.AvailabilityZoneName))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_S3Express_DirectoryBucket) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_S3Express_DirectoryBucket) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__AvailabilityZoneName returns a conventionally configured output for an attribute of this resource.
// Attribute: AvailabilityZoneName
func (t *AWS_S3Express_DirectoryBucket) GetConventionalOutputAtt__AvailabilityZoneName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttAvailabilityZoneName", t.GetAtt__AvailabilityZoneName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_S3Express_DirectoryBucket) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_S3Express_DirectoryBucket

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_S3Express_DirectoryBucket) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
