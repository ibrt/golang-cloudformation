// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_securityhub

import (
	"github.com/ibrt/golang-cloudformation/cfz"
)

const (
	// AWS_SecurityHub_Insight_IpFilter__Type is the CloudFormation type for AWS::SecurityHub::Insight.IpFilter.
	AWS_SecurityHub_Insight_IpFilter__Type = "AWS::SecurityHub::Insight.IpFilter"
)

var (
	// AWS_SecurityHub_Insight_IpFilter__PropertiesMap reports all the CloudFormation properties for AWS::SecurityHub::Insight.IpFilter.
	AWS_SecurityHub_Insight_IpFilter__PropertiesMap = struct {
		Cidr string
	}{
		Cidr: "Cidr",
	}

	// AWS_SecurityHub_Insight_IpFilter__PropertiesSlice reports all the CloudFormation properties for AWS::SecurityHub::Insight.IpFilter.
	AWS_SecurityHub_Insight_IpFilter__PropertiesSlice = []string{
		AWS_SecurityHub_Insight_IpFilter__PropertiesMap.Cidr,
	}
)

// AWS_SecurityHub_Insight_IpFilter is a binding for AWS::SecurityHub::Insight.IpFilter.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-insight-ipfilter.html
type AWS_SecurityHub_Insight_IpFilter struct {
	// Cidr is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-insight-ipfilter.html#cfn-securityhub-insight-ipfilter-cidr
	Cidr cfz.Expression[string] `json:"Cidr,omitempty"`
}

// New__AWS_SecurityHub_Insight_IpFilter initializes a new AWS_SecurityHub_Insight_IpFilter.
func New__AWS_SecurityHub_Insight_IpFilter() AWS_SecurityHub_Insight_IpFilter {
	return AWS_SecurityHub_Insight_IpFilter{}
}

// GetType returns the CloudFormation type.
func (AWS_SecurityHub_Insight_IpFilter) GetType() string {
	return AWS_SecurityHub_Insight_IpFilter__Type
}

// Set__Cidr updates property "Cidr".
func (t AWS_SecurityHub_Insight_IpFilter) Set__Cidr(v cfz.Expression[string]) AWS_SecurityHub_Insight_IpFilter {
	t.Cidr = v
	return t
}

// SetV__Cidr updates property "Cidr".
func (t AWS_SecurityHub_Insight_IpFilter) SetV__Cidr(v string) AWS_SecurityHub_Insight_IpFilter {
	t.Cidr = cfz.V(v)
	return t
}
