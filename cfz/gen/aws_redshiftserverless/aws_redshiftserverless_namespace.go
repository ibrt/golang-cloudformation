// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_redshiftserverless

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_RedshiftServerless_Namespace)(nil)
	_ cfz.Resource                   = (*AWS_RedshiftServerless_Namespace)(nil)
)

const (
	// AWS_RedshiftServerless_Namespace__Type is the CloudFormation type for AWS::RedshiftServerless::Namespace.
	AWS_RedshiftServerless_Namespace__Type = "AWS::RedshiftServerless::Namespace"
)

var (
	// AWS_RedshiftServerless_Namespace__AttributesMap reports all the CloudFormation attributes for AWS::RedshiftServerless::Namespace.
	AWS_RedshiftServerless_Namespace__AttributesMap = struct {
		Namespace                             string
		Namespace_AdminPasswordSecretArn      string
		Namespace_AdminPasswordSecretKmsKeyId string
		Namespace_AdminUsername               string
		Namespace_CreationDate                string
		Namespace_DbName                      string
		Namespace_DefaultIamRoleArn           string
		Namespace_IamRoles                    string
		Namespace_KmsKeyId                    string
		Namespace_LogExports                  string
		Namespace_NamespaceArn                string
		Namespace_NamespaceId                 string
		Namespace_NamespaceName               string
		Namespace_Status                      string
	}{
		Namespace:                             "Namespace",
		Namespace_AdminPasswordSecretArn:      "Namespace.AdminPasswordSecretArn",
		Namespace_AdminPasswordSecretKmsKeyId: "Namespace.AdminPasswordSecretKmsKeyId",
		Namespace_AdminUsername:               "Namespace.AdminUsername",
		Namespace_CreationDate:                "Namespace.CreationDate",
		Namespace_DbName:                      "Namespace.DbName",
		Namespace_DefaultIamRoleArn:           "Namespace.DefaultIamRoleArn",
		Namespace_IamRoles:                    "Namespace.IamRoles",
		Namespace_KmsKeyId:                    "Namespace.KmsKeyId",
		Namespace_LogExports:                  "Namespace.LogExports",
		Namespace_NamespaceArn:                "Namespace.NamespaceArn",
		Namespace_NamespaceId:                 "Namespace.NamespaceId",
		Namespace_NamespaceName:               "Namespace.NamespaceName",
		Namespace_Status:                      "Namespace.Status",
	}

	// AWS_RedshiftServerless_Namespace__AttributesSlice reports all the CloudFormation attributes for AWS::RedshiftServerless::Namespace.
	AWS_RedshiftServerless_Namespace__AttributesSlice = []string{
		AWS_RedshiftServerless_Namespace__AttributesMap.Namespace,
		AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_AdminPasswordSecretArn,
		AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_AdminPasswordSecretKmsKeyId,
		AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_AdminUsername,
		AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_CreationDate,
		AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_DbName,
		AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_DefaultIamRoleArn,
		AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_IamRoles,
		AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_KmsKeyId,
		AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_LogExports,
		AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_NamespaceArn,
		AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_NamespaceId,
		AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_NamespaceName,
		AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_Status,
	}
)

var (
	// AWS_RedshiftServerless_Namespace__PropertiesMap reports all the CloudFormation properties for AWS::RedshiftServerless::Namespace.
	AWS_RedshiftServerless_Namespace__PropertiesMap = struct {
		AdminPasswordSecretKmsKeyId  string
		AdminUserPassword            string
		AdminUsername                string
		DbName                       string
		DefaultIamRoleArn            string
		FinalSnapshotName            string
		FinalSnapshotRetentionPeriod string
		IamRoles                     string
		KmsKeyId                     string
		LogExports                   string
		ManageAdminPassword          string
		NamespaceName                string
		NamespaceResourcePolicy      string
		RedshiftIdcApplicationArn    string
		SnapshotCopyConfigurations   string
		Tags                         string
	}{
		AdminPasswordSecretKmsKeyId:  "AdminPasswordSecretKmsKeyId",
		AdminUserPassword:            "AdminUserPassword",
		AdminUsername:                "AdminUsername",
		DbName:                       "DbName",
		DefaultIamRoleArn:            "DefaultIamRoleArn",
		FinalSnapshotName:            "FinalSnapshotName",
		FinalSnapshotRetentionPeriod: "FinalSnapshotRetentionPeriod",
		IamRoles:                     "IamRoles",
		KmsKeyId:                     "KmsKeyId",
		LogExports:                   "LogExports",
		ManageAdminPassword:          "ManageAdminPassword",
		NamespaceName:                "NamespaceName",
		NamespaceResourcePolicy:      "NamespaceResourcePolicy",
		RedshiftIdcApplicationArn:    "RedshiftIdcApplicationArn",
		SnapshotCopyConfigurations:   "SnapshotCopyConfigurations",
		Tags:                         "Tags",
	}

	// AWS_RedshiftServerless_Namespace__PropertiesSlice reports all the CloudFormation properties for AWS::RedshiftServerless::Namespace.
	AWS_RedshiftServerless_Namespace__PropertiesSlice = []string{
		AWS_RedshiftServerless_Namespace__PropertiesMap.AdminPasswordSecretKmsKeyId,
		AWS_RedshiftServerless_Namespace__PropertiesMap.AdminUserPassword,
		AWS_RedshiftServerless_Namespace__PropertiesMap.AdminUsername,
		AWS_RedshiftServerless_Namespace__PropertiesMap.DbName,
		AWS_RedshiftServerless_Namespace__PropertiesMap.DefaultIamRoleArn,
		AWS_RedshiftServerless_Namespace__PropertiesMap.FinalSnapshotName,
		AWS_RedshiftServerless_Namespace__PropertiesMap.FinalSnapshotRetentionPeriod,
		AWS_RedshiftServerless_Namespace__PropertiesMap.IamRoles,
		AWS_RedshiftServerless_Namespace__PropertiesMap.KmsKeyId,
		AWS_RedshiftServerless_Namespace__PropertiesMap.LogExports,
		AWS_RedshiftServerless_Namespace__PropertiesMap.ManageAdminPassword,
		AWS_RedshiftServerless_Namespace__PropertiesMap.NamespaceName,
		AWS_RedshiftServerless_Namespace__PropertiesMap.NamespaceResourcePolicy,
		AWS_RedshiftServerless_Namespace__PropertiesMap.RedshiftIdcApplicationArn,
		AWS_RedshiftServerless_Namespace__PropertiesMap.SnapshotCopyConfigurations,
		AWS_RedshiftServerless_Namespace__PropertiesMap.Tags,
	}
)

// AWS_RedshiftServerless_Namespace is a binding for AWS::RedshiftServerless::Namespace.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html
type AWS_RedshiftServerless_Namespace struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AdminPasswordSecretKmsKeyId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-adminpasswordsecretkmskeyid
	AdminPasswordSecretKmsKeyId cfz.Expression[string] `json:"AdminPasswordSecretKmsKeyId,omitempty"`

	// AdminUserPassword is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-adminuserpassword
	AdminUserPassword cfz.Expression[string] `json:"AdminUserPassword,omitempty"`

	// AdminUsername is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-adminusername
	AdminUsername cfz.Expression[string] `json:"AdminUsername,omitempty"`

	// DbName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-dbname
	DbName cfz.Expression[string] `json:"DbName,omitempty"`

	// DefaultIamRoleArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-defaultiamrolearn
	DefaultIamRoleArn cfz.Expression[string] `json:"DefaultIamRoleArn,omitempty"`

	// FinalSnapshotName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-finalsnapshotname
	FinalSnapshotName cfz.Expression[string] `json:"FinalSnapshotName,omitempty"`

	// FinalSnapshotRetentionPeriod is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-finalsnapshotretentionperiod
	FinalSnapshotRetentionPeriod cfz.Expression[int32] `json:"FinalSnapshotRetentionPeriod,omitempty"`

	// IamRoles is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-iamroles
	IamRoles cfz.ExpressionSlice[string] `json:"IamRoles,omitempty"`

	// KmsKeyId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-kmskeyid
	KmsKeyId cfz.Expression[string] `json:"KmsKeyId,omitempty"`

	// LogExports is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-logexports
	LogExports cfz.ExpressionSlice[string] `json:"LogExports,omitempty"`

	// ManageAdminPassword is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-manageadminpassword
	ManageAdminPassword cfz.Expression[bool] `json:"ManageAdminPassword,omitempty"`

	// NamespaceName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-namespacename
	NamespaceName cfz.Expression[string] `json:"NamespaceName,omitempty"`

	// NamespaceResourcePolicy is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-namespaceresourcepolicy
	NamespaceResourcePolicy cfz.Expression[json.RawMessage] `json:"NamespaceResourcePolicy,omitempty"`

	// RedshiftIdcApplicationArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-redshiftidcapplicationarn
	RedshiftIdcApplicationArn cfz.Expression[string] `json:"RedshiftIdcApplicationArn,omitempty"`

	// SnapshotCopyConfigurations is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-snapshotcopyconfigurations
	SnapshotCopyConfigurations cfz.ExpressionSlice[AWS_RedshiftServerless_Namespace_SnapshotCopyConfiguration] `json:"SnapshotCopyConfigurations,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-namespace.html#cfn-redshiftserverless-namespace-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_RedshiftServerless_Namespace initializes a new *AWS_RedshiftServerless_Namespace.
func New__AWS_RedshiftServerless_Namespace(logicalName string) *AWS_RedshiftServerless_Namespace {
	return &AWS_RedshiftServerless_Namespace{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_RedshiftServerless_Namespace) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_RedshiftServerless_Namespace) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_RedshiftServerless_Namespace) GetType() string {
	return AWS_RedshiftServerless_Namespace__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_RedshiftServerless_Namespace) Set__LogicalName(v string) *AWS_RedshiftServerless_Namespace {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_RedshiftServerless_Namespace) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_RedshiftServerless_Namespace {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_RedshiftServerless_Namespace) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_RedshiftServerless_Namespace {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_RedshiftServerless_Namespace) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_RedshiftServerless_Namespace {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_RedshiftServerless_Namespace) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_RedshiftServerless_Namespace {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_RedshiftServerless_Namespace) Set__RequestedOutputs(v []cfz.Output) *AWS_RedshiftServerless_Namespace {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_RedshiftServerless_Namespace) Add__RequestedOutputs(v ...cfz.Output) *AWS_RedshiftServerless_Namespace {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AdminPasswordSecretKmsKeyId updates property "AdminPasswordSecretKmsKeyId".
func (t *AWS_RedshiftServerless_Namespace) Set__AdminPasswordSecretKmsKeyId(v cfz.Expression[string]) *AWS_RedshiftServerless_Namespace {
	t.AdminPasswordSecretKmsKeyId = v
	return t
}

// SetV__AdminPasswordSecretKmsKeyId updates property "AdminPasswordSecretKmsKeyId".
func (t *AWS_RedshiftServerless_Namespace) SetV__AdminPasswordSecretKmsKeyId(v string) *AWS_RedshiftServerless_Namespace {
	t.AdminPasswordSecretKmsKeyId = cfz.V(v)
	return t
}

// Set__AdminUserPassword updates property "AdminUserPassword".
func (t *AWS_RedshiftServerless_Namespace) Set__AdminUserPassword(v cfz.Expression[string]) *AWS_RedshiftServerless_Namespace {
	t.AdminUserPassword = v
	return t
}

// SetV__AdminUserPassword updates property "AdminUserPassword".
func (t *AWS_RedshiftServerless_Namespace) SetV__AdminUserPassword(v string) *AWS_RedshiftServerless_Namespace {
	t.AdminUserPassword = cfz.V(v)
	return t
}

// Set__AdminUsername updates property "AdminUsername".
func (t *AWS_RedshiftServerless_Namespace) Set__AdminUsername(v cfz.Expression[string]) *AWS_RedshiftServerless_Namespace {
	t.AdminUsername = v
	return t
}

// SetV__AdminUsername updates property "AdminUsername".
func (t *AWS_RedshiftServerless_Namespace) SetV__AdminUsername(v string) *AWS_RedshiftServerless_Namespace {
	t.AdminUsername = cfz.V(v)
	return t
}

// Set__DbName updates property "DbName".
func (t *AWS_RedshiftServerless_Namespace) Set__DbName(v cfz.Expression[string]) *AWS_RedshiftServerless_Namespace {
	t.DbName = v
	return t
}

// SetV__DbName updates property "DbName".
func (t *AWS_RedshiftServerless_Namespace) SetV__DbName(v string) *AWS_RedshiftServerless_Namespace {
	t.DbName = cfz.V(v)
	return t
}

// Set__DefaultIamRoleArn updates property "DefaultIamRoleArn".
func (t *AWS_RedshiftServerless_Namespace) Set__DefaultIamRoleArn(v cfz.Expression[string]) *AWS_RedshiftServerless_Namespace {
	t.DefaultIamRoleArn = v
	return t
}

// SetV__DefaultIamRoleArn updates property "DefaultIamRoleArn".
func (t *AWS_RedshiftServerless_Namespace) SetV__DefaultIamRoleArn(v string) *AWS_RedshiftServerless_Namespace {
	t.DefaultIamRoleArn = cfz.V(v)
	return t
}

// Set__FinalSnapshotName updates property "FinalSnapshotName".
func (t *AWS_RedshiftServerless_Namespace) Set__FinalSnapshotName(v cfz.Expression[string]) *AWS_RedshiftServerless_Namespace {
	t.FinalSnapshotName = v
	return t
}

// SetV__FinalSnapshotName updates property "FinalSnapshotName".
func (t *AWS_RedshiftServerless_Namespace) SetV__FinalSnapshotName(v string) *AWS_RedshiftServerless_Namespace {
	t.FinalSnapshotName = cfz.V(v)
	return t
}

// Set__FinalSnapshotRetentionPeriod updates property "FinalSnapshotRetentionPeriod".
func (t *AWS_RedshiftServerless_Namespace) Set__FinalSnapshotRetentionPeriod(v cfz.Expression[int32]) *AWS_RedshiftServerless_Namespace {
	t.FinalSnapshotRetentionPeriod = v
	return t
}

// SetV__FinalSnapshotRetentionPeriod updates property "FinalSnapshotRetentionPeriod".
func (t *AWS_RedshiftServerless_Namespace) SetV__FinalSnapshotRetentionPeriod(v int32) *AWS_RedshiftServerless_Namespace {
	t.FinalSnapshotRetentionPeriod = cfz.V(v)
	return t
}

// Set__IamRoles updates property "IamRoles".
func (t *AWS_RedshiftServerless_Namespace) Set__IamRoles(v cfz.ExpressionSlice[string]) *AWS_RedshiftServerless_Namespace {
	t.IamRoles = v
	return t
}

// SetS__IamRoles updates property "IamRoles".
func (t *AWS_RedshiftServerless_Namespace) SetS__IamRoles(v ...cfz.Expression[string]) *AWS_RedshiftServerless_Namespace {
	t.IamRoles = cfz.S(v...)
	return t
}

// SetSV__IamRoles updates property "IamRoles".
func (t *AWS_RedshiftServerless_Namespace) SetSV__IamRoles(v ...string) *AWS_RedshiftServerless_Namespace {
	t.IamRoles = cfz.SV(v...)
	return t
}

// Set__KmsKeyId updates property "KmsKeyId".
func (t *AWS_RedshiftServerless_Namespace) Set__KmsKeyId(v cfz.Expression[string]) *AWS_RedshiftServerless_Namespace {
	t.KmsKeyId = v
	return t
}

// SetV__KmsKeyId updates property "KmsKeyId".
func (t *AWS_RedshiftServerless_Namespace) SetV__KmsKeyId(v string) *AWS_RedshiftServerless_Namespace {
	t.KmsKeyId = cfz.V(v)
	return t
}

// Set__LogExports updates property "LogExports".
func (t *AWS_RedshiftServerless_Namespace) Set__LogExports(v cfz.ExpressionSlice[string]) *AWS_RedshiftServerless_Namespace {
	t.LogExports = v
	return t
}

// SetS__LogExports updates property "LogExports".
func (t *AWS_RedshiftServerless_Namespace) SetS__LogExports(v ...cfz.Expression[string]) *AWS_RedshiftServerless_Namespace {
	t.LogExports = cfz.S(v...)
	return t
}

// SetSV__LogExports updates property "LogExports".
func (t *AWS_RedshiftServerless_Namespace) SetSV__LogExports(v ...string) *AWS_RedshiftServerless_Namespace {
	t.LogExports = cfz.SV(v...)
	return t
}

// Set__ManageAdminPassword updates property "ManageAdminPassword".
func (t *AWS_RedshiftServerless_Namespace) Set__ManageAdminPassword(v cfz.Expression[bool]) *AWS_RedshiftServerless_Namespace {
	t.ManageAdminPassword = v
	return t
}

// SetV__ManageAdminPassword updates property "ManageAdminPassword".
func (t *AWS_RedshiftServerless_Namespace) SetV__ManageAdminPassword(v bool) *AWS_RedshiftServerless_Namespace {
	t.ManageAdminPassword = cfz.V(v)
	return t
}

// Set__NamespaceName updates property "NamespaceName".
func (t *AWS_RedshiftServerless_Namespace) Set__NamespaceName(v cfz.Expression[string]) *AWS_RedshiftServerless_Namespace {
	t.NamespaceName = v
	return t
}

// SetV__NamespaceName updates property "NamespaceName".
func (t *AWS_RedshiftServerless_Namespace) SetV__NamespaceName(v string) *AWS_RedshiftServerless_Namespace {
	t.NamespaceName = cfz.V(v)
	return t
}

// Set__NamespaceResourcePolicy updates property "NamespaceResourcePolicy".
func (t *AWS_RedshiftServerless_Namespace) Set__NamespaceResourcePolicy(v cfz.Expression[json.RawMessage]) *AWS_RedshiftServerless_Namespace {
	t.NamespaceResourcePolicy = v
	return t
}

// SetV__NamespaceResourcePolicy updates property "NamespaceResourcePolicy".
func (t *AWS_RedshiftServerless_Namespace) SetV__NamespaceResourcePolicy(v json.RawMessage) *AWS_RedshiftServerless_Namespace {
	t.NamespaceResourcePolicy = cfz.V(v)
	return t
}

// Set__RedshiftIdcApplicationArn updates property "RedshiftIdcApplicationArn".
func (t *AWS_RedshiftServerless_Namespace) Set__RedshiftIdcApplicationArn(v cfz.Expression[string]) *AWS_RedshiftServerless_Namespace {
	t.RedshiftIdcApplicationArn = v
	return t
}

// SetV__RedshiftIdcApplicationArn updates property "RedshiftIdcApplicationArn".
func (t *AWS_RedshiftServerless_Namespace) SetV__RedshiftIdcApplicationArn(v string) *AWS_RedshiftServerless_Namespace {
	t.RedshiftIdcApplicationArn = cfz.V(v)
	return t
}

// Set__SnapshotCopyConfigurations updates property "SnapshotCopyConfigurations".
func (t *AWS_RedshiftServerless_Namespace) Set__SnapshotCopyConfigurations(v cfz.ExpressionSlice[AWS_RedshiftServerless_Namespace_SnapshotCopyConfiguration]) *AWS_RedshiftServerless_Namespace {
	t.SnapshotCopyConfigurations = v
	return t
}

// SetS__SnapshotCopyConfigurations updates property "SnapshotCopyConfigurations".
func (t *AWS_RedshiftServerless_Namespace) SetS__SnapshotCopyConfigurations(v ...cfz.Expression[AWS_RedshiftServerless_Namespace_SnapshotCopyConfiguration]) *AWS_RedshiftServerless_Namespace {
	t.SnapshotCopyConfigurations = cfz.S(v...)
	return t
}

// SetSV__SnapshotCopyConfigurations updates property "SnapshotCopyConfigurations".
func (t *AWS_RedshiftServerless_Namespace) SetSV__SnapshotCopyConfigurations(v ...AWS_RedshiftServerless_Namespace_SnapshotCopyConfiguration) *AWS_RedshiftServerless_Namespace {
	t.SnapshotCopyConfigurations = cfz.SV(v...)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_RedshiftServerless_Namespace) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_RedshiftServerless_Namespace {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_RedshiftServerless_Namespace) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_RedshiftServerless_Namespace {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_RedshiftServerless_Namespace) SetSV__Tags(v ...cfz.Tag) *AWS_RedshiftServerless_Namespace {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_RedshiftServerless_Namespace) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Namespace returns a $cfz.Expression[AWS_RedshiftServerless_Namespace_Namespace] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Namespace
func (t *AWS_RedshiftServerless_Namespace) GetAtt__Namespace() cfz.Expression[AWS_RedshiftServerless_Namespace_Namespace] {
	return cfz.GetAtt[AWS_RedshiftServerless_Namespace_Namespace](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Namespace__AttributesMap.Namespace))
}

// GetAtt__Namespace_AdminPasswordSecretArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Namespace.AdminPasswordSecretArn
func (t *AWS_RedshiftServerless_Namespace) GetAtt__Namespace_AdminPasswordSecretArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_AdminPasswordSecretArn))
}

// GetAtt__Namespace_AdminPasswordSecretKmsKeyId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Namespace.AdminPasswordSecretKmsKeyId
func (t *AWS_RedshiftServerless_Namespace) GetAtt__Namespace_AdminPasswordSecretKmsKeyId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_AdminPasswordSecretKmsKeyId))
}

// GetAtt__Namespace_AdminUsername returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Namespace.AdminUsername
func (t *AWS_RedshiftServerless_Namespace) GetAtt__Namespace_AdminUsername() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_AdminUsername))
}

// GetAtt__Namespace_CreationDate returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Namespace.CreationDate
func (t *AWS_RedshiftServerless_Namespace) GetAtt__Namespace_CreationDate() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_CreationDate))
}

// GetAtt__Namespace_DbName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Namespace.DbName
func (t *AWS_RedshiftServerless_Namespace) GetAtt__Namespace_DbName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_DbName))
}

// GetAtt__Namespace_DefaultIamRoleArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Namespace.DefaultIamRoleArn
func (t *AWS_RedshiftServerless_Namespace) GetAtt__Namespace_DefaultIamRoleArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_DefaultIamRoleArn))
}

// GetAttSlice__Namespace_IamRoles returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Namespace.IamRoles
func (t *AWS_RedshiftServerless_Namespace) GetAttSlice__Namespace_IamRoles() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_IamRoles))
}

// GetAtt__Namespace_KmsKeyId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Namespace.KmsKeyId
func (t *AWS_RedshiftServerless_Namespace) GetAtt__Namespace_KmsKeyId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_KmsKeyId))
}

// GetAttSlice__Namespace_LogExports returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Namespace.LogExports
func (t *AWS_RedshiftServerless_Namespace) GetAttSlice__Namespace_LogExports() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_LogExports))
}

// GetAtt__Namespace_NamespaceArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Namespace.NamespaceArn
func (t *AWS_RedshiftServerless_Namespace) GetAtt__Namespace_NamespaceArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_NamespaceArn))
}

// GetAtt__Namespace_NamespaceId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Namespace.NamespaceId
func (t *AWS_RedshiftServerless_Namespace) GetAtt__Namespace_NamespaceId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_NamespaceId))
}

// GetAtt__Namespace_NamespaceName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Namespace.NamespaceName
func (t *AWS_RedshiftServerless_Namespace) GetAtt__Namespace_NamespaceName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_NamespaceName))
}

// GetAtt__Namespace_Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Namespace.Status
func (t *AWS_RedshiftServerless_Namespace) GetAtt__Namespace_Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Namespace__AttributesMap.Namespace_Status))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_RedshiftServerless_Namespace) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Namespace returns a conventionally configured output for an attribute of this resource.
// Attribute: Namespace
func (t *AWS_RedshiftServerless_Namespace) GetConventionalOutputAtt__Namespace(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNamespace", t.GetAtt__Namespace())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Namespace_AdminPasswordSecretArn returns a conventionally configured output for an attribute of this resource.
// Attribute: Namespace.AdminPasswordSecretArn
func (t *AWS_RedshiftServerless_Namespace) GetConventionalOutputAtt__Namespace_AdminPasswordSecretArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNamespaceAdminPasswordSecretArn", t.GetAtt__Namespace_AdminPasswordSecretArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Namespace_AdminPasswordSecretKmsKeyId returns a conventionally configured output for an attribute of this resource.
// Attribute: Namespace.AdminPasswordSecretKmsKeyId
func (t *AWS_RedshiftServerless_Namespace) GetConventionalOutputAtt__Namespace_AdminPasswordSecretKmsKeyId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNamespaceAdminPasswordSecretKmsKeyId", t.GetAtt__Namespace_AdminPasswordSecretKmsKeyId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Namespace_AdminUsername returns a conventionally configured output for an attribute of this resource.
// Attribute: Namespace.AdminUsername
func (t *AWS_RedshiftServerless_Namespace) GetConventionalOutputAtt__Namespace_AdminUsername(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNamespaceAdminUsername", t.GetAtt__Namespace_AdminUsername())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Namespace_CreationDate returns a conventionally configured output for an attribute of this resource.
// Attribute: Namespace.CreationDate
func (t *AWS_RedshiftServerless_Namespace) GetConventionalOutputAtt__Namespace_CreationDate(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNamespaceCreationDate", t.GetAtt__Namespace_CreationDate())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Namespace_DbName returns a conventionally configured output for an attribute of this resource.
// Attribute: Namespace.DbName
func (t *AWS_RedshiftServerless_Namespace) GetConventionalOutputAtt__Namespace_DbName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNamespaceDbName", t.GetAtt__Namespace_DbName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Namespace_DefaultIamRoleArn returns a conventionally configured output for an attribute of this resource.
// Attribute: Namespace.DefaultIamRoleArn
func (t *AWS_RedshiftServerless_Namespace) GetConventionalOutputAtt__Namespace_DefaultIamRoleArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNamespaceDefaultIamRoleArn", t.GetAtt__Namespace_DefaultIamRoleArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Namespace_IamRoles returns a conventionally configured output for an attribute of this resource.
// Attribute: Namespace.IamRoles
func (t *AWS_RedshiftServerless_Namespace) GetConventionalOutputAtt__Namespace_IamRoles(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNamespaceIamRoles", t.GetAttSlice__Namespace_IamRoles())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Namespace_KmsKeyId returns a conventionally configured output for an attribute of this resource.
// Attribute: Namespace.KmsKeyId
func (t *AWS_RedshiftServerless_Namespace) GetConventionalOutputAtt__Namespace_KmsKeyId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNamespaceKmsKeyId", t.GetAtt__Namespace_KmsKeyId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Namespace_LogExports returns a conventionally configured output for an attribute of this resource.
// Attribute: Namespace.LogExports
func (t *AWS_RedshiftServerless_Namespace) GetConventionalOutputAtt__Namespace_LogExports(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNamespaceLogExports", t.GetAttSlice__Namespace_LogExports())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Namespace_NamespaceArn returns a conventionally configured output for an attribute of this resource.
// Attribute: Namespace.NamespaceArn
func (t *AWS_RedshiftServerless_Namespace) GetConventionalOutputAtt__Namespace_NamespaceArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNamespaceNamespaceArn", t.GetAtt__Namespace_NamespaceArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Namespace_NamespaceId returns a conventionally configured output for an attribute of this resource.
// Attribute: Namespace.NamespaceId
func (t *AWS_RedshiftServerless_Namespace) GetConventionalOutputAtt__Namespace_NamespaceId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNamespaceNamespaceId", t.GetAtt__Namespace_NamespaceId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Namespace_NamespaceName returns a conventionally configured output for an attribute of this resource.
// Attribute: Namespace.NamespaceName
func (t *AWS_RedshiftServerless_Namespace) GetConventionalOutputAtt__Namespace_NamespaceName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNamespaceNamespaceName", t.GetAtt__Namespace_NamespaceName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Namespace_Status returns a conventionally configured output for an attribute of this resource.
// Attribute: Namespace.Status
func (t *AWS_RedshiftServerless_Namespace) GetConventionalOutputAtt__Namespace_Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNamespaceStatus", t.GetAtt__Namespace_Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_RedshiftServerless_Namespace) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_RedshiftServerless_Namespace

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_RedshiftServerless_Namespace) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
