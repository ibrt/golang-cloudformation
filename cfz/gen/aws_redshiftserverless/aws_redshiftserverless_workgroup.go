// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_redshiftserverless

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_RedshiftServerless_Workgroup)(nil)
	_ cfz.Resource                   = (*AWS_RedshiftServerless_Workgroup)(nil)
)

const (
	// AWS_RedshiftServerless_Workgroup__Type is the CloudFormation type for AWS::RedshiftServerless::Workgroup.
	AWS_RedshiftServerless_Workgroup__Type = "AWS::RedshiftServerless::Workgroup"
)

var (
	// AWS_RedshiftServerless_Workgroup__AttributesMap reports all the CloudFormation attributes for AWS::RedshiftServerless::Workgroup.
	AWS_RedshiftServerless_Workgroup__AttributesMap = struct {
		Workgroup                       string
		Workgroup_BaseCapacity          string
		Workgroup_ConfigParameters      string
		Workgroup_CreationDate          string
		Workgroup_Endpoint              string
		Workgroup_Endpoint_Address      string
		Workgroup_Endpoint_Port         string
		Workgroup_Endpoint_VpcEndpoints string
		Workgroup_EnhancedVpcRouting    string
		Workgroup_MaxCapacity           string
		Workgroup_NamespaceName         string
		Workgroup_PubliclyAccessible    string
		Workgroup_SecurityGroupIds      string
		Workgroup_Status                string
		Workgroup_SubnetIds             string
		Workgroup_WorkgroupArn          string
		Workgroup_WorkgroupId           string
		Workgroup_WorkgroupName         string
	}{
		Workgroup:                       "Workgroup",
		Workgroup_BaseCapacity:          "Workgroup.BaseCapacity",
		Workgroup_ConfigParameters:      "Workgroup.ConfigParameters",
		Workgroup_CreationDate:          "Workgroup.CreationDate",
		Workgroup_Endpoint:              "Workgroup.Endpoint",
		Workgroup_Endpoint_Address:      "Workgroup.Endpoint.Address",
		Workgroup_Endpoint_Port:         "Workgroup.Endpoint.Port",
		Workgroup_Endpoint_VpcEndpoints: "Workgroup.Endpoint.VpcEndpoints",
		Workgroup_EnhancedVpcRouting:    "Workgroup.EnhancedVpcRouting",
		Workgroup_MaxCapacity:           "Workgroup.MaxCapacity",
		Workgroup_NamespaceName:         "Workgroup.NamespaceName",
		Workgroup_PubliclyAccessible:    "Workgroup.PubliclyAccessible",
		Workgroup_SecurityGroupIds:      "Workgroup.SecurityGroupIds",
		Workgroup_Status:                "Workgroup.Status",
		Workgroup_SubnetIds:             "Workgroup.SubnetIds",
		Workgroup_WorkgroupArn:          "Workgroup.WorkgroupArn",
		Workgroup_WorkgroupId:           "Workgroup.WorkgroupId",
		Workgroup_WorkgroupName:         "Workgroup.WorkgroupName",
	}

	// AWS_RedshiftServerless_Workgroup__AttributesSlice reports all the CloudFormation attributes for AWS::RedshiftServerless::Workgroup.
	AWS_RedshiftServerless_Workgroup__AttributesSlice = []string{
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_BaseCapacity,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_ConfigParameters,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_CreationDate,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_Endpoint,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_Endpoint_Address,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_Endpoint_Port,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_Endpoint_VpcEndpoints,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_EnhancedVpcRouting,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_MaxCapacity,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_NamespaceName,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_PubliclyAccessible,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_SecurityGroupIds,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_Status,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_SubnetIds,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_WorkgroupArn,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_WorkgroupId,
		AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_WorkgroupName,
	}
)

var (
	// AWS_RedshiftServerless_Workgroup__PropertiesMap reports all the CloudFormation properties for AWS::RedshiftServerless::Workgroup.
	AWS_RedshiftServerless_Workgroup__PropertiesMap = struct {
		BaseCapacity       string
		ConfigParameters   string
		EnhancedVpcRouting string
		MaxCapacity        string
		NamespaceName      string
		Port               string
		PubliclyAccessible string
		SecurityGroupIds   string
		SubnetIds          string
		Tags               string
		WorkgroupName      string
	}{
		BaseCapacity:       "BaseCapacity",
		ConfigParameters:   "ConfigParameters",
		EnhancedVpcRouting: "EnhancedVpcRouting",
		MaxCapacity:        "MaxCapacity",
		NamespaceName:      "NamespaceName",
		Port:               "Port",
		PubliclyAccessible: "PubliclyAccessible",
		SecurityGroupIds:   "SecurityGroupIds",
		SubnetIds:          "SubnetIds",
		Tags:               "Tags",
		WorkgroupName:      "WorkgroupName",
	}

	// AWS_RedshiftServerless_Workgroup__PropertiesSlice reports all the CloudFormation properties for AWS::RedshiftServerless::Workgroup.
	AWS_RedshiftServerless_Workgroup__PropertiesSlice = []string{
		AWS_RedshiftServerless_Workgroup__PropertiesMap.BaseCapacity,
		AWS_RedshiftServerless_Workgroup__PropertiesMap.ConfigParameters,
		AWS_RedshiftServerless_Workgroup__PropertiesMap.EnhancedVpcRouting,
		AWS_RedshiftServerless_Workgroup__PropertiesMap.MaxCapacity,
		AWS_RedshiftServerless_Workgroup__PropertiesMap.NamespaceName,
		AWS_RedshiftServerless_Workgroup__PropertiesMap.Port,
		AWS_RedshiftServerless_Workgroup__PropertiesMap.PubliclyAccessible,
		AWS_RedshiftServerless_Workgroup__PropertiesMap.SecurityGroupIds,
		AWS_RedshiftServerless_Workgroup__PropertiesMap.SubnetIds,
		AWS_RedshiftServerless_Workgroup__PropertiesMap.Tags,
		AWS_RedshiftServerless_Workgroup__PropertiesMap.WorkgroupName,
	}
)

// AWS_RedshiftServerless_Workgroup is a binding for AWS::RedshiftServerless::Workgroup.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-workgroup.html
type AWS_RedshiftServerless_Workgroup struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// BaseCapacity is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-workgroup.html#cfn-redshiftserverless-workgroup-basecapacity
	BaseCapacity cfz.Expression[int32] `json:"BaseCapacity,omitempty"`

	// ConfigParameters is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-workgroup.html#cfn-redshiftserverless-workgroup-configparameters
	ConfigParameters cfz.ExpressionSlice[AWS_RedshiftServerless_Workgroup_ConfigParameter] `json:"ConfigParameters,omitempty"`

	// EnhancedVpcRouting is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-workgroup.html#cfn-redshiftserverless-workgroup-enhancedvpcrouting
	EnhancedVpcRouting cfz.Expression[bool] `json:"EnhancedVpcRouting,omitempty"`

	// MaxCapacity is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-workgroup.html#cfn-redshiftserverless-workgroup-maxcapacity
	MaxCapacity cfz.Expression[int32] `json:"MaxCapacity,omitempty"`

	// NamespaceName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-workgroup.html#cfn-redshiftserverless-workgroup-namespacename
	NamespaceName cfz.Expression[string] `json:"NamespaceName,omitempty"`

	// Port is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-workgroup.html#cfn-redshiftserverless-workgroup-port
	Port cfz.Expression[int32] `json:"Port,omitempty"`

	// PubliclyAccessible is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-workgroup.html#cfn-redshiftserverless-workgroup-publiclyaccessible
	PubliclyAccessible cfz.Expression[bool] `json:"PubliclyAccessible,omitempty"`

	// SecurityGroupIds is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-workgroup.html#cfn-redshiftserverless-workgroup-securitygroupids
	SecurityGroupIds cfz.ExpressionSlice[string] `json:"SecurityGroupIds,omitempty"`

	// SubnetIds is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-workgroup.html#cfn-redshiftserverless-workgroup-subnetids
	SubnetIds cfz.ExpressionSlice[string] `json:"SubnetIds,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-workgroup.html#cfn-redshiftserverless-workgroup-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// WorkgroupName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshiftserverless-workgroup.html#cfn-redshiftserverless-workgroup-workgroupname
	WorkgroupName cfz.Expression[string] `json:"WorkgroupName,omitempty"`
}

// New__AWS_RedshiftServerless_Workgroup initializes a new *AWS_RedshiftServerless_Workgroup.
func New__AWS_RedshiftServerless_Workgroup(logicalName string) *AWS_RedshiftServerless_Workgroup {
	return &AWS_RedshiftServerless_Workgroup{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_RedshiftServerless_Workgroup) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_RedshiftServerless_Workgroup) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_RedshiftServerless_Workgroup) GetType() string {
	return AWS_RedshiftServerless_Workgroup__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_RedshiftServerless_Workgroup) Set__LogicalName(v string) *AWS_RedshiftServerless_Workgroup {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_RedshiftServerless_Workgroup) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_RedshiftServerless_Workgroup {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_RedshiftServerless_Workgroup) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_RedshiftServerless_Workgroup {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_RedshiftServerless_Workgroup) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_RedshiftServerless_Workgroup {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_RedshiftServerless_Workgroup) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_RedshiftServerless_Workgroup {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_RedshiftServerless_Workgroup) Set__RequestedOutputs(v []cfz.Output) *AWS_RedshiftServerless_Workgroup {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_RedshiftServerless_Workgroup) Add__RequestedOutputs(v ...cfz.Output) *AWS_RedshiftServerless_Workgroup {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__BaseCapacity updates property "BaseCapacity".
func (t *AWS_RedshiftServerless_Workgroup) Set__BaseCapacity(v cfz.Expression[int32]) *AWS_RedshiftServerless_Workgroup {
	t.BaseCapacity = v
	return t
}

// SetV__BaseCapacity updates property "BaseCapacity".
func (t *AWS_RedshiftServerless_Workgroup) SetV__BaseCapacity(v int32) *AWS_RedshiftServerless_Workgroup {
	t.BaseCapacity = cfz.V(v)
	return t
}

// Set__ConfigParameters updates property "ConfigParameters".
func (t *AWS_RedshiftServerless_Workgroup) Set__ConfigParameters(v cfz.ExpressionSlice[AWS_RedshiftServerless_Workgroup_ConfigParameter]) *AWS_RedshiftServerless_Workgroup {
	t.ConfigParameters = v
	return t
}

// SetS__ConfigParameters updates property "ConfigParameters".
func (t *AWS_RedshiftServerless_Workgroup) SetS__ConfigParameters(v ...cfz.Expression[AWS_RedshiftServerless_Workgroup_ConfigParameter]) *AWS_RedshiftServerless_Workgroup {
	t.ConfigParameters = cfz.S(v...)
	return t
}

// SetSV__ConfigParameters updates property "ConfigParameters".
func (t *AWS_RedshiftServerless_Workgroup) SetSV__ConfigParameters(v ...AWS_RedshiftServerless_Workgroup_ConfigParameter) *AWS_RedshiftServerless_Workgroup {
	t.ConfigParameters = cfz.SV(v...)
	return t
}

// Set__EnhancedVpcRouting updates property "EnhancedVpcRouting".
func (t *AWS_RedshiftServerless_Workgroup) Set__EnhancedVpcRouting(v cfz.Expression[bool]) *AWS_RedshiftServerless_Workgroup {
	t.EnhancedVpcRouting = v
	return t
}

// SetV__EnhancedVpcRouting updates property "EnhancedVpcRouting".
func (t *AWS_RedshiftServerless_Workgroup) SetV__EnhancedVpcRouting(v bool) *AWS_RedshiftServerless_Workgroup {
	t.EnhancedVpcRouting = cfz.V(v)
	return t
}

// Set__MaxCapacity updates property "MaxCapacity".
func (t *AWS_RedshiftServerless_Workgroup) Set__MaxCapacity(v cfz.Expression[int32]) *AWS_RedshiftServerless_Workgroup {
	t.MaxCapacity = v
	return t
}

// SetV__MaxCapacity updates property "MaxCapacity".
func (t *AWS_RedshiftServerless_Workgroup) SetV__MaxCapacity(v int32) *AWS_RedshiftServerless_Workgroup {
	t.MaxCapacity = cfz.V(v)
	return t
}

// Set__NamespaceName updates property "NamespaceName".
func (t *AWS_RedshiftServerless_Workgroup) Set__NamespaceName(v cfz.Expression[string]) *AWS_RedshiftServerless_Workgroup {
	t.NamespaceName = v
	return t
}

// SetV__NamespaceName updates property "NamespaceName".
func (t *AWS_RedshiftServerless_Workgroup) SetV__NamespaceName(v string) *AWS_RedshiftServerless_Workgroup {
	t.NamespaceName = cfz.V(v)
	return t
}

// Set__Port updates property "Port".
func (t *AWS_RedshiftServerless_Workgroup) Set__Port(v cfz.Expression[int32]) *AWS_RedshiftServerless_Workgroup {
	t.Port = v
	return t
}

// SetV__Port updates property "Port".
func (t *AWS_RedshiftServerless_Workgroup) SetV__Port(v int32) *AWS_RedshiftServerless_Workgroup {
	t.Port = cfz.V(v)
	return t
}

// Set__PubliclyAccessible updates property "PubliclyAccessible".
func (t *AWS_RedshiftServerless_Workgroup) Set__PubliclyAccessible(v cfz.Expression[bool]) *AWS_RedshiftServerless_Workgroup {
	t.PubliclyAccessible = v
	return t
}

// SetV__PubliclyAccessible updates property "PubliclyAccessible".
func (t *AWS_RedshiftServerless_Workgroup) SetV__PubliclyAccessible(v bool) *AWS_RedshiftServerless_Workgroup {
	t.PubliclyAccessible = cfz.V(v)
	return t
}

// Set__SecurityGroupIds updates property "SecurityGroupIds".
func (t *AWS_RedshiftServerless_Workgroup) Set__SecurityGroupIds(v cfz.ExpressionSlice[string]) *AWS_RedshiftServerless_Workgroup {
	t.SecurityGroupIds = v
	return t
}

// SetS__SecurityGroupIds updates property "SecurityGroupIds".
func (t *AWS_RedshiftServerless_Workgroup) SetS__SecurityGroupIds(v ...cfz.Expression[string]) *AWS_RedshiftServerless_Workgroup {
	t.SecurityGroupIds = cfz.S(v...)
	return t
}

// SetSV__SecurityGroupIds updates property "SecurityGroupIds".
func (t *AWS_RedshiftServerless_Workgroup) SetSV__SecurityGroupIds(v ...string) *AWS_RedshiftServerless_Workgroup {
	t.SecurityGroupIds = cfz.SV(v...)
	return t
}

// Set__SubnetIds updates property "SubnetIds".
func (t *AWS_RedshiftServerless_Workgroup) Set__SubnetIds(v cfz.ExpressionSlice[string]) *AWS_RedshiftServerless_Workgroup {
	t.SubnetIds = v
	return t
}

// SetS__SubnetIds updates property "SubnetIds".
func (t *AWS_RedshiftServerless_Workgroup) SetS__SubnetIds(v ...cfz.Expression[string]) *AWS_RedshiftServerless_Workgroup {
	t.SubnetIds = cfz.S(v...)
	return t
}

// SetSV__SubnetIds updates property "SubnetIds".
func (t *AWS_RedshiftServerless_Workgroup) SetSV__SubnetIds(v ...string) *AWS_RedshiftServerless_Workgroup {
	t.SubnetIds = cfz.SV(v...)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_RedshiftServerless_Workgroup) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_RedshiftServerless_Workgroup {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_RedshiftServerless_Workgroup) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_RedshiftServerless_Workgroup {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_RedshiftServerless_Workgroup) SetSV__Tags(v ...cfz.Tag) *AWS_RedshiftServerless_Workgroup {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__WorkgroupName updates property "WorkgroupName".
func (t *AWS_RedshiftServerless_Workgroup) Set__WorkgroupName(v cfz.Expression[string]) *AWS_RedshiftServerless_Workgroup {
	t.WorkgroupName = v
	return t
}

// SetV__WorkgroupName updates property "WorkgroupName".
func (t *AWS_RedshiftServerless_Workgroup) SetV__WorkgroupName(v string) *AWS_RedshiftServerless_Workgroup {
	t.WorkgroupName = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_RedshiftServerless_Workgroup) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Workgroup returns a $cfz.Expression[AWS_RedshiftServerless_Workgroup_Workgroup] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup
func (t *AWS_RedshiftServerless_Workgroup) GetAtt__Workgroup() cfz.Expression[AWS_RedshiftServerless_Workgroup_Workgroup] {
	return cfz.GetAtt[AWS_RedshiftServerless_Workgroup_Workgroup](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup))
}

// GetAtt__Workgroup_BaseCapacity returns a $cfz.Expression[int32] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.BaseCapacity
func (t *AWS_RedshiftServerless_Workgroup) GetAtt__Workgroup_BaseCapacity() cfz.Expression[int32] {
	return cfz.GetAtt[int32](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_BaseCapacity))
}

// GetAttSlice__Workgroup_ConfigParameters returns a $cfz.ExpressionSlice[AWS_RedshiftServerless_Workgroup_ConfigParameter] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.ConfigParameters
func (t *AWS_RedshiftServerless_Workgroup) GetAttSlice__Workgroup_ConfigParameters() cfz.ExpressionSlice[AWS_RedshiftServerless_Workgroup_ConfigParameter] {
	return cfz.GetAttSlice[AWS_RedshiftServerless_Workgroup_ConfigParameter](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_ConfigParameters))
}

// GetAtt__Workgroup_CreationDate returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.CreationDate
func (t *AWS_RedshiftServerless_Workgroup) GetAtt__Workgroup_CreationDate() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_CreationDate))
}

// GetAtt__Workgroup_Endpoint returns a $cfz.Expression[AWS_RedshiftServerless_Workgroup_Endpoint] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.Endpoint
func (t *AWS_RedshiftServerless_Workgroup) GetAtt__Workgroup_Endpoint() cfz.Expression[AWS_RedshiftServerless_Workgroup_Endpoint] {
	return cfz.GetAtt[AWS_RedshiftServerless_Workgroup_Endpoint](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_Endpoint))
}

// GetAtt__Workgroup_Endpoint_Address returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.Endpoint.Address
func (t *AWS_RedshiftServerless_Workgroup) GetAtt__Workgroup_Endpoint_Address() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_Endpoint_Address))
}

// GetAtt__Workgroup_Endpoint_Port returns a $cfz.Expression[int32] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.Endpoint.Port
func (t *AWS_RedshiftServerless_Workgroup) GetAtt__Workgroup_Endpoint_Port() cfz.Expression[int32] {
	return cfz.GetAtt[int32](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_Endpoint_Port))
}

// GetAttSlice__Workgroup_Endpoint_VpcEndpoints returns a $cfz.ExpressionSlice[AWS_RedshiftServerless_Workgroup_VpcEndpoint] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.Endpoint.VpcEndpoints
func (t *AWS_RedshiftServerless_Workgroup) GetAttSlice__Workgroup_Endpoint_VpcEndpoints() cfz.ExpressionSlice[AWS_RedshiftServerless_Workgroup_VpcEndpoint] {
	return cfz.GetAttSlice[AWS_RedshiftServerless_Workgroup_VpcEndpoint](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_Endpoint_VpcEndpoints))
}

// GetAtt__Workgroup_EnhancedVpcRouting returns a $cfz.Expression[bool] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.EnhancedVpcRouting
func (t *AWS_RedshiftServerless_Workgroup) GetAtt__Workgroup_EnhancedVpcRouting() cfz.Expression[bool] {
	return cfz.GetAtt[bool](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_EnhancedVpcRouting))
}

// GetAtt__Workgroup_MaxCapacity returns a $cfz.Expression[int32] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.MaxCapacity
func (t *AWS_RedshiftServerless_Workgroup) GetAtt__Workgroup_MaxCapacity() cfz.Expression[int32] {
	return cfz.GetAtt[int32](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_MaxCapacity))
}

// GetAtt__Workgroup_NamespaceName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.NamespaceName
func (t *AWS_RedshiftServerless_Workgroup) GetAtt__Workgroup_NamespaceName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_NamespaceName))
}

// GetAtt__Workgroup_PubliclyAccessible returns a $cfz.Expression[bool] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.PubliclyAccessible
func (t *AWS_RedshiftServerless_Workgroup) GetAtt__Workgroup_PubliclyAccessible() cfz.Expression[bool] {
	return cfz.GetAtt[bool](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_PubliclyAccessible))
}

// GetAttSlice__Workgroup_SecurityGroupIds returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.SecurityGroupIds
func (t *AWS_RedshiftServerless_Workgroup) GetAttSlice__Workgroup_SecurityGroupIds() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_SecurityGroupIds))
}

// GetAtt__Workgroup_Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.Status
func (t *AWS_RedshiftServerless_Workgroup) GetAtt__Workgroup_Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_Status))
}

// GetAttSlice__Workgroup_SubnetIds returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.SubnetIds
func (t *AWS_RedshiftServerless_Workgroup) GetAttSlice__Workgroup_SubnetIds() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_SubnetIds))
}

// GetAtt__Workgroup_WorkgroupArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.WorkgroupArn
func (t *AWS_RedshiftServerless_Workgroup) GetAtt__Workgroup_WorkgroupArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_WorkgroupArn))
}

// GetAtt__Workgroup_WorkgroupId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.WorkgroupId
func (t *AWS_RedshiftServerless_Workgroup) GetAtt__Workgroup_WorkgroupId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_WorkgroupId))
}

// GetAtt__Workgroup_WorkgroupName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Workgroup.WorkgroupName
func (t *AWS_RedshiftServerless_Workgroup) GetAtt__Workgroup_WorkgroupName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RedshiftServerless_Workgroup__AttributesMap.Workgroup_WorkgroupName))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroup", t.GetAtt__Workgroup())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_BaseCapacity returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.BaseCapacity
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_BaseCapacity(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupBaseCapacity", t.GetAtt__Workgroup_BaseCapacity())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_ConfigParameters returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.ConfigParameters
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_ConfigParameters(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupConfigParameters", t.GetAttSlice__Workgroup_ConfigParameters())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_CreationDate returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.CreationDate
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_CreationDate(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupCreationDate", t.GetAtt__Workgroup_CreationDate())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_Endpoint returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.Endpoint
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_Endpoint(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupEndpoint", t.GetAtt__Workgroup_Endpoint())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_Endpoint_Address returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.Endpoint.Address
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_Endpoint_Address(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupEndpointAddress", t.GetAtt__Workgroup_Endpoint_Address())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_Endpoint_Port returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.Endpoint.Port
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_Endpoint_Port(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupEndpointPort", t.GetAtt__Workgroup_Endpoint_Port())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_Endpoint_VpcEndpoints returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.Endpoint.VpcEndpoints
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_Endpoint_VpcEndpoints(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupEndpointVpcEndpoints", t.GetAttSlice__Workgroup_Endpoint_VpcEndpoints())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_EnhancedVpcRouting returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.EnhancedVpcRouting
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_EnhancedVpcRouting(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupEnhancedVpcRouting", t.GetAtt__Workgroup_EnhancedVpcRouting())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_MaxCapacity returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.MaxCapacity
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_MaxCapacity(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupMaxCapacity", t.GetAtt__Workgroup_MaxCapacity())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_NamespaceName returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.NamespaceName
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_NamespaceName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupNamespaceName", t.GetAtt__Workgroup_NamespaceName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_PubliclyAccessible returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.PubliclyAccessible
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_PubliclyAccessible(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupPubliclyAccessible", t.GetAtt__Workgroup_PubliclyAccessible())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_SecurityGroupIds returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.SecurityGroupIds
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_SecurityGroupIds(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupSecurityGroupIds", t.GetAttSlice__Workgroup_SecurityGroupIds())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_Status returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.Status
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupStatus", t.GetAtt__Workgroup_Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_SubnetIds returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.SubnetIds
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_SubnetIds(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupSubnetIds", t.GetAttSlice__Workgroup_SubnetIds())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_WorkgroupArn returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.WorkgroupArn
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_WorkgroupArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupWorkgroupArn", t.GetAtt__Workgroup_WorkgroupArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_WorkgroupId returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.WorkgroupId
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_WorkgroupId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupWorkgroupId", t.GetAtt__Workgroup_WorkgroupId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Workgroup_WorkgroupName returns a conventionally configured output for an attribute of this resource.
// Attribute: Workgroup.WorkgroupName
func (t *AWS_RedshiftServerless_Workgroup) GetConventionalOutputAtt__Workgroup_WorkgroupName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWorkgroupWorkgroupName", t.GetAtt__Workgroup_WorkgroupName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_RedshiftServerless_Workgroup) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_RedshiftServerless_Workgroup

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_RedshiftServerless_Workgroup) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
