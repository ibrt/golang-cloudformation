// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_entityresolution

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_EntityResolution_SchemaMapping)(nil)
	_ cfz.Resource                   = (*AWS_EntityResolution_SchemaMapping)(nil)
)

const (
	// AWS_EntityResolution_SchemaMapping__Type is the CloudFormation type for AWS::EntityResolution::SchemaMapping.
	AWS_EntityResolution_SchemaMapping__Type = "AWS::EntityResolution::SchemaMapping"
)

var (
	// AWS_EntityResolution_SchemaMapping__AttributesMap reports all the CloudFormation attributes for AWS::EntityResolution::SchemaMapping.
	AWS_EntityResolution_SchemaMapping__AttributesMap = struct {
		CreatedAt    string
		HasWorkflows string
		SchemaArn    string
		UpdatedAt    string
	}{
		CreatedAt:    "CreatedAt",
		HasWorkflows: "HasWorkflows",
		SchemaArn:    "SchemaArn",
		UpdatedAt:    "UpdatedAt",
	}

	// AWS_EntityResolution_SchemaMapping__AttributesSlice reports all the CloudFormation attributes for AWS::EntityResolution::SchemaMapping.
	AWS_EntityResolution_SchemaMapping__AttributesSlice = []string{
		AWS_EntityResolution_SchemaMapping__AttributesMap.CreatedAt,
		AWS_EntityResolution_SchemaMapping__AttributesMap.HasWorkflows,
		AWS_EntityResolution_SchemaMapping__AttributesMap.SchemaArn,
		AWS_EntityResolution_SchemaMapping__AttributesMap.UpdatedAt,
	}
)

var (
	// AWS_EntityResolution_SchemaMapping__PropertiesMap reports all the CloudFormation properties for AWS::EntityResolution::SchemaMapping.
	AWS_EntityResolution_SchemaMapping__PropertiesMap = struct {
		Description       string
		MappedInputFields string
		SchemaName        string
		Tags              string
	}{
		Description:       "Description",
		MappedInputFields: "MappedInputFields",
		SchemaName:        "SchemaName",
		Tags:              "Tags",
	}

	// AWS_EntityResolution_SchemaMapping__PropertiesSlice reports all the CloudFormation properties for AWS::EntityResolution::SchemaMapping.
	AWS_EntityResolution_SchemaMapping__PropertiesSlice = []string{
		AWS_EntityResolution_SchemaMapping__PropertiesMap.Description,
		AWS_EntityResolution_SchemaMapping__PropertiesMap.MappedInputFields,
		AWS_EntityResolution_SchemaMapping__PropertiesMap.SchemaName,
		AWS_EntityResolution_SchemaMapping__PropertiesMap.Tags,
	}
)

// AWS_EntityResolution_SchemaMapping is a binding for AWS::EntityResolution::SchemaMapping.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-entityresolution-schemamapping.html
type AWS_EntityResolution_SchemaMapping struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-entityresolution-schemamapping.html#cfn-entityresolution-schemamapping-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// MappedInputFields is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-entityresolution-schemamapping.html#cfn-entityresolution-schemamapping-mappedinputfields
	MappedInputFields cfz.ExpressionSlice[AWS_EntityResolution_SchemaMapping_SchemaInputAttribute] `json:"MappedInputFields,omitempty"`

	// SchemaName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-entityresolution-schemamapping.html#cfn-entityresolution-schemamapping-schemaname
	SchemaName cfz.Expression[string] `json:"SchemaName,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-entityresolution-schemamapping.html#cfn-entityresolution-schemamapping-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_EntityResolution_SchemaMapping initializes a new *AWS_EntityResolution_SchemaMapping.
func New__AWS_EntityResolution_SchemaMapping(logicalName string) *AWS_EntityResolution_SchemaMapping {
	return &AWS_EntityResolution_SchemaMapping{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_EntityResolution_SchemaMapping) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_EntityResolution_SchemaMapping) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_EntityResolution_SchemaMapping) GetType() string {
	return AWS_EntityResolution_SchemaMapping__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_EntityResolution_SchemaMapping) Set__LogicalName(v string) *AWS_EntityResolution_SchemaMapping {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_EntityResolution_SchemaMapping) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_EntityResolution_SchemaMapping {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_EntityResolution_SchemaMapping) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_EntityResolution_SchemaMapping {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_EntityResolution_SchemaMapping) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_EntityResolution_SchemaMapping {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_EntityResolution_SchemaMapping) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_EntityResolution_SchemaMapping {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_EntityResolution_SchemaMapping) Set__RequestedOutputs(v []cfz.Output) *AWS_EntityResolution_SchemaMapping {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_EntityResolution_SchemaMapping) Add__RequestedOutputs(v ...cfz.Output) *AWS_EntityResolution_SchemaMapping {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_EntityResolution_SchemaMapping) Set__Description(v cfz.Expression[string]) *AWS_EntityResolution_SchemaMapping {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_EntityResolution_SchemaMapping) SetV__Description(v string) *AWS_EntityResolution_SchemaMapping {
	t.Description = cfz.V(v)
	return t
}

// Set__MappedInputFields updates property "MappedInputFields".
func (t *AWS_EntityResolution_SchemaMapping) Set__MappedInputFields(v cfz.ExpressionSlice[AWS_EntityResolution_SchemaMapping_SchemaInputAttribute]) *AWS_EntityResolution_SchemaMapping {
	t.MappedInputFields = v
	return t
}

// SetS__MappedInputFields updates property "MappedInputFields".
func (t *AWS_EntityResolution_SchemaMapping) SetS__MappedInputFields(v ...cfz.Expression[AWS_EntityResolution_SchemaMapping_SchemaInputAttribute]) *AWS_EntityResolution_SchemaMapping {
	t.MappedInputFields = cfz.S(v...)
	return t
}

// SetSV__MappedInputFields updates property "MappedInputFields".
func (t *AWS_EntityResolution_SchemaMapping) SetSV__MappedInputFields(v ...AWS_EntityResolution_SchemaMapping_SchemaInputAttribute) *AWS_EntityResolution_SchemaMapping {
	t.MappedInputFields = cfz.SV(v...)
	return t
}

// Set__SchemaName updates property "SchemaName".
func (t *AWS_EntityResolution_SchemaMapping) Set__SchemaName(v cfz.Expression[string]) *AWS_EntityResolution_SchemaMapping {
	t.SchemaName = v
	return t
}

// SetV__SchemaName updates property "SchemaName".
func (t *AWS_EntityResolution_SchemaMapping) SetV__SchemaName(v string) *AWS_EntityResolution_SchemaMapping {
	t.SchemaName = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_EntityResolution_SchemaMapping) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_EntityResolution_SchemaMapping {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_EntityResolution_SchemaMapping) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_EntityResolution_SchemaMapping {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_EntityResolution_SchemaMapping) SetSV__Tags(v ...cfz.Tag) *AWS_EntityResolution_SchemaMapping {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_EntityResolution_SchemaMapping) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__CreatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreatedAt
func (t *AWS_EntityResolution_SchemaMapping) GetAtt__CreatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EntityResolution_SchemaMapping__AttributesMap.CreatedAt))
}

// GetAtt__HasWorkflows returns a $cfz.Expression[bool] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: HasWorkflows
func (t *AWS_EntityResolution_SchemaMapping) GetAtt__HasWorkflows() cfz.Expression[bool] {
	return cfz.GetAtt[bool](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EntityResolution_SchemaMapping__AttributesMap.HasWorkflows))
}

// GetAtt__SchemaArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: SchemaArn
func (t *AWS_EntityResolution_SchemaMapping) GetAtt__SchemaArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EntityResolution_SchemaMapping__AttributesMap.SchemaArn))
}

// GetAtt__UpdatedAt returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: UpdatedAt
func (t *AWS_EntityResolution_SchemaMapping) GetAtt__UpdatedAt() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_EntityResolution_SchemaMapping__AttributesMap.UpdatedAt))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_EntityResolution_SchemaMapping) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: CreatedAt
func (t *AWS_EntityResolution_SchemaMapping) GetConventionalOutputAtt__CreatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreatedAt", t.GetAtt__CreatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__HasWorkflows returns a conventionally configured output for an attribute of this resource.
// Attribute: HasWorkflows
func (t *AWS_EntityResolution_SchemaMapping) GetConventionalOutputAtt__HasWorkflows(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttHasWorkflows", t.GetAtt__HasWorkflows())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__SchemaArn returns a conventionally configured output for an attribute of this resource.
// Attribute: SchemaArn
func (t *AWS_EntityResolution_SchemaMapping) GetConventionalOutputAtt__SchemaArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSchemaArn", t.GetAtt__SchemaArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__UpdatedAt returns a conventionally configured output for an attribute of this resource.
// Attribute: UpdatedAt
func (t *AWS_EntityResolution_SchemaMapping) GetConventionalOutputAtt__UpdatedAt(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttUpdatedAt", t.GetAtt__UpdatedAt())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_EntityResolution_SchemaMapping) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_EntityResolution_SchemaMapping

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_EntityResolution_SchemaMapping) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
