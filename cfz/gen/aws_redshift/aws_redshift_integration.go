// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_redshift

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Redshift_Integration)(nil)
	_ cfz.Resource                   = (*AWS_Redshift_Integration)(nil)
)

const (
	// AWS_Redshift_Integration__Type is the CloudFormation type for AWS::Redshift::Integration.
	AWS_Redshift_Integration__Type = "AWS::Redshift::Integration"
)

var (
	// AWS_Redshift_Integration__AttributesMap reports all the CloudFormation attributes for AWS::Redshift::Integration.
	AWS_Redshift_Integration__AttributesMap = struct {
		CreateTime     string
		IntegrationArn string
	}{
		CreateTime:     "CreateTime",
		IntegrationArn: "IntegrationArn",
	}

	// AWS_Redshift_Integration__AttributesSlice reports all the CloudFormation attributes for AWS::Redshift::Integration.
	AWS_Redshift_Integration__AttributesSlice = []string{
		AWS_Redshift_Integration__AttributesMap.CreateTime,
		AWS_Redshift_Integration__AttributesMap.IntegrationArn,
	}
)

var (
	// AWS_Redshift_Integration__PropertiesMap reports all the CloudFormation properties for AWS::Redshift::Integration.
	AWS_Redshift_Integration__PropertiesMap = struct {
		AdditionalEncryptionContext string
		IntegrationName             string
		KMSKeyId                    string
		SourceArn                   string
		Tags                        string
		TargetArn                   string
	}{
		AdditionalEncryptionContext: "AdditionalEncryptionContext",
		IntegrationName:             "IntegrationName",
		KMSKeyId:                    "KMSKeyId",
		SourceArn:                   "SourceArn",
		Tags:                        "Tags",
		TargetArn:                   "TargetArn",
	}

	// AWS_Redshift_Integration__PropertiesSlice reports all the CloudFormation properties for AWS::Redshift::Integration.
	AWS_Redshift_Integration__PropertiesSlice = []string{
		AWS_Redshift_Integration__PropertiesMap.AdditionalEncryptionContext,
		AWS_Redshift_Integration__PropertiesMap.IntegrationName,
		AWS_Redshift_Integration__PropertiesMap.KMSKeyId,
		AWS_Redshift_Integration__PropertiesMap.SourceArn,
		AWS_Redshift_Integration__PropertiesMap.Tags,
		AWS_Redshift_Integration__PropertiesMap.TargetArn,
	}
)

// AWS_Redshift_Integration is a binding for AWS::Redshift::Integration.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-integration.html
type AWS_Redshift_Integration struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AdditionalEncryptionContext is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-integration.html#cfn-redshift-integration-additionalencryptioncontext
	AdditionalEncryptionContext cfz.ExpressionMap[string] `json:"AdditionalEncryptionContext,omitempty"`

	// IntegrationName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-integration.html#cfn-redshift-integration-integrationname
	IntegrationName cfz.Expression[string] `json:"IntegrationName,omitempty"`

	// KMSKeyId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-integration.html#cfn-redshift-integration-kmskeyid
	KMSKeyId cfz.Expression[string] `json:"KMSKeyId,omitempty"`

	// SourceArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-integration.html#cfn-redshift-integration-sourcearn
	SourceArn cfz.Expression[string] `json:"SourceArn,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-integration.html#cfn-redshift-integration-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// TargetArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-integration.html#cfn-redshift-integration-targetarn
	TargetArn cfz.Expression[string] `json:"TargetArn,omitempty"`
}

// New__AWS_Redshift_Integration initializes a new *AWS_Redshift_Integration.
func New__AWS_Redshift_Integration(logicalName string) *AWS_Redshift_Integration {
	return &AWS_Redshift_Integration{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Redshift_Integration) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Redshift_Integration) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Redshift_Integration) GetType() string {
	return AWS_Redshift_Integration__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Redshift_Integration) Set__LogicalName(v string) *AWS_Redshift_Integration {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Redshift_Integration) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Redshift_Integration {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Redshift_Integration) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Redshift_Integration {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Redshift_Integration) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Redshift_Integration {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Redshift_Integration) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Redshift_Integration {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Redshift_Integration) Set__RequestedOutputs(v []cfz.Output) *AWS_Redshift_Integration {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Redshift_Integration) Add__RequestedOutputs(v ...cfz.Output) *AWS_Redshift_Integration {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AdditionalEncryptionContext updates property "AdditionalEncryptionContext".
func (t *AWS_Redshift_Integration) Set__AdditionalEncryptionContext(v cfz.ExpressionMap[string]) *AWS_Redshift_Integration {
	t.AdditionalEncryptionContext = v
	return t
}

// SetM__AdditionalEncryptionContext updates property "AdditionalEncryptionContext".
func (t *AWS_Redshift_Integration) SetM__AdditionalEncryptionContext(v ...map[string]cfz.Expression[string]) *AWS_Redshift_Integration {
	t.AdditionalEncryptionContext = cfz.M(v...)
	return t
}

// SetMV__AdditionalEncryptionContext updates property "AdditionalEncryptionContext".
func (t *AWS_Redshift_Integration) SetMV__AdditionalEncryptionContext(v ...map[string]string) *AWS_Redshift_Integration {
	t.AdditionalEncryptionContext = cfz.MV(v...)
	return t
}

// Set__IntegrationName updates property "IntegrationName".
func (t *AWS_Redshift_Integration) Set__IntegrationName(v cfz.Expression[string]) *AWS_Redshift_Integration {
	t.IntegrationName = v
	return t
}

// SetV__IntegrationName updates property "IntegrationName".
func (t *AWS_Redshift_Integration) SetV__IntegrationName(v string) *AWS_Redshift_Integration {
	t.IntegrationName = cfz.V(v)
	return t
}

// Set__KMSKeyId updates property "KMSKeyId".
func (t *AWS_Redshift_Integration) Set__KMSKeyId(v cfz.Expression[string]) *AWS_Redshift_Integration {
	t.KMSKeyId = v
	return t
}

// SetV__KMSKeyId updates property "KMSKeyId".
func (t *AWS_Redshift_Integration) SetV__KMSKeyId(v string) *AWS_Redshift_Integration {
	t.KMSKeyId = cfz.V(v)
	return t
}

// Set__SourceArn updates property "SourceArn".
func (t *AWS_Redshift_Integration) Set__SourceArn(v cfz.Expression[string]) *AWS_Redshift_Integration {
	t.SourceArn = v
	return t
}

// SetV__SourceArn updates property "SourceArn".
func (t *AWS_Redshift_Integration) SetV__SourceArn(v string) *AWS_Redshift_Integration {
	t.SourceArn = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_Redshift_Integration) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_Redshift_Integration {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_Redshift_Integration) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_Redshift_Integration {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_Redshift_Integration) SetSV__Tags(v ...cfz.Tag) *AWS_Redshift_Integration {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__TargetArn updates property "TargetArn".
func (t *AWS_Redshift_Integration) Set__TargetArn(v cfz.Expression[string]) *AWS_Redshift_Integration {
	t.TargetArn = v
	return t
}

// SetV__TargetArn updates property "TargetArn".
func (t *AWS_Redshift_Integration) SetV__TargetArn(v string) *AWS_Redshift_Integration {
	t.TargetArn = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Redshift_Integration) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__CreateTime returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CreateTime
func (t *AWS_Redshift_Integration) GetAtt__CreateTime() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Redshift_Integration__AttributesMap.CreateTime))
}

// GetAtt__IntegrationArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: IntegrationArn
func (t *AWS_Redshift_Integration) GetAtt__IntegrationArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Redshift_Integration__AttributesMap.IntegrationArn))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Redshift_Integration) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CreateTime returns a conventionally configured output for an attribute of this resource.
// Attribute: CreateTime
func (t *AWS_Redshift_Integration) GetConventionalOutputAtt__CreateTime(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCreateTime", t.GetAtt__CreateTime())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__IntegrationArn returns a conventionally configured output for an attribute of this resource.
// Attribute: IntegrationArn
func (t *AWS_Redshift_Integration) GetConventionalOutputAtt__IntegrationArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIntegrationArn", t.GetAtt__IntegrationArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Redshift_Integration) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Redshift_Integration

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Redshift_Integration) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
