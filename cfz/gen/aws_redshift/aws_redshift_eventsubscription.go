// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_redshift

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Redshift_EventSubscription)(nil)
	_ cfz.Resource                   = (*AWS_Redshift_EventSubscription)(nil)
)

const (
	// AWS_Redshift_EventSubscription__Type is the CloudFormation type for AWS::Redshift::EventSubscription.
	AWS_Redshift_EventSubscription__Type = "AWS::Redshift::EventSubscription"
)

var (
	// AWS_Redshift_EventSubscription__AttributesMap reports all the CloudFormation attributes for AWS::Redshift::EventSubscription.
	AWS_Redshift_EventSubscription__AttributesMap = struct {
		CustSubscriptionId       string
		CustomerAwsId            string
		EventCategoriesList      string
		SourceIdsList            string
		Status                   string
		SubscriptionCreationTime string
	}{
		CustSubscriptionId:       "CustSubscriptionId",
		CustomerAwsId:            "CustomerAwsId",
		EventCategoriesList:      "EventCategoriesList",
		SourceIdsList:            "SourceIdsList",
		Status:                   "Status",
		SubscriptionCreationTime: "SubscriptionCreationTime",
	}

	// AWS_Redshift_EventSubscription__AttributesSlice reports all the CloudFormation attributes for AWS::Redshift::EventSubscription.
	AWS_Redshift_EventSubscription__AttributesSlice = []string{
		AWS_Redshift_EventSubscription__AttributesMap.CustSubscriptionId,
		AWS_Redshift_EventSubscription__AttributesMap.CustomerAwsId,
		AWS_Redshift_EventSubscription__AttributesMap.EventCategoriesList,
		AWS_Redshift_EventSubscription__AttributesMap.SourceIdsList,
		AWS_Redshift_EventSubscription__AttributesMap.Status,
		AWS_Redshift_EventSubscription__AttributesMap.SubscriptionCreationTime,
	}
)

var (
	// AWS_Redshift_EventSubscription__PropertiesMap reports all the CloudFormation properties for AWS::Redshift::EventSubscription.
	AWS_Redshift_EventSubscription__PropertiesMap = struct {
		Enabled          string
		EventCategories  string
		Severity         string
		SnsTopicArn      string
		SourceIds        string
		SourceType       string
		SubscriptionName string
		Tags             string
	}{
		Enabled:          "Enabled",
		EventCategories:  "EventCategories",
		Severity:         "Severity",
		SnsTopicArn:      "SnsTopicArn",
		SourceIds:        "SourceIds",
		SourceType:       "SourceType",
		SubscriptionName: "SubscriptionName",
		Tags:             "Tags",
	}

	// AWS_Redshift_EventSubscription__PropertiesSlice reports all the CloudFormation properties for AWS::Redshift::EventSubscription.
	AWS_Redshift_EventSubscription__PropertiesSlice = []string{
		AWS_Redshift_EventSubscription__PropertiesMap.Enabled,
		AWS_Redshift_EventSubscription__PropertiesMap.EventCategories,
		AWS_Redshift_EventSubscription__PropertiesMap.Severity,
		AWS_Redshift_EventSubscription__PropertiesMap.SnsTopicArn,
		AWS_Redshift_EventSubscription__PropertiesMap.SourceIds,
		AWS_Redshift_EventSubscription__PropertiesMap.SourceType,
		AWS_Redshift_EventSubscription__PropertiesMap.SubscriptionName,
		AWS_Redshift_EventSubscription__PropertiesMap.Tags,
	}
)

// AWS_Redshift_EventSubscription is a binding for AWS::Redshift::EventSubscription.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-eventsubscription.html
type AWS_Redshift_EventSubscription struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Enabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-eventsubscription.html#cfn-redshift-eventsubscription-enabled
	Enabled cfz.Expression[bool] `json:"Enabled,omitempty"`

	// EventCategories is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-eventsubscription.html#cfn-redshift-eventsubscription-eventcategories
	EventCategories cfz.ExpressionSlice[string] `json:"EventCategories,omitempty"`

	// Severity is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-eventsubscription.html#cfn-redshift-eventsubscription-severity
	Severity cfz.Expression[string] `json:"Severity,omitempty"`

	// SnsTopicArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-eventsubscription.html#cfn-redshift-eventsubscription-snstopicarn
	SnsTopicArn cfz.Expression[string] `json:"SnsTopicArn,omitempty"`

	// SourceIds is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-eventsubscription.html#cfn-redshift-eventsubscription-sourceids
	SourceIds cfz.ExpressionSlice[string] `json:"SourceIds,omitempty"`

	// SourceType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-eventsubscription.html#cfn-redshift-eventsubscription-sourcetype
	SourceType cfz.Expression[string] `json:"SourceType,omitempty"`

	// SubscriptionName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-eventsubscription.html#cfn-redshift-eventsubscription-subscriptionname
	SubscriptionName cfz.Expression[string] `json:"SubscriptionName,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-eventsubscription.html#cfn-redshift-eventsubscription-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_Redshift_EventSubscription initializes a new *AWS_Redshift_EventSubscription.
func New__AWS_Redshift_EventSubscription(logicalName string) *AWS_Redshift_EventSubscription {
	return &AWS_Redshift_EventSubscription{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Redshift_EventSubscription) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Redshift_EventSubscription) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Redshift_EventSubscription) GetType() string {
	return AWS_Redshift_EventSubscription__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Redshift_EventSubscription) Set__LogicalName(v string) *AWS_Redshift_EventSubscription {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Redshift_EventSubscription) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Redshift_EventSubscription {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Redshift_EventSubscription) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Redshift_EventSubscription {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Redshift_EventSubscription) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Redshift_EventSubscription {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Redshift_EventSubscription) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Redshift_EventSubscription {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Redshift_EventSubscription) Set__RequestedOutputs(v []cfz.Output) *AWS_Redshift_EventSubscription {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Redshift_EventSubscription) Add__RequestedOutputs(v ...cfz.Output) *AWS_Redshift_EventSubscription {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Enabled updates property "Enabled".
func (t *AWS_Redshift_EventSubscription) Set__Enabled(v cfz.Expression[bool]) *AWS_Redshift_EventSubscription {
	t.Enabled = v
	return t
}

// SetV__Enabled updates property "Enabled".
func (t *AWS_Redshift_EventSubscription) SetV__Enabled(v bool) *AWS_Redshift_EventSubscription {
	t.Enabled = cfz.V(v)
	return t
}

// Set__EventCategories updates property "EventCategories".
func (t *AWS_Redshift_EventSubscription) Set__EventCategories(v cfz.ExpressionSlice[string]) *AWS_Redshift_EventSubscription {
	t.EventCategories = v
	return t
}

// SetS__EventCategories updates property "EventCategories".
func (t *AWS_Redshift_EventSubscription) SetS__EventCategories(v ...cfz.Expression[string]) *AWS_Redshift_EventSubscription {
	t.EventCategories = cfz.S(v...)
	return t
}

// SetSV__EventCategories updates property "EventCategories".
func (t *AWS_Redshift_EventSubscription) SetSV__EventCategories(v ...string) *AWS_Redshift_EventSubscription {
	t.EventCategories = cfz.SV(v...)
	return t
}

// Set__Severity updates property "Severity".
func (t *AWS_Redshift_EventSubscription) Set__Severity(v cfz.Expression[string]) *AWS_Redshift_EventSubscription {
	t.Severity = v
	return t
}

// SetV__Severity updates property "Severity".
func (t *AWS_Redshift_EventSubscription) SetV__Severity(v string) *AWS_Redshift_EventSubscription {
	t.Severity = cfz.V(v)
	return t
}

// Set__SnsTopicArn updates property "SnsTopicArn".
func (t *AWS_Redshift_EventSubscription) Set__SnsTopicArn(v cfz.Expression[string]) *AWS_Redshift_EventSubscription {
	t.SnsTopicArn = v
	return t
}

// SetV__SnsTopicArn updates property "SnsTopicArn".
func (t *AWS_Redshift_EventSubscription) SetV__SnsTopicArn(v string) *AWS_Redshift_EventSubscription {
	t.SnsTopicArn = cfz.V(v)
	return t
}

// Set__SourceIds updates property "SourceIds".
func (t *AWS_Redshift_EventSubscription) Set__SourceIds(v cfz.ExpressionSlice[string]) *AWS_Redshift_EventSubscription {
	t.SourceIds = v
	return t
}

// SetS__SourceIds updates property "SourceIds".
func (t *AWS_Redshift_EventSubscription) SetS__SourceIds(v ...cfz.Expression[string]) *AWS_Redshift_EventSubscription {
	t.SourceIds = cfz.S(v...)
	return t
}

// SetSV__SourceIds updates property "SourceIds".
func (t *AWS_Redshift_EventSubscription) SetSV__SourceIds(v ...string) *AWS_Redshift_EventSubscription {
	t.SourceIds = cfz.SV(v...)
	return t
}

// Set__SourceType updates property "SourceType".
func (t *AWS_Redshift_EventSubscription) Set__SourceType(v cfz.Expression[string]) *AWS_Redshift_EventSubscription {
	t.SourceType = v
	return t
}

// SetV__SourceType updates property "SourceType".
func (t *AWS_Redshift_EventSubscription) SetV__SourceType(v string) *AWS_Redshift_EventSubscription {
	t.SourceType = cfz.V(v)
	return t
}

// Set__SubscriptionName updates property "SubscriptionName".
func (t *AWS_Redshift_EventSubscription) Set__SubscriptionName(v cfz.Expression[string]) *AWS_Redshift_EventSubscription {
	t.SubscriptionName = v
	return t
}

// SetV__SubscriptionName updates property "SubscriptionName".
func (t *AWS_Redshift_EventSubscription) SetV__SubscriptionName(v string) *AWS_Redshift_EventSubscription {
	t.SubscriptionName = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_Redshift_EventSubscription) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_Redshift_EventSubscription {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_Redshift_EventSubscription) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_Redshift_EventSubscription {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_Redshift_EventSubscription) SetSV__Tags(v ...cfz.Tag) *AWS_Redshift_EventSubscription {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Redshift_EventSubscription) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__CustSubscriptionId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CustSubscriptionId
func (t *AWS_Redshift_EventSubscription) GetAtt__CustSubscriptionId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Redshift_EventSubscription__AttributesMap.CustSubscriptionId))
}

// GetAtt__CustomerAwsId returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: CustomerAwsId
func (t *AWS_Redshift_EventSubscription) GetAtt__CustomerAwsId() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Redshift_EventSubscription__AttributesMap.CustomerAwsId))
}

// GetAttSlice__EventCategoriesList returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: EventCategoriesList
func (t *AWS_Redshift_EventSubscription) GetAttSlice__EventCategoriesList() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Redshift_EventSubscription__AttributesMap.EventCategoriesList))
}

// GetAttSlice__SourceIdsList returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: SourceIdsList
func (t *AWS_Redshift_EventSubscription) GetAttSlice__SourceIdsList() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Redshift_EventSubscription__AttributesMap.SourceIdsList))
}

// GetAtt__Status returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Status
func (t *AWS_Redshift_EventSubscription) GetAtt__Status() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Redshift_EventSubscription__AttributesMap.Status))
}

// GetAtt__SubscriptionCreationTime returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: SubscriptionCreationTime
func (t *AWS_Redshift_EventSubscription) GetAtt__SubscriptionCreationTime() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Redshift_EventSubscription__AttributesMap.SubscriptionCreationTime))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Redshift_EventSubscription) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CustSubscriptionId returns a conventionally configured output for an attribute of this resource.
// Attribute: CustSubscriptionId
func (t *AWS_Redshift_EventSubscription) GetConventionalOutputAtt__CustSubscriptionId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCustSubscriptionId", t.GetAtt__CustSubscriptionId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__CustomerAwsId returns a conventionally configured output for an attribute of this resource.
// Attribute: CustomerAwsId
func (t *AWS_Redshift_EventSubscription) GetConventionalOutputAtt__CustomerAwsId(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttCustomerAwsId", t.GetAtt__CustomerAwsId())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__EventCategoriesList returns a conventionally configured output for an attribute of this resource.
// Attribute: EventCategoriesList
func (t *AWS_Redshift_EventSubscription) GetConventionalOutputAtt__EventCategoriesList(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttEventCategoriesList", t.GetAttSlice__EventCategoriesList())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__SourceIdsList returns a conventionally configured output for an attribute of this resource.
// Attribute: SourceIdsList
func (t *AWS_Redshift_EventSubscription) GetConventionalOutputAtt__SourceIdsList(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSourceIdsList", t.GetAttSlice__SourceIdsList())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Status returns a conventionally configured output for an attribute of this resource.
// Attribute: Status
func (t *AWS_Redshift_EventSubscription) GetConventionalOutputAtt__Status(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStatus", t.GetAtt__Status())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__SubscriptionCreationTime returns a conventionally configured output for an attribute of this resource.
// Attribute: SubscriptionCreationTime
func (t *AWS_Redshift_EventSubscription) GetConventionalOutputAtt__SubscriptionCreationTime(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttSubscriptionCreationTime", t.GetAtt__SubscriptionCreationTime())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Redshift_EventSubscription) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Redshift_EventSubscription

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Redshift_EventSubscription) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
