// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_redshift

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Redshift_ScheduledAction)(nil)
	_ cfz.Resource                   = (*AWS_Redshift_ScheduledAction)(nil)
)

const (
	// AWS_Redshift_ScheduledAction__Type is the CloudFormation type for AWS::Redshift::ScheduledAction.
	AWS_Redshift_ScheduledAction__Type = "AWS::Redshift::ScheduledAction"
)

var (
	// AWS_Redshift_ScheduledAction__AttributesMap reports all the CloudFormation attributes for AWS::Redshift::ScheduledAction.
	AWS_Redshift_ScheduledAction__AttributesMap = struct {
		NextInvocations string
		State           string
	}{
		NextInvocations: "NextInvocations",
		State:           "State",
	}

	// AWS_Redshift_ScheduledAction__AttributesSlice reports all the CloudFormation attributes for AWS::Redshift::ScheduledAction.
	AWS_Redshift_ScheduledAction__AttributesSlice = []string{
		AWS_Redshift_ScheduledAction__AttributesMap.NextInvocations,
		AWS_Redshift_ScheduledAction__AttributesMap.State,
	}
)

var (
	// AWS_Redshift_ScheduledAction__PropertiesMap reports all the CloudFormation properties for AWS::Redshift::ScheduledAction.
	AWS_Redshift_ScheduledAction__PropertiesMap = struct {
		Enable                     string
		EndTime                    string
		IamRole                    string
		Schedule                   string
		ScheduledActionDescription string
		ScheduledActionName        string
		StartTime                  string
		TargetAction               string
	}{
		Enable:                     "Enable",
		EndTime:                    "EndTime",
		IamRole:                    "IamRole",
		Schedule:                   "Schedule",
		ScheduledActionDescription: "ScheduledActionDescription",
		ScheduledActionName:        "ScheduledActionName",
		StartTime:                  "StartTime",
		TargetAction:               "TargetAction",
	}

	// AWS_Redshift_ScheduledAction__PropertiesSlice reports all the CloudFormation properties for AWS::Redshift::ScheduledAction.
	AWS_Redshift_ScheduledAction__PropertiesSlice = []string{
		AWS_Redshift_ScheduledAction__PropertiesMap.Enable,
		AWS_Redshift_ScheduledAction__PropertiesMap.EndTime,
		AWS_Redshift_ScheduledAction__PropertiesMap.IamRole,
		AWS_Redshift_ScheduledAction__PropertiesMap.Schedule,
		AWS_Redshift_ScheduledAction__PropertiesMap.ScheduledActionDescription,
		AWS_Redshift_ScheduledAction__PropertiesMap.ScheduledActionName,
		AWS_Redshift_ScheduledAction__PropertiesMap.StartTime,
		AWS_Redshift_ScheduledAction__PropertiesMap.TargetAction,
	}
)

// AWS_Redshift_ScheduledAction is a binding for AWS::Redshift::ScheduledAction.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-scheduledaction.html
type AWS_Redshift_ScheduledAction struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Enable is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-scheduledaction.html#cfn-redshift-scheduledaction-enable
	Enable cfz.Expression[bool] `json:"Enable,omitempty"`

	// EndTime is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-scheduledaction.html#cfn-redshift-scheduledaction-endtime
	EndTime cfz.Expression[string] `json:"EndTime,omitempty"`

	// IamRole is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-scheduledaction.html#cfn-redshift-scheduledaction-iamrole
	IamRole cfz.Expression[string] `json:"IamRole,omitempty"`

	// Schedule is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-scheduledaction.html#cfn-redshift-scheduledaction-schedule
	Schedule cfz.Expression[string] `json:"Schedule,omitempty"`

	// ScheduledActionDescription is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-scheduledaction.html#cfn-redshift-scheduledaction-scheduledactiondescription
	ScheduledActionDescription cfz.Expression[string] `json:"ScheduledActionDescription,omitempty"`

	// ScheduledActionName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-scheduledaction.html#cfn-redshift-scheduledaction-scheduledactionname
	ScheduledActionName cfz.Expression[string] `json:"ScheduledActionName,omitempty"`

	// StartTime is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-scheduledaction.html#cfn-redshift-scheduledaction-starttime
	StartTime cfz.Expression[string] `json:"StartTime,omitempty"`

	// TargetAction is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-scheduledaction.html#cfn-redshift-scheduledaction-targetaction
	TargetAction cfz.Expression[AWS_Redshift_ScheduledAction_ScheduledActionType] `json:"TargetAction,omitempty"`
}

// New__AWS_Redshift_ScheduledAction initializes a new *AWS_Redshift_ScheduledAction.
func New__AWS_Redshift_ScheduledAction(logicalName string) *AWS_Redshift_ScheduledAction {
	return &AWS_Redshift_ScheduledAction{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Redshift_ScheduledAction) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Redshift_ScheduledAction) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Redshift_ScheduledAction) GetType() string {
	return AWS_Redshift_ScheduledAction__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Redshift_ScheduledAction) Set__LogicalName(v string) *AWS_Redshift_ScheduledAction {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Redshift_ScheduledAction) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Redshift_ScheduledAction {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Redshift_ScheduledAction) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Redshift_ScheduledAction {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Redshift_ScheduledAction) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Redshift_ScheduledAction {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Redshift_ScheduledAction) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Redshift_ScheduledAction {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Redshift_ScheduledAction) Set__RequestedOutputs(v []cfz.Output) *AWS_Redshift_ScheduledAction {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Redshift_ScheduledAction) Add__RequestedOutputs(v ...cfz.Output) *AWS_Redshift_ScheduledAction {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Enable updates property "Enable".
func (t *AWS_Redshift_ScheduledAction) Set__Enable(v cfz.Expression[bool]) *AWS_Redshift_ScheduledAction {
	t.Enable = v
	return t
}

// SetV__Enable updates property "Enable".
func (t *AWS_Redshift_ScheduledAction) SetV__Enable(v bool) *AWS_Redshift_ScheduledAction {
	t.Enable = cfz.V(v)
	return t
}

// Set__EndTime updates property "EndTime".
func (t *AWS_Redshift_ScheduledAction) Set__EndTime(v cfz.Expression[string]) *AWS_Redshift_ScheduledAction {
	t.EndTime = v
	return t
}

// SetV__EndTime updates property "EndTime".
func (t *AWS_Redshift_ScheduledAction) SetV__EndTime(v string) *AWS_Redshift_ScheduledAction {
	t.EndTime = cfz.V(v)
	return t
}

// Set__IamRole updates property "IamRole".
func (t *AWS_Redshift_ScheduledAction) Set__IamRole(v cfz.Expression[string]) *AWS_Redshift_ScheduledAction {
	t.IamRole = v
	return t
}

// SetV__IamRole updates property "IamRole".
func (t *AWS_Redshift_ScheduledAction) SetV__IamRole(v string) *AWS_Redshift_ScheduledAction {
	t.IamRole = cfz.V(v)
	return t
}

// Set__Schedule updates property "Schedule".
func (t *AWS_Redshift_ScheduledAction) Set__Schedule(v cfz.Expression[string]) *AWS_Redshift_ScheduledAction {
	t.Schedule = v
	return t
}

// SetV__Schedule updates property "Schedule".
func (t *AWS_Redshift_ScheduledAction) SetV__Schedule(v string) *AWS_Redshift_ScheduledAction {
	t.Schedule = cfz.V(v)
	return t
}

// Set__ScheduledActionDescription updates property "ScheduledActionDescription".
func (t *AWS_Redshift_ScheduledAction) Set__ScheduledActionDescription(v cfz.Expression[string]) *AWS_Redshift_ScheduledAction {
	t.ScheduledActionDescription = v
	return t
}

// SetV__ScheduledActionDescription updates property "ScheduledActionDescription".
func (t *AWS_Redshift_ScheduledAction) SetV__ScheduledActionDescription(v string) *AWS_Redshift_ScheduledAction {
	t.ScheduledActionDescription = cfz.V(v)
	return t
}

// Set__ScheduledActionName updates property "ScheduledActionName".
func (t *AWS_Redshift_ScheduledAction) Set__ScheduledActionName(v cfz.Expression[string]) *AWS_Redshift_ScheduledAction {
	t.ScheduledActionName = v
	return t
}

// SetV__ScheduledActionName updates property "ScheduledActionName".
func (t *AWS_Redshift_ScheduledAction) SetV__ScheduledActionName(v string) *AWS_Redshift_ScheduledAction {
	t.ScheduledActionName = cfz.V(v)
	return t
}

// Set__StartTime updates property "StartTime".
func (t *AWS_Redshift_ScheduledAction) Set__StartTime(v cfz.Expression[string]) *AWS_Redshift_ScheduledAction {
	t.StartTime = v
	return t
}

// SetV__StartTime updates property "StartTime".
func (t *AWS_Redshift_ScheduledAction) SetV__StartTime(v string) *AWS_Redshift_ScheduledAction {
	t.StartTime = cfz.V(v)
	return t
}

// Set__TargetAction updates property "TargetAction".
func (t *AWS_Redshift_ScheduledAction) Set__TargetAction(v cfz.Expression[AWS_Redshift_ScheduledAction_ScheduledActionType]) *AWS_Redshift_ScheduledAction {
	t.TargetAction = v
	return t
}

// SetV__TargetAction updates property "TargetAction".
func (t *AWS_Redshift_ScheduledAction) SetV__TargetAction(v AWS_Redshift_ScheduledAction_ScheduledActionType) *AWS_Redshift_ScheduledAction {
	t.TargetAction = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Redshift_ScheduledAction) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAttSlice__NextInvocations returns a $cfz.ExpressionSlice[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: NextInvocations
func (t *AWS_Redshift_ScheduledAction) GetAttSlice__NextInvocations() cfz.ExpressionSlice[string] {
	return cfz.GetAttSlice[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Redshift_ScheduledAction__AttributesMap.NextInvocations))
}

// GetAtt__State returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: State
func (t *AWS_Redshift_ScheduledAction) GetAtt__State() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Redshift_ScheduledAction__AttributesMap.State))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Redshift_ScheduledAction) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__NextInvocations returns a conventionally configured output for an attribute of this resource.
// Attribute: NextInvocations
func (t *AWS_Redshift_ScheduledAction) GetConventionalOutputAtt__NextInvocations(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttNextInvocations", t.GetAttSlice__NextInvocations())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__State returns a conventionally configured output for an attribute of this resource.
// Attribute: State
func (t *AWS_Redshift_ScheduledAction) GetConventionalOutputAtt__State(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttState", t.GetAtt__State())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Redshift_ScheduledAction) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Redshift_ScheduledAction

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Redshift_ScheduledAction) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
