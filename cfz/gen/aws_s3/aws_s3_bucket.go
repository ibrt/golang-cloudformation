// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_s3

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_S3_Bucket)(nil)
	_ cfz.Resource                   = (*AWS_S3_Bucket)(nil)
)

const (
	// AWS_S3_Bucket__Type is the CloudFormation type for AWS::S3::Bucket.
	AWS_S3_Bucket__Type = "AWS::S3::Bucket"
)

var (
	// AWS_S3_Bucket__AttributesMap reports all the CloudFormation attributes for AWS::S3::Bucket.
	AWS_S3_Bucket__AttributesMap = struct {
		Arn                 string
		DomainName          string
		DualStackDomainName string
		RegionalDomainName  string
		WebsiteURL          string
	}{
		Arn:                 "Arn",
		DomainName:          "DomainName",
		DualStackDomainName: "DualStackDomainName",
		RegionalDomainName:  "RegionalDomainName",
		WebsiteURL:          "WebsiteURL",
	}

	// AWS_S3_Bucket__AttributesSlice reports all the CloudFormation attributes for AWS::S3::Bucket.
	AWS_S3_Bucket__AttributesSlice = []string{
		AWS_S3_Bucket__AttributesMap.Arn,
		AWS_S3_Bucket__AttributesMap.DomainName,
		AWS_S3_Bucket__AttributesMap.DualStackDomainName,
		AWS_S3_Bucket__AttributesMap.RegionalDomainName,
		AWS_S3_Bucket__AttributesMap.WebsiteURL,
	}
)

var (
	// AWS_S3_Bucket__PropertiesMap reports all the CloudFormation properties for AWS::S3::Bucket.
	AWS_S3_Bucket__PropertiesMap = struct {
		AccelerateConfiguration          string
		AccessControl                    string
		AnalyticsConfigurations          string
		BucketEncryption                 string
		BucketName                       string
		CorsConfiguration                string
		IntelligentTieringConfigurations string
		InventoryConfigurations          string
		LifecycleConfiguration           string
		LoggingConfiguration             string
		MetricsConfigurations            string
		NotificationConfiguration        string
		ObjectLockConfiguration          string
		ObjectLockEnabled                string
		OwnershipControls                string
		PublicAccessBlockConfiguration   string
		ReplicationConfiguration         string
		Tags                             string
		VersioningConfiguration          string
		WebsiteConfiguration             string
	}{
		AccelerateConfiguration:          "AccelerateConfiguration",
		AccessControl:                    "AccessControl",
		AnalyticsConfigurations:          "AnalyticsConfigurations",
		BucketEncryption:                 "BucketEncryption",
		BucketName:                       "BucketName",
		CorsConfiguration:                "CorsConfiguration",
		IntelligentTieringConfigurations: "IntelligentTieringConfigurations",
		InventoryConfigurations:          "InventoryConfigurations",
		LifecycleConfiguration:           "LifecycleConfiguration",
		LoggingConfiguration:             "LoggingConfiguration",
		MetricsConfigurations:            "MetricsConfigurations",
		NotificationConfiguration:        "NotificationConfiguration",
		ObjectLockConfiguration:          "ObjectLockConfiguration",
		ObjectLockEnabled:                "ObjectLockEnabled",
		OwnershipControls:                "OwnershipControls",
		PublicAccessBlockConfiguration:   "PublicAccessBlockConfiguration",
		ReplicationConfiguration:         "ReplicationConfiguration",
		Tags:                             "Tags",
		VersioningConfiguration:          "VersioningConfiguration",
		WebsiteConfiguration:             "WebsiteConfiguration",
	}

	// AWS_S3_Bucket__PropertiesSlice reports all the CloudFormation properties for AWS::S3::Bucket.
	AWS_S3_Bucket__PropertiesSlice = []string{
		AWS_S3_Bucket__PropertiesMap.AccelerateConfiguration,
		AWS_S3_Bucket__PropertiesMap.AccessControl,
		AWS_S3_Bucket__PropertiesMap.AnalyticsConfigurations,
		AWS_S3_Bucket__PropertiesMap.BucketEncryption,
		AWS_S3_Bucket__PropertiesMap.BucketName,
		AWS_S3_Bucket__PropertiesMap.CorsConfiguration,
		AWS_S3_Bucket__PropertiesMap.IntelligentTieringConfigurations,
		AWS_S3_Bucket__PropertiesMap.InventoryConfigurations,
		AWS_S3_Bucket__PropertiesMap.LifecycleConfiguration,
		AWS_S3_Bucket__PropertiesMap.LoggingConfiguration,
		AWS_S3_Bucket__PropertiesMap.MetricsConfigurations,
		AWS_S3_Bucket__PropertiesMap.NotificationConfiguration,
		AWS_S3_Bucket__PropertiesMap.ObjectLockConfiguration,
		AWS_S3_Bucket__PropertiesMap.ObjectLockEnabled,
		AWS_S3_Bucket__PropertiesMap.OwnershipControls,
		AWS_S3_Bucket__PropertiesMap.PublicAccessBlockConfiguration,
		AWS_S3_Bucket__PropertiesMap.ReplicationConfiguration,
		AWS_S3_Bucket__PropertiesMap.Tags,
		AWS_S3_Bucket__PropertiesMap.VersioningConfiguration,
		AWS_S3_Bucket__PropertiesMap.WebsiteConfiguration,
	}
)

// AWS_S3_Bucket is a binding for AWS::S3::Bucket.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html
type AWS_S3_Bucket struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// AccelerateConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-accelerateconfiguration
	AccelerateConfiguration cfz.Expression[AWS_S3_Bucket_AccelerateConfiguration] `json:"AccelerateConfiguration,omitempty"`

	// AccessControl is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-accesscontrol
	AccessControl cfz.Expression[string] `json:"AccessControl,omitempty"`

	// AnalyticsConfigurations is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-analyticsconfigurations
	AnalyticsConfigurations cfz.ExpressionSlice[AWS_S3_Bucket_AnalyticsConfiguration] `json:"AnalyticsConfigurations,omitempty"`

	// BucketEncryption is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-bucketencryption
	BucketEncryption cfz.Expression[AWS_S3_Bucket_BucketEncryption] `json:"BucketEncryption,omitempty"`

	// BucketName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-bucketname
	BucketName cfz.Expression[string] `json:"BucketName,omitempty"`

	// CorsConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-corsconfiguration
	CorsConfiguration cfz.Expression[AWS_S3_Bucket_CorsConfiguration] `json:"CorsConfiguration,omitempty"`

	// IntelligentTieringConfigurations is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-intelligenttieringconfigurations
	IntelligentTieringConfigurations cfz.ExpressionSlice[AWS_S3_Bucket_IntelligentTieringConfiguration] `json:"IntelligentTieringConfigurations,omitempty"`

	// InventoryConfigurations is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-inventoryconfigurations
	InventoryConfigurations cfz.ExpressionSlice[AWS_S3_Bucket_InventoryConfiguration] `json:"InventoryConfigurations,omitempty"`

	// LifecycleConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-lifecycleconfiguration
	LifecycleConfiguration cfz.Expression[AWS_S3_Bucket_LifecycleConfiguration] `json:"LifecycleConfiguration,omitempty"`

	// LoggingConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-loggingconfiguration
	LoggingConfiguration cfz.Expression[AWS_S3_Bucket_LoggingConfiguration] `json:"LoggingConfiguration,omitempty"`

	// MetricsConfigurations is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-metricsconfigurations
	MetricsConfigurations cfz.ExpressionSlice[AWS_S3_Bucket_MetricsConfiguration] `json:"MetricsConfigurations,omitempty"`

	// NotificationConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-notificationconfiguration
	NotificationConfiguration cfz.Expression[AWS_S3_Bucket_NotificationConfiguration] `json:"NotificationConfiguration,omitempty"`

	// ObjectLockConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-objectlockconfiguration
	ObjectLockConfiguration cfz.Expression[AWS_S3_Bucket_ObjectLockConfiguration] `json:"ObjectLockConfiguration,omitempty"`

	// ObjectLockEnabled is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-objectlockenabled
	ObjectLockEnabled cfz.Expression[bool] `json:"ObjectLockEnabled,omitempty"`

	// OwnershipControls is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-ownershipcontrols
	OwnershipControls cfz.Expression[AWS_S3_Bucket_OwnershipControls] `json:"OwnershipControls,omitempty"`

	// PublicAccessBlockConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-publicaccessblockconfiguration
	PublicAccessBlockConfiguration cfz.Expression[AWS_S3_Bucket_PublicAccessBlockConfiguration] `json:"PublicAccessBlockConfiguration,omitempty"`

	// ReplicationConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-replicationconfiguration
	ReplicationConfiguration cfz.Expression[AWS_S3_Bucket_ReplicationConfiguration] `json:"ReplicationConfiguration,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// VersioningConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-versioningconfiguration
	VersioningConfiguration cfz.Expression[AWS_S3_Bucket_VersioningConfiguration] `json:"VersioningConfiguration,omitempty"`

	// WebsiteConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-websiteconfiguration
	WebsiteConfiguration cfz.Expression[AWS_S3_Bucket_WebsiteConfiguration] `json:"WebsiteConfiguration,omitempty"`
}

// New__AWS_S3_Bucket initializes a new *AWS_S3_Bucket.
func New__AWS_S3_Bucket(logicalName string) *AWS_S3_Bucket {
	return &AWS_S3_Bucket{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_S3_Bucket) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_S3_Bucket) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_S3_Bucket) GetType() string {
	return AWS_S3_Bucket__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_S3_Bucket) Set__LogicalName(v string) *AWS_S3_Bucket {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_S3_Bucket) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_S3_Bucket {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_S3_Bucket) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_S3_Bucket {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_S3_Bucket) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_S3_Bucket {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_S3_Bucket) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_S3_Bucket {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_S3_Bucket) Set__RequestedOutputs(v []cfz.Output) *AWS_S3_Bucket {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_S3_Bucket) Add__RequestedOutputs(v ...cfz.Output) *AWS_S3_Bucket {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__AccelerateConfiguration updates property "AccelerateConfiguration".
func (t *AWS_S3_Bucket) Set__AccelerateConfiguration(v cfz.Expression[AWS_S3_Bucket_AccelerateConfiguration]) *AWS_S3_Bucket {
	t.AccelerateConfiguration = v
	return t
}

// SetV__AccelerateConfiguration updates property "AccelerateConfiguration".
func (t *AWS_S3_Bucket) SetV__AccelerateConfiguration(v AWS_S3_Bucket_AccelerateConfiguration) *AWS_S3_Bucket {
	t.AccelerateConfiguration = cfz.V(v)
	return t
}

// Set__AccessControl updates property "AccessControl".
func (t *AWS_S3_Bucket) Set__AccessControl(v cfz.Expression[string]) *AWS_S3_Bucket {
	t.AccessControl = v
	return t
}

// SetV__AccessControl updates property "AccessControl".
func (t *AWS_S3_Bucket) SetV__AccessControl(v string) *AWS_S3_Bucket {
	t.AccessControl = cfz.V(v)
	return t
}

// Set__AnalyticsConfigurations updates property "AnalyticsConfigurations".
func (t *AWS_S3_Bucket) Set__AnalyticsConfigurations(v cfz.ExpressionSlice[AWS_S3_Bucket_AnalyticsConfiguration]) *AWS_S3_Bucket {
	t.AnalyticsConfigurations = v
	return t
}

// SetS__AnalyticsConfigurations updates property "AnalyticsConfigurations".
func (t *AWS_S3_Bucket) SetS__AnalyticsConfigurations(v ...cfz.Expression[AWS_S3_Bucket_AnalyticsConfiguration]) *AWS_S3_Bucket {
	t.AnalyticsConfigurations = cfz.S(v...)
	return t
}

// SetSV__AnalyticsConfigurations updates property "AnalyticsConfigurations".
func (t *AWS_S3_Bucket) SetSV__AnalyticsConfigurations(v ...AWS_S3_Bucket_AnalyticsConfiguration) *AWS_S3_Bucket {
	t.AnalyticsConfigurations = cfz.SV(v...)
	return t
}

// Set__BucketEncryption updates property "BucketEncryption".
func (t *AWS_S3_Bucket) Set__BucketEncryption(v cfz.Expression[AWS_S3_Bucket_BucketEncryption]) *AWS_S3_Bucket {
	t.BucketEncryption = v
	return t
}

// SetV__BucketEncryption updates property "BucketEncryption".
func (t *AWS_S3_Bucket) SetV__BucketEncryption(v AWS_S3_Bucket_BucketEncryption) *AWS_S3_Bucket {
	t.BucketEncryption = cfz.V(v)
	return t
}

// Set__BucketName updates property "BucketName".
func (t *AWS_S3_Bucket) Set__BucketName(v cfz.Expression[string]) *AWS_S3_Bucket {
	t.BucketName = v
	return t
}

// SetV__BucketName updates property "BucketName".
func (t *AWS_S3_Bucket) SetV__BucketName(v string) *AWS_S3_Bucket {
	t.BucketName = cfz.V(v)
	return t
}

// Set__CorsConfiguration updates property "CorsConfiguration".
func (t *AWS_S3_Bucket) Set__CorsConfiguration(v cfz.Expression[AWS_S3_Bucket_CorsConfiguration]) *AWS_S3_Bucket {
	t.CorsConfiguration = v
	return t
}

// SetV__CorsConfiguration updates property "CorsConfiguration".
func (t *AWS_S3_Bucket) SetV__CorsConfiguration(v AWS_S3_Bucket_CorsConfiguration) *AWS_S3_Bucket {
	t.CorsConfiguration = cfz.V(v)
	return t
}

// Set__IntelligentTieringConfigurations updates property "IntelligentTieringConfigurations".
func (t *AWS_S3_Bucket) Set__IntelligentTieringConfigurations(v cfz.ExpressionSlice[AWS_S3_Bucket_IntelligentTieringConfiguration]) *AWS_S3_Bucket {
	t.IntelligentTieringConfigurations = v
	return t
}

// SetS__IntelligentTieringConfigurations updates property "IntelligentTieringConfigurations".
func (t *AWS_S3_Bucket) SetS__IntelligentTieringConfigurations(v ...cfz.Expression[AWS_S3_Bucket_IntelligentTieringConfiguration]) *AWS_S3_Bucket {
	t.IntelligentTieringConfigurations = cfz.S(v...)
	return t
}

// SetSV__IntelligentTieringConfigurations updates property "IntelligentTieringConfigurations".
func (t *AWS_S3_Bucket) SetSV__IntelligentTieringConfigurations(v ...AWS_S3_Bucket_IntelligentTieringConfiguration) *AWS_S3_Bucket {
	t.IntelligentTieringConfigurations = cfz.SV(v...)
	return t
}

// Set__InventoryConfigurations updates property "InventoryConfigurations".
func (t *AWS_S3_Bucket) Set__InventoryConfigurations(v cfz.ExpressionSlice[AWS_S3_Bucket_InventoryConfiguration]) *AWS_S3_Bucket {
	t.InventoryConfigurations = v
	return t
}

// SetS__InventoryConfigurations updates property "InventoryConfigurations".
func (t *AWS_S3_Bucket) SetS__InventoryConfigurations(v ...cfz.Expression[AWS_S3_Bucket_InventoryConfiguration]) *AWS_S3_Bucket {
	t.InventoryConfigurations = cfz.S(v...)
	return t
}

// SetSV__InventoryConfigurations updates property "InventoryConfigurations".
func (t *AWS_S3_Bucket) SetSV__InventoryConfigurations(v ...AWS_S3_Bucket_InventoryConfiguration) *AWS_S3_Bucket {
	t.InventoryConfigurations = cfz.SV(v...)
	return t
}

// Set__LifecycleConfiguration updates property "LifecycleConfiguration".
func (t *AWS_S3_Bucket) Set__LifecycleConfiguration(v cfz.Expression[AWS_S3_Bucket_LifecycleConfiguration]) *AWS_S3_Bucket {
	t.LifecycleConfiguration = v
	return t
}

// SetV__LifecycleConfiguration updates property "LifecycleConfiguration".
func (t *AWS_S3_Bucket) SetV__LifecycleConfiguration(v AWS_S3_Bucket_LifecycleConfiguration) *AWS_S3_Bucket {
	t.LifecycleConfiguration = cfz.V(v)
	return t
}

// Set__LoggingConfiguration updates property "LoggingConfiguration".
func (t *AWS_S3_Bucket) Set__LoggingConfiguration(v cfz.Expression[AWS_S3_Bucket_LoggingConfiguration]) *AWS_S3_Bucket {
	t.LoggingConfiguration = v
	return t
}

// SetV__LoggingConfiguration updates property "LoggingConfiguration".
func (t *AWS_S3_Bucket) SetV__LoggingConfiguration(v AWS_S3_Bucket_LoggingConfiguration) *AWS_S3_Bucket {
	t.LoggingConfiguration = cfz.V(v)
	return t
}

// Set__MetricsConfigurations updates property "MetricsConfigurations".
func (t *AWS_S3_Bucket) Set__MetricsConfigurations(v cfz.ExpressionSlice[AWS_S3_Bucket_MetricsConfiguration]) *AWS_S3_Bucket {
	t.MetricsConfigurations = v
	return t
}

// SetS__MetricsConfigurations updates property "MetricsConfigurations".
func (t *AWS_S3_Bucket) SetS__MetricsConfigurations(v ...cfz.Expression[AWS_S3_Bucket_MetricsConfiguration]) *AWS_S3_Bucket {
	t.MetricsConfigurations = cfz.S(v...)
	return t
}

// SetSV__MetricsConfigurations updates property "MetricsConfigurations".
func (t *AWS_S3_Bucket) SetSV__MetricsConfigurations(v ...AWS_S3_Bucket_MetricsConfiguration) *AWS_S3_Bucket {
	t.MetricsConfigurations = cfz.SV(v...)
	return t
}

// Set__NotificationConfiguration updates property "NotificationConfiguration".
func (t *AWS_S3_Bucket) Set__NotificationConfiguration(v cfz.Expression[AWS_S3_Bucket_NotificationConfiguration]) *AWS_S3_Bucket {
	t.NotificationConfiguration = v
	return t
}

// SetV__NotificationConfiguration updates property "NotificationConfiguration".
func (t *AWS_S3_Bucket) SetV__NotificationConfiguration(v AWS_S3_Bucket_NotificationConfiguration) *AWS_S3_Bucket {
	t.NotificationConfiguration = cfz.V(v)
	return t
}

// Set__ObjectLockConfiguration updates property "ObjectLockConfiguration".
func (t *AWS_S3_Bucket) Set__ObjectLockConfiguration(v cfz.Expression[AWS_S3_Bucket_ObjectLockConfiguration]) *AWS_S3_Bucket {
	t.ObjectLockConfiguration = v
	return t
}

// SetV__ObjectLockConfiguration updates property "ObjectLockConfiguration".
func (t *AWS_S3_Bucket) SetV__ObjectLockConfiguration(v AWS_S3_Bucket_ObjectLockConfiguration) *AWS_S3_Bucket {
	t.ObjectLockConfiguration = cfz.V(v)
	return t
}

// Set__ObjectLockEnabled updates property "ObjectLockEnabled".
func (t *AWS_S3_Bucket) Set__ObjectLockEnabled(v cfz.Expression[bool]) *AWS_S3_Bucket {
	t.ObjectLockEnabled = v
	return t
}

// SetV__ObjectLockEnabled updates property "ObjectLockEnabled".
func (t *AWS_S3_Bucket) SetV__ObjectLockEnabled(v bool) *AWS_S3_Bucket {
	t.ObjectLockEnabled = cfz.V(v)
	return t
}

// Set__OwnershipControls updates property "OwnershipControls".
func (t *AWS_S3_Bucket) Set__OwnershipControls(v cfz.Expression[AWS_S3_Bucket_OwnershipControls]) *AWS_S3_Bucket {
	t.OwnershipControls = v
	return t
}

// SetV__OwnershipControls updates property "OwnershipControls".
func (t *AWS_S3_Bucket) SetV__OwnershipControls(v AWS_S3_Bucket_OwnershipControls) *AWS_S3_Bucket {
	t.OwnershipControls = cfz.V(v)
	return t
}

// Set__PublicAccessBlockConfiguration updates property "PublicAccessBlockConfiguration".
func (t *AWS_S3_Bucket) Set__PublicAccessBlockConfiguration(v cfz.Expression[AWS_S3_Bucket_PublicAccessBlockConfiguration]) *AWS_S3_Bucket {
	t.PublicAccessBlockConfiguration = v
	return t
}

// SetV__PublicAccessBlockConfiguration updates property "PublicAccessBlockConfiguration".
func (t *AWS_S3_Bucket) SetV__PublicAccessBlockConfiguration(v AWS_S3_Bucket_PublicAccessBlockConfiguration) *AWS_S3_Bucket {
	t.PublicAccessBlockConfiguration = cfz.V(v)
	return t
}

// Set__ReplicationConfiguration updates property "ReplicationConfiguration".
func (t *AWS_S3_Bucket) Set__ReplicationConfiguration(v cfz.Expression[AWS_S3_Bucket_ReplicationConfiguration]) *AWS_S3_Bucket {
	t.ReplicationConfiguration = v
	return t
}

// SetV__ReplicationConfiguration updates property "ReplicationConfiguration".
func (t *AWS_S3_Bucket) SetV__ReplicationConfiguration(v AWS_S3_Bucket_ReplicationConfiguration) *AWS_S3_Bucket {
	t.ReplicationConfiguration = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_S3_Bucket) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_S3_Bucket {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_S3_Bucket) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_S3_Bucket {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_S3_Bucket) SetSV__Tags(v ...cfz.Tag) *AWS_S3_Bucket {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__VersioningConfiguration updates property "VersioningConfiguration".
func (t *AWS_S3_Bucket) Set__VersioningConfiguration(v cfz.Expression[AWS_S3_Bucket_VersioningConfiguration]) *AWS_S3_Bucket {
	t.VersioningConfiguration = v
	return t
}

// SetV__VersioningConfiguration updates property "VersioningConfiguration".
func (t *AWS_S3_Bucket) SetV__VersioningConfiguration(v AWS_S3_Bucket_VersioningConfiguration) *AWS_S3_Bucket {
	t.VersioningConfiguration = cfz.V(v)
	return t
}

// Set__WebsiteConfiguration updates property "WebsiteConfiguration".
func (t *AWS_S3_Bucket) Set__WebsiteConfiguration(v cfz.Expression[AWS_S3_Bucket_WebsiteConfiguration]) *AWS_S3_Bucket {
	t.WebsiteConfiguration = v
	return t
}

// SetV__WebsiteConfiguration updates property "WebsiteConfiguration".
func (t *AWS_S3_Bucket) SetV__WebsiteConfiguration(v AWS_S3_Bucket_WebsiteConfiguration) *AWS_S3_Bucket {
	t.WebsiteConfiguration = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_S3_Bucket) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_S3_Bucket) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_S3_Bucket__AttributesMap.Arn))
}

// GetAtt__DomainName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DomainName
func (t *AWS_S3_Bucket) GetAtt__DomainName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_S3_Bucket__AttributesMap.DomainName))
}

// GetAtt__DualStackDomainName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: DualStackDomainName
func (t *AWS_S3_Bucket) GetAtt__DualStackDomainName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_S3_Bucket__AttributesMap.DualStackDomainName))
}

// GetAtt__RegionalDomainName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: RegionalDomainName
func (t *AWS_S3_Bucket) GetAtt__RegionalDomainName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_S3_Bucket__AttributesMap.RegionalDomainName))
}

// GetAtt__WebsiteURL returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: WebsiteURL
func (t *AWS_S3_Bucket) GetAtt__WebsiteURL() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_S3_Bucket__AttributesMap.WebsiteURL))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_S3_Bucket) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_S3_Bucket) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DomainName returns a conventionally configured output for an attribute of this resource.
// Attribute: DomainName
func (t *AWS_S3_Bucket) GetConventionalOutputAtt__DomainName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDomainName", t.GetAtt__DomainName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__DualStackDomainName returns a conventionally configured output for an attribute of this resource.
// Attribute: DualStackDomainName
func (t *AWS_S3_Bucket) GetConventionalOutputAtt__DualStackDomainName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttDualStackDomainName", t.GetAtt__DualStackDomainName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__RegionalDomainName returns a conventionally configured output for an attribute of this resource.
// Attribute: RegionalDomainName
func (t *AWS_S3_Bucket) GetConventionalOutputAtt__RegionalDomainName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttRegionalDomainName", t.GetAtt__RegionalDomainName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__WebsiteURL returns a conventionally configured output for an attribute of this resource.
// Attribute: WebsiteURL
func (t *AWS_S3_Bucket) GetConventionalOutputAtt__WebsiteURL(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttWebsiteURL", t.GetAtt__WebsiteURL())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_S3_Bucket) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_S3_Bucket

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_S3_Bucket) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
