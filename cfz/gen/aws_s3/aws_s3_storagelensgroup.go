// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_s3

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_S3_StorageLensGroup)(nil)
	_ cfz.Resource                   = (*AWS_S3_StorageLensGroup)(nil)
)

const (
	// AWS_S3_StorageLensGroup__Type is the CloudFormation type for AWS::S3::StorageLensGroup.
	AWS_S3_StorageLensGroup__Type = "AWS::S3::StorageLensGroup"
)

var (
	// AWS_S3_StorageLensGroup__AttributesMap reports all the CloudFormation attributes for AWS::S3::StorageLensGroup.
	AWS_S3_StorageLensGroup__AttributesMap = struct {
		StorageLensGroupArn string
	}{
		StorageLensGroupArn: "StorageLensGroupArn",
	}

	// AWS_S3_StorageLensGroup__AttributesSlice reports all the CloudFormation attributes for AWS::S3::StorageLensGroup.
	AWS_S3_StorageLensGroup__AttributesSlice = []string{
		AWS_S3_StorageLensGroup__AttributesMap.StorageLensGroupArn,
	}
)

var (
	// AWS_S3_StorageLensGroup__PropertiesMap reports all the CloudFormation properties for AWS::S3::StorageLensGroup.
	AWS_S3_StorageLensGroup__PropertiesMap = struct {
		Filter string
		Name   string
		Tags   string
	}{
		Filter: "Filter",
		Name:   "Name",
		Tags:   "Tags",
	}

	// AWS_S3_StorageLensGroup__PropertiesSlice reports all the CloudFormation properties for AWS::S3::StorageLensGroup.
	AWS_S3_StorageLensGroup__PropertiesSlice = []string{
		AWS_S3_StorageLensGroup__PropertiesMap.Filter,
		AWS_S3_StorageLensGroup__PropertiesMap.Name,
		AWS_S3_StorageLensGroup__PropertiesMap.Tags,
	}
)

// AWS_S3_StorageLensGroup is a binding for AWS::S3::StorageLensGroup.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-storagelensgroup.html
type AWS_S3_StorageLensGroup struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Filter is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-storagelensgroup.html#cfn-s3-storagelensgroup-filter
	Filter cfz.Expression[AWS_S3_StorageLensGroup_Filter] `json:"Filter,omitempty"`

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-storagelensgroup.html#cfn-s3-storagelensgroup-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-storagelensgroup.html#cfn-s3-storagelensgroup-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_S3_StorageLensGroup initializes a new *AWS_S3_StorageLensGroup.
func New__AWS_S3_StorageLensGroup(logicalName string) *AWS_S3_StorageLensGroup {
	return &AWS_S3_StorageLensGroup{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_S3_StorageLensGroup) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_S3_StorageLensGroup) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_S3_StorageLensGroup) GetType() string {
	return AWS_S3_StorageLensGroup__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_S3_StorageLensGroup) Set__LogicalName(v string) *AWS_S3_StorageLensGroup {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_S3_StorageLensGroup) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_S3_StorageLensGroup {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_S3_StorageLensGroup) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_S3_StorageLensGroup {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_S3_StorageLensGroup) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_S3_StorageLensGroup {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_S3_StorageLensGroup) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_S3_StorageLensGroup {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_S3_StorageLensGroup) Set__RequestedOutputs(v []cfz.Output) *AWS_S3_StorageLensGroup {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_S3_StorageLensGroup) Add__RequestedOutputs(v ...cfz.Output) *AWS_S3_StorageLensGroup {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Filter updates property "Filter".
func (t *AWS_S3_StorageLensGroup) Set__Filter(v cfz.Expression[AWS_S3_StorageLensGroup_Filter]) *AWS_S3_StorageLensGroup {
	t.Filter = v
	return t
}

// SetV__Filter updates property "Filter".
func (t *AWS_S3_StorageLensGroup) SetV__Filter(v AWS_S3_StorageLensGroup_Filter) *AWS_S3_StorageLensGroup {
	t.Filter = cfz.V(v)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_S3_StorageLensGroup) Set__Name(v cfz.Expression[string]) *AWS_S3_StorageLensGroup {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_S3_StorageLensGroup) SetV__Name(v string) *AWS_S3_StorageLensGroup {
	t.Name = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_S3_StorageLensGroup) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_S3_StorageLensGroup {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_S3_StorageLensGroup) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_S3_StorageLensGroup {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_S3_StorageLensGroup) SetSV__Tags(v ...cfz.Tag) *AWS_S3_StorageLensGroup {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_S3_StorageLensGroup) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__StorageLensGroupArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: StorageLensGroupArn
func (t *AWS_S3_StorageLensGroup) GetAtt__StorageLensGroupArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_S3_StorageLensGroup__AttributesMap.StorageLensGroupArn))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_S3_StorageLensGroup) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__StorageLensGroupArn returns a conventionally configured output for an attribute of this resource.
// Attribute: StorageLensGroupArn
func (t *AWS_S3_StorageLensGroup) GetConventionalOutputAtt__StorageLensGroupArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttStorageLensGroupArn", t.GetAtt__StorageLensGroupArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_S3_StorageLensGroup) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_S3_StorageLensGroup

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_S3_StorageLensGroup) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
