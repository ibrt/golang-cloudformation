// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_lambda

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_Lambda_LayerVersion)(nil)
	_ cfz.Resource                   = (*AWS_Lambda_LayerVersion)(nil)
)

const (
	// AWS_Lambda_LayerVersion__Type is the CloudFormation type for AWS::Lambda::LayerVersion.
	AWS_Lambda_LayerVersion__Type = "AWS::Lambda::LayerVersion"
)

var (
	// AWS_Lambda_LayerVersion__AttributesMap reports all the CloudFormation attributes for AWS::Lambda::LayerVersion.
	AWS_Lambda_LayerVersion__AttributesMap = struct {
		LayerVersionArn string
	}{
		LayerVersionArn: "LayerVersionArn",
	}

	// AWS_Lambda_LayerVersion__AttributesSlice reports all the CloudFormation attributes for AWS::Lambda::LayerVersion.
	AWS_Lambda_LayerVersion__AttributesSlice = []string{
		AWS_Lambda_LayerVersion__AttributesMap.LayerVersionArn,
	}
)

var (
	// AWS_Lambda_LayerVersion__PropertiesMap reports all the CloudFormation properties for AWS::Lambda::LayerVersion.
	AWS_Lambda_LayerVersion__PropertiesMap = struct {
		CompatibleArchitectures string
		CompatibleRuntimes      string
		Content                 string
		Description             string
		LayerName               string
		LicenseInfo             string
	}{
		CompatibleArchitectures: "CompatibleArchitectures",
		CompatibleRuntimes:      "CompatibleRuntimes",
		Content:                 "Content",
		Description:             "Description",
		LayerName:               "LayerName",
		LicenseInfo:             "LicenseInfo",
	}

	// AWS_Lambda_LayerVersion__PropertiesSlice reports all the CloudFormation properties for AWS::Lambda::LayerVersion.
	AWS_Lambda_LayerVersion__PropertiesSlice = []string{
		AWS_Lambda_LayerVersion__PropertiesMap.CompatibleArchitectures,
		AWS_Lambda_LayerVersion__PropertiesMap.CompatibleRuntimes,
		AWS_Lambda_LayerVersion__PropertiesMap.Content,
		AWS_Lambda_LayerVersion__PropertiesMap.Description,
		AWS_Lambda_LayerVersion__PropertiesMap.LayerName,
		AWS_Lambda_LayerVersion__PropertiesMap.LicenseInfo,
	}
)

// AWS_Lambda_LayerVersion is a binding for AWS::Lambda::LayerVersion.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html
type AWS_Lambda_LayerVersion struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// CompatibleArchitectures is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html#cfn-lambda-layerversion-compatiblearchitectures
	CompatibleArchitectures cfz.ExpressionSlice[string] `json:"CompatibleArchitectures,omitempty"`

	// CompatibleRuntimes is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html#cfn-lambda-layerversion-compatibleruntimes
	CompatibleRuntimes cfz.ExpressionSlice[string] `json:"CompatibleRuntimes,omitempty"`

	// Content is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html#cfn-lambda-layerversion-content
	Content cfz.Expression[AWS_Lambda_LayerVersion_Content] `json:"Content,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html#cfn-lambda-layerversion-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// LayerName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html#cfn-lambda-layerversion-layername
	LayerName cfz.Expression[string] `json:"LayerName,omitempty"`

	// LicenseInfo is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html#cfn-lambda-layerversion-licenseinfo
	LicenseInfo cfz.Expression[string] `json:"LicenseInfo,omitempty"`
}

// New__AWS_Lambda_LayerVersion initializes a new *AWS_Lambda_LayerVersion.
func New__AWS_Lambda_LayerVersion(logicalName string) *AWS_Lambda_LayerVersion {
	return &AWS_Lambda_LayerVersion{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_Lambda_LayerVersion) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_Lambda_LayerVersion) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_Lambda_LayerVersion) GetType() string {
	return AWS_Lambda_LayerVersion__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_Lambda_LayerVersion) Set__LogicalName(v string) *AWS_Lambda_LayerVersion {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_Lambda_LayerVersion) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_Lambda_LayerVersion {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_Lambda_LayerVersion) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_Lambda_LayerVersion {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_Lambda_LayerVersion) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_Lambda_LayerVersion {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_Lambda_LayerVersion) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_Lambda_LayerVersion {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_Lambda_LayerVersion) Set__RequestedOutputs(v []cfz.Output) *AWS_Lambda_LayerVersion {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_Lambda_LayerVersion) Add__RequestedOutputs(v ...cfz.Output) *AWS_Lambda_LayerVersion {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__CompatibleArchitectures updates property "CompatibleArchitectures".
func (t *AWS_Lambda_LayerVersion) Set__CompatibleArchitectures(v cfz.ExpressionSlice[string]) *AWS_Lambda_LayerVersion {
	t.CompatibleArchitectures = v
	return t
}

// SetS__CompatibleArchitectures updates property "CompatibleArchitectures".
func (t *AWS_Lambda_LayerVersion) SetS__CompatibleArchitectures(v ...cfz.Expression[string]) *AWS_Lambda_LayerVersion {
	t.CompatibleArchitectures = cfz.S(v...)
	return t
}

// SetSV__CompatibleArchitectures updates property "CompatibleArchitectures".
func (t *AWS_Lambda_LayerVersion) SetSV__CompatibleArchitectures(v ...string) *AWS_Lambda_LayerVersion {
	t.CompatibleArchitectures = cfz.SV(v...)
	return t
}

// Set__CompatibleRuntimes updates property "CompatibleRuntimes".
func (t *AWS_Lambda_LayerVersion) Set__CompatibleRuntimes(v cfz.ExpressionSlice[string]) *AWS_Lambda_LayerVersion {
	t.CompatibleRuntimes = v
	return t
}

// SetS__CompatibleRuntimes updates property "CompatibleRuntimes".
func (t *AWS_Lambda_LayerVersion) SetS__CompatibleRuntimes(v ...cfz.Expression[string]) *AWS_Lambda_LayerVersion {
	t.CompatibleRuntimes = cfz.S(v...)
	return t
}

// SetSV__CompatibleRuntimes updates property "CompatibleRuntimes".
func (t *AWS_Lambda_LayerVersion) SetSV__CompatibleRuntimes(v ...string) *AWS_Lambda_LayerVersion {
	t.CompatibleRuntimes = cfz.SV(v...)
	return t
}

// Set__Content updates property "Content".
func (t *AWS_Lambda_LayerVersion) Set__Content(v cfz.Expression[AWS_Lambda_LayerVersion_Content]) *AWS_Lambda_LayerVersion {
	t.Content = v
	return t
}

// SetV__Content updates property "Content".
func (t *AWS_Lambda_LayerVersion) SetV__Content(v AWS_Lambda_LayerVersion_Content) *AWS_Lambda_LayerVersion {
	t.Content = cfz.V(v)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_Lambda_LayerVersion) Set__Description(v cfz.Expression[string]) *AWS_Lambda_LayerVersion {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_Lambda_LayerVersion) SetV__Description(v string) *AWS_Lambda_LayerVersion {
	t.Description = cfz.V(v)
	return t
}

// Set__LayerName updates property "LayerName".
func (t *AWS_Lambda_LayerVersion) Set__LayerName(v cfz.Expression[string]) *AWS_Lambda_LayerVersion {
	t.LayerName = v
	return t
}

// SetV__LayerName updates property "LayerName".
func (t *AWS_Lambda_LayerVersion) SetV__LayerName(v string) *AWS_Lambda_LayerVersion {
	t.LayerName = cfz.V(v)
	return t
}

// Set__LicenseInfo updates property "LicenseInfo".
func (t *AWS_Lambda_LayerVersion) Set__LicenseInfo(v cfz.Expression[string]) *AWS_Lambda_LayerVersion {
	t.LicenseInfo = v
	return t
}

// SetV__LicenseInfo updates property "LicenseInfo".
func (t *AWS_Lambda_LayerVersion) SetV__LicenseInfo(v string) *AWS_Lambda_LayerVersion {
	t.LicenseInfo = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_Lambda_LayerVersion) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__LayerVersionArn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: LayerVersionArn
func (t *AWS_Lambda_LayerVersion) GetAtt__LayerVersionArn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_Lambda_LayerVersion__AttributesMap.LayerVersionArn))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_Lambda_LayerVersion) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__LayerVersionArn returns a conventionally configured output for an attribute of this resource.
// Attribute: LayerVersionArn
func (t *AWS_Lambda_LayerVersion) GetConventionalOutputAtt__LayerVersionArn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttLayerVersionArn", t.GetAtt__LayerVersionArn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_Lambda_LayerVersion) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_Lambda_LayerVersion

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_Lambda_LayerVersion) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
