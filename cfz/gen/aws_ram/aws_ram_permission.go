// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_ram

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_RAM_Permission)(nil)
	_ cfz.Resource                   = (*AWS_RAM_Permission)(nil)
)

const (
	// AWS_RAM_Permission__Type is the CloudFormation type for AWS::RAM::Permission.
	AWS_RAM_Permission__Type = "AWS::RAM::Permission"
)

var (
	// AWS_RAM_Permission__AttributesMap reports all the CloudFormation attributes for AWS::RAM::Permission.
	AWS_RAM_Permission__AttributesMap = struct {
		Arn                   string
		IsResourceTypeDefault string
		PermissionType        string
		Version               string
	}{
		Arn:                   "Arn",
		IsResourceTypeDefault: "IsResourceTypeDefault",
		PermissionType:        "PermissionType",
		Version:               "Version",
	}

	// AWS_RAM_Permission__AttributesSlice reports all the CloudFormation attributes for AWS::RAM::Permission.
	AWS_RAM_Permission__AttributesSlice = []string{
		AWS_RAM_Permission__AttributesMap.Arn,
		AWS_RAM_Permission__AttributesMap.IsResourceTypeDefault,
		AWS_RAM_Permission__AttributesMap.PermissionType,
		AWS_RAM_Permission__AttributesMap.Version,
	}
)

var (
	// AWS_RAM_Permission__PropertiesMap reports all the CloudFormation properties for AWS::RAM::Permission.
	AWS_RAM_Permission__PropertiesMap = struct {
		Name           string
		PolicyTemplate string
		ResourceType   string
		Tags           string
	}{
		Name:           "Name",
		PolicyTemplate: "PolicyTemplate",
		ResourceType:   "ResourceType",
		Tags:           "Tags",
	}

	// AWS_RAM_Permission__PropertiesSlice reports all the CloudFormation properties for AWS::RAM::Permission.
	AWS_RAM_Permission__PropertiesSlice = []string{
		AWS_RAM_Permission__PropertiesMap.Name,
		AWS_RAM_Permission__PropertiesMap.PolicyTemplate,
		AWS_RAM_Permission__PropertiesMap.ResourceType,
		AWS_RAM_Permission__PropertiesMap.Tags,
	}
)

// AWS_RAM_Permission is a binding for AWS::RAM::Permission.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-permission.html
type AWS_RAM_Permission struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// Name is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-permission.html#cfn-ram-permission-name
	Name cfz.Expression[string] `json:"Name,omitempty"`

	// PolicyTemplate is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-permission.html#cfn-ram-permission-policytemplate
	PolicyTemplate cfz.Expression[json.RawMessage] `json:"PolicyTemplate,omitempty"`

	// ResourceType is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-permission.html#cfn-ram-permission-resourcetype
	ResourceType cfz.Expression[string] `json:"ResourceType,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-permission.html#cfn-ram-permission-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`
}

// New__AWS_RAM_Permission initializes a new *AWS_RAM_Permission.
func New__AWS_RAM_Permission(logicalName string) *AWS_RAM_Permission {
	return &AWS_RAM_Permission{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_RAM_Permission) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_RAM_Permission) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_RAM_Permission) GetType() string {
	return AWS_RAM_Permission__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_RAM_Permission) Set__LogicalName(v string) *AWS_RAM_Permission {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_RAM_Permission) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_RAM_Permission {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_RAM_Permission) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_RAM_Permission {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_RAM_Permission) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_RAM_Permission {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_RAM_Permission) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_RAM_Permission {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_RAM_Permission) Set__RequestedOutputs(v []cfz.Output) *AWS_RAM_Permission {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_RAM_Permission) Add__RequestedOutputs(v ...cfz.Output) *AWS_RAM_Permission {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__Name updates property "Name".
func (t *AWS_RAM_Permission) Set__Name(v cfz.Expression[string]) *AWS_RAM_Permission {
	t.Name = v
	return t
}

// SetV__Name updates property "Name".
func (t *AWS_RAM_Permission) SetV__Name(v string) *AWS_RAM_Permission {
	t.Name = cfz.V(v)
	return t
}

// Set__PolicyTemplate updates property "PolicyTemplate".
func (t *AWS_RAM_Permission) Set__PolicyTemplate(v cfz.Expression[json.RawMessage]) *AWS_RAM_Permission {
	t.PolicyTemplate = v
	return t
}

// SetV__PolicyTemplate updates property "PolicyTemplate".
func (t *AWS_RAM_Permission) SetV__PolicyTemplate(v json.RawMessage) *AWS_RAM_Permission {
	t.PolicyTemplate = cfz.V(v)
	return t
}

// Set__ResourceType updates property "ResourceType".
func (t *AWS_RAM_Permission) Set__ResourceType(v cfz.Expression[string]) *AWS_RAM_Permission {
	t.ResourceType = v
	return t
}

// SetV__ResourceType updates property "ResourceType".
func (t *AWS_RAM_Permission) SetV__ResourceType(v string) *AWS_RAM_Permission {
	t.ResourceType = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_RAM_Permission) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_RAM_Permission {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_RAM_Permission) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_RAM_Permission {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_RAM_Permission) SetSV__Tags(v ...cfz.Tag) *AWS_RAM_Permission {
	t.Tags = cfz.SV(v...)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_RAM_Permission) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__Arn returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Arn
func (t *AWS_RAM_Permission) GetAtt__Arn() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RAM_Permission__AttributesMap.Arn))
}

// GetAtt__IsResourceTypeDefault returns a $cfz.Expression[bool] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: IsResourceTypeDefault
func (t *AWS_RAM_Permission) GetAtt__IsResourceTypeDefault() cfz.Expression[bool] {
	return cfz.GetAtt[bool](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RAM_Permission__AttributesMap.IsResourceTypeDefault))
}

// GetAtt__PermissionType returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: PermissionType
func (t *AWS_RAM_Permission) GetAtt__PermissionType() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RAM_Permission__AttributesMap.PermissionType))
}

// GetAtt__Version returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: Version
func (t *AWS_RAM_Permission) GetAtt__Version() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_RAM_Permission__AttributesMap.Version))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_RAM_Permission) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Arn returns a conventionally configured output for an attribute of this resource.
// Attribute: Arn
func (t *AWS_RAM_Permission) GetConventionalOutputAtt__Arn(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttArn", t.GetAtt__Arn())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__IsResourceTypeDefault returns a conventionally configured output for an attribute of this resource.
// Attribute: IsResourceTypeDefault
func (t *AWS_RAM_Permission) GetConventionalOutputAtt__IsResourceTypeDefault(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttIsResourceTypeDefault", t.GetAtt__IsResourceTypeDefault())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__PermissionType returns a conventionally configured output for an attribute of this resource.
// Attribute: PermissionType
func (t *AWS_RAM_Permission) GetConventionalOutputAtt__PermissionType(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttPermissionType", t.GetAtt__PermissionType())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__Version returns a conventionally configured output for an attribute of this resource.
// Attribute: Version
func (t *AWS_RAM_Permission) GetConventionalOutputAtt__Version(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttVersion", t.GetAtt__Version())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_RAM_Permission) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_RAM_Permission

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_RAM_Permission) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
