// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_lex

import (
	"github.com/ibrt/golang-cloudformation/cfz"
)

const (
	// AWS_Lex_Bot_Condition__Type is the CloudFormation type for AWS::Lex::Bot.Condition.
	AWS_Lex_Bot_Condition__Type = "AWS::Lex::Bot.Condition"
)

var (
	// AWS_Lex_Bot_Condition__PropertiesMap reports all the CloudFormation properties for AWS::Lex::Bot.Condition.
	AWS_Lex_Bot_Condition__PropertiesMap = struct {
		ExpressionString string
	}{
		ExpressionString: "ExpressionString",
	}

	// AWS_Lex_Bot_Condition__PropertiesSlice reports all the CloudFormation properties for AWS::Lex::Bot.Condition.
	AWS_Lex_Bot_Condition__PropertiesSlice = []string{
		AWS_Lex_Bot_Condition__PropertiesMap.ExpressionString,
	}
)

// AWS_Lex_Bot_Condition is a binding for AWS::Lex::Bot.Condition.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-condition.html
type AWS_Lex_Bot_Condition struct {
	// ExpressionString is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-condition.html#cfn-lex-bot-condition-expressionstring
	ExpressionString cfz.Expression[string] `json:"ExpressionString,omitempty"`
}

// New__AWS_Lex_Bot_Condition initializes a new AWS_Lex_Bot_Condition.
func New__AWS_Lex_Bot_Condition() AWS_Lex_Bot_Condition {
	return AWS_Lex_Bot_Condition{}
}

// GetType returns the CloudFormation type.
func (AWS_Lex_Bot_Condition) GetType() string {
	return AWS_Lex_Bot_Condition__Type
}

// Set__ExpressionString updates property "ExpressionString".
func (t AWS_Lex_Bot_Condition) Set__ExpressionString(v cfz.Expression[string]) AWS_Lex_Bot_Condition {
	t.ExpressionString = v
	return t
}

// SetV__ExpressionString updates property "ExpressionString".
func (t AWS_Lex_Bot_Condition) SetV__ExpressionString(v string) AWS_Lex_Bot_Condition {
	t.ExpressionString = cfz.V(v)
	return t
}
