// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_lex

import (
	"github.com/ibrt/golang-cloudformation/cfz"
)

const (
	// AWS_Lex_Bot_ConditionalSpecification__Type is the CloudFormation type for AWS::Lex::Bot.ConditionalSpecification.
	AWS_Lex_Bot_ConditionalSpecification__Type = "AWS::Lex::Bot.ConditionalSpecification"
)

var (
	// AWS_Lex_Bot_ConditionalSpecification__PropertiesMap reports all the CloudFormation properties for AWS::Lex::Bot.ConditionalSpecification.
	AWS_Lex_Bot_ConditionalSpecification__PropertiesMap = struct {
		ConditionalBranches string
		DefaultBranch       string
		IsActive            string
	}{
		ConditionalBranches: "ConditionalBranches",
		DefaultBranch:       "DefaultBranch",
		IsActive:            "IsActive",
	}

	// AWS_Lex_Bot_ConditionalSpecification__PropertiesSlice reports all the CloudFormation properties for AWS::Lex::Bot.ConditionalSpecification.
	AWS_Lex_Bot_ConditionalSpecification__PropertiesSlice = []string{
		AWS_Lex_Bot_ConditionalSpecification__PropertiesMap.ConditionalBranches,
		AWS_Lex_Bot_ConditionalSpecification__PropertiesMap.DefaultBranch,
		AWS_Lex_Bot_ConditionalSpecification__PropertiesMap.IsActive,
	}
)

// AWS_Lex_Bot_ConditionalSpecification is a binding for AWS::Lex::Bot.ConditionalSpecification.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-conditionalspecification.html
type AWS_Lex_Bot_ConditionalSpecification struct {
	// ConditionalBranches is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-conditionalspecification.html#cfn-lex-bot-conditionalspecification-conditionalbranches
	ConditionalBranches cfz.ExpressionSlice[AWS_Lex_Bot_ConditionalBranch] `json:"ConditionalBranches,omitempty"`

	// DefaultBranch is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-conditionalspecification.html#cfn-lex-bot-conditionalspecification-defaultbranch
	DefaultBranch cfz.Expression[AWS_Lex_Bot_DefaultConditionalBranch] `json:"DefaultBranch,omitempty"`

	// IsActive is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-conditionalspecification.html#cfn-lex-bot-conditionalspecification-isactive
	IsActive cfz.Expression[bool] `json:"IsActive,omitempty"`
}

// New__AWS_Lex_Bot_ConditionalSpecification initializes a new AWS_Lex_Bot_ConditionalSpecification.
func New__AWS_Lex_Bot_ConditionalSpecification() AWS_Lex_Bot_ConditionalSpecification {
	return AWS_Lex_Bot_ConditionalSpecification{}
}

// GetType returns the CloudFormation type.
func (AWS_Lex_Bot_ConditionalSpecification) GetType() string {
	return AWS_Lex_Bot_ConditionalSpecification__Type
}

// Set__ConditionalBranches updates property "ConditionalBranches".
func (t AWS_Lex_Bot_ConditionalSpecification) Set__ConditionalBranches(v cfz.ExpressionSlice[AWS_Lex_Bot_ConditionalBranch]) AWS_Lex_Bot_ConditionalSpecification {
	t.ConditionalBranches = v
	return t
}

// SetS__ConditionalBranches updates property "ConditionalBranches".
func (t AWS_Lex_Bot_ConditionalSpecification) SetS__ConditionalBranches(v ...cfz.Expression[AWS_Lex_Bot_ConditionalBranch]) AWS_Lex_Bot_ConditionalSpecification {
	t.ConditionalBranches = cfz.S(v...)
	return t
}

// SetSV__ConditionalBranches updates property "ConditionalBranches".
func (t AWS_Lex_Bot_ConditionalSpecification) SetSV__ConditionalBranches(v ...AWS_Lex_Bot_ConditionalBranch) AWS_Lex_Bot_ConditionalSpecification {
	t.ConditionalBranches = cfz.SV(v...)
	return t
}

// Set__DefaultBranch updates property "DefaultBranch".
func (t AWS_Lex_Bot_ConditionalSpecification) Set__DefaultBranch(v cfz.Expression[AWS_Lex_Bot_DefaultConditionalBranch]) AWS_Lex_Bot_ConditionalSpecification {
	t.DefaultBranch = v
	return t
}

// SetV__DefaultBranch updates property "DefaultBranch".
func (t AWS_Lex_Bot_ConditionalSpecification) SetV__DefaultBranch(v AWS_Lex_Bot_DefaultConditionalBranch) AWS_Lex_Bot_ConditionalSpecification {
	t.DefaultBranch = cfz.V(v)
	return t
}

// Set__IsActive updates property "IsActive".
func (t AWS_Lex_Bot_ConditionalSpecification) Set__IsActive(v cfz.Expression[bool]) AWS_Lex_Bot_ConditionalSpecification {
	t.IsActive = v
	return t
}

// SetV__IsActive updates property "IsActive".
func (t AWS_Lex_Bot_ConditionalSpecification) SetV__IsActive(v bool) AWS_Lex_Bot_ConditionalSpecification {
	t.IsActive = cfz.V(v)
	return t
}
