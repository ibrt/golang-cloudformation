// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_elasticbeanstalk

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_ElasticBeanstalk_Environment)(nil)
	_ cfz.Resource                   = (*AWS_ElasticBeanstalk_Environment)(nil)
)

const (
	// AWS_ElasticBeanstalk_Environment__Type is the CloudFormation type for AWS::ElasticBeanstalk::Environment.
	AWS_ElasticBeanstalk_Environment__Type = "AWS::ElasticBeanstalk::Environment"
)

var (
	// AWS_ElasticBeanstalk_Environment__AttributesMap reports all the CloudFormation attributes for AWS::ElasticBeanstalk::Environment.
	AWS_ElasticBeanstalk_Environment__AttributesMap = struct {
		EndpointURL string
	}{
		EndpointURL: "EndpointURL",
	}

	// AWS_ElasticBeanstalk_Environment__AttributesSlice reports all the CloudFormation attributes for AWS::ElasticBeanstalk::Environment.
	AWS_ElasticBeanstalk_Environment__AttributesSlice = []string{
		AWS_ElasticBeanstalk_Environment__AttributesMap.EndpointURL,
	}
)

var (
	// AWS_ElasticBeanstalk_Environment__PropertiesMap reports all the CloudFormation properties for AWS::ElasticBeanstalk::Environment.
	AWS_ElasticBeanstalk_Environment__PropertiesMap = struct {
		ApplicationName   string
		CNAMEPrefix       string
		Description       string
		EnvironmentName   string
		OperationsRole    string
		OptionSettings    string
		PlatformArn       string
		SolutionStackName string
		Tags              string
		TemplateName      string
		Tier              string
		VersionLabel      string
	}{
		ApplicationName:   "ApplicationName",
		CNAMEPrefix:       "CNAMEPrefix",
		Description:       "Description",
		EnvironmentName:   "EnvironmentName",
		OperationsRole:    "OperationsRole",
		OptionSettings:    "OptionSettings",
		PlatformArn:       "PlatformArn",
		SolutionStackName: "SolutionStackName",
		Tags:              "Tags",
		TemplateName:      "TemplateName",
		Tier:              "Tier",
		VersionLabel:      "VersionLabel",
	}

	// AWS_ElasticBeanstalk_Environment__PropertiesSlice reports all the CloudFormation properties for AWS::ElasticBeanstalk::Environment.
	AWS_ElasticBeanstalk_Environment__PropertiesSlice = []string{
		AWS_ElasticBeanstalk_Environment__PropertiesMap.ApplicationName,
		AWS_ElasticBeanstalk_Environment__PropertiesMap.CNAMEPrefix,
		AWS_ElasticBeanstalk_Environment__PropertiesMap.Description,
		AWS_ElasticBeanstalk_Environment__PropertiesMap.EnvironmentName,
		AWS_ElasticBeanstalk_Environment__PropertiesMap.OperationsRole,
		AWS_ElasticBeanstalk_Environment__PropertiesMap.OptionSettings,
		AWS_ElasticBeanstalk_Environment__PropertiesMap.PlatformArn,
		AWS_ElasticBeanstalk_Environment__PropertiesMap.SolutionStackName,
		AWS_ElasticBeanstalk_Environment__PropertiesMap.Tags,
		AWS_ElasticBeanstalk_Environment__PropertiesMap.TemplateName,
		AWS_ElasticBeanstalk_Environment__PropertiesMap.Tier,
		AWS_ElasticBeanstalk_Environment__PropertiesMap.VersionLabel,
	}
)

// AWS_ElasticBeanstalk_Environment is a binding for AWS::ElasticBeanstalk::Environment.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-environment.html
type AWS_ElasticBeanstalk_Environment struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ApplicationName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-environment.html#cfn-elasticbeanstalk-environment-applicationname
	ApplicationName cfz.Expression[string] `json:"ApplicationName,omitempty"`

	// CNAMEPrefix is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-environment.html#cfn-elasticbeanstalk-environment-cnameprefix
	CNAMEPrefix cfz.Expression[string] `json:"CNAMEPrefix,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-environment.html#cfn-elasticbeanstalk-environment-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// EnvironmentName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-environment.html#cfn-elasticbeanstalk-environment-environmentname
	EnvironmentName cfz.Expression[string] `json:"EnvironmentName,omitempty"`

	// OperationsRole is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-environment.html#cfn-elasticbeanstalk-environment-operationsrole
	OperationsRole cfz.Expression[string] `json:"OperationsRole,omitempty"`

	// OptionSettings is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-environment.html#cfn-elasticbeanstalk-environment-optionsettings
	OptionSettings cfz.ExpressionSlice[AWS_ElasticBeanstalk_Environment_OptionSetting] `json:"OptionSettings,omitempty"`

	// PlatformArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-environment.html#cfn-elasticbeanstalk-environment-platformarn
	PlatformArn cfz.Expression[string] `json:"PlatformArn,omitempty"`

	// SolutionStackName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-environment.html#cfn-elasticbeanstalk-environment-solutionstackname
	SolutionStackName cfz.Expression[string] `json:"SolutionStackName,omitempty"`

	// Tags is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-environment.html#cfn-elasticbeanstalk-environment-tags
	Tags cfz.ExpressionSlice[cfz.Tag] `json:"Tags,omitempty"`

	// TemplateName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-environment.html#cfn-elasticbeanstalk-environment-templatename
	TemplateName cfz.Expression[string] `json:"TemplateName,omitempty"`

	// Tier is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-environment.html#cfn-elasticbeanstalk-environment-tier
	Tier cfz.Expression[AWS_ElasticBeanstalk_Environment_Tier] `json:"Tier,omitempty"`

	// VersionLabel is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-environment.html#cfn-elasticbeanstalk-environment-versionlabel
	VersionLabel cfz.Expression[string] `json:"VersionLabel,omitempty"`
}

// New__AWS_ElasticBeanstalk_Environment initializes a new *AWS_ElasticBeanstalk_Environment.
func New__AWS_ElasticBeanstalk_Environment(logicalName string) *AWS_ElasticBeanstalk_Environment {
	return &AWS_ElasticBeanstalk_Environment{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_ElasticBeanstalk_Environment) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_ElasticBeanstalk_Environment) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_ElasticBeanstalk_Environment) GetType() string {
	return AWS_ElasticBeanstalk_Environment__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_ElasticBeanstalk_Environment) Set__LogicalName(v string) *AWS_ElasticBeanstalk_Environment {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_ElasticBeanstalk_Environment) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_ElasticBeanstalk_Environment {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_ElasticBeanstalk_Environment) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_ElasticBeanstalk_Environment {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_ElasticBeanstalk_Environment) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_ElasticBeanstalk_Environment {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_ElasticBeanstalk_Environment) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_ElasticBeanstalk_Environment {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_ElasticBeanstalk_Environment) Set__RequestedOutputs(v []cfz.Output) *AWS_ElasticBeanstalk_Environment {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_ElasticBeanstalk_Environment) Add__RequestedOutputs(v ...cfz.Output) *AWS_ElasticBeanstalk_Environment {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ApplicationName updates property "ApplicationName".
func (t *AWS_ElasticBeanstalk_Environment) Set__ApplicationName(v cfz.Expression[string]) *AWS_ElasticBeanstalk_Environment {
	t.ApplicationName = v
	return t
}

// SetV__ApplicationName updates property "ApplicationName".
func (t *AWS_ElasticBeanstalk_Environment) SetV__ApplicationName(v string) *AWS_ElasticBeanstalk_Environment {
	t.ApplicationName = cfz.V(v)
	return t
}

// Set__CNAMEPrefix updates property "CNAMEPrefix".
func (t *AWS_ElasticBeanstalk_Environment) Set__CNAMEPrefix(v cfz.Expression[string]) *AWS_ElasticBeanstalk_Environment {
	t.CNAMEPrefix = v
	return t
}

// SetV__CNAMEPrefix updates property "CNAMEPrefix".
func (t *AWS_ElasticBeanstalk_Environment) SetV__CNAMEPrefix(v string) *AWS_ElasticBeanstalk_Environment {
	t.CNAMEPrefix = cfz.V(v)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_ElasticBeanstalk_Environment) Set__Description(v cfz.Expression[string]) *AWS_ElasticBeanstalk_Environment {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_ElasticBeanstalk_Environment) SetV__Description(v string) *AWS_ElasticBeanstalk_Environment {
	t.Description = cfz.V(v)
	return t
}

// Set__EnvironmentName updates property "EnvironmentName".
func (t *AWS_ElasticBeanstalk_Environment) Set__EnvironmentName(v cfz.Expression[string]) *AWS_ElasticBeanstalk_Environment {
	t.EnvironmentName = v
	return t
}

// SetV__EnvironmentName updates property "EnvironmentName".
func (t *AWS_ElasticBeanstalk_Environment) SetV__EnvironmentName(v string) *AWS_ElasticBeanstalk_Environment {
	t.EnvironmentName = cfz.V(v)
	return t
}

// Set__OperationsRole updates property "OperationsRole".
func (t *AWS_ElasticBeanstalk_Environment) Set__OperationsRole(v cfz.Expression[string]) *AWS_ElasticBeanstalk_Environment {
	t.OperationsRole = v
	return t
}

// SetV__OperationsRole updates property "OperationsRole".
func (t *AWS_ElasticBeanstalk_Environment) SetV__OperationsRole(v string) *AWS_ElasticBeanstalk_Environment {
	t.OperationsRole = cfz.V(v)
	return t
}

// Set__OptionSettings updates property "OptionSettings".
func (t *AWS_ElasticBeanstalk_Environment) Set__OptionSettings(v cfz.ExpressionSlice[AWS_ElasticBeanstalk_Environment_OptionSetting]) *AWS_ElasticBeanstalk_Environment {
	t.OptionSettings = v
	return t
}

// SetS__OptionSettings updates property "OptionSettings".
func (t *AWS_ElasticBeanstalk_Environment) SetS__OptionSettings(v ...cfz.Expression[AWS_ElasticBeanstalk_Environment_OptionSetting]) *AWS_ElasticBeanstalk_Environment {
	t.OptionSettings = cfz.S(v...)
	return t
}

// SetSV__OptionSettings updates property "OptionSettings".
func (t *AWS_ElasticBeanstalk_Environment) SetSV__OptionSettings(v ...AWS_ElasticBeanstalk_Environment_OptionSetting) *AWS_ElasticBeanstalk_Environment {
	t.OptionSettings = cfz.SV(v...)
	return t
}

// Set__PlatformArn updates property "PlatformArn".
func (t *AWS_ElasticBeanstalk_Environment) Set__PlatformArn(v cfz.Expression[string]) *AWS_ElasticBeanstalk_Environment {
	t.PlatformArn = v
	return t
}

// SetV__PlatformArn updates property "PlatformArn".
func (t *AWS_ElasticBeanstalk_Environment) SetV__PlatformArn(v string) *AWS_ElasticBeanstalk_Environment {
	t.PlatformArn = cfz.V(v)
	return t
}

// Set__SolutionStackName updates property "SolutionStackName".
func (t *AWS_ElasticBeanstalk_Environment) Set__SolutionStackName(v cfz.Expression[string]) *AWS_ElasticBeanstalk_Environment {
	t.SolutionStackName = v
	return t
}

// SetV__SolutionStackName updates property "SolutionStackName".
func (t *AWS_ElasticBeanstalk_Environment) SetV__SolutionStackName(v string) *AWS_ElasticBeanstalk_Environment {
	t.SolutionStackName = cfz.V(v)
	return t
}

// Set__Tags updates property "Tags".
func (t *AWS_ElasticBeanstalk_Environment) Set__Tags(v cfz.ExpressionSlice[cfz.Tag]) *AWS_ElasticBeanstalk_Environment {
	t.Tags = v
	return t
}

// SetS__Tags updates property "Tags".
func (t *AWS_ElasticBeanstalk_Environment) SetS__Tags(v ...cfz.Expression[cfz.Tag]) *AWS_ElasticBeanstalk_Environment {
	t.Tags = cfz.S(v...)
	return t
}

// SetSV__Tags updates property "Tags".
func (t *AWS_ElasticBeanstalk_Environment) SetSV__Tags(v ...cfz.Tag) *AWS_ElasticBeanstalk_Environment {
	t.Tags = cfz.SV(v...)
	return t
}

// Set__TemplateName updates property "TemplateName".
func (t *AWS_ElasticBeanstalk_Environment) Set__TemplateName(v cfz.Expression[string]) *AWS_ElasticBeanstalk_Environment {
	t.TemplateName = v
	return t
}

// SetV__TemplateName updates property "TemplateName".
func (t *AWS_ElasticBeanstalk_Environment) SetV__TemplateName(v string) *AWS_ElasticBeanstalk_Environment {
	t.TemplateName = cfz.V(v)
	return t
}

// Set__Tier updates property "Tier".
func (t *AWS_ElasticBeanstalk_Environment) Set__Tier(v cfz.Expression[AWS_ElasticBeanstalk_Environment_Tier]) *AWS_ElasticBeanstalk_Environment {
	t.Tier = v
	return t
}

// SetV__Tier updates property "Tier".
func (t *AWS_ElasticBeanstalk_Environment) SetV__Tier(v AWS_ElasticBeanstalk_Environment_Tier) *AWS_ElasticBeanstalk_Environment {
	t.Tier = cfz.V(v)
	return t
}

// Set__VersionLabel updates property "VersionLabel".
func (t *AWS_ElasticBeanstalk_Environment) Set__VersionLabel(v cfz.Expression[string]) *AWS_ElasticBeanstalk_Environment {
	t.VersionLabel = v
	return t
}

// SetV__VersionLabel updates property "VersionLabel".
func (t *AWS_ElasticBeanstalk_Environment) SetV__VersionLabel(v string) *AWS_ElasticBeanstalk_Environment {
	t.VersionLabel = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_ElasticBeanstalk_Environment) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__EndpointURL returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: EndpointURL
func (t *AWS_ElasticBeanstalk_Environment) GetAtt__EndpointURL() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ElasticBeanstalk_Environment__AttributesMap.EndpointURL))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_ElasticBeanstalk_Environment) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__EndpointURL returns a conventionally configured output for an attribute of this resource.
// Attribute: EndpointURL
func (t *AWS_ElasticBeanstalk_Environment) GetConventionalOutputAtt__EndpointURL(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttEndpointURL", t.GetAtt__EndpointURL())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_ElasticBeanstalk_Environment) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_ElasticBeanstalk_Environment

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_ElasticBeanstalk_Environment) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
