// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_elasticbeanstalk

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_ElasticBeanstalk_ConfigurationTemplate)(nil)
	_ cfz.Resource                   = (*AWS_ElasticBeanstalk_ConfigurationTemplate)(nil)
)

const (
	// AWS_ElasticBeanstalk_ConfigurationTemplate__Type is the CloudFormation type for AWS::ElasticBeanstalk::ConfigurationTemplate.
	AWS_ElasticBeanstalk_ConfigurationTemplate__Type = "AWS::ElasticBeanstalk::ConfigurationTemplate"
)

var (
	// AWS_ElasticBeanstalk_ConfigurationTemplate__AttributesMap reports all the CloudFormation attributes for AWS::ElasticBeanstalk::ConfigurationTemplate.
	AWS_ElasticBeanstalk_ConfigurationTemplate__AttributesMap = struct {
		TemplateName string
	}{
		TemplateName: "TemplateName",
	}

	// AWS_ElasticBeanstalk_ConfigurationTemplate__AttributesSlice reports all the CloudFormation attributes for AWS::ElasticBeanstalk::ConfigurationTemplate.
	AWS_ElasticBeanstalk_ConfigurationTemplate__AttributesSlice = []string{
		AWS_ElasticBeanstalk_ConfigurationTemplate__AttributesMap.TemplateName,
	}
)

var (
	// AWS_ElasticBeanstalk_ConfigurationTemplate__PropertiesMap reports all the CloudFormation properties for AWS::ElasticBeanstalk::ConfigurationTemplate.
	AWS_ElasticBeanstalk_ConfigurationTemplate__PropertiesMap = struct {
		ApplicationName     string
		Description         string
		EnvironmentId       string
		OptionSettings      string
		PlatformArn         string
		SolutionStackName   string
		SourceConfiguration string
	}{
		ApplicationName:     "ApplicationName",
		Description:         "Description",
		EnvironmentId:       "EnvironmentId",
		OptionSettings:      "OptionSettings",
		PlatformArn:         "PlatformArn",
		SolutionStackName:   "SolutionStackName",
		SourceConfiguration: "SourceConfiguration",
	}

	// AWS_ElasticBeanstalk_ConfigurationTemplate__PropertiesSlice reports all the CloudFormation properties for AWS::ElasticBeanstalk::ConfigurationTemplate.
	AWS_ElasticBeanstalk_ConfigurationTemplate__PropertiesSlice = []string{
		AWS_ElasticBeanstalk_ConfigurationTemplate__PropertiesMap.ApplicationName,
		AWS_ElasticBeanstalk_ConfigurationTemplate__PropertiesMap.Description,
		AWS_ElasticBeanstalk_ConfigurationTemplate__PropertiesMap.EnvironmentId,
		AWS_ElasticBeanstalk_ConfigurationTemplate__PropertiesMap.OptionSettings,
		AWS_ElasticBeanstalk_ConfigurationTemplate__PropertiesMap.PlatformArn,
		AWS_ElasticBeanstalk_ConfigurationTemplate__PropertiesMap.SolutionStackName,
		AWS_ElasticBeanstalk_ConfigurationTemplate__PropertiesMap.SourceConfiguration,
	}
)

// AWS_ElasticBeanstalk_ConfigurationTemplate is a binding for AWS::ElasticBeanstalk::ConfigurationTemplate.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-configurationtemplate.html
type AWS_ElasticBeanstalk_ConfigurationTemplate struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ApplicationName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-configurationtemplate.html#cfn-elasticbeanstalk-configurationtemplate-applicationname
	ApplicationName cfz.Expression[string] `json:"ApplicationName,omitempty"`

	// Description is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-configurationtemplate.html#cfn-elasticbeanstalk-configurationtemplate-description
	Description cfz.Expression[string] `json:"Description,omitempty"`

	// EnvironmentId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-configurationtemplate.html#cfn-elasticbeanstalk-configurationtemplate-environmentid
	EnvironmentId cfz.Expression[string] `json:"EnvironmentId,omitempty"`

	// OptionSettings is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-configurationtemplate.html#cfn-elasticbeanstalk-configurationtemplate-optionsettings
	OptionSettings cfz.ExpressionSlice[AWS_ElasticBeanstalk_ConfigurationTemplate_ConfigurationOptionSetting] `json:"OptionSettings,omitempty"`

	// PlatformArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-configurationtemplate.html#cfn-elasticbeanstalk-configurationtemplate-platformarn
	PlatformArn cfz.Expression[string] `json:"PlatformArn,omitempty"`

	// SolutionStackName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-configurationtemplate.html#cfn-elasticbeanstalk-configurationtemplate-solutionstackname
	SolutionStackName cfz.Expression[string] `json:"SolutionStackName,omitempty"`

	// SourceConfiguration is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-configurationtemplate.html#cfn-elasticbeanstalk-configurationtemplate-sourceconfiguration
	SourceConfiguration cfz.Expression[AWS_ElasticBeanstalk_ConfigurationTemplate_SourceConfiguration] `json:"SourceConfiguration,omitempty"`
}

// New__AWS_ElasticBeanstalk_ConfigurationTemplate initializes a new *AWS_ElasticBeanstalk_ConfigurationTemplate.
func New__AWS_ElasticBeanstalk_ConfigurationTemplate(logicalName string) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	return &AWS_ElasticBeanstalk_ConfigurationTemplate{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_ElasticBeanstalk_ConfigurationTemplate) GetType() string {
	return AWS_ElasticBeanstalk_ConfigurationTemplate__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) Set__LogicalName(v string) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) Set__RequestedOutputs(v []cfz.Output) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) Add__RequestedOutputs(v ...cfz.Output) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ApplicationName updates property "ApplicationName".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) Set__ApplicationName(v cfz.Expression[string]) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.ApplicationName = v
	return t
}

// SetV__ApplicationName updates property "ApplicationName".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) SetV__ApplicationName(v string) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.ApplicationName = cfz.V(v)
	return t
}

// Set__Description updates property "Description".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) Set__Description(v cfz.Expression[string]) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.Description = v
	return t
}

// SetV__Description updates property "Description".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) SetV__Description(v string) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.Description = cfz.V(v)
	return t
}

// Set__EnvironmentId updates property "EnvironmentId".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) Set__EnvironmentId(v cfz.Expression[string]) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.EnvironmentId = v
	return t
}

// SetV__EnvironmentId updates property "EnvironmentId".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) SetV__EnvironmentId(v string) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.EnvironmentId = cfz.V(v)
	return t
}

// Set__OptionSettings updates property "OptionSettings".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) Set__OptionSettings(v cfz.ExpressionSlice[AWS_ElasticBeanstalk_ConfigurationTemplate_ConfigurationOptionSetting]) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.OptionSettings = v
	return t
}

// SetS__OptionSettings updates property "OptionSettings".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) SetS__OptionSettings(v ...cfz.Expression[AWS_ElasticBeanstalk_ConfigurationTemplate_ConfigurationOptionSetting]) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.OptionSettings = cfz.S(v...)
	return t
}

// SetSV__OptionSettings updates property "OptionSettings".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) SetSV__OptionSettings(v ...AWS_ElasticBeanstalk_ConfigurationTemplate_ConfigurationOptionSetting) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.OptionSettings = cfz.SV(v...)
	return t
}

// Set__PlatformArn updates property "PlatformArn".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) Set__PlatformArn(v cfz.Expression[string]) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.PlatformArn = v
	return t
}

// SetV__PlatformArn updates property "PlatformArn".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) SetV__PlatformArn(v string) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.PlatformArn = cfz.V(v)
	return t
}

// Set__SolutionStackName updates property "SolutionStackName".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) Set__SolutionStackName(v cfz.Expression[string]) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.SolutionStackName = v
	return t
}

// SetV__SolutionStackName updates property "SolutionStackName".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) SetV__SolutionStackName(v string) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.SolutionStackName = cfz.V(v)
	return t
}

// Set__SourceConfiguration updates property "SourceConfiguration".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) Set__SourceConfiguration(v cfz.Expression[AWS_ElasticBeanstalk_ConfigurationTemplate_SourceConfiguration]) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.SourceConfiguration = v
	return t
}

// SetV__SourceConfiguration updates property "SourceConfiguration".
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) SetV__SourceConfiguration(v AWS_ElasticBeanstalk_ConfigurationTemplate_SourceConfiguration) *AWS_ElasticBeanstalk_ConfigurationTemplate {
	t.SourceConfiguration = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetAtt__TemplateName returns a $cfz.Expression[string] that resolves to the FN::GetAtt intrinsic function for this resource.
// Attribute: TemplateName
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) GetAtt__TemplateName() cfz.Expression[string] {
	return cfz.GetAtt[string](cfz.V(t.GetResourceLogicalName()), cfz.V(AWS_ElasticBeanstalk_ConfigurationTemplate__AttributesMap.TemplateName))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// GetConventionalOutputAtt__TemplateName returns a conventionally configured output for an attribute of this resource.
// Attribute: TemplateName
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) GetConventionalOutputAtt__TemplateName(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"AttTemplateName", t.GetAtt__TemplateName())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_ElasticBeanstalk_ConfigurationTemplate

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_ElasticBeanstalk_ConfigurationTemplate) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
