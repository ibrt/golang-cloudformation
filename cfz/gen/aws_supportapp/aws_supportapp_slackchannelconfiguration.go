// Code generated by "golang-cloudformation". DO NOT EDIT.

package aws_supportapp

import (
	"encoding/json"
	"github.com/ibrt/golang-cloudformation/cfz"
)

var (
	_ cfz.ResourcePartialLogicalName = (*AWS_SupportApp_SlackChannelConfiguration)(nil)
	_ cfz.Resource                   = (*AWS_SupportApp_SlackChannelConfiguration)(nil)
)

const (
	// AWS_SupportApp_SlackChannelConfiguration__Type is the CloudFormation type for AWS::SupportApp::SlackChannelConfiguration.
	AWS_SupportApp_SlackChannelConfiguration__Type = "AWS::SupportApp::SlackChannelConfiguration"
)

var (
	// AWS_SupportApp_SlackChannelConfiguration__PropertiesMap reports all the CloudFormation properties for AWS::SupportApp::SlackChannelConfiguration.
	AWS_SupportApp_SlackChannelConfiguration__PropertiesMap = struct {
		ChannelId                       string
		ChannelName                     string
		ChannelRoleArn                  string
		NotifyOnAddCorrespondenceToCase string
		NotifyOnCaseSeverity            string
		NotifyOnCreateOrReopenCase      string
		NotifyOnResolveCase             string
		TeamId                          string
	}{
		ChannelId:                       "ChannelId",
		ChannelName:                     "ChannelName",
		ChannelRoleArn:                  "ChannelRoleArn",
		NotifyOnAddCorrespondenceToCase: "NotifyOnAddCorrespondenceToCase",
		NotifyOnCaseSeverity:            "NotifyOnCaseSeverity",
		NotifyOnCreateOrReopenCase:      "NotifyOnCreateOrReopenCase",
		NotifyOnResolveCase:             "NotifyOnResolveCase",
		TeamId:                          "TeamId",
	}

	// AWS_SupportApp_SlackChannelConfiguration__PropertiesSlice reports all the CloudFormation properties for AWS::SupportApp::SlackChannelConfiguration.
	AWS_SupportApp_SlackChannelConfiguration__PropertiesSlice = []string{
		AWS_SupportApp_SlackChannelConfiguration__PropertiesMap.ChannelId,
		AWS_SupportApp_SlackChannelConfiguration__PropertiesMap.ChannelName,
		AWS_SupportApp_SlackChannelConfiguration__PropertiesMap.ChannelRoleArn,
		AWS_SupportApp_SlackChannelConfiguration__PropertiesMap.NotifyOnAddCorrespondenceToCase,
		AWS_SupportApp_SlackChannelConfiguration__PropertiesMap.NotifyOnCaseSeverity,
		AWS_SupportApp_SlackChannelConfiguration__PropertiesMap.NotifyOnCreateOrReopenCase,
		AWS_SupportApp_SlackChannelConfiguration__PropertiesMap.NotifyOnResolveCase,
		AWS_SupportApp_SlackChannelConfiguration__PropertiesMap.TeamId,
	}
)

// AWS_SupportApp_SlackChannelConfiguration is a binding for AWS::SupportApp::SlackChannelConfiguration.
// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-supportapp-slackchannelconfiguration.html
type AWS_SupportApp_SlackChannelConfiguration struct { // __LogicalName is the CloudFormation logical name for this resource in the template.
	__LogicalName string `json:"-"`

	// __DependsOn indicates which resources must be created before this one.
	__DependsOn []cfz.ResourcePartialLogicalName `json:"-"`

	// __DeletionPolicy indicates the deletion behavior of CloudFormation for this resource.
	__DeletionPolicy cfz.ResourceDeletionPolicy `json:"-"`

	// __UpdateReplacePolicy indicates the update replace behavior of CloudFormation for this resource.
	__UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"-"`

	// __RequestedOutputs allows to group outputs together with resources, for later inclusion in a template.
	__RequestedOutputs []cfz.Output

	// ChannelId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-supportapp-slackchannelconfiguration.html#cfn-supportapp-slackchannelconfiguration-channelid
	ChannelId cfz.Expression[string] `json:"ChannelId,omitempty"`

	// ChannelName is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-supportapp-slackchannelconfiguration.html#cfn-supportapp-slackchannelconfiguration-channelname
	ChannelName cfz.Expression[string] `json:"ChannelName,omitempty"`

	// ChannelRoleArn is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-supportapp-slackchannelconfiguration.html#cfn-supportapp-slackchannelconfiguration-channelrolearn
	ChannelRoleArn cfz.Expression[string] `json:"ChannelRoleArn,omitempty"`

	// NotifyOnAddCorrespondenceToCase is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-supportapp-slackchannelconfiguration.html#cfn-supportapp-slackchannelconfiguration-notifyonaddcorrespondencetocase
	NotifyOnAddCorrespondenceToCase cfz.Expression[bool] `json:"NotifyOnAddCorrespondenceToCase,omitempty"`

	// NotifyOnCaseSeverity is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-supportapp-slackchannelconfiguration.html#cfn-supportapp-slackchannelconfiguration-notifyoncaseseverity
	NotifyOnCaseSeverity cfz.Expression[string] `json:"NotifyOnCaseSeverity,omitempty"`

	// NotifyOnCreateOrReopenCase is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-supportapp-slackchannelconfiguration.html#cfn-supportapp-slackchannelconfiguration-notifyoncreateorreopencase
	NotifyOnCreateOrReopenCase cfz.Expression[bool] `json:"NotifyOnCreateOrReopenCase,omitempty"`

	// NotifyOnResolveCase is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-supportapp-slackchannelconfiguration.html#cfn-supportapp-slackchannelconfiguration-notifyonresolvecase
	NotifyOnResolveCase cfz.Expression[bool] `json:"NotifyOnResolveCase,omitempty"`

	// TeamId is a property.
	// See: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-supportapp-slackchannelconfiguration.html#cfn-supportapp-slackchannelconfiguration-teamid
	TeamId cfz.Expression[string] `json:"TeamId,omitempty"`
}

// New__AWS_SupportApp_SlackChannelConfiguration initializes a new *AWS_SupportApp_SlackChannelConfiguration.
func New__AWS_SupportApp_SlackChannelConfiguration(logicalName string) *AWS_SupportApp_SlackChannelConfiguration {
	return &AWS_SupportApp_SlackChannelConfiguration{
		__LogicalName: logicalName,
	}
}

// GetLogicalName returns the CloudFormation logical name for this resource in the template.
// It implements the cfz.Resource and cfz.ResourcePartialLogicalName interface.
func (t *AWS_SupportApp_SlackChannelConfiguration) GetResourceLogicalName() string {
	return t.__LogicalName
}

// GetRequestedOutputs returns the requested outputs for this resource in the template.
// It implements the cfz.Resource interface.
func (t *AWS_SupportApp_SlackChannelConfiguration) GetRequestedOutputs() []cfz.Output {
	return t.__RequestedOutputs
}

// GetType returns the CloudFormation type.
// It implements the cfz.Resource interface.
func (*AWS_SupportApp_SlackChannelConfiguration) GetType() string {
	return AWS_SupportApp_SlackChannelConfiguration__Type
}

// Set__LogicalName updates field "__LogicalName".
func (t *AWS_SupportApp_SlackChannelConfiguration) Set__LogicalName(v string) *AWS_SupportApp_SlackChannelConfiguration {
	t.__LogicalName = v
	return t
}

// Set__DependsOn updates (replaces) field "__DependsOn".
func (t *AWS_SupportApp_SlackChannelConfiguration) Set__DependsOn(v []cfz.ResourcePartialLogicalName) *AWS_SupportApp_SlackChannelConfiguration {
	t.__DependsOn = v
	return t
}

// Add__DependsOn updates (appends to) field "__DependsOn".
func (t *AWS_SupportApp_SlackChannelConfiguration) Add__DependsOn(v ...cfz.ResourcePartialLogicalName) *AWS_SupportApp_SlackChannelConfiguration {
	t.__DependsOn = append(t.__DependsOn, v...)
	return t
}

// Set__DeletionPolicy updates field "__DeletionPolicy".
func (t *AWS_SupportApp_SlackChannelConfiguration) Set__DeletionPolicy(v cfz.ResourceDeletionPolicy) *AWS_SupportApp_SlackChannelConfiguration {
	t.__DeletionPolicy = v
	return t
}

// Set__UpdateReplacePolicy updates field "__UpdateReplacePolicy".
func (t *AWS_SupportApp_SlackChannelConfiguration) Set__UpdateReplacePolicy(v cfz.ResourceUpdateReplacePolicy) *AWS_SupportApp_SlackChannelConfiguration {
	t.__UpdateReplacePolicy = v
	return t
}

// Set__RequestedOutputs updates (replaces) field "__RequestedOutputs".
func (t *AWS_SupportApp_SlackChannelConfiguration) Set__RequestedOutputs(v []cfz.Output) *AWS_SupportApp_SlackChannelConfiguration {
	t.__RequestedOutputs = v
	return t
}

// Add__RequestedOutputs updates (appends to) field "__RequestedOutputs".
func (t *AWS_SupportApp_SlackChannelConfiguration) Add__RequestedOutputs(v ...cfz.Output) *AWS_SupportApp_SlackChannelConfiguration {
	t.__RequestedOutputs = append(t.__RequestedOutputs, v...)
	return t
}

// Set__ChannelId updates property "ChannelId".
func (t *AWS_SupportApp_SlackChannelConfiguration) Set__ChannelId(v cfz.Expression[string]) *AWS_SupportApp_SlackChannelConfiguration {
	t.ChannelId = v
	return t
}

// SetV__ChannelId updates property "ChannelId".
func (t *AWS_SupportApp_SlackChannelConfiguration) SetV__ChannelId(v string) *AWS_SupportApp_SlackChannelConfiguration {
	t.ChannelId = cfz.V(v)
	return t
}

// Set__ChannelName updates property "ChannelName".
func (t *AWS_SupportApp_SlackChannelConfiguration) Set__ChannelName(v cfz.Expression[string]) *AWS_SupportApp_SlackChannelConfiguration {
	t.ChannelName = v
	return t
}

// SetV__ChannelName updates property "ChannelName".
func (t *AWS_SupportApp_SlackChannelConfiguration) SetV__ChannelName(v string) *AWS_SupportApp_SlackChannelConfiguration {
	t.ChannelName = cfz.V(v)
	return t
}

// Set__ChannelRoleArn updates property "ChannelRoleArn".
func (t *AWS_SupportApp_SlackChannelConfiguration) Set__ChannelRoleArn(v cfz.Expression[string]) *AWS_SupportApp_SlackChannelConfiguration {
	t.ChannelRoleArn = v
	return t
}

// SetV__ChannelRoleArn updates property "ChannelRoleArn".
func (t *AWS_SupportApp_SlackChannelConfiguration) SetV__ChannelRoleArn(v string) *AWS_SupportApp_SlackChannelConfiguration {
	t.ChannelRoleArn = cfz.V(v)
	return t
}

// Set__NotifyOnAddCorrespondenceToCase updates property "NotifyOnAddCorrespondenceToCase".
func (t *AWS_SupportApp_SlackChannelConfiguration) Set__NotifyOnAddCorrespondenceToCase(v cfz.Expression[bool]) *AWS_SupportApp_SlackChannelConfiguration {
	t.NotifyOnAddCorrespondenceToCase = v
	return t
}

// SetV__NotifyOnAddCorrespondenceToCase updates property "NotifyOnAddCorrespondenceToCase".
func (t *AWS_SupportApp_SlackChannelConfiguration) SetV__NotifyOnAddCorrespondenceToCase(v bool) *AWS_SupportApp_SlackChannelConfiguration {
	t.NotifyOnAddCorrespondenceToCase = cfz.V(v)
	return t
}

// Set__NotifyOnCaseSeverity updates property "NotifyOnCaseSeverity".
func (t *AWS_SupportApp_SlackChannelConfiguration) Set__NotifyOnCaseSeverity(v cfz.Expression[string]) *AWS_SupportApp_SlackChannelConfiguration {
	t.NotifyOnCaseSeverity = v
	return t
}

// SetV__NotifyOnCaseSeverity updates property "NotifyOnCaseSeverity".
func (t *AWS_SupportApp_SlackChannelConfiguration) SetV__NotifyOnCaseSeverity(v string) *AWS_SupportApp_SlackChannelConfiguration {
	t.NotifyOnCaseSeverity = cfz.V(v)
	return t
}

// Set__NotifyOnCreateOrReopenCase updates property "NotifyOnCreateOrReopenCase".
func (t *AWS_SupportApp_SlackChannelConfiguration) Set__NotifyOnCreateOrReopenCase(v cfz.Expression[bool]) *AWS_SupportApp_SlackChannelConfiguration {
	t.NotifyOnCreateOrReopenCase = v
	return t
}

// SetV__NotifyOnCreateOrReopenCase updates property "NotifyOnCreateOrReopenCase".
func (t *AWS_SupportApp_SlackChannelConfiguration) SetV__NotifyOnCreateOrReopenCase(v bool) *AWS_SupportApp_SlackChannelConfiguration {
	t.NotifyOnCreateOrReopenCase = cfz.V(v)
	return t
}

// Set__NotifyOnResolveCase updates property "NotifyOnResolveCase".
func (t *AWS_SupportApp_SlackChannelConfiguration) Set__NotifyOnResolveCase(v cfz.Expression[bool]) *AWS_SupportApp_SlackChannelConfiguration {
	t.NotifyOnResolveCase = v
	return t
}

// SetV__NotifyOnResolveCase updates property "NotifyOnResolveCase".
func (t *AWS_SupportApp_SlackChannelConfiguration) SetV__NotifyOnResolveCase(v bool) *AWS_SupportApp_SlackChannelConfiguration {
	t.NotifyOnResolveCase = cfz.V(v)
	return t
}

// Set__TeamId updates property "TeamId".
func (t *AWS_SupportApp_SlackChannelConfiguration) Set__TeamId(v cfz.Expression[string]) *AWS_SupportApp_SlackChannelConfiguration {
	t.TeamId = v
	return t
}

// SetV__TeamId updates property "TeamId".
func (t *AWS_SupportApp_SlackChannelConfiguration) SetV__TeamId(v string) *AWS_SupportApp_SlackChannelConfiguration {
	t.TeamId = cfz.V(v)
	return t
}

// Ref returns a cfz.Expression[string] that resolves to the Ref intrinsic function for this resource.
func (t *AWS_SupportApp_SlackChannelConfiguration) Ref() cfz.Expression[string] {
	return cfz.Ref(cfz.V(t.GetResourceLogicalName()))
}

// GetConventionalOutputRef returns a conventionally configured output for the Ref of this resource.
func (t *AWS_SupportApp_SlackChannelConfiguration) GetConventionalOutputRef(isExported bool) cfz.Output {
	o := cfz.NewOutput(t.GetResourceLogicalName()+"Ref", t.Ref())
	if isExported {
		o.SetConventionalExportName()
	}
	return o
}

// MarshalJSON implements the cfz.Resource interface.
func (t *AWS_SupportApp_SlackChannelConfiguration) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte(`null`), nil
	}

	type Properties AWS_SupportApp_SlackChannelConfiguration

	return json.Marshal(struct {
		Type                string                          `json:"Type"`
		DependsOn           []string                        `json:"DependsOn,omitempty"`
		DeletionPolicy      cfz.ResourceDeletionPolicy      `json:"DeletionPolicy,omitempty"`
		UpdateReplacePolicy cfz.ResourceUpdateReplacePolicy `json:"UpdateReplacePolicy,omitempty"`
		Properties          *Properties                     `json:"Properties,omitempty"`
	}{
		Type:       t.GetType(),
		DependsOn:  t.getDependsOn(),
		Properties: (*Properties)(t),
	})
}

func (t *AWS_SupportApp_SlackChannelConfiguration) getDependsOn() []string {
	dependsOn := make([]string, 0, len(t.__DependsOn))

	for _, r := range t.__DependsOn {
		dependsOn = append(dependsOn, r.GetResourceLogicalName())
	}

	return dependsOn
}
